ewogICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOGRmM2ZiYzYtM2YwMy00MWE3LTk4MmMtYTNjMDdiNGIzZTI2Igp9ewogICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOGRmM2ZiYzYtM2YwMy00MWE3LTk4MmMtYTNjMDdiNGIzZTI2Igp9ewogICJGdWxsTmFtZSI6ICJTaGF5bmUgQm95ZXIiLAogICJVc2VyTmFtZSI6ICJzcGJveWVyIiwKICAiTWljcm9zb2Z0QWxpYXMiOiAic2hib3llciIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4ZGYzZmJjNi0zZjAzLTQxYTctOTgyYy1hM2MwN2I0YjNlMjYiCn0=ewogICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOGRmM2ZiYzYtM2YwMy00MWE3LTk4MmMtYTNjMDdiNGIzZTI2Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5qTTVPVGswT1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZhY2VPZmYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTBjODNkNWMwOWFhYmVhNDRjOGQ5ZjdmZDFiMTIyMThiYzQ0ZDQ5ZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5qTTVPVGswT1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZhY2VPZmYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTBjODNkNWMwOWFhYmVhNDRjOGQ5ZjdmZDFiMTIyMThiYzQ0ZDQ5ZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UWXhNek13Tnc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZVVJVGVzdEFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiYjVmMTRhYjE5ZTM0ZjNhMDNiNjhlZTNiMGRiZGIyNmI2ODZlMGQ3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UY3dOVFEyTWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldlYlZpZXdVSVRlc3RBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Y1MzhjOWZhYmY5ZDdiYTEzZjAzODQ2ODcxZGNkODJkZDgyYjQ5YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1EVTBNekEwTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNlY3VyaXR5U2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhZTEyMmU3ZmYxMjFmOGZkYmNkMzQyZmE1MGY3MmYzNjY2YmIzMDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1qQTVNVGc1TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkVudHJ5VUlUZXN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNkOWUwMGNkNzlkMmQ3Zjc5ZDhhM2YwMDc3NzMzMzJhNzExMjk2ZmMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1qSTBOelUwTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkludmVzdG1lbnREYXRhU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU4ZWU2MWQwYTQwMGI5MDIxMzY5MTNmMThmYzgyYTUzZWJlMjg2NWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EWXlOekUxTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJpbmFyeVNlYXJjaFRyZWUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTM1ZDBkZTNhZmU0NjlkZjU1Y2JiZDc3YWY0NjdiM2MxOGZlYWVmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qWXdORFEyT0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFuZHJvaWRDaGVja0JveFNhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZWI2Y2NkOWM5Mzg0MDI4ZGQzZDUwYmQ4YzI3NTQ4ZWNhZTdjNmY3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM016UXpOekUxTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhjb2RlX1hhbWFyaW5VSVRlc3RfU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY5ZjI4ZGMzM2NkNDI1ZTkwMzFjOGY5ZTJkMjg0ZDkyM2RhYTBmMWEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05qRTFNamN5TlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVJVGVzdFNhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNGNjMzJlNTE2MGQzNWQ3Y2EwYWQ5NTk2MWZjOTZhYjA1ZmZhZTMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM056TTBNakk1TUE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNhdmVJbWFnZVRvRGF0YWJhc2VTYW1wbGVBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYWQ3MTY0NWIxNjI5YzRmODZkMGUyZGU4MWJlYTUxODM2NWM0NWY0YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM056WTBOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlYWxtU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM0Y2U5NzQwOGNjNzc3YjFjNGIyN2QyMzI5NzhmMThkMzFlZThkYTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09ETXdNelk1T0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlYWN0TmF0aXZlU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4NTZjNDQ1YjBjNWY5YjUxZGMxOTZmMzcxM2VjOTA1MmI5MDdiZWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09URTFNVFF5T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlBvd2VyQklTYW1wbGVBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTFhZDQyZTIyNWYyMDJmOTA4NjA3ZTFkN2ZlMTNjNWY0ZjEwMWFkOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09UY3pPRGd4TXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkVudHJ5Q3VzdG9tUmV0dXJuUGx1Z2luIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYyYWUyZWU4ZDViN2RiM2MwOGVhOWY1YzYyMTYyMzFkMjkwZTM1YTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1ERXhOamszTlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk9uU2lnaHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzgzOTgwZmZhY2Y3YjVlM2NlN2VjNjg1ZjYxYWE2OGJlOWRlMTU5YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1URXdPRFkyTlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZvcm1zUHVzaE5vdGlmaWNhdGlvblNhbXBsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmMGM0OTVjN2Q4YzQ2ZTFmZGI0N2Q1NGM0ZjQ0ZTJhYjM4MTE3Njc5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qQTROVFUwT0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW4uRm9ybXMtTmFOLWlzLW5vdC1hLXZhbGlkLXZhbHVlLWZvci13aWR0aC1yZXByb2R1Y3Rpb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNWY0ZmZlZTg5ZTUxMjQ1NGMwYjQyMjE5MmQ1ZGE3ZWQzYmE4YTJiZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qQTVOek01T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbU1lZGlhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI3MGMxZDFhMjJhZDI2OTQyYzcyOTRlOTAyNGFkNjZjMjM0N2FiZWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qZ3pOamd4TXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVSTEVuY29kZWRGb3JtQnVnIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI5OTVkMmQwNWNjZDhlNjdhMzFhMjczOTVkYTZkOTJmOTZkNzBkODkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9EVTFNVFF4T0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbU1hcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjYWQ0NzNmZWY5YWIyYTk1ODE0MWQ0Zjc5NjgyYWY5OWZkYWNlNGMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTRPVGszTWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbUNvbnZlcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4M2I2NzNkZTFmZWVjMGY0YTUyNzczYzU4ODkxNjM2ZTBiMGVjZTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1ETXhOVGszTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbVNwZWFrIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBlZmVmN2RjYWU0NmU2MmMxMjIxYzBkNDkyMWMxMjU2ODExZTIzYTkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1EWTVOVFUxTlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldpZ2dsZUFuaW1hdGlvbnMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDI5NWFhMzkzNWVjZjc2YWQ3ZjEyOTUxZWI3NDI2MjRhYzUzMmY1MCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1Ea3dPVE16TXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkV4cGFuZGFibGVMaXN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNhMTc1MDA5MWU0MjM1N2Q3MTY2ZDkwOTg5YzYxZDRiMTBhODJiNTciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1qSXlOekE1TVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvc21vc0RiU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjZmYjY1MGVlNGFjNzIzNmQ2OTE3MjM2ZjE1ZjQwMWZlYzBlYzA1NDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16VTJOVGN4TVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkltcHJvdmVYYW1hcmluQnVpbGRUaW1lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlNTg0NTFhZmMyMmFmODkwOTQ5ZGI4ZDE4NTI0ZWE4NmRiMjVjYWIzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16VTNOamMwTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3RHJhd2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMxMTQ3Y2E0MjIyYzNjYzM1MzY0NDQ3OWUwZjlkZTIwOTc2OTA3ZTAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5EUTVOamd3TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNob3BwZWRQaWNrZXJSZXByb2R1Y3Rpb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjkyZThiMGM3N2NhODRmYWQ4OWMxOTE1YzgzNTM0YjI0ZDg2NWNmOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5Ea3hOemt6TlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZvcm1zSWxsZWdhbEFyZ3VtZW50UmVwcm9kdWN0aW9uIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjkwNDFlMzIzZDg2N2YxNmIyZTg2Mjc4NDYxNzM2MTc3N2JmOGY2ZjEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek9ESTJNekkxIiwKICAgICJvd25lciI6ICJzaW1vbmFjbyIsCiAgICAibmFtZSI6ICJXaW5DYWxlbmRhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZDI4YjhlNTIyYmNmMTJhMTRmMWZmNWJmNDkzMjlmZWY3ZDRlODkyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UWTVNamMyTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbnRleHRBY3Rpb25PbkFwcGVhcmluZ1JlcHJvZHVjdGlvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlZTdjODc3MGRiZTQ4MTA2NjQ3NWY4ODhhYTJmYjY2M2U2NDAzZTU2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UazRPRGc1TkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVJVGVzdGluZ1dlYlZpZXdzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdlODUxZTA5YTc3ZThjYjliYWYzMDc2OTUzMTU1OTExZWE1ZDQ1OGMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UQTFOakF6Tmc9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaGFja3p1cmljaCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjJhMzllNmM0OWVjMDAzOGMxZGNhMWY1Mzk2ZmY0Y2NjMThkODMwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5qQTBNamcyTVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtcy1Nb2JpbGVDZW50ZXJQdXNoLUFwcExpbmtzLVJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY5NDg0ZjlkMzBiMTI1MTI1Yjk3YmNkMzkxMDFhN2U2NzgxNmM1NzciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UY3lORGMxTVE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZGV2aXQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWMxNjEyYjNlYjJkMzM3MzlhZTIxMThiNzcyNzI4OGFmNGZiMDE4MCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9ETTFNVEl5T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbUxpc3QiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTQyYzUzYzg1YmM4NTVlNDgzNDk5OTVlZjZkZTE2MmE4MTNlOTFkYiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01UY3hORFF6T1E9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmdIZXJvZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjg1MTMzZjJiODJlZDQxZGY0NTYxZDQ2MWY2NWJmMWZlY2I4NWRmZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qa3pOekE0T0E9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3N0YXJ0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NzlkYWU5YzEzYzJiMWMxZTMyYjk2NzU5MmFmNWIxZDliOWUyMWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UY3dOakEwTmc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbUNhbSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiN2Y0NDUzMjlkOGU1N2IzN2Q1NDlhZWZmNWRmYzkwZWZlNzM1YzU4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERXlNVFl4TXpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdyaWRUb1JlbGF0aXZlTGF5b3V0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYyZmFmNGFjNjk2ZjMwMjFhZDk2YWMxZDc3NDIyMDRlNTQ1ODMwNjAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UUXlPVFl5TkE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctYXoiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDY3Y2Q5N2RkNTA1NWM2Njg5MjJjZmVhMGQwNmRkMjJlYzYzNTc4MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERXlNelEyT1RjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkF6dXJlTWVkaWFTZXJ2aWNlc1NhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmMTFjMzEwZGEwMjgyNzNkNDYwZmI0MmJhODdkOGZhNTEwOTMzNmMzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UUXpORGt3TUE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXp6IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjc0OGMzNjE1YWYzMDUwOTMyMDhkNGJiOTlmNTNiN2MwM2NkNDliMmQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTFNRFEwTVRBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlZpZXdDZWxsT25EaXNhcHBlYXJpbmciLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjA3ODhhMTgyNjE4Mjk2NTE5MDM1MDBkNDE0ZGFhZmNkMjkzMTcwMyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UWTJNRGt6TVE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXoiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FhY2ZhZWM3ZTUyNTllYjk0ZjI2ZjMyYTg4ODlhNmJjOWNhZGFlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9ETXhOVEE0TXc9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtcGVyZiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NTI0NGVhOWQ0YjU1MmU4NDNiMmNmZTE4NTlmZThhZmZmMjI4ZjQ3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTFOemc1TnpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3NzZiYTkwMjdjNThlNGQ5NWVjNmNkMjYxZjBiOTc1ZDRjODFiOTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTVNRFkyTlRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkF6dXJlQmxvYlN0b3JhZ2VTYW1wbGVBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTRiNjBjM2EyMzZjOTVhMDM3MDZlZjVhNDA1MGJlZTgwYzM3MTBmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTNOVEE0TlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY2RhLWxvY2FsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZjkzMDEzMzU2MjM4MTcwYjJlY2I5MTE3OTBhZGViMTM1ZjFmMGU2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ESTFNREkwTmpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZhY2lhbFJlY29nbml0aW9uTG9naW4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTZkMjIxYjZmMWY0ZGIyYzQzMDIwZGZjZTdkMGE0NjU2NTNhZWQ4NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTROakU0TVRJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicG9ydG8tdGVjaC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI0Y2RjZWQxOGYzZmViMzNmZDBhNDI4YTUxODNmY2RhZmRiYTM0NzUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETXdOalkyT1RBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJhcmNvZGVSZWFkZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjc2ZTAzNTM1MDkzYzg3NTE4MWFjYjVlZGFkNzNmY2FkNjllZjlhYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVXlOak16TWpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZmF2LXRhbGtzLWV2ZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjRkZGMzZjcwNTk5N2U1MDMyZGY1YWIyYzdlZjJjYTEzZDg4ZmNkOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVTBNekl3TURrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY2ktZGVtbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjOTdlNjM0M2JjMzRmYWNhNjMwNzRiNTczZDQ1MzY0MjkxMjZiYmQ4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTFPVFl3TlRBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlZpZGVvcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiMzczNTQ4ZmU1YjBiM2MxY2U0MmQxZTJjNTc4ZjhhODkzMGYyMjMyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVTJORFEzT0RZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jb3Ntb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDljMzlmYjI5NDNkYWU1ZmY5ZWE3ZjI3YjMwYjQ1ZTZjYjk1MDg0NSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EUXdPVFl5TWpJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNlbnRpbWVudEFuYWx5c2lzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI3MzU4N2ZiZjI0OWYzNGQ2NmRkZjlhNDVmODM1OWU2NDZmZmExNTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EWTFNemMyTmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY2lyY2xlY2kiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMGIxZmY4M2UwYjRiMjVkNzEzNmVkOGIzNjRlYzU3ZjE2NWI0ZTMwMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVXdPRFEyTmpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1vYmlsZUF6dXJlRGV2RGF5cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NzA5YTliMWFlZmQ5YTE1NjIyOTE0NzUyZTEzMDNjNTZkNDYxMzQ0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EZ3hOelUzTURFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZGVwbG95LWFuZ3VsYXItY2xvdWQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODMyZmIyNTZiNWVmNzMzMWRhNmJkNWNlYzE0NzUzZWJlMjIxYzliYyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQXdNRFUzT0RnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhBTTMyMC1XaWxsaXMtT25zaXRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU1MTA4Yjg3NzcwODNlZTdlYTYwMzU4OGExNjU0MzBhNmIzMDE5YzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ea3hNalUyTmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ2VuZXJhdGUtc2FzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0MmRhOTllZDM0ZjFkNzI3MWRhMjM1NDA4MzNkYzg0MTlhNDZjNTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1URXpNamczTWpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdlb2xvY2F0b3JTYW1wbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZmM4ZTQxOWMyMzJhNmQ4NzFlNDBjMjg5MTgxMzI1NTQ0M2U0MjNjNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5qTTVPVGswT1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZhY2VPZmYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTBjODNkNWMwOWFhYmVhNDRjOGQ5ZjdmZDFiMTIyMThiYzQ0ZDQ5ZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICJ8Q0kgVG9vbCAgICAgICAgICB8QnVpbGQgU3RhdHVzfFxufC0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLXxcbnwgQXBwIENlbnRlciwgaU9TIHwgIFshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzLzA3ZWI5YmZkLWM4MTgtNDg2OS04ODcwLTkwYTZkYjg2NzJkNC9icmFuY2hlcy9tYWluL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpIHxcbnwgQXBwIENlbnRlciwgQW5kcm9pZCB8IFshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzLzk1MTUzYzNhLThjZDMtNGQwOC05YjYxLTFiYzlhZDZhMWJiNC9icmFuY2hlcy9tYWluL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpIHxcbnwgQXBwIENlbnRlciwgVVdQIHwgWyFbQnVpbGQgc3RhdHVzXShodHRwczovL2J1aWxkLmFwcGNlbnRlci5tcy92MC4xL2FwcHMvYThjMTI0ZTItODE2MC00NzE1LThjNzItMmQ2ZmM1MTRkMTk4L2JyYW5jaGVzL21haW4vYmFkZ2UpXShodHRwczovL2FwcGNlbnRlci5tcykgfFxuXG4jIEZhY2VPZmZcbkZhY2VPZmYgcGl0cyB0d28gcGxheWVycyBhZ2FpbnN0IGVhY2hvdGhlciB0byBzZWUgd2hvIGNhbiByZWZsZWN0IGFuIGVtb3Rpb24gYmVzdCEgXG5cblRoZSBhcHAgcHJvdmlkZXMgYSByYW5kb20gZW1vdGlvbiB0aGF0IGJvdGggcGxheWVycyB3aWxsIHBvcnRyYXkuIEl0IHRoZW4gdXNlcyB0aGUgZmFjaWFsIHJlY29nbml0aW9uIHRlY2hub2xvZ3kgdG8gZGV0ZXJtaW5lIHdobyBleGhpYml0ZWQgdGhlIGVtb3Rpb24gYmVzdCFcblxuIyMgQWJvdXRcblRoaXMgaXMgYW4gQW5kcm9pZCwgaU9TIGFuZCBVV1AgYXBwIGNyZWF0ZWQgdXNpbmcgW1hhbWFyaW4uRm9ybXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4veGFtYXJpbi1mb3Jtcz9XVC5tY19pZD1mYWNlb2ZmLWdpdGh1Yi1icmFtaW4pLiBUaGUgZmFjaWFsIHJlY29nbml0aW9uIHVzZXMgW01pY3Jvc29mdCdzIENvZ2luaXRpdmUgU2VydmljZXMgRmFjZSBBUEldKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9zZXJ2aWNlcy9jb2duaXRpdmUtc2VydmljZXMvZmFjZT9XVC5tY19pZD1mYWNlb2ZmLWdpdGh1Yi1icmFtaW4pLiBcblxuIyMgVG9Eb1xuVG8gdXNlIE1pY3Jvc29mdCdzIENvZ2luaXRpdmUgU2VydmljZXMgRmFjZSBBUEkgZnJvbSB0aGlzIGFwcCwgc2lnbiB1cCBmb3IgYSBbZnJlZSBBUEkgS2V5XShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZnJlZS9haS8/dXRtX3NvdXJjZT1jaGFubmVsOSZ1dG1fbWVkaXVtPWRlc2NyaXB0aW9ubGlua3MmdXRtX2NhbXBhaWduPWZyZWVhY2NvdW50JldULm1jX2lkPWZhY2VvZmYtZ2l0aHViLWJyYW1pbikgYW5kIGluc2VydCBpdCB0byB0aGUgY29kZSBbaGVyZV0oLi9Tb3VyY2UvRmFjZU9mZi9Db25zdGFudHMvQ29nbml0aXZlU2VydmljZXNDb25zdGFudHMuY3MjTDcpLiBBZnRlciBhZGRpbmcgeW91ciBBUEkgS2V5LCByZW1vdmUgdGhlIGRpYWdub3N0aWMgZGlyZWN0aXZlIFtsb2NhdGVkIGhlcmVdKC4vU291cmNlL0ZhY2VPZmYvQ29uc3RhbnRzL0NvZ25pdGl2ZVNlcnZpY2VzQ29uc3RhbnRzLmNzI0w1KS5cblxuIyMjIEF1dGhvclxuQnJhbmRvbiBNaW5uaWNrXG5cblhhbWFyaW4gQ3VzdG9tZXIgU3VjY2VzcyBFbmdpbmVlclxuXG5cbiFbRmFjZU9mZiBEZW1vXShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1ZpZGVvcy9ibG9iL21hc3Rlci9GYWNlT2ZmL0ZhY2VPZmZfR2lmRGVtby5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOGIyYTQ0MjQtNDZkMi00MjA3LTgyYmItYzVkZTdlN2QwOTJkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVPRFV3TlRFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlcGVhdFRhYnNSZXByb2R1Y3Rpb25TYW1wbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTA5YjY5NjhlOTExOWNjY2I5YmJmYzAwM2M0MWEzODBkMWYzMWEwNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ea3hNall5TnprPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxvYi11cGxvYWRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNDI4MjYyYTJjYjQxM2U5NWMxMzc5ZTA4OTEwMmZiZjgwZTRmOTVlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1qQTVNVGc1TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkVudHJ5VUlUZXN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNkOWUwMGNkNzlkMmQ3Zjc5ZDhhM2YwMDc3NzMzMzJhNzExMjk2ZmMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBFbnRyeVVJVGVzdFxuXG5UaGlzIGFwcCBzaG93cyBob3cgdG8gaW1wbGVtZW50IFtYYW1hcmluLlVJVGVzdF0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXBwY2VudGVyL3Rlc3QtY2xvdWQvdWl0ZXN0P1dULm1jX2lkPWVudHJ5dWl0ZXN0LWdpdGh1Yi1icmFtaW4pIGluIGEgW1hhbWFyaW4uRm9ybXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4veGFtYXJpbi1mb3Jtcz9XVC5tY19pZD1lbnRyeXVpdGVzdC1naXRodWItYnJhbWluKSBwcm9qZWN0LlxuXG5XZSd2ZSBhZGRlZCBhbiBbQXV0b21hdGlvbklkXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9kb3RuZXQvYXBpL3hhbWFyaW4uZm9ybXMuZWxlbWVudC5hdXRvbWF0aW9uaWQ/dmlldz14YW1hcmluLWZvcm1zJldULm1jX2lkPWVudHJ5dWl0ZXN0LWdpdGh1Yi1icmFtaW4pIHRvIGVhY2ggY29udHJvbCB0byBzaG93IGhvdyB0aGUgVUkgdGVzdCBjYW4gaW50ZXJhY3Qgd2l0aCBjb250cm9scyB1c2luZyB0aGVpciBbQXV0b21hdGlvbklkXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9kb3RuZXQvYXBpL3hhbWFyaW4uZm9ybXMuZWxlbWVudC5hdXRvbWF0aW9uaWQ/dmlldz14YW1hcmluLWZvcm1zJldULm1jX2lkPWVudHJ5dWl0ZXN0LWdpdGh1Yi1icmFtaW4pLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjhmODBlNWY2LWQ5ZGQtNDhhYi1iNzYxLTVlODNjMzg3NTQxYyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5qTTVPVGswT1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZhY2VPZmYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTBjODNkNWMwOWFhYmVhNDRjOGQ5ZjdmZDFiMTIyMThiYzQ0ZDQ5ZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICJ8Q0kgVG9vbCAgICAgICAgICB8QnVpbGQgU3RhdHVzfFxufC0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLXxcbnwgQXBwIENlbnRlciwgaU9TIHwgIFshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzLzA3ZWI5YmZkLWM4MTgtNDg2OS04ODcwLTkwYTZkYjg2NzJkNC9icmFuY2hlcy9tYWluL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpIHxcbnwgQXBwIENlbnRlciwgQW5kcm9pZCB8IFshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzLzk1MTUzYzNhLThjZDMtNGQwOC05YjYxLTFiYzlhZDZhMWJiNC9icmFuY2hlcy9tYWluL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpIHxcbnwgQXBwIENlbnRlciwgVVdQIHwgWyFbQnVpbGQgc3RhdHVzXShodHRwczovL2J1aWxkLmFwcGNlbnRlci5tcy92MC4xL2FwcHMvYThjMTI0ZTItODE2MC00NzE1LThjNzItMmQ2ZmM1MTRkMTk4L2JyYW5jaGVzL21haW4vYmFkZ2UpXShodHRwczovL2FwcGNlbnRlci5tcykgfFxuXG4jIEZhY2VPZmZcbkZhY2VPZmYgcGl0cyB0d28gcGxheWVycyBhZ2FpbnN0IGVhY2hvdGhlciB0byBzZWUgd2hvIGNhbiByZWZsZWN0IGFuIGVtb3Rpb24gYmVzdCEgXG5cblRoZSBhcHAgcHJvdmlkZXMgYSByYW5kb20gZW1vdGlvbiB0aGF0IGJvdGggcGxheWVycyB3aWxsIHBvcnRyYXkuIEl0IHRoZW4gdXNlcyB0aGUgZmFjaWFsIHJlY29nbml0aW9uIHRlY2hub2xvZ3kgdG8gZGV0ZXJtaW5lIHdobyBleGhpYml0ZWQgdGhlIGVtb3Rpb24gYmVzdCFcblxuIyMgQWJvdXRcblRoaXMgaXMgYW4gQW5kcm9pZCwgaU9TIGFuZCBVV1AgYXBwIGNyZWF0ZWQgdXNpbmcgW1hhbWFyaW4uRm9ybXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4veGFtYXJpbi1mb3Jtcz9XVC5tY19pZD1mYWNlb2ZmLWdpdGh1Yi1icmFtaW4pLiBUaGUgZmFjaWFsIHJlY29nbml0aW9uIHVzZXMgW01pY3Jvc29mdCdzIENvZ2luaXRpdmUgU2VydmljZXMgRmFjZSBBUEldKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9zZXJ2aWNlcy9jb2duaXRpdmUtc2VydmljZXMvZmFjZT9XVC5tY19pZD1mYWNlb2ZmLWdpdGh1Yi1icmFtaW4pLiBcblxuIyMgVG9Eb1xuVG8gdXNlIE1pY3Jvc29mdCdzIENvZ2luaXRpdmUgU2VydmljZXMgRmFjZSBBUEkgZnJvbSB0aGlzIGFwcCwgc2lnbiB1cCBmb3IgYSBbZnJlZSBBUEkgS2V5XShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZnJlZS9haS8/dXRtX3NvdXJjZT1jaGFubmVsOSZ1dG1fbWVkaXVtPWRlc2NyaXB0aW9ubGlua3MmdXRtX2NhbXBhaWduPWZyZWVhY2NvdW50JldULm1jX2lkPWZhY2VvZmYtZ2l0aHViLWJyYW1pbikgYW5kIGluc2VydCBpdCB0byB0aGUgY29kZSBbaGVyZV0oLi9Tb3VyY2UvRmFjZU9mZi9Db25zdGFudHMvQ29nbml0aXZlU2VydmljZXNDb25zdGFudHMuY3MjTDcpLiBBZnRlciBhZGRpbmcgeW91ciBBUEkgS2V5LCByZW1vdmUgdGhlIGRpYWdub3N0aWMgZGlyZWN0aXZlIFtsb2NhdGVkIGhlcmVdKC4vU291cmNlL0ZhY2VPZmYvQ29uc3RhbnRzL0NvZ25pdGl2ZVNlcnZpY2VzQ29uc3RhbnRzLmNzI0w1KS5cblxuIyMjIEF1dGhvclxuQnJhbmRvbiBNaW5uaWNrXG5cblhhbWFyaW4gQ3VzdG9tZXIgU3VjY2VzcyBFbmdpbmVlclxuXG5cbiFbRmFjZU9mZiBEZW1vXShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1ZpZGVvcy9ibG9iL21hc3Rlci9GYWNlT2ZmL0ZhY2VPZmZfR2lmRGVtby5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOGIyYTQ0MjQtNDZkMi00MjA3LTgyYmItYzVkZTdlN2QwOTJkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1qQTVNVGc1TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkVudHJ5VUlUZXN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNkOWUwMGNkNzlkMmQ3Zjc5ZDhhM2YwMDc3NzMzMzJhNzExMjk2ZmMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBFbnRyeVVJVGVzdFxuXG5UaGlzIGFwcCBzaG93cyBob3cgdG8gaW1wbGVtZW50IFtYYW1hcmluLlVJVGVzdF0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXBwY2VudGVyL3Rlc3QtY2xvdWQvdWl0ZXN0P1dULm1jX2lkPWVudHJ5dWl0ZXN0LWdpdGh1Yi1icmFtaW4pIGluIGEgW1hhbWFyaW4uRm9ybXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4veGFtYXJpbi1mb3Jtcz9XVC5tY19pZD1lbnRyeXVpdGVzdC1naXRodWItYnJhbWluKSBwcm9qZWN0LlxuXG5XZSd2ZSBhZGRlZCBhbiBbQXV0b21hdGlvbklkXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9kb3RuZXQvYXBpL3hhbWFyaW4uZm9ybXMuZWxlbWVudC5hdXRvbWF0aW9uaWQ/dmlldz14YW1hcmluLWZvcm1zJldULm1jX2lkPWVudHJ5dWl0ZXN0LWdpdGh1Yi1icmFtaW4pIHRvIGVhY2ggY29udHJvbCB0byBzaG93IGhvdyB0aGUgVUkgdGVzdCBjYW4gaW50ZXJhY3Qgd2l0aCBjb250cm9scyB1c2luZyB0aGVpciBbQXV0b21hdGlvbklkXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9kb3RuZXQvYXBpL3hhbWFyaW4uZm9ybXMuZWxlbWVudC5hdXRvbWF0aW9uaWQ/dmlldz14YW1hcmluLWZvcm1zJldULm1jX2lkPWVudHJ5dWl0ZXN0LWdpdGh1Yi1icmFtaW4pLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjhmODBlNWY2LWQ5ZGQtNDhhYi1iNzYxLTVlODNjMzg3NTQxYyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UWXhNek13Tnc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZVVJVGVzdEFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiYjVmMTRhYjE5ZTM0ZjNhMDNiNjhlZTNiMGRiZGIyNmI2ODZlMGQ3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBTaW1wbGVVSVRlc3RBcHBcblRoaXMgcmVwbyBoYXMgbW92ZWQ6XG5odHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1VJVGVzdFNhbXBsZUFwcFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjA3YTg3ZTJhLTA1ZTQtNGNlYi1hMjgzLTdkNjkwNTU2ODI0MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1qSTBOelUwTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkludmVzdG1lbnREYXRhU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU4ZWU2MWQwYTQwMGI5MDIxMzY5MTNmMThmYzgyYTUzZWJlMjg2NWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBJbnZlc3RtZW50RGF0YVNhbXBsZUFwcFxuXG48YSBocmVmPVwiaHR0cHM6Ly93d3cuYnV5bWVhY29mZmVlLmNvbS9ibWlubmlja1wiIHRhcmdldD1cIl9ibGFua1wiPjxpbWcgc3JjPVwiaHR0cHM6Ly9jZG4uYnV5bWVhY29mZmVlLmNvbS9idXR0b25zL2RlZmF1bHQtb3JhbmdlLnBuZ1wiIGFsdD1cIkJ1eSBNZSBBIENvZmZlZVwiICA+PC9hPlxuXG5UaGlzIHNhbXBsZSBhcHAgZGVtb25zdHJhdGVzIHRoZSBmb2xsb3dpbmcgbmV3IGZlYXR1cmVzIGluIFhhbWFyaW4uRm9ybXM6XG4tIFtYYW1hcmluLkZvcm1zLlN3aXBlVmlld10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi94YW1hcmluLWZvcm1zL3VzZXItaW50ZXJmYWNlL3N3aXBldmlldz9XVC5tY19pZD1pbnZlc3RtZW50ZGF0YXNhbXBsZWFwcC1naXRodWItYnJhbWluKVxuLSBbWGFtYXJpbi5Gb3Jtcy5SZWZyZXNoVmlld10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi94YW1hcmluLWZvcm1zL3VzZXItaW50ZXJmYWNlL3JlZnJlc2h2aWV3P1dULm1jX2lkPWludmVzdG1lbnRkYXRhc2FtcGxlYXBwLWdpdGh1Yi1icmFtaW4pXG4tIFtYYW1hcmluLkZvcm1zLkNvbGxlY3Rpb25WaWV3XShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS94YW1hcmluL3hhbWFyaW4tZm9ybXMvdXNlci1pbnRlcmZhY2UvY29sbGVjdGlvbnZpZXc/V1QubWNfaWQ9aW52ZXN0bWVudGRhdGFzYW1wbGVhcHAtZ2l0aHViLWJyYW1pbilcbi0gW1hhbWFyaW4uRm9ybXMuUGxhdGZvcm1Db25maWd1cmF0aW9uLmlPU1NwZWNpZmljLlVJTW9kYWxQcmVzZW50YXRpb25TdHlsZS5Gb3JtU2hlZXRdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4veGFtYXJpbi1mb3Jtcy9wbGF0Zm9ybS9pb3MvcGFnZS1wcmVzZW50YXRpb24tc3R5bGU/V1QubWNfaWQ9aW52ZXN0bWVudGRhdGFzYW1wbGVhcHAtZ2l0aHViLWJyYW1pbilcblxufCBDb2xsZWN0aW9uVmlldyArIFJlZnJlc2hWaWV3IChpT1MpIHwgVUlNb2RhbFByZXNlbnRhdGlvblN0eWxlIEZvcm1TaGVldCB8IENvbGxlY3Rpb25WaWV3ICsgUmVmcmVzaFZpZXcgKEFuZHJvaWQpIHwgU3dpcGVWaWV3IChBbmRyb2lkKSB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLSB8XG58ICFbQ29sbGVjdGlvblZpZXcgKyBSZWZyZXNoVmlldyBEZW1vLCBpT1NdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzcwMzUxODAyLTk1ZDNlOTgwLTE4MWUtMTFlYS05ZjM0LTM1N2E2ODdiNWZlMi5naWYpIHwgIVtpT1MgTW9kYWwgUGFnZSBEZW1vXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy83MDM1MTgwMy05NWQzZTk4MC0xODFlLTExZWEtODQzNS1lYzRkNWEzZWM3ZmIuZ2lmKSB8ICFbQ29sbGVjdGlvblZpZXcgKyBSZWZyZXNoVmlldyBEZW1vLCBBbmRyb2lkXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy83MDM1MTgwNS05NjZjODAwMC0xODFlLTExZWEtOWVhMC04Y2FkZmUwZmQ5YTguZ2lmKSB8ICFbU3dpcGVWaWV3IEFuZHJvaWRdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzcwMzUxODA0LTk2NmM4MDAwLTE4MWUtMTFlYS05OTBmLTYyM2EwMWEyZWJkYS5naWYpIHxcblxuIyMgVUkgRGVzaWduXG5cblRoaXMgc2FtcGxlIGFwcCB3YXMgbWFkZSB0byBkZW1vbnN0cmF0ZSBob3cgdG8gcG9ydCBhIERlc2t0b3AgQXBwIHRvIGEgTW9iaWxlIEFwcC4gVGhpcyBwcm9qZWN0IGhhZCBhbiBleGlzdGluZyBEZXNrdG9wIGFwcGxpY2F0aW9uLiBUaGV5IHByb3ZpZGVkIHVzIGEgbW9jayB1cCBvZiB0aGVpciBtb2JpbGUgYXBwIChzZWUgYmVsb3cpIHdoaWNoIGRpZCBub3QgZm9sbG93IFtpT1MgVUkgYmVzdC1wcmFjdGljZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2lvcy9kb2N1bWVudGF0aW9uL1VzZXJFeHBlcmllbmNlL0NvbmNlcHR1YWwvTW9iaWxlSElHLykuIFdlIGNyZWF0ZWQgYSBzYW1wbGUgYXBwIHRvIGRlbW9uc3RyYXRlIGhvdyB0byBhZGhlcmUgdG8gbW9iaWxlIFVJIHdoaWxlIHN0aWxsIG1haW50YWluaW5nIGEgd29ya2Zsb3cgZmFtaWxpYXIgdG8gdGhlaXIgZGVza3RvcCBhcHAuXG5cblRoaXMgYXBwIHV0aWxpemVzIGEgU1FMaXRlIGRhdGFic2UsIE1WVk0sIGFsb25nIHdpdGggdGhlc2UgWGFtYXJpbi5Gb3JtcyBjb250cm9sczogQ2Fyb3VzZWwgUGFnZSwgU2VhcmNoIEJhciwgUGlja2VyLCBHcmlkLCBTdGFja0xheW91dCwgTmF2aWdhdGlvbiBQYWdlLCBMaXN0VmlldywgVmlld0NlbGwuIEl0IGFsc28gc2hvd3MgaG93IHRvIHR3ZWFrIHRoZSBVSSB0byBiZXN0IGFwcGVhciBvbiBsYXJnZXIgdGFibGV0IHNjcmVlbnMuIEl0IGFsc28gaW5jbHVkZXMgYSBTaGFrZSBMaXN0ZW5lciwgYW5kIHdpbGwgZGlzcGxheSBhIHBvcC11cCB3aGVuZXZlciB0aGUgdXNlciBzaGFrZXMgdGhlIGRldmljZS5cblxuIyMjIE9yaWdpbmFsIERlc2t0b3AgQXBwIE1vY2t1cFxuVGhlIGN1c3RvbWVyIHByb3ZpZGVkIHVzIHRoaXMgd2lyZWZyYW1lIGFzIHRoZSBpbml0aWFsIGRlc2lnbiBmb3IgdGhlaXIgbW9iaWxlIGFwcGxpY2F0aW9uLiBUaGVpciBnb2FsIHdhcyB0byByZXBsaWNhdGUgdGhlaXIgZXhpc3RpbmcgZGVza3RvcCBhcHAgLlxuIVtPcmlnaW5hbCBBcHAgTW9ja3VwXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81NzcxNTYxMi0wMjQxOGUwMC03NjJjLTExZTktOWM0NS1kMzJjODhjM2FhNTYucG5nKVxuXG4jIyMgU2FtcGxlIEFwcCBvbiBpUGhvbmVcblRoaXMgaXMgdGhlIHNhbXBsZSBhcHAgd2UgcHJvdmlkZWQgYXMgaXQgYXBwZWFycyBvbiBhIHBob25lXG4hW2lQaG9uZSBTYW1wbGUgQXBwXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81NzcxNTYxMS0wMjQxOGUwMC03NjJjLTExZTktOTNjYy0xOTRhYWExNDBmZmMuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjMyNjQ4NjQ5LTkwZDQtNGY4NC1iZWM2LTU5NzcwNDAwMWZiYSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1EVTBNekEwTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNlY3VyaXR5U2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhZTEyMmU3ZmYxMjFmOGZkYmNkMzQyZmE1MGY3MmYzNjY2YmIzMDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyMjIFNlY3VyaXR5IFNhbXBsZSBBcHBcblRoaXMgYXBwIGlzIGEgWGFtYXJpbi5Gb3JtcyBhcHAgdGhhdCB1c2VzIE1WVk0gYW5kIHRoZSBmb2xsb3dpbmcgWGFtYXJpbi5Gb3JtcyBjb250cm9sczogU2xpZGVyLCBUYWJsZVZpZXcsIExpc3RWaWV3LCBDYXJvdXNlbCBQYWdlLCBOYXZpZ2F0aW9uIFBhZ2UuXG5cbiBUbyBzYXZlIHRoZSBzZXR0aW5ncyBvZiB0aGUgYXBwLCBpdCB1c2VzIFtYYW1hcmluLkVzc2VudGlhbHMuUHJlZmVyZW5jZXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4vZXNzZW50aWFscy9wcmVmZXJlbmNlcz9XVC5tY19pZD1zZWN1cml0eXNhbXBsZWFwcC1naXRodWItYnJhbWluKS4gVGhlIFtnZXR0ZXIvc2V0dGVyIG9mIGVhY2ggcHJvcGVydHldKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svU2VjdXJpdHlTYW1wbGVBcHAvYmxvYi9tYXN0ZXIvU2VjdXJpdHlTYW1wbGVBcHAvTW9kZWxzL0xhbmVNb2RlbC5jcykgZm9yIGBMYW5lTW9kZWxgIHJldHJpZXZlcy9zYXZlcyB0aGUgcHJvcGVydHkgdmFsdWUgZnJvbS90byBwZXJzaXN0ZW50IHN0b3JhZ2UuXG5cbiFbU2FtcGxlIEdpZl0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTcyMDI0MTYtZDIyNjJiMDAtNmY1OS0xMWU5LTlhY2YtN2I4ZGY5ZmI2ZWY0LmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxNTJmMjJjZC05ZDg3LTQwMzYtOTI1OS03NjNlNWFlMTI4YjYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UWXpNVEU1TkRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWxBdHRhY2hlZFByb3BlcnR5UmVwcm9kdWN0aW9uIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjlkMjE0OTBiMzdmNGJiYjI1YjEyYTQyZDk1NDVhNWVkMWVhZDg0ODMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UY3dOVFEyTWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldlYlZpZXdVSVRlc3RBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Y1MzhjOWZhYmY5ZDdiYTEzZjAzODQ2ODcxZGNkODJkZDgyYjQ5YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgV2ViVmlld1VJVGVzdEFwcFxuVGhpcyBhcHAgZGVtb25zdHJhdGVzIGhvdyB0byB3cml0ZSBVSVRlc3RzIGZvciBhbiBhcHAgdGhhdCB1c2VzIGEgV2ViVmlldy5cblxuVGhpcyBhcHAgaXMgYSB3ZWJ2aWV3IHRoYXQgbG9hZHMgeGFtYXJpbi5jb21cblxuVGhlIFVJVGVzdCBQcm9qZWN0IGluY2x1ZGVzIGEgc2FtcGxlIFVJVGVzdCB0byBpbnRlcmFjdCB3aXRoIHRoZSBXZWJWaWV3XG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTMwMmExN2MtNjAwNS00YWQ4LWFjMTEtZTU4OGE2MTUyYjAzIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQTRNREk1TnpNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxvYi10cmlnZ2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjkzOGRmNzcwNjc4NDU4YjNkZjdhNTk3NzVmY2Q4OTRiNmQ4OGM5MzQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM016UXpOekUxTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhjb2RlX1hhbWFyaW5VSVRlc3RfU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY5ZjI4ZGMzM2NkNDI1ZTkwMzFjOGY5ZTJkMjg0ZDkyM2RhYTBmMWEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICJbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vd3d3LmJpdHJpc2UuaW8vYXBwL2RiZmZiZmU0MWE5NjVlYWQuc3ZnP3Rva2VuPXJMSnlkNGQxenBuLUFLU0Y2djdra2cpXShodHRwczovL3d3dy5iaXRyaXNlLmlvL2FwcC9kYmZmYmZlNDFhOTY1ZWFkKVxuIyBYY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcFxuVGhpcyBzYW1wbGUgYXBwIGRlbW9uc3RyYXRlcyBob3cgdG8gY3JlYXRlIFhhbWFyaW4uVUlUZXN0IGZvciBhbiBpT1MgYXBwIGJ1aWx0IGluIFhjb2RlLlxuXG5UaGlzIHJlcG8gY29udGFpbnMgYW4gW2lPUyBhcHAgbWFkZSB1c2luZyBYY29kZV0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9YY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcC90cmVlL21hc3Rlci9YY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcC54Y29kZXByb2opLCBhbmQgYSBbWGFtYXJpbi5VSVRlc3QgbWFkZSB1c2luZyBYYW1hcmluIFN0dWRpb10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9YY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcC90cmVlL21hc3Rlci9YY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcC5VSVRlc3RzKS5cblxuVG8gcnVuIGEgVUlUZXN0IGFnYWluc3QgYW4gaU9TIGFwcCwgeW91IHdpbGwgbmVlZCB0byBlbWJlZCB0aGUgQ2FsYWJhc2ggTGlicmFyeSBieSBmb2xsb3dpbmcgW3RoaXMgdHV0b3JpYWxdKGh0dHBzOi8vZ2l0aHViLmNvbS9jYWxhYmFzaC9jYWxhYmFzaC1pb3MpLlxuXG4jIyBTZXR1cFxuXG5UbyBiZWdpbiB1c2luZyB0aGlzIGFwcCwgeW91IHdpbGwgbmVlZCB0byBpbnN0YWxsIGl0cyBDb2NvYVBvZHMgYnkgZm9sbG93aW5nIHRoZXNlIHN0ZXBzOlxuXG4qIEVuc3VyZSB0aGF0IENvY29hUG9kcyBpcyBpbnN0YWxsZWQgb24geW91ciBidWlsZCBtYWNoaW5lXG4gICogT3BlbiBUZXJtaW5hbFxuICAqIEluc3RhbGwgQ29jb2FQb2RzXG4gICAgKiBJbiB0aGUgdGVybWluYWwsIGVudGVyIGBzdWRvIGdlbSBpbnN0YWxsIGNvY29hcG9kc2BcbiAgKiBFbnN1cmUgeW91IGhhdmUgaW5zdGFsbGVkIENvY29hUG9kcyB2MS4wIG9yIGdyZWF0ZXJcbiAgICAqIEluIHRoZSB0ZXJtaW5hbCwgZW50ZXIgYHBvZCBlbnZgXG4gIFxuKiBJbnN0YWxsIHRoZSBDb2NvYVBvZHMgZm9yIHRoaXMgcHJvamVjdFxuICAqIEluIHRoZSBUZXJtaW5hbCwgbmF2aWdhdGUgdG8gdGhlIHByb2plY3QgZGlyZWN0b3J5IFxuICAgICogZS5nLiBjZCB+L1Byb2plY3RzL1hjb2RlX1hhbWFyaW5VSVRlc3RfU2FtcGxlQXBwXG4gICogVGhlbiwgaW5zdGFsbCB0aGUgQ29jb2FQb2RzIGZvciB0aGlzIHByb2plY3QgXG4gICAgKiBJbiB0aGUgdGVybWluYWwsIGVudGVyIGBwb2QgaW5zdGFsbGBcblxuRm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gb24gQ29jb2FQb2RzLCB2aXNpdCBodHRwczovL2NvY29hcG9kcy5vcmcuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzFiNjM3OGEtZDMyYS00OTU1LThjYzYtNTBlNGFjMThjNTFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EWXlOekUxTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJpbmFyeVNlYXJjaFRyZWUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTM1ZDBkZTNhZmU0NjlkZjU1Y2JiZDc3YWY0NjdiM2MxOGZlYWVmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQmluYXJ5U2VhcmNoVHJlZVxuIFRoaXMgcmVwbyBjb250YWlucyB0aGUgQmluYXJ5IFNlYXJjaCBUcmVlIGRhdGEgc3RydWN0dXJlLiBJdCBhbGxvd3MgZm9yIGZhc3QgbG9va3VwIGFuZCBhZGRpdGlvbiBvZiBpdGVtcywgYW5kIGNhbiBiZSB1c2VkIHRvIGltcGxlbWVudCBlaXRoZXIgZHluYW1pYyBzZXRzIG9mIGl0ZW1zLCBvciBsb29rdXAgdGFibGVzIHRoYXQgYWxsb3cgZmluZGluZyBhbiBpdGVtIGJ5IGl0cyBrZXkgKGUuZy4sIGZpbmRpbmcgdGhlIHBob25lIG51bWJlciBvZiBhIHBlcnNvbiBieSBuYW1lKS5cbiBcbiAgQmluYXJ5IHNlYXJjaCB0cmVlIGlzIGEgcm9vdGVkIGJpbmFyeSB0cmVlLCB3aG9zZSBpbnRlcm5hbCBub2RlcyBlYWNoIHN0b3JlIGEgdmFsdWUgYW5kIGVhY2ggaGF2ZSB0d28gZGlzdGluZ3Vpc2hlZCBzdWItdHJlZXMsIGRlbm90ZWQgTGVmdCBhbmQgUmlnaHQuIFRoZSB0cmVlIGFkZGl0aW9uYWxseSBzYXRpc2ZpZXMgdGhlIGJpbmFyeSBzZWFyY2ggdHJlZSBwcm9wZXJ0eSwgd2hpY2ggc3RhdGVzIHRoYXQgdGhlIHZhbHVlIGluIGVhY2ggbm9kZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBhbGwgdmFsdWVzIHN0b3JlZCBpbiB0aGUgbGVmdCBzdWItdHJlZSwgYW5kIHNtYWxsZXIgdGhhbiBhbGwgdmFsdWVzIGluIHRoZSByaWdodCBzdWItdHJlZS4gKFRoZSBsZWF2ZXMgKGZpbmFsIG5vZGVzKSBvZiB0aGUgdHJlZSBjb250YWluIG5vIHZhbHVlIGFuZCBoYXZlIG5vIHN0cnVjdHVyZSB0byBkaXN0aW5ndWlzaCB0aGVtIGZyb20gb25lIGFub3RoZXIuIExlYXZlcyBhcmUgcmVwcmVzZW50ZWQgYnkgbnVsbC4pXG5cbnx8IEF2ZXJhZ2UgfCBXb3JzdCBDYXNlfFxufC0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLXxcbnxTcGFjZXxcdM6YKG4pfE8obil8XG58U2VhcmNofM6YKGxvZyBuKXxPKG4pfFxufEluc2VydHzOmChsb2cgbil8TyhuKXxcbnxEZWxldGV8zpgobG9nIG4pfE8obl4yKXxcblxuIyMjIEV4YW1wbGVcblxuYGBgXG4gc3RhdGljIFJhbmRvbSByYW5kb20gPSBuZXcgUmFuZG9tKChpbnQpRGF0ZVRpbWUuTm93LlRpY2tzKTtcbiBwcml2YXRlIHZvaWQgc3RyaW5nVGVzdChpbnQgdG90YWxWYWx1ZXMpXG4ge1xuICAgICB2YXIgdHJlZSA9IG5ldyBCaW5hcnlOb2RlVHJlZTxzdHJpbmc+KCk7XG4gICAgIFxuICAgICB2YXIgc3RyaW5nQXJyYXkgPSBuZXcgc3RyaW5nW3RvdGFsVmFsdWVzXTtcblxuICAgICB2YXIgcm5kID0gbmV3IFJhbmRvbSgpO1xuXG4gICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdG90YWxWYWx1ZXM7IGkrKylcbiAgICAge1xuICAgICAgICAgc3RyaW5nQXJyYXlbaV0gPSBSYW5kb21TdHJpbmcocm5kLk5leHQoMSwxNSkpO1xuXG4gICAgICAgICBEZWJ1Zy5Xcml0ZUxpbmUoc3RyaW5nQXJyYXlbaV0pO1xuXG4gICAgICAgICB0cmVlLkluc2VydChzdHJpbmdBcnJheVtpXSk7XG4gICAgIH1cblxuICAgICBEZWJ1Zy5Xcml0ZUxpbmUoXCJUcmVlIFRvU3RyaW5nKCk6XCIpO1xuICAgICBEZWJ1Zy5Xcml0ZUxpbmUodHJlZS5Ub1N0cmluZygpKTtcblxuICAgICBmb3IgKGludCBpID0gMDsgaSA8IHRvdGFsVmFsdWVzOyBpKyspXG4gICAgIHtcbiAgICAgICAgIGlmIChpID4gdG90YWxWYWx1ZXMgfHwgaSA8IDApXG4gICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIHZhciBpbmRleFRvUmVtb3ZlID0gdG90YWxWYWx1ZXMgLSBpIC0gMTtcbiAgICAgICAgIERlYnVnLldyaXRlTGluZShcIlwiKTtcbiAgICAgICAgIERlYnVnLldyaXRlTGluZSgkXCJSZW1vdmUge3N0cmluZ0FycmF5W2luZGV4VG9SZW1vdmVdfVwiKTtcblxuICAgICAgICAgdHJlZS5SZW1vdmUoc3RyaW5nQXJyYXlbaW5kZXhUb1JlbW92ZV0pO1xuXG4gICAgICAgICBEZWJ1Zy5Xcml0ZUxpbmUoXCJUcmVlIFRvU3RyaW5nKCk6XCIpO1xuICAgICAgICAgRGVidWcuV3JpdGVMaW5lKHRyZWUuVG9TdHJpbmcoKSk7XG4gICAgIH1cbiB9XG5cbiBwcml2YXRlIHN0YXRpYyB2b2lkIGludFRlc3QoaW50IHRvdGFsVmFsdWVzKVxuIHtcbiAgICAgdmFyIHRyZWUgPSBuZXcgQmluYXJ5Tm9kZVRyZWU8aW50PigpO1xuXG4gICAgIGludCByYW5kb21OdW1iZXI7XG4gICAgIHZhciBpbnRBcnJheSA9IG5ldyBpbnRbdG90YWxWYWx1ZXNdO1xuXG4gICAgIHZhciBybmQgPSBuZXcgUmFuZG9tKCk7XG4gICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdG90YWxWYWx1ZXM7IGkrKylcbiAgICAge1xuICAgICAgICAgcmFuZG9tTnVtYmVyID0gcm5kLk5leHQoMSwgMTAwKTtcblxuICAgICAgICAgaW50QXJyYXlbaV0gPSByYW5kb21OdW1iZXI7XG5cbiAgICAgICAgIERlYnVnLldyaXRlTGluZShpbnRBcnJheVtpXSk7XG5cbiAgICAgICAgIHRyZWUuSW5zZXJ0KGludEFycmF5W2ldKTtcbiAgICAgfVxuICAgICBEZWJ1Zy5Xcml0ZUxpbmUoXCJUcmVlIFRvU3RyaW5nKCk6XCIpO1xuICAgICBEZWJ1Zy5Xcml0ZUxpbmUodHJlZS5Ub1N0cmluZygpKTtcblxuICAgICBmb3IgKGludCBpID0gMDsgaSA8IHRvdGFsVmFsdWVzOyBpKyspXG4gICAgIHtcbiAgICAgICAgIGlmIChpID4gdG90YWxWYWx1ZXMgfHwgaSA8IDApXG4gICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIHZhciBpbmRleFRvUmVtb3ZlID0gdG90YWxWYWx1ZXMgLSBpIC0gMTtcbiAgICAgICAgIERlYnVnLldyaXRlTGluZShcIlwiKTtcbiAgICAgICAgIERlYnVnLldyaXRlTGluZSgkXCJSZW1vdmUge2ludEFycmF5W2luZGV4VG9SZW1vdmVdfVwiKTtcblxuICAgICAgICAgdHJlZS5SZW1vdmUoaW50QXJyYXlbaW5kZXhUb1JlbW92ZV0pO1xuXG4gICAgICAgICBEZWJ1Zy5Xcml0ZUxpbmUoXCJUcmVlIFRvU3RyaW5nKCk6XCIpO1xuICAgICAgICAgRGVidWcuV3JpdGVMaW5lKHRyZWUuVG9TdHJpbmcoKSk7XG4gICAgIH1cbiB9XG5cbiBwcml2YXRlIHN0YXRpYyBzdHJpbmcgUmFuZG9tU3RyaW5nKGludCBzaXplKVxuIHtcbiAgICAgU3RyaW5nQnVpbGRlciBidWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoKTtcbiAgICAgY2hhciBjaDtcbiAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBzaXplOyBpKyspXG4gICAgIHtcbiAgICAgICAgIGNoID0gQ29udmVydC5Ub0NoYXIoQ29udmVydC5Ub0ludDMyKE1hdGguRmxvb3IoMjYgKiByYW5kb20uTmV4dERvdWJsZSgpICsgNjUpKSk7XG4gICAgICAgICBidWlsZGVyLkFwcGVuZChjaCk7XG4gICAgIH1cblxuICAgICByZXR1cm4gYnVpbGRlci5Ub1N0cmluZygpO1xuIH1cbiBgYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3ZTM2YjZkZC1hMjIyLTQzY2MtYjg4ZS05OThiMjA1MTMxNTYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UY3hOVEV4TXpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkhlYWx0aENsaW5pYyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhNTYxNjY2Yzg1YTU4MDIxOWI1MDVhMmRhNzM4ZmZiMDAyM2RhN2Q5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qWXdORFEyT0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFuZHJvaWRDaGVja0JveFNhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZWI2Y2NkOWM5Mzg0MDI4ZGQzZDUwYmQ4YzI3NTQ4ZWNhZTdjNmY3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmRyb2lkQ2hlY2tCb3hTYW1wbGVBcHBcblRoaXMgaXMgYSBzaW1wbGUgYXBwIHRvIGRlbW9uc3RyYXRlIGhvdyB0byBpbnRlcmFjdCB3aXRoIGFuIEFuZHJvaWQgQ2hlY2tCb3ggZnJvbSBhIFVJVGVzdC5cblxuVG8gaW50ZXJhY3Qgd2l0aCBhbiBBbmRyb2lkIENoZWNrQm94IGZyb20gYSBVSVRlc3QsIHlvdSBtdXN0IHVzZSB0aGUgW0ludm9rZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZG90bmV0L2FwaS94YW1hcmluLnVpdGVzdC5xdWVyaWVzLmFwcHF1ZXJ5Lmludm9rZT92aWV3PXhhbWFyaW4tdWl0ZXN0LXNkayZXVC5tY19pZD1hbmRyb2lkY2hlY2tib3hzYW1wbGVhcHAtZ2l0aHViLWJyYW1pbiNYYW1hcmluX1VJVGVzdF9RdWVyaWVzX0FwcFF1ZXJ5X0ludm9rZV9TeXN0ZW1fU3RyaW5nXykgbWV0aG9kIHRvIGFjY2VzcyB0aGUgbWV0aG9kcyBpbiB0aGUgW25hdGl2ZSBKYXZhIEFuZHJvaWQgQVBJXShodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC93aWRnZXQvQ2hlY2tCb3guaHRtbCkuIEluIG91ciBgSW52b2tlYCBzdGF0ZW1lbnRzLCB3ZSBjYW4gdGFrZSBhZHZhbnRhZ2Ugb2YgYHBlcmZvcm1DbGljaygpYCB0byB0b2dnbGUgdGhlIENoZWNrQm94LCBgc2V0Q2hlY2tlZChib29sZWFuIGNoZWNrZWQpYCB0byBzZXQgdGhlIHZhbHVlIG9mIHRoZSBDaGVja0JveCwgYW5kIGBpc0NoZWNrZWQoKWAgdG8gcmV0dXJuIGEgYm9vbCB0aGF0IGlzIGB0cnVlYCB3aGVuIHRoZSBDaGVja0JveCBpcyBjaGVja2VkIGFuZCBgZmFsc2VgIHdoZW4gaXQgaXMgdW5jaGVja2VkLlxuXG5JbiB0aGUgVUlUZXN0IHByb2plY3QsIEkgY3JlYXRlZCBhIFtUb2dnbGVDaGVja0JveF0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9BbmRyb2lkQ2hlY2tCb3hTYW1wbGVBcHAvYmxvYi9tYXN0ZXIvQ2hlY2tCb3hTYW1wbGVBcHAuVUlUZXN0L1Rlc3RzLmNzI0wxMjgpIG1ldGhvZCB0byB0b2dnbGUgYW4gaW5kaXZpZHVhbCBDaGVja0JveCwgYSBbSXNDaGVja0JveENoZWNrZWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svQW5kcm9pZENoZWNrQm94U2FtcGxlQXBwL2Jsb2IvbWFzdGVyL0NoZWNrQm94U2FtcGxlQXBwLlVJVGVzdC9UZXN0cy5jcyNMMTM0KSBtZXRob2QgdG8gcmV0dXJuIHRoZSBDaGVja0JveCBjdXJyZW50IHN0YXR1cywgYW5kIGEgW1NldENoZWNrQm94XShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL0FuZHJvaWRDaGVja0JveFNhbXBsZUFwcC9ibG9iL21hc3Rlci9DaGVja0JveFNhbXBsZUFwcC5VSVRlc3QvVGVzdHMuY3MjTDEzOSkgbWV0aG9kIHRvIHNldCB0aGUgQ2hlY2tCb3ggc3RhdHVzLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImE2ZTdmZmU5LTI5ODItNDVlOS04ZDM3LTVhZDNjMjMyYjhhNCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQTRNemN5TVRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1sb25kb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTY1MDc4ZGMwOGQ3Y2VmMmU0Y2JiZTIyNmQwYWMxMTgzNWY0MTU4NiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UZzJOREUyTlRFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFzeW5jQXdhaXRCZXN0UHJhY3RpY2VzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImExMDY4MTkyMDQ5YzMyYTBlYzJhYWZhYmEzMjk5YTVjNWM2ZmZmN2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVNek0yTnpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm91bmFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjZjcwZWRlMDFjOWZlZGYwNDE5MGNkMDEwYTBjY2FlODIzZDI4ODM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09URTFNVFF5T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlBvd2VyQklTYW1wbGVBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTFhZDQyZTIyNWYyMDJmOTA4NjA3ZTFkN2ZlMTNjNWY0ZjEwMWFkOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFBvd2VyQklTYW1wbGVBcHBcblxuQSBzYW1wbGUgYXBwIGRlbW9uc3RyYXRpbmcgaG93IHRvIGludGVyYWN0IHdpdGggYSBQb3dlckJJIGJhY2tlbmQgZm9ybSBhIFhhbWFyaW4uRm9ybXMgYXBwXG5cbiMjIFRvIERvXG5cblRvIHVzZSB0aGlzIHNhbXBsZSwgeW91IHdpbGwgbmVlZCB0byBjcmVhdGUgYSBuYXRpdmUgYXBwIHJlZ2lzdHJhdGlvbiBmb3IgeW91ciBBenVyZSBBRCBpbnN0YW5jZS5cblxuQmVsb3cgYXJlIHRoZSBzY3JlZW5zaG90cyBmb3IgdGhlIE5hdGl2ZSBBcHAgUmVnaXN0cmF0aW9uIHRoYXQgaXMgYmVpbmcgdXNlZCBmb3IgdGhpcyBzYW1wbGUuIEl0IGlzIHdoZXJlIHlvdSdsbCBmaW5kIHRoZSBgQXBwbGljYXRpb25JZGAgYW5kIGBSZWRpcmVjdFVybGAgZm9yIHlvdXIgTmF0aXZlIEFwcCBSZWdpc3RyYXRpb24uXG5cbkZvciB0aGUgY29tcGxldGUgd2Fsa3Rocm91Z2ggb24gaG93IHRvIGVtYmVkIFBvd2VyQkkgaW50byB5b3VyIGFwcCwgZm9sbG93IHRoZXNlIHN0ZXBzOiBbXCJUdXRvcmlhbDogRW1iZWQgYSBQb3dlciBCSSByZXBvcnQsIGRhc2hib2FyZCwgb3IgdGlsZSBpbnRvIGFuIGFwcGxpY2F0aW9uIGZvciB5b3VyIGN1c3RvbWVyc1wiXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9wb3dlci1iaS9kZXZlbG9wZXIvZW1iZWQtc2FtcGxlLWZvci1jdXN0b21lcnM/V1QubWNfaWQ9cG93ZXJiaXNhbXBsZWFwcC1naXRodWItYnJhbWluKS5cblxuIyMjIEF6dXJlIEFEIEFwcCBSZWdpc3RyYXRpb25cblxuSW4gQXp1cmUgQUQsIGNyZWF0ZSBmb2xsb3cgdGhlIEFwcCBSZWdpc3RyYXRpb24gcHJvY2VzcyB0byBjcmVhdGUgYSAqKk5hdGl2ZSoqIEFwcGxpY2F0aW9uIFR5cGVcblxuIVtBcHAgUmVnaXN0cmF0aW9uXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81MTc5MDEzNi00MTM4ZmEwMC0yMTg5LTExZTktODEyYS1iNmNjZDFkMGM5ODEucG5nKVxuXG4jIyMgQXp1cmUgQUQgQXBwLCBBUEkgUGVybWlzc2lvbnNcblxuSW4gdGhlIE5hdGl2ZSBBcHBsaWNhdGlvbiBjcmVhdGVkIGluIEF6dXJlIEFELCBzZWxlY3QgKipBUEkgcGVybWlzc2lvbnMqKiBhbmQgYWRkIHBlcm1pc3Npb25zIGZvciBQb3dlciBCSSBTZXJ2aWNlc1xuXG4hW0FQSSBQZXJtaXNzaW9uc10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTg1OTgzNDEtYzQwMWJjODAtODIzMC0xMWU5LThhOTEtZTgxNThiODAxODE2LnBuZylcblxuIyMjIEFwcGxpY2F0aW9uSURcblxuVGhpcyBpcyB0aGUgdmFsdWUgeW91J2xsIHVzZSBmb3IgW2BBenVyZUNvbnN0YW50cy5BcHBsaWNhdGlvbklkYF0oL1Bvd2VyQklTYW1wbGVBcHAvQ29uc3RhbnRzL0F6dXJlQ29uc3RhbnRzLmNzKVxuXG4hW0FwcGxpY2F0aW9uSWRdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzUxNzkwMTM1LTQwYTA2MzgwLTIxODktMTFlOS04MGQzLWE0OTc0YjFkNmQ0NS5wbmcpXG5cbiMjIyBSZWRpcmVjdCBVUkxcblxuVGhpcyBpcyB0aGUgdmFsdWUgeW91J2xsIHVzZSBmb3IgW2BBenVyZUNvbnN0YW50cy5SZWRpcmVjdFVSTGBdKC9Qb3dlckJJU2FtcGxlQXBwL0NvbnN0YW50cy9BenVyZUNvbnN0YW50cy5jcylcblxuIVtSZWRpcmVjdFVybF0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTE3OTAxMzctNDEzOGZhMDAtMjE4OS0xMWU5LTljMGMtNWU2ODVmMWE5NzcxLnBuZylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5MDI0YWUzMy02YWU4LTQ3ZDUtODc4Ny0wYmVlOTMxZTRkMjIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTROVFUyTURNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5CbG9iU3RvcmFnZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyODMxMjlkYTMzMzQ3Y2Y4OTcyMTQ0NzAzZTE0ZTQ0ODU3YjZhOGVmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM056WTBOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlYWxtU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM0Y2U5NzQwOGNjNzc3YjFjNGIyN2QyMzI5NzhmMThkMzFlZThkYTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFJlYWxtU2FtcGxlQXBwXG5BbiBpT1MgYW4gQW5kcm9pZCBhcHAgY3JlYXRlZCBpbiBYYW1hcmluLkZvcm1zIHVzaW5nIFJlYWxtLmlvIGZvciBsb2NhbCBkYXRhIHN0b3JhZ2VcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlOTU0YjBhZi00YzJkLTQ5MDQtYTdhNS0wMDBjZjhhZjEwODAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09ETXdNelk1T0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlYWN0TmF0aXZlU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4NTZjNDQ1YjBjNWY5YjUxZGMxOTZmMzcxM2VjOTA1MmI5MDdiZWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFJlYWN0TmF0aXZlU2FtcGxlQXBwXG5cblRoaXMgYXBwIHdhcyBidWlsdCBpbiBSZWFjdCBOYXRpdmUgdG8gZGVtb25zdHJhdGUgaG93IHRvIGNyZWF0ZSBhIFhhbWFyaW4uVUlUZXN0IGZvciBhbiBhcHAgbWFkZSB1c2luZyBSZWFjdCBOYXRpdmUuXG5cblhhbWFyaW4uVUlUZXN0IHJlcXVpcmVzIHRoYXQgdGhlIENhbGFiYXNoIEZyYW1ld29yayBiZSBsaW5rZWQgdG8gdGhlIGlPUyBhcHAuIFRvIGFjY29tcGxpc2gsIGZvbGxvdyB0aGlzIFtUdXRvcmlhbDogTGluayBDYWxhYmFzaCBpbiBEZWJ1ZyBjb25maWddKGh0dHBzOi8vZ2l0aHViLmNvbS9jYWxhYmFzaC9jYWxhYmFzaC1pb3Mvd2lraS9UdXRvcmlhbCUzQS1MaW5rLUNhbGFiYXNoLWluLURlYnVnLWNvbmZpZykuXG5cbkluIHRoZSBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlLCBhZGQgYSB1bmlxdWUgaWRlbnRpZmllciB0byBlYWNoIG9uLXNjcmVlbiBlbGVtZW50IHVzaW5nIHRoZSBgYWNjZXNzaWJpbGl0eUxhYmVsYCBwcm9wZXJ0eS4gW0luIHRoaXMgZXhhbXBsZV0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9SZWFjdE5hdGl2ZVNhbXBsZUFwcC9ibG9iL21hc3Rlci9pbmRleC5pb3MuanMjTDMxKSB3ZSd2ZSBpZGVudGlmaWVkIG91ciBUZXh0SW5wdXQgYXMgXCJUZXh0SW5wdXRBY2Nlc3NpYmlsaXR5SWRcIi5cblxuSW4gdGhlIFhhbWFyaW4uVUlUZXN0LCB3ZSBjYW4gbm93IGNyZWF0ZSBhIGZpZWxkLCBgcmVhZG9ubHkgUXVlcnkgVGV4dElucHV0YCwgYW5kIGluaXRpYWxpemUgaXQgdXNpbmcgdGhlIHNhbWUgcHJvcGVydHk6IFtgVGV4dElucHV0ID0geCA9PiB4Lk1hcmtlZChcIlRleHRJbnB1dEFjY2Vzc2liaWxpdHlJZFwiKTtgXShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1JlYWN0TmF0aXZlU2FtcGxlQXBwL2Jsb2IvbWFzdGVyL1VJVGVzdHMvVUlUZXN0cy9UZXN0cy5jcyNMMjMpLiBOb3cgd2UgY2FuIFtpbnRlcmFjdCB3aXRoIHRoaXMgb24tc2NyZWVuIGVsZW1lbnQgaW4gb3VyIFhhbWFyaW4uVUlUZXN0XShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1JlYWN0TmF0aXZlU2FtcGxlQXBwL2Jsb2IvbWFzdGVyL1VJVGVzdHMvVUlUZXN0cy9UZXN0cy5jcyNMNDUpIVxuXG5BbGwgdGVzdHMgd2VyZSB2ZXJpZmllZCBpbiBYYW1hcmluIFRlc3QgQ2xvdWQsIGFuZCB0aGUgW3Jlc3VsdHMgYXJlIHZpZXdhYmxlIGhlcmVdKGh0dHBzOi8vdGVzdGNsb3VkLnhhbWFyaW4uY29tL3Rlc3QvY29tLW1pbm5pY2stc2FtcGxlcmVhY3RuYXRpdmVhcHBfM2RmNGQwOTktMTllOC00MTJlLTkwN2QtOGRjZTYzOTFhYmEwLykuXG5cbiMjIFRvRG86IEluc3RhbGwgTm9kZSBQYWNrYWdlcyBcbjEuIEluc3RhbGwgTm9kZS5qc1xuICAqIFtUdXRvcmlhbCBmb3IgV2luZG93cyBQQ10oaHR0cDovL2Jsb2cudGVhbXRyZWVob3VzZS5jb20vaW5zdGFsbC1ub2RlLWpzLW5wbS13aW5kb3dzKVxuICAqIFtUdXRvcmlhbCBmb3IgTWFjXShodHRwOi8vYmxvZy50ZWFtdHJlZWhvdXNlLmNvbS9pbnN0YWxsLW5vZGUtanMtbnBtLW1hYylcbjIuIE9wZW4gVGVybWluYWwgb24gTWFjIG9yIENtZCBvbiBXaW5kb3dzXG4zLiBOYXZpZ2F0ZSB0byB0aGUgcHJvamVjdCBkaXJlY3RvcnlcbiAgKiBFLmcuIGBjZCB+L1Byb2plY3RzL0dpdEh1Yi9SZWFjdE5hdGl2ZVNhbXBsZUFwcC9gXG40LiBJbnN0YWxsIE5vZGUgUGFja2FnZXNcbiAgKiBJbiB0aGUgY29tbWFuZC1saW5lIHV0aWxpdHksIGVudGVyIGBucG0gaW5zdGFsbGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NjFlYzc1Ny0wNzQyLTQ5ZjktOWUwMS03MmJlYzg1NWE0Y2YiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTBNalUyTkRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIjI0SG91clRpbWVQaWNrZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTc2YmQ0MWEyYzA5ZmU0MWU1OWJkZmY4YzcxNDEzZjY0ZGE3NTRiNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXhPVGM0TnpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNWQyNWVjMTc3MDNlNWZmNGFiNmM5MzYxMzc5MzVjZWIzN2RjY2ZmNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXpNREl5TkRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtc2VydmVybGVzcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNGM1YzU1ZTZiMjlhZGVkNTU3YTA4MDNkYjRhYjhkZjNhMmEzOGUyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTFNamc1TXpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlRleHRNb29kIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjllNjQzMWZiOWE4ZTMyZWNkZTBlMWQ5ZjAxMTYyMjhjOWEyNDViMWQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXpOVFkzT1RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGJwLXNlcnZlcmxlc3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2JlYzJiNmQxNTg1YTQ2ODk4ZTUwZWY0MGVlYmYxZjJlYTljZWNiMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTROVGt6TVRZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbG9yRXF1YWxzUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzRhNTBmMTRlNzg2NWM0ODZhMDlkN2I1MTgyYzBmMzg3YzU0ZWE1OSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUXhNRFEyTlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm9kZS1xcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkN2E2NmZjZDhmZmM4YzkwMmVhN2ZkNGE0ZTAzNjE5ZmJlNDM3NzhlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTRNRE0yTmpJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGhyZWUtdnVlLXBhdHRlcm4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiY2YwMDU5NWQ2ZmMzOTAxYzgxZDE0MmUyMDQ3NDU5OWI4MTE4NzBlZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qQTROVFUwT0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW4uRm9ybXMtTmFOLWlzLW5vdC1hLXZhbGlkLXZhbHVlLWZvci13aWR0aC1yZXByb2R1Y3Rpb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNWY0ZmZlZTg5ZTUxMjQ1NGMwYjQyMjE5MmQ1ZGE3ZWQzYmE4YTJiZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgWGFtYXJpbi5Gb3Jtcy1OYU4taXMtbm90LWEtdmFsaWQtdmFsdWUtZm9yLXdpZHRoLXJlcHJvZHVjdGlvblxuQSBYYW1hcmluLkZvcm1zIHNvbHV0aW9uIHRvIHJlcHJvZHVjZSBTeXN0ZW0uQXJndW1lbnRFeGNlcHRpb246IE5hTiBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3Igd2lkdGhcblxuUmVwcm9kdWN0aW9uIENvZGUgU25pcHBldCB0byBpbmR1Y2UgYFN5c3RlbS5Bcmd1bWVudEV4Y2VwdGlvbjogTmFOIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciB3aWR0aGBcblxuIyNSZXByb2R1Y3Rpb24gU3RlcHNcbiAxLiBEb3dubG9hZCBhbmQgb3BlbiBgTmFOUmVwcm9kdWN0aW9uLnNsbmAgaW4gWGFtYXJpbiBTdHVkaW9cbiAyLiBJbiB0aGUgU29sdXRpb24gRXhwbG9yZXIsIFJpZ2h0LWNsaWNrIG9uIGBOYU5SZXByb2R1Y3Rpb24uaU9TYCBhbmQgc2VsZWN0IGBTZXQgQXMgU3RhcnR1cCBQcm9qZWN0YFxuIDMuIEJ1aWxkLCBEZXBsb3ksIGFuZCBSdW4gdGhlIGFwcCBvbiBhbiBpT1MgMTAuMiBTaW11bGF0b3JcblxuIyNFcnJvclxuPlN5c3RlbS5Bcmd1bWVudEV4Y2VwdGlvbjogTmFOIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciB3aWR0aFxuXG4+WGFtYXJpbi5Gb3Jtcy5TaXplLlNpemUoZG91YmxlIHdpZHRoLCBkb3VibGUgaGVpZ2h0KSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuR2V0U2l6ZVJlcXVlc3QoZG91YmxlIHdpZHRoQ29uc3RyYWludCwgZG91YmxlIGhlaWdodENvbnN0cmFpbnQpIFhhbWFyaW4uRm9ybXMuVmlzdWFsRWxlbWVudC5NZWFzdXJlKGRvdWJsZSB3aWR0aENvbnN0cmFpbnQsIGRvdWJsZSBoZWlnaHRDb25zdHJhaW50LCBNZWFzdXJlRmxhZ3MgZmxhZ3MpIFhhbWFyaW4uRm9ybXMuU3RhY2tMYXlvdXQuQ29tcHJlc3NIb3Jpem9udGFsTGF5b3V0KFN0YWNrTGF5b3V0LkxheW91dEluZm9ybWF0aW9uIGxheW91dCwgZG91YmxlIHdpZHRoQ29uc3RyYWludCwgZG91YmxlIGhlaWdodENvbnN0cmFpbnQpIFhhbWFyaW4uRm9ybXMuU3RhY2tMYXlvdXQuQ29tcHJlc3NOYWl2ZUxheW91dChTdGFja0xheW91dC5MYXlvdXRJbmZvcm1hdGlvbiBsYXlvdXQsIFN0YWNrT3JpZW50YXRpb24gb3JpZW50YXRpb24sIGRvdWJsZSB3aWR0aENvbnN0cmFpbnQsIGRvdWJsZSBoZWlnaHRDb25zdHJhaW50KSBYYW1hcmluLkZvcm1zLlN0YWNrTGF5b3V0LkNhbGN1bGF0ZUxheW91dChTdGFja0xheW91dC5MYXlvdXRJbmZvcm1hdGlvbiBsYXlvdXQsIGRvdWJsZSB4LCBkb3VibGUgeSwgZG91YmxlIHdpZHRoQ29uc3RyYWludCwgZG91YmxlIGhlaWdodENvbnN0cmFpbnQsIGJvb2wgcHJvY2Vzc0V4cGFuZGVycykgWGFtYXJpbi5Gb3Jtcy5TdGFja0xheW91dC5MYXlvdXRDaGlsZHJlbihkb3VibGUgeCwgZG91YmxlIHksIGRvdWJsZSB3aWR0aCwgZG91YmxlIGhlaWdodCkgWGFtYXJpbi5Gb3Jtcy5MYXlvdXQuVXBkYXRlQ2hpbGRyZW5MYXlvdXQoKSBYYW1hcmluLkZvcm1zLkxheW91dC5PblNpemVBbGxvY2F0ZWQoZG91YmxlIHdpZHRoLCBkb3VibGUgaGVpZ2h0KSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuU2l6ZUFsbG9jYXRlZChkb3VibGUgd2lkdGgsIGRvdWJsZSBoZWlnaHQpIFhhbWFyaW4uRm9ybXMuVmlzdWFsRWxlbWVudC5TZXRTaXplKGRvdWJsZSB3aWR0aCwgZG91YmxlIGhlaWdodCkgWGFtYXJpbi5Gb3Jtcy5WaXN1YWxFbGVtZW50LnNldF9Cb3VuZHMoUmVjdGFuZ2xlIHZhbHVlKSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuTGF5b3V0KFJlY3RhbmdsZSBib3VuZHMpIFhhbWFyaW4uRm9ybXMuTGF5b3V0LkxheW91dENoaWxkSW50b0JvdW5kaW5nUmVnaW9uKFZpc3VhbEVsZW1lbnQgY2hpbGQsIFJlY3RhbmdsZSByZWdpb24pIFhhbWFyaW4uRm9ybXMuR3JpZC5MYXlvdXRDaGlsZHJlbihkb3VibGUgeCwgZG91YmxlIHksIGRvdWJsZSB3aWR0aCwgZG91YmxlIGhlaWdodCkgWGFtYXJpbi5Gb3Jtcy5MYXlvdXQuVXBkYXRlQ2hpbGRyZW5MYXlvdXQoKSBYYW1hcmluLkZvcm1zLkxheW91dC5PblNpemVBbGxvY2F0ZWQoZG91YmxlIHdpZHRoLCBkb3VibGUgaGVpZ2h0KSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuU2l6ZUFsbG9jYXRlZChkb3VibGUgd2lkdGgsIGRvdWJsZSBoZWlnaHQpIFhhbWFyaW4uRm9ybXMuVmlzdWFsRWxlbWVudC5TZXRTaXplKGRvdWJsZSB3aWR0aCwgZG91YmxlIGhlaWdodCkgWGFtYXJpbi5Gb3Jtcy5WaXN1YWxFbGVtZW50LnNldF9Cb3VuZHMoUmVjdGFuZ2xlIHZhbHVlKSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuTGF5b3V0KFJlY3RhbmdsZSBib3VuZHMpIFhhbWFyaW4uRm9ybXMuTGF5b3V0LkxheW91dENoaWxkSW50b0JvdW5kaW5nUmVnaW9uKFZpc3VhbEVsZW1lbnQgY2hpbGQsIFJlY3RhbmdsZSByZWdpb24pIFhhbWFyaW4uRm9ybXMuUGxhdGZvcm0uaU9TLlZpZXdDZWxsUmVuZGVyZXIuVmlld1RhYmxlQ2VsbC5MYXlvdXRTdWJ2aWV3cygpIFhhbWFyaW4uRm9ybXMuUGxhdGZvcm0uaU9TLkNlbGxUYWJsZVZpZXdDZWxsLkdldE5hdGl2ZUNlbGwoVUlUYWJsZVZpZXcgdGFibGVWaWV3LCBDZWxsIGNlbGwsIGJvb2wgcmVjeWNsZUNlbGxzLCBzdHJpbmcgdGVtcGxhdGVJZCkgWGFtYXJpbi5Gb3Jtcy5QbGF0Zm9ybS5pT1MuTGlzdFZpZXdSZW5kZXJlci5MaXN0Vmlld0RhdGFTb3VyY2UuR2V0Q2VsbChVSVRhYmxlVmlldyB0YWJsZVZpZXcsIE5TSW5kZXhQYXRoIGluZGV4UGF0aCkgVUlLaXQuVUlBcHBsaWNhdGlvbi5VSUFwcGxpY2F0aW9uTWFpbihpbnQsIHN0cmluZ1tdLCBpbnRwdHIsIGludHB0cikod3JhcHBlciBtYW5hZ2VkLXRvLW5hdGl2ZSkgVUlLaXQuVUlBcHBsaWNhdGlvbi5NYWluKHN0cmluZ1tdIGFyZ3MsIEludFB0ciBwcmluY2lwYWwsIEludFB0ciBkZWxlZ2F0ZSlVSUFwcGxpY2F0aW9uLmNzOjc5IFVJS2l0LlVJQXBwbGljYXRpb24uTWFpbihzdHJpbmdbXSBhcmdzLCBzdHJpbmcgcHJpbmNpcGFsQ2xhc3NOYW1lLCBzdHJpbmcgZGVsZWdhdGVDbGFzc05hbWUpVUlBcHBsaWNhdGlvbi5jczo2MyBNb25kYXlQdW5kYXlBcHAuaU9TLkFwcGxpY2F0aW9uLk1haW4oc3RyaW5nW10gYXJncylNYWluLmNzOjE3XG5cbiMjRW52aXJvbm1lbnRcblxuPT09IFhhbWFyaW4gU3R1ZGlvIEVudGVycHJpc2UgPT09XG5cblZlcnNpb24gNi4xLjUgKGJ1aWxkIDApXG5JbnN0YWxsYXRpb24gVVVJRDogM2FjOThhNjEtNjdhNy00MTFmLWIxMjQtMTk4MzNlYzlhNTE5XG5SdW50aW1lOlxuIC0gTW9ubyA0LjYuMiAobW9uby00LjYuMC1icmFuY2gvYWM5ZTIyMikgKDY0LWJpdClcbiAtIEdUSysgMi4yNC4yMyAoUmFsZWlnaCB0aGVtZSlcbiAtIFBhY2thZ2UgdmVyc2lvbjogNDA2MDIwMDE2XG5cbj09PSBOdUdldCA9PT1cblxuVmVyc2lvbjogMy40LjMuMFxuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS4wLjFcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IEFwcGxlIERldmVsb3BlciBUb29scyA9PT1cblxuWGNvZGUgOC4yLjEgKDExNzY2LjEpXG5CdWlsZCA4QzEwMDJcblxuPT09IFhhbWFyaW4uaU9TID09PVxuXG5WZXJzaW9uOiAxMC4zLjEuOCAoWGFtYXJpbiBFbnRlcnByaXNlKVxuSGFzaDogN2JlYWVmNFxuQnJhbmNoOiBjeWNsZTgteGlcbkJ1aWxkIGRhdGU6IDIwMTYtMTItMjAgMDI6NTg6MTQtMDUwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiA3LjAuMi40MiAoWGFtYXJpbiBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFuZG9ubS9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ0LjEgKEFQSSBsZXZlbCAxNilcblx0XHQ2LjAgKEFQSSBsZXZlbCAyMylcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblxuU0RLIFRvb2xzIFZlcnNpb246IDI1LjIuM1xuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI1LjAuMVxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI0LjAuM1xuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTAyXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEwMi1iMTQpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEwMi1iMTQsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluIEFuZHJvaWQgUGxheWVyID09PVxuXG5WZXJzaW9uOiAwLjYuNVxuTG9jYXRpb246IC9BcHBsaWNhdGlvbnMvWGFtYXJpbiBBbmRyb2lkIFBsYXllci5hcHBcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5WZXJzaW9uOiAyLjEwLjAuMTIwIChYYW1hcmluIEVudGVycHJpc2UpXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS4wLjAuMFxuSGFzaDogMWYzMDY3ZFxuQnJhbmNoOiBtYXN0ZXJcbkJ1aWxkIGRhdGU6IDExLzE1LzIwMTYgMToxMzo1OSBQTVxuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDYwMTA1MDAwMFxuR2l0IHJldmlzaW9uOiA3NDk0NzE4ZTEyN2FmOWVhZWM0NWEzYmQ2MjgyZDNkYTkyNzQ4OGJkXG5CdWlsZCBkYXRlOiAyMDE3LTAxLTE3IDEwOjMxOjAxLTA1XG5YYW1hcmluIGFkZGluczogYzkyZDA2MjZkMzQ3YWFhMDI4Mzk2ODllYWFjMjk2MWQyNGM5ZjQ0NlxuQnVpbGQgbGFuZTogbW9ub2RldmVsb3AtbGlvbi1jeWNsZThcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjEyLjNcbkRhcndpbiBodHRwczovL2JyYW5kb25tLW1hYy5ndWVzdC5jb3JwLm1pY3Jvc29mdC5jb206ODAvP1dULm1jX2lkPXhhbWFyaW4uZm9ybXNuYW5pc25vdGF2YWxpZHZhbHVlZm9yd2lkdGhyZXByb2R1Y3Rpb24tZ2l0aHViLWJyYW1pbiAxNi40LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE2LjQuMFxuICAgIFRodSBEZWMgMjIgMjI6NTM6MjEgUFNUIDIwMTZcbiAgICByb290OnhudS0zNzg5LjQxLjN+My9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuPT09IEVuYWJsZWQgdXNlciBpbnN0YWxsZWQgYWRkaW5zID09PVxuXG5YYW1hcmluIEluc3BlY3RvciAxLjAuMC4wXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjNGU3ODg5Zi0zZjFmLTRhMzMtODA0Yi0yMDg1ZDA3ZjYxYWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWXpPVEUzTlRnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctbWF0ZXJpYWwtc3RhcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiZDJjZTNhZTM3MjNiMGMwYWI5NGZkYzg1YjgwYWU2NGM5Y2IwM2YxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qQTVOek01T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbU1lZGlhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI3MGMxZDFhMjJhZDI2OTQyYzcyOTRlOTAyNGFkNjZjMjM0N2FiZWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFhhbU1lZGlhXG5YYW1hcmluLmlPUyBhbmQgWGFtYXJpbi5BbmRyb2lkIGFwcCB0byBkaXNwbGF5IG1laWRhIGZyb20gWW91VHViZSBhbmQgVmltZW9cblxuIVtdKC4vRGVtby9pT1NfWGFtTWVkaWEuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjA5YWJhNWUwLTY4ODktNGRhYS04N2VlLTI2NTA0ZTRkNmI5NCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWXpPVEl4TmpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZG9wcGVsZ2FuZ2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgzYjgyOThmMTU1MWZjNzNmZWIwODlhOTIxNDJiMjUyYzA1MGViYjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qZ3pOamd4TXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVSTEVuY29kZWRGb3JtQnVnIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI5OTVkMmQwNWNjZDhlNjdhMzFhMjczOTVkYTZkOTJmOTZkNzBkODkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFVSTEVuY29kZWRGb3JtQnVnXG5BIFhhbWFyaW4uRm9ybXMgc29sdXRpb24gdG8gcmVwcm9kdWNlIGFuIEh0dHBDbGllbnQgcHJvYmxlbSBleHBlcmllbmNlZCBpbiBDeWNsZSA5XG5cblRoaXMgY29kZSB1c2VzIGBIdHRwQ2xpZW50LlBvc3RBc3luY2AgdG8gc3VibWl0IGBIdHRwQ29udGVudGAgY29udGFpbmluZyBgRm9ybVVybEVuY29kZWRDb250ZW50YCB0byBhIHdlYnNpdGUuIElmIGBIdHRwQ2xpZW50LlBvc3RBc3luY2AgaXMgc3VjY2Vzc2Z1bCwgdGhlIEhUTUwgcmVzcG9uc2UgYENvbnRlbnRgIHNob3VsZCBjb250YWluIHRoZSBzdHJpbmcgYENvcnJlY3QhYC5cblxuIyMgV2hlbiBEb2VzIFRoZSBFcnJvciBPY2N1cj9cbiAtIFhhbWFyaW4uaU9TIG9uIEN5Y2xlIDksIHVzaW5nIGBOU1VybFNlc3Npb25gIGZvciB0aGUgSHR0cENsaWVudCBJbXBsZW1lbnRhdGlvblxuICAgLSBDeWNsZSA5IEJldGEgUmVsZWFzZSBhcyBvZiAyMiBGZWJydWFyeSAyMDE3XG4gXG4jIyBXaGVuIERvZXMgdGhlIEVycm9yICoqTm90KiogT2NjdXI/XG4gLSBYYW1hcmluLmlPUyBvbiBDeWNsZSA4XG4gICAtIEN5Y2xlIDggU3RhYmxlIFJlbGVhc2UgYXMgb2YgMjIgRmVicnVhcnkgMjAxN1xuIC0gWGFtYXJpbi5pT1Mgb24gQ3ljbGUgOSwgdXNpbmcgYE1hbmFnZWQgKGRlZmF1bHQpYCBmb3IgdGhlIEh0dHBDbGllbnQgSW1wbGVtZW50YXRpb25cbiAgICAtIEN5Y2xlIDkgQmV0YSBSZWxlYXNlIGFzIG9mIDIyIEZlYnJ1YXJ5IDIwMTdcbiAtIFhhbWFyaW4uQW5kcm9pZCBvbiBDeWNsZSA5IHVzaW5nIGBBbmRyb2lkQ2xpZW50SGFuZGxlcmAgZm9yIHRoZSBIdHRwQ2xpZW50IEltcGxlbWVudGF0aW9uXG4gICAgLSBDeWNsZSA5IEJldGEgUmVsZWFzZSBhcyBvZiAyMiBGZWJydWFyeSAyMDE3XG4gLSBYYW1hcmluLkFuZHJvaWQgb24gQ3ljbGUgOSB1c2luZyBgTWFuYWdlZCAoSHR0cENsaWVudEhhbmRsZXIpYCBmb3IgdGhlIEh0dHBDbGllbnQgSW1wbGVtZW50YXRpb25cbiAgICAtIEN5Y2xlIDkgQmV0YSBSZWxlYXNlIGFzIG9mIDIyIEZlYnJ1YXJ5IDIwMTdcbiAtIENyZWF0aW5nIHRoZSBgUG9zdGAgcmVxdWVzdCB1c2luZyBbUG9zdE1hbl0oaHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20pLCBbbGluayB0byBwb3N0bWFuIGNvbGxlY3Rpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVVJMRW5jb2RlZEZvcm1CdWcvYmxvYi9tYXN0ZXIvTW9uZGF5UHVuZGF5LnBvc3RtYW5fY29sbGVjdGlvbilcbiBcblxuIyMgU3RlcHMgdG8gcmVwcm9kdWNlIGJ1ZzpcbiAxLiBEb3dubG9hZCBhbmQgb3BlbiBVUkxFbmNvZGVkRm9ybUJ1Zy5zbG4gaW4gWGFtYXJpbiBTdHVkaW8gdXNpbmcgdGhlIEVudmlyb25tZW50IENvbmZpZ3VyYXRpb24gYmVsb3dcbiAyLiBTZXQgdGhlIFVSTEVuY29kZWRGb3JtQnVnLmlPUyBhcyB0aGUgU3RhcnR1cCBQcm9qZWN0XG4gMy4gQnVpbGQsIERlcGxveSBhbmQgcnVuIFVSTEVuY29kZWRGb3JtQnVnLmlPUyBvbiBhIERldmljZSBvciBpT1MxMCBTaW11bGF0b3JcbiA0LiBDbGljayB0aGUgU3VibWl0IEJ1dHRvblxuIDUuIGBEaXNwbGF5QWxlcnRgIHNob3dzIGBGYWlsZWRgIGJlY2F1c2UgdGhlIEhUTUwgUmVzcG9uc2UgZG9lc24ndCBjb250YWluIGBDb3JyZWN0IWBcbiBcbiMjIFN0ZXBzIHRvIHJ1biBwcm9ncmFtIHN1Y2Nlc3NmdWxseVxuXG4gMS4gRG93bmxvYWQgYW5kIG9wZW4gVVJMRW5jb2RlZEZvcm1CdWcuc2xuIGluIFhhbWFyaW4gU3R1ZGlvIHVzaW5nIHRoZSBFbnZpcm9ubWVudCBDb25maWd1cmF0aW9uIGJlbG93XG4gMi4gUmlnaHQtY2xpY2sgVVJMRW5jb2RlZEZvcm1CdWcuaU9TLCBzZWxlY3QgT3B0aW9ucyAtLT4gaU9TIEJ1aWxkXG4gMy4gQ2hhbmdlIHRoZSBIdHRwQ2xpZW50IEltcGxlbWVudGF0aW9uIHRvIE1hbmFnZWQgKGRlZmF1bHQpXG4gNC4gQ2xpY2sgT0sgdG8gYWNjZXB0IGNoYW5nZXNcbiA1LiBTZXQgdGhlIFVSTEVuY29kZWRGb3JtQnVnLmlPUyBhcyB0aGUgU3RhcnR1cCBQcm9qZWN0XG4gNi4gQnVpbGQsIERlcGxveSBhbmQgcnVuIFVSTEVuY29kZWRGb3JtQnVnLmlPUyBvbiBhIERldmljZSBvciBpT1MxMCBTaW11bGF0b3JcbiA3LiBDbGljayB0aGUgU3VibWl0IEJ1dHRvbiBcbiA4LiBEaXNwbGF5QWxlcnQgc2hvd3MgU3VjY2Vzc1xuIFxuXG4jI0Vudmlyb25tZW50XG49PT0gWGFtYXJpbiBTdHVkaW8gRW50ZXJwcmlzZSA9PT1cblxuVmVyc2lvbiA2LjIgKGJ1aWxkIDE4MTIpXG5JbnN0YWxsYXRpb24gVVVJRDogM2FjOThhNjEtNjdhNy00MTFmLWIxMjQtMTk4MzNlYzlhNTE5XG5SdW50aW1lOlxuIC0gTW9ubyA0LjguMCAobW9uby00LjguMC1icmFuY2gvOWFjNWJmMikgKDY0LWJpdClcbiAtIEdUSysgMi4yNC4yMyAoUmFsZWlnaCB0aGVtZSlcbiAtIFBhY2thZ2UgdmVyc2lvbjogNDA4MDAwNDg5XG5cbj09PSBOdUdldCA9PT1cblxuVmVyc2lvbjogMy41LjAuMFxuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS4xLjk5XG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIFByb2ZpbGVyLmFwcC9Db250ZW50cy9NYWNPUy9YYW1hcmluIFByb2ZpbGVyXG5cbj09PSBYYW1hcmluLkFuZHJvaWQgPT09XG5cblZlcnNpb246IDcuMS4wLjM1IChYYW1hcmluIEVudGVycHJpc2UpXG5BbmRyb2lkIFNESzogL1VzZXJzL2JyYW5kb25tL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vYW5kcm9pZC1zZGstbWFjb3N4XG5cdFN1cHBvcnRlZCBBbmRyb2lkIHZlcnNpb25zOlxuXHRcdDQuMSAoQVBJIGxldmVsIDE2KVxuXHRcdDcuMCAoQVBJIGxldmVsIDI0KVxuXHRcdDcuMSAoQVBJIGxldmVsIDI1KVxuXG5TREsgVG9vbHMgVmVyc2lvbjogMjUuMi41XG5TREsgUGxhdGZvcm0gVG9vbHMgVmVyc2lvbjogMjUuMC4zXG5TREsgQnVpbGQgVG9vbHMgVmVyc2lvbjogMjUuMC4yXG5cbkphdmEgU0RLOiAvdXNyXG5qYXZhIHZlcnNpb24gXCIxLjguMF8xMDJcIlxuSmF2YShUTSkgU0UgUnVudGltZSBFbnZpcm9ubWVudCAoYnVpbGQgMS44LjBfMTAyLWIxNClcbkphdmEgSG90U3BvdChUTSkgNjQtQml0IFNlcnZlciBWTSAoYnVpbGQgMjUuMTAyLWIxNCwgbWl4ZWQgbW9kZSlcblxuQW5kcm9pZCBEZXNpZ25lciBFUEwgY29kZSBhdmFpbGFibGUgaGVyZTpcbmh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL0FuZHJvaWREZXNpZ25lci5FUExcblxuPT09IFhhbWFyaW4gQW5kcm9pZCBQbGF5ZXIgPT09XG5cblZlcnNpb246IDAuNi41XG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIEFuZHJvaWQgUGxheWVyLmFwcFxuXG49PT0gWGFtYXJpbiBJbnNwZWN0b3IgPT09XG5cblZlcnNpb246IDEuMS4xLjBcbkhhc2g6IDYwN2YxYmFcbkJyYW5jaDogMS4xLXJlbGVhc2VcbkJ1aWxkIGRhdGU6IFRodSwgMTYgRmViIDIwMTcgMTg6NTc6MzkgR01UXG5cbj09PSBBcHBsZSBEZXZlbG9wZXIgVG9vbHMgPT09XG5cblhjb2RlIDguMi4xICgxMTc2Ni4xKVxuQnVpbGQgOEMxMDAyXG5cbj09PSBYYW1hcmluLk1hYyA9PT1cblxuVmVyc2lvbjogMy4wLjAuMzkxIChYYW1hcmluIEVudGVycHJpc2UpXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTAuNC4wLjEyMSAoWGFtYXJpbiBFbnRlcnByaXNlKVxuSGFzaDogOWQ2ZTFhYlxuQnJhbmNoOiBjeWNsZTlcbkJ1aWxkIGRhdGU6IDIwMTctMDItMTAgMTI6MTA6NTEtMDUwMFxuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDYwMjAwMTgxMlxuR2l0IHJldmlzaW9uOiAzM2U2OWU1ZGYzYzYyYzJjNDA4NGNmMWI4ZGUyNmZkYTkzYzVlODQzXG5CdWlsZCBkYXRlOiAyMDE3LTAyLTA5IDEyOjE4OjA5LTA1XG5YYW1hcmluIGFkZGluczogOTg0ZjZiZDRlNDkxNDkwZDFjZGYzNzM1MjU5NDMwMGRhYjJiMTU5N1xuQnVpbGQgbGFuZTogbW9ub2RldmVsb3AtbGlvbi1jeWNsZTlcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjEyLjNcbkRhcndpbiBicmFuZG9ubS1tYWMubG9jYWwgMTYuNC4wIERhcndpbiBLZXJuZWwgVmVyc2lvbiAxNi40LjBcbiAgICBUaHUgRGVjIDIyIDIyOjUzOjIxIFBTVCAyMDE2XG4gICAgcm9vdDp4bnUtMzc4OS40MS4zfjMvUkVMRUFTRV9YODZfNjQgeDg2XzY0XG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlNzEyZWQ1Yy0xY2Q2LTQxMjctOTg2Mi1mYzFjOTYzNTM2MGUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTVOak0wTVRnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVucyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkYzc5ZDZhODE3NmFlYTAyOTczMzM2MjJhN2UzZmVlODNmZjNhYTRmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9EVTFNVFF4T0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbU1hcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjYWQ0NzNmZWY5YWIyYTk1ODE0MWQ0Zjc5NjgyYWY5OWZkYWNlNGMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBYYW1NYXBcblxuWGFtTWFwIGlzIGEgc2FtcGxlIGFwcCB0aGF0IGRlbW9uc3RyYXRlcyB0aGUgZm9sbG93aW5nIHVzaW5nIE1LTWFwVmlldzpcbiAtIFBlcmZvcm0gYW4gYW5pbWF0ZWQgem9vbSB0byBhIGxvY2F0aW9uXG4gLSBBZGQgYSBQSU4gdG8gYSBtYXBcbiAtIERpc3BsYXkgdGhlIFBJTuKAmXMgVGl0bGUgcHJvZ3JhbW1hdGljYWxseSBcbiAtIFRyYWNrIGEgdXNlcuKAmXMgbG9jYXRpb25cblxuIVtYYW1NYXAgRGVtb10oLi9EZW1vcy9EZW1vLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NDQ0ZTAxMS02NGMzLTQ3NzQtOGZjZi00ODkyOGNmNzY0M2UiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qYzJNVEV5TXpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHJvcGVydHktc3VnZ2VzdGVyLXVpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY0ZTM1YjYxY2ZhNzhmZDQxZDk0OTkwNTc0Yzc5Mjc4YTlmYWZmYmMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTRPVGszTWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbUNvbnZlcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4M2I2NzNkZTFmZWVjMGY0YTUyNzczYzU4ODkxNjM2ZTBiMGVjZTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiMgWGFtQ29udmVydGVyXG5BbiBpT1MgYW5kIEFuZHJvaWQgYXBwIGxldmVyYWdpbmcgW1hhbWFyaW4uRXNzZW50aWFscy5Vbml0Q29udmVydGVyXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS94YW1hcmluL2Vzc2VudGlhbHMvdW5pdC1jb252ZXJ0ZXJzP1dULm1jX2lkPXhhbWNvbnZlcnRlci1naXRodWItYnJhbWluKSB0byBjb252ZXJ0IHVuaXRzIG9mIExlbmd0aCwgTWFzcyBhbmQgVGVtcGVyYXR1cmVcblxufCBBbmRyb2lkICAgICAgfCBpT1MgfFxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCAhW10oLi9EZW1vcy9BbmRyb2lkQ29udmVydGVyRGVtby5naWYpfCAhW10oLi9EZW1vcy9pT1NDb252ZXJ0ZXJEZW1vLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwMTNmN2UwMi1jMDQ0LTQ3YWUtOWU0ZC1hYTM2NDkyOGNlZWEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZ3pOams1TVRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2Vla2x5LXJlYWRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImRiZDJhMjkxMjFmZmVhZjcyZmE3M2ZkODY3MTQ1YTYxZGViZWYxYTQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1ETXhOVGszTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbVNwZWFrIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBlZmVmN2RjYWU0NmU2MmMxMjIxYzBkNDkyMWMxMjU2ODExZTIzYTkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBYYW1TcGVha1xuXG5YYW1TcGVhayBhbGxvd3MgeW91IHRvIHRha2UgYSBwaG90byBvZiB0ZXh0IGFuZCB0aGUgYXBwIHdpbGwgZGljdGF0ZSBpdCBhbG91ZC5cblxuIyMgQWJvdXRcblxuWGFtU3BlYWsgaXMgYW4gaU9TIGFuZCBBbmRyb2lkIGFwcCB0aGF0IHdpbGwgZGljdGF0ZSB0ZXh0IGZyb20gYSBwaG90by5cblxuV2UgYXJlIGxldmVyYWdpbmcgW01pY3Jvc29mdCBDb2duaXRpdmUgU2VydmljZXNdKGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vY29nbml0aXZlLXNlcnZpY2VzP1dULm1jX2lkPXhhbXNwZWFrLWdpdGh1Yi1icmFtaW4pIHRvIHBlcmZvcm0gT3B0aWNhbCBDaGFyYWN0ZXIgUmVjb2duaXRpb24gKE9DUikgYW5kIFNwZWxsIENoZWNrLlxuXG4jIyBUb0RvXG5cblRvIGFjY2VzcyB0aGUgTWljcm9zb2Z0IENvZ2luaXRpdmUgU2VydmljZXMgQVBJIGZyb20gdGhpcyBhcHAsIHNpZ24gdXAgZm9yIGEgW2ZyZWUgQ29tcHV0ZXIgVmlzaW9uIEFQSSBLZXldKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9mcmVlL2FpLz91dG1fc291cmNlPWNoYW5uZWw5JnV0bV9tZWRpdW09ZGVzY3JpcHRpb25saW5rcyZ1dG1fY2FtcGFpZ249ZnJlZWFjY291bnQmV1QubWNfaWQ9eGFtc3BlYWstZ2l0aHViLWJyYW1pbikgJiBhIFtmcmVlIEJpbmcgU3BlbGwgQ2hlY2sgQVBJIEtleV0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvYWkvP3V0bV9zb3VyY2U9Y2hhbm5lbDkmdXRtX21lZGl1bT1kZXNjcmlwdGlvbmxpbmtzJnV0bV9jYW1wYWlnbj1mcmVlYWNjb3VudCZXVC5tY19pZD14YW1zcGVhay1naXRodWItYnJhbWluKSBhbmQgaW5zZXJ0IGl0IHRvIHRoZSBjb2RlIFtoZXJlXSguL1NvdXJjZS9YYW1TcGVhay9Db25zdGFudHMvQ29nbml0aXZlU2VydmljZXNDb25zdGFudHMuY3MjTDgpLlxuXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvWGFtU3BlYWsvWGFtU3BlYWtHaWYuZ2lmP3Jhdz10cnVlKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjZkNjI1OWQ5LTgyMWEtNDNiMy1hOTAwLWQ2YzEyOGQ0YjZlNyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzJNekl4T1RjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZG9wcGVsZ2FuZ2VyLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1YmJmNmJmMjMyZGU5ZGUyNjdhYzM1MmU2OGNhY2QyODA2ODFlMWFjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpORGc0TkRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hanMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzJkYTMwZTk2ZDBjNmE0OTNlYzVmNzYwNTlkOWU4M2Q3ZDhjNWQxMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1EWTVOVFUxTlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldpZ2dsZUFuaW1hdGlvbnMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDI5NWFhMzkzNWVjZjc2YWQ3ZjEyOTUxZWI3NDI2MjRhYzUzMmY1MCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgV2lnZ2xlQW5pbWF0aW9uc1xuQSBYYW1hcmluLmlPUyBhbmQgYSBYYW1hcmluLkFuZHJvaWQgc2FtcGxlIGFwcCBkZW1vbnN0cmF0aW5nIGhvdyB0byBpbWl0YXRlIGEgd2lnZ2xlIGFuaW1hdGlvblxuXG4hW10oLi9EZW1vL0FuZHJvaWREZW1vLmdpZilcbiFbXSguL0RlbW8vaU9TRGVtby5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNWNjNmU2NTktMTBmYS00OWY2LThkMDgtNjZmYzVhOTBmZDVmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXdOVFU0TURNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1zbXRoIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM2ZWMwNDhhMzg4ODViMWVhNWM5NTAwODI4NmQxNmQ1NzdjM2NjZTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1Ea3dPVE16TXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkV4cGFuZGFibGVMaXN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNhMTc1MDA5MWU0MjM1N2Q3MTY2ZDkwOTg5YzYxZDRiMTBhODJiNTciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBFeHBhbmRhYmxlTGlzdFxuQSBYYW1hcmluLmlPUyBhbmQgWGFtYXJpbi5BbmRyb2lkIGFwcCBkZW1vbnN0cmF0aW5nIGhvdyB0byBjcmVhdGUgYW4gRXhwYW5kYWJsZSBMaXN0XG5cbiFbXSguL0RlbW9zL0FuZHJvaWREZW1vLmdpZilcbiFbXSguL0RlbW9zL0V4cGFuZGFibGVMaXN0aU9TLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjODMwNzY0ZS1mY2IxLTQxYTgtOWQxZC03OWVhMDA1ZGEwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1qSXlOekE1TVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvc21vc0RiU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjZmYjY1MGVlNGFjNzIzNmQ2OTE3MjM2ZjE1ZjQwMWZlYzBlYzA1NDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBDb3Ntb3NEYlNhbXBsZUFwcFxuXG5BIFhhbWFyaW4uaU9TIGFuZCBYYW1hcmluLkFuZHJvaWQgYXBwIGJ1aWx0IHVzaW5nIFhhbWFyaW4uRm9ybXMgdGhhdCB1dGlsaXplcyBhIFtDb3Ntb3MgREIgQmFja2VuZF0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvY29zbW9zLWRiL21vYmlsZS1hcHBzLXdpdGgteGFtYXJpbj9XVC5tY19pZD1jb3Ntb3NkYnNhbXBsZWFwcC1naXRodWItYnJhbWluKS5cblxuSXQgd2FzIGFsc28gd2FzIGZlYXR1cmVkIG9uIFtUaGUgWGFtYXJpbiBTaG93LCBTY2FsYWJsZSArIFNlY3VyZSBEYXRhIHdpdGggQ29zbW9zREIgZm9yIE1vYmlsZV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbS9TaG93cy9YYW1hcmluU2hvdy9TY2FsYWJsZS0tU2VydmljZS1EYXRhLXdpdGgtQ29zbW9zREItZm9yLU1vYmlsZT9XVC5tY19pZD1jb3Ntb3NkYnNhbXBsZWFwcC1naXRodWItYnJhbWluKS5cblxuWyFbVGhlIFhhbWFyaW4gU2hvd10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTc3MTcwOTItNGI0NzExODAtNzYyZi0xMWU5LTllZTctYTVlOWI2NmJiMzg5LnBuZyldKGh0dHBzOi8vY2hhbm5lbDkubXNkbi5jb20vU2hvd3MvWGFtYXJpblNob3cvU2NhbGFibGUtLVNlcnZpY2UtRGF0YS13aXRoLUNvc21vc0RCLWZvci1Nb2JpbGU/V1QubWNfaWQ9Y29zbW9zZGJzYW1wbGVhcHAtZ2l0aHViLWJyYW1pbilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyOTBiNmM1Ni00NDJjLTRlYTMtOWYyNi1kMDQ2YjczNTFmMjAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qazRNakUzTmpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNmNDg2YjEwYjBjZDAxMjZjMjI2NjZjZjJjMGQxMTQ0ODBiY2ZlMTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16QXlOVFU0TURNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkN1c3RvbVNsaWRlckNvbG9yIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE5M2IxOGQzMzA4N2FiOWMwMWFjZmRjM2E3OWI2NzE4ZjQxMzc1N2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXlPVGN6TmpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVwcGllcy1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZGZkYWExNmM0MWQ3OGY3NjA1OGVjYjI5MTQ0MzcyNjk5ZWNjMGI5MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16STROelF6TnpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hLXBicCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzZTU5ODViMWFjODlkNDVlNGZmZTVkZTJkODE0Y2E1NmFkMTY0ZmJmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RTVNRE0yTmpnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlvdGNvcmUtc21hcnQtZGV2aWNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwYmE1MTE3NWRlNmQ4NWEyOGNlZjA3ZjdmNzBlM2VmNzI4YTBlMjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TXlOelkxTlRRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk11bHRpcGxlVmlld01vZGVsU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ2NGU4MWE1NjdmMWNiZTk2ZjMyNDM1Yzk2OWY0ZDIxOGNhNTRkMTMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16STROelkwT1RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hY28uZ2l0aHViLmlvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdiOGJiYWI2YjkxMGRhOGVmMzcxNTFlYmE4ZWZiMTkzMzRiNmVkMDAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UTBOVEV4TXpJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkxpc3RWaWV3V2l0aEVudHJ5IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ2MTMyOTg4MDZkNDQ2ZTgyMmYwMTRkZWMyOGYyNzlhMjViYzVmNmIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TXlOekEyTmpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaGVsbG8tZHVyYWJsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiMzE3NjllNGE2NzU2Y2RhNDQ2ZDM4ZjdiZTRhNTFhMWY5MjBiN2UzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek9ESTJNekkxIiwKICAgICJvd25lciI6ICJzaW1vbmFjbyIsCiAgICAibmFtZSI6ICJXaW5DYWxlbmRhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZDI4YjhlNTIyYmNmMTJhMTRmMWZmNWJmNDkzMjlmZWY3ZDRlODkyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiaW5pdGlhbCBjb21taXRcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5NTJmNDg5OS00ZDIxLTRhZDYtOGQ5Ny0xZjBkOGQ1MjI5YTkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UTJPREUxTkRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1vYmlsZUFwcHNPZlRvbW9ycm93LUxhYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4MGQ2MWZmZDkwOWViZmMxNTRlNmNhMzkzZmY5NWNhNmVlZjBkZDkxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXhPVEF6T1RrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGFnZS10cmFuc2l0aW9ucy10cmF2ZWxhcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTY0Yzc5ZGMzOGIwMzUwMzNlM2E0YzA4OGZjZTI3M2Q5Yzc4ODE1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16WXpPVEF6TVRjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Jb1RXb3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxNjZhZmQ1NzBlODlhNjA0NDU0OGU4MTQ2NGZiZDRkZWMzMWEwMWI4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16ZzRNREEwTnpnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJ4VUlPblByb3BlcnR5Q2hhbmdlZFJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImM0Nzc4M2FlMWIzNDJjOTc2NTI4ZTgzM2FhNjYxZDc4ZTIwMzA2ZjIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXlOVGsxT1RRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYW5ndWxhci13b3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ZjMwNzY2MjRhZWY2Njg3ODY5MDMwYjIwYjFhNjVkNDBiYjljYjU3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ERXpOakl4TXpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlRleHRNb29kX1R3aWxpb0Jsb2ciLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiY2RmMDAwYTRiZjQyYWVlYWU1YTNkNzQ4NTU2ZDBlYzNlM2E0NmQ0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXpNRGswT0RVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGxhY2VzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5MDM5MmYxYjQ5MGNhNWY3OTQ2NGJiY2Q4NDI5YjdlODBiZjEzMDEyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16VXhPRGszTmpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYWR2YW5jZWQtcHdhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjJkOTI1OGIwMWY0MmU3MWMzYmM4MzRkYjdhMGFhOTljNGEyZTlhYjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXdOakF3TmpFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5TZW50cnlBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjYyNDE5YjNhOWI5ZmQ4OTFhN2MyNTdiNGQ0N2U5NTI0MTRkMzVhYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16VXpNakUwTURjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVzaC1ub3RpZmljYXRpb25zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE2NjZlZjUwMjcyYTFkNGYxNzE3MmE1NTEyNTBhMzllMzlmMTM4OTIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXpOVE00TlRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFjY2VsZXJvbWV0ZXJBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTc2MGIwYjc0ZGQxMTkwZjkyMDBiMjM5NGZkZDUwOTM5NGY3YjIyYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16WXhOamt3TWpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibG9uZG9ub2h0ZWFtYXdlc29tZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlOTlkYmY3ZDc5ZjMwYzQ4OGVmZTExOWE1OTBlMDRjZjczNTI1OTI4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5Ea3dORE01TnprPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImF6dXJlLWZvci1kZXZlbG9wZXJzLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI0NTE5Y2I4Yzc1YTcyZWUyNjZiNWM0MzNjZDk2ODUyM2Q4YzlmMjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTFPREk1TURBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdsaWRlWF9Ib3Jpem9udGFsT3B0aW9uc19SZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MWJhMmQxNWUwZjBmOTFlNjU0NDA5ODQ0NzUwMDBiZDBhZGVjMTQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16a3lOalEzTWpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZnVuY3Rpb25zLWJhc2UtYXJtLXRlbXBsYXRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImM2NGQ3YTZmZTBmM2NhMmMzYjRkZTZiYjkxYzM2ZWM1MDZmOWQxMDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXpORGsxTlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmlrYml0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImVmMzJmNWI5NWIyNzhmMTRmZGY4MjRlMDExYjEzYWFhYWU1NjE4YjgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qUTVORGsyTXpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YkV4cGxvcmVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdmZWE0MDkyNjM4ZjBlODEwNzFlZTk5NTZhMzliMGUxMWQxZTEwZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESTBORFkyTXpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidm90aW5nLWFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYmNjOTlmOGMzODgzNWQwYmJjM2JiYTc2MmQ0YmU3YmRlMzI4YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qWXpOall6T0RBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YlhhbWFyaW4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmM0YjNlNjQ5YTY2ZTNjODY2MzQ5ZmIxNTJjOGM0OGNhZmMwZDU0MyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EWTJOamd6TmprPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibGF5b3V0LXRyYW5zaXRpb24tZ3JvdXAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDFlODA0M2JkZjg3Y2E2YWMwZDZjZDQzYWMwZDgzY2Q1NDBiNDg1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qYzRNVE01TXpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImNzaGFycC13b3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzZWFlMWQ1NGIxOGJkZmZiZmZiMjQyZWJjNGM0OGFlMTkwMjk0YTYxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UY3lORGMxTVE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZGV2aXQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWMxNjEyYjNlYjJkMzM3MzlhZTIxMThiNzcyNzI4OGFmNGZiMDE4MCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQW5ndWxhciAyIERlbW8gZnJvbSBkZXZpdCAyMDE2XG5cbkNsb25lIGl0IGFuZCBydW4gaXQhXG5cbmBgYGJhc2hcbm5wbSBpbnN0YWxsXG5ucG0gc3RhcnRcbmBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYzIzOTYwOTUtMDk3ZS00ZDAxLTg1N2ItNGU1N2I3NTQ5NTU3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5qQTBNamcyTVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtcy1Nb2JpbGVDZW50ZXJQdXNoLUFwcExpbmtzLVJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY5NDg0ZjlkMzBiMTI1MTI1Yjk3YmNkMzkxMDFhN2U2NzgxNmM1NzciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFhhbWFyaW5Gb3Jtcy1Nb2JpbGVDZW50ZXJQdXNoLUFwcExpbmtzLVJlcHJvXG5BIHJ1bnRpbWUgY3Jhc2ggb2NjdXJzIHdoZW4gdGhlIE1vYmlsZSBDZW50ZXIgUHVzaCBTREsgYW5kIHRoZSBYYW1hcmluLkZvcm1zIEFwcCBMaW5rcyBTREsgYXJlIGFkZGVkIHRvIGEgWGFtcmFpbi5Gb3JtcyBwcm9qZWN0LiBUaGlzIGlzIGhhcHBlbmluZyBiZWNhdXNlIFhhbWFyaW4uRm9ybXMgQXBwIExpbmtzIGhhcyBhIGRlcGVuZGVuY3kgb24gWGFtYXJpbi5Hb29nbGVQbGF5U2VydmljZXMuQmFzZW1lbnQgdjI5LjAuMC4xLCBidXQgTW9iaWxlIENlbnRlciBQdXNoIGhhcyBhIGRlcGVuZGFuY3kgb24gWGFtYXJpbi5Hb29nbGVQbGF5U2VydmljZXMuQmFzZW1lbnQgdjQyLjEwMjEuMS5cblxuIyBTdGVwcyBUbyBSZXByb2R1Y2VcbiAxLiBEb3dubG9hZCBzb3VyY2UgY29kZSBmcm9tIHRoaXMgcmVwcm9cbiAyLiBPcGVuIGluIFZpc3VhbCBTdHVkaW9cbiAzLiBCdWlsZC9EZXBsb3kgdGhlIFhhbWFyaW4uQW5kcm9pZCBwcm9qZWN0IHRvIGFuIEFuZHJvaWQgRGV2aWNlL1NpbXVsYXRvclxuIDQuIFRoZSBFcnJvciB3aWxsIG9jY3VyIGF0IFJ1bnRpbWUgd2hlbiB0aGUgYXBwIGxhdW5jaGVzXG5cbiMgUnVudGltZSBDcmFzaFxuPkNvdWxkIG5vdCBsb2FkIHR5cGUgb2YgZmllbGQgJ1hhbWFyaW4uRm9ybXMuUGxhdGZvcm0uQW5kcm9pZC5BcHBMaW5rcy5BbmRyb2lkQXBwTGlua3M6X2NsaWVudCcgKDApIGR1ZSB0bzogQ291bGQgbm90IHJlc29sdmUgdHlwZSB3aXRoIHRva2VuIDAxMDAwMDEzIChmcm9tIHR5cGVyZWYsIGNsYXNzL2Fzc2VtYmx5IEFuZHJvaWQuR21zLkNvbW1vbi5BcGlzLkdvb2dsZUFwaUNsaWVudCwgWGFtYXJpbi5Hb29nbGVQbGF5U2VydmljZXMuQmFzZW1lbnQsIFZlcnNpb249MS4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1udWxsKSBhc3NlbWJseTpYYW1hcmluLkdvb2dsZVBsYXlTZXJ2aWNlcy5CYXNlbWVudCwgVmVyc2lvbj0xLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPW51bGwgdHlwZTpBbmRyb2lkLkdtcy5Db21tb24uQXBpcy5Hb29nbGVBcGlDbGllbnQgbWVtYmVyOjxub25lPlxuXG4jIEJ1ZyBUcmFja2luZ1xuVGhpcyBidWcgaXMgYmVpbmcgdHJhY2tlZCBieSB0aGUgWGFtYXJpbi5Gb3JtcyB0ZWFtIFtpbiBCdWd6aWxsYV0oaHR0cHM6Ly9idWd6aWxsYS54YW1hcmluLmNvbS9zaG93X2J1Zy5jZ2k/aWQ9NTQzODMpLlxuXG4jIElERVxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE3IGZvciBNYWMgPT09XG5cblZlcnNpb24gNy4wLjEgKGJ1aWxkIDI0KVxuSW5zdGFsbGF0aW9uIFVVSUQ6IDZlNTE0MmI0LWU4YmUtNGQxYy1iNzVlLTQ3NDRiMGQ4YzNkZVxuUnVudGltZTpcbiBNb25vIDUuMC4xLjEgKDIwMTctMDIvNTA3NzIwNSkgKDY0LWJpdClcbiBHVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG5cbiBQYWNrYWdlIHZlcnNpb246IDUwMDAxMDAwMVxuXG49PT0gTnVHZXQgPT09XG5cblZlcnNpb246IDQuMC4wLjIzMjNcblxuPT09IC5ORVQgQ29yZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8xLjAuMS9TZGtzXG5NU0J1aWxkIFNES3M6IC9MaWJyYXJ5L0ZyYW1ld29ya3MvTW9uby5mcmFtZXdvcmsvVmVyc2lvbnMvNS4wLjEvbGliL21vbm8vbXNidWlsZC8xNS4wL2Jpbi9TZGtzXG5cbj09PSBYYW1hcmluLlByb2ZpbGVyID09PVxuXG5WZXJzaW9uOiAxLjUuNFxuTG9jYXRpb246IC9BcHBsaWNhdGlvbnMvWGFtYXJpbiBQcm9maWxlci5hcHAvQ29udGVudHMvTWFjT1MvWGFtYXJpbiBQcm9maWxlclxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSA4LjMuMyAoMTIxNzUuMSlcbkJ1aWxkIDhFMzAwNGJcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogNy4zLjEuMiAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFuZG9ubS9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ0LjEgKEFQSSBsZXZlbCAxNilcblx0XHQ2LjAgKEFQSSBsZXZlbCAyMylcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblx0XHQ3LjEgKEFQSSBsZXZlbCAyNSlcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjAuMlxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI1LjAuNVxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI2LjAuMFxuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTIxXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEyMS1iMTMpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEyMS1iMTMsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTAuMTAuMC4zNiAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogZDIyNzBlZWNcbkJyYW5jaDogZDE1LTJcbkJ1aWxkIGRhdGU6IDIwMTctMDUtMjIgMTY6MzA6NTMtMDQwMFxuXG49PT0gWGFtYXJpbi5NYWMgPT09XG5cblZlcnNpb246IDMuNC4wLjM2IChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS4yLjJcbkhhc2g6IGI3MWIwMzVcbkJyYW5jaDogZDE1LTFcbkJ1aWxkIGRhdGU6IEZyaSwgMjEgQXByIDIwMTcgMTc6NTc6MTIgR01UXG5cbj09PSBCdWlsZCBJbmZvcm1hdGlvbiA9PT1cblxuUmVsZWFzZSBJRDogNzAwMDEwMDI0XG5HaXQgcmV2aXNpb246IDdhYjFjYTJjZWQ2ZjU4NGU1NmI3YTBkNGQzMjFkMDA3NzVjZDk1YzlcbkJ1aWxkIGRhdGU6IDIwMTctMDUtMTkgMDU6NDQ6NTEtMDRcblhhbWFyaW4gYWRkaW5zOiAwOGQxNzE1OGYzMzY1YmVlZTVlNjBmNjc5OTllNjA3Y2NlNGIzZjkzXG5CdWlsZCBsYW5lOiBtb25vZGV2ZWxvcC1saW9uLWQxNS0yXG5cbj09PSBPcGVyYXRpbmcgU3lzdGVtID09PVxuXG5NYWMgT1MgWCAxMC4xMi41XG5EYXJ3aW4gMTYuNi4wIERhcndpbiBLZXJuZWwgVmVyc2lvbiAxNi42LjBcbiAgICBGcmkgQXByIDE0IDE2OjIxOjE2IFBEVCAyMDE3XG4gICAgcm9vdDp4bnUtMzc4OS42MC4yNH42L1JFTEVBU0VfWDg2XzY0IHg4Nl82NFxuXG49PT0gRW5hYmxlZCB1c2VyIGluc3RhbGxlZCBhZGRpbnMgPT09XG5cbk51R2V0IFBhY2thZ2UgTWFuYWdlbWVudCBFeHRlbnNpb25zIDAuMTIuMlxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiODJkYmYxMzEtNzFlYy00YjM1LWE0OWYtN2U5ZTIwZDc2NTM5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56WTRNamt6TkRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVSTEVuY29kZWRGb3JtQnVnX0xMVk0iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzUyZmFkMzMyODdiNDU5NWZkYTZmOTJkNGRjYTRjYzY5MWM5Mjg5OCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EazBNRFF3TlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjby1mYW5jeSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3MzcxYTllNGZiZmViYjk2NWYwNWI2OTc3ZDY1Yjc0MDdmY2NjMWIzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56Y3dNVGc1TWprPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJ1bmRsZUFzc2VtYmxpZXNSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NjYwZTQ1NjJmMjM0ZDAxZWY0MjVmNDAxZTFlNGY3NDcwOWM2ZWUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56a3pOVEF4TlRBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5BenVyZUNoYWxsZW5nZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0MGE3YzA4MjVlOThhNzUxYWYzMTE5M2Y0M2I1OTA3ZjVmZWMwMjdkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01UY3hORFF6T1E9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmdIZXJvZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjg1MTMzZjJiODJlZDQxZGY0NTYxZDQ2MWY2NWJmMWZlY2I4NWRmZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgTmdIZXJvZXNcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbYW5ndWxhci1jbGldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDEuMC4wLWJldGEuMTguXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmUvcGlwZS9zZXJ2aWNlL2NsYXNzYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5CZWZvcmUgcnVubmluZyB0aGUgdGVzdHMgbWFrZSBzdXJlIHlvdSBhcmUgc2VydmluZyB0aGUgYXBwIHZpYSBgbmcgc2VydmVgLlxuXG4jIyBEZXBsb3lpbmcgdG8gR2l0aHViIFBhZ2VzXG5cblJ1biBgbmcgZ2l0aHViLXBhZ2VzOmRlcGxveWAgdG8gZGVwbG95IHRvIEdpdGh1YiBQYWdlcy5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIGBhbmd1bGFyLWNsaWAgdXNlIGBuZyAtLWhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXItQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3Y2IyYTdkMi02NDAxLTQyYTEtODdhNS1lN2FjYzY4MTJjZmMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBNelkzT1RZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtdWktIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImUwMzYyOTNhYTU5MGI0ZGVlOTU5ZjYxODI5ZjI2MTcyYmZiYjBiM2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ERXdPVEU1TURNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlB1bGxUb1JlZnJlc2hDb2xvclJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRjNTRjZGU1M2E5MmExMTIyYWMyZWQxZWY4OWFiY2MzYWI5YjIwOWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qa3pOekE0T0E9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3N0YXJ0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NzlkYWU5YzEzYzJiMWMxZTMyYjk2NzU5MmFmNWIxZDliOWUyMWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFVwZ3JhZGVQcm9qZWN0XG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjAuMC5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlL3BpcGUvc2VydmljZS9jbGFzcy9tb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cbkJlZm9yZSBydW5uaW5nIHRoZSB0ZXN0cyBtYWtlIHN1cmUgeW91IGFyZSBzZXJ2aW5nIHRoZSBhcHAgdmlhIGBuZyBzZXJ2ZWAuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4Njk3NWI3Yi0xMGU4LTRhNGItYTlmNS03NjY0N2E2YTdmOGMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalV6TkRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid29ya3Nob3AtbW9kdWxlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmMDAzODY4MThiNWI1MzQ2YmYzNTY1N2FjZjM5OGM5ZGMxOWFhOWFiIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ERXlNelV3TVRRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtc1NpbmdsZXRvblJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY2ZDQxOWZjNzEyZGJhYzRjZWNhY2MyYzI1MjY5NmE4N2RkM2I1ODUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalUxTlRNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtdWkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjkzZjc5Yzc5MmQ1YTE4MmRmOWYwZDFjOThiODg4N2U5YzE3M2Y2MyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ESXpNRE0zTlRFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtc1NpbmdsZXRvblJlcHJvLVBsdWdpbi5CYWRnZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkMDJlMjYyNTgxMWFlYmIwYzU4MTI3NGJiYTMzOTI4OTk0OWNjNGFlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalUyTWpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjZlOTBiYzQ4MDU4YjJhNTM2YTExMTVlZDc0ZjNkNjIyYjdjZGNiYTMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UTXpOREUxTmpJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVzdC1hY3Rpb25zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU4MWY0NDQ4NWJhNjgzNWI1Y2UwMGJlYWQ5NWUzMjJlNjYxMGZmYjkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ESXpNRGN4TURjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVuaXRUZXN0QXBwVGVtcGxhdGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDdjNjlmNmMyMzFhMTk3YTkwNTRlYjExZjBhMGUzNTI0MjZmNTdmOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UTTBPRGd3TlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVzdC1hY3Rpb25zLWRheS0yIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk2ZDBmOGQzMjA4MTYyZTMyYWMzOTBiYjM0NjQxNDVkYmMzNjYzYmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXhNRGcyTVRrPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJ1dHRvblJlbmRlcmVyU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ0NGUzOTVlMjI4ZmRjZWJlNDdjNWVhNmFlZDlkZDExMTgzYzMyZjIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERXlNVFl4TXpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdyaWRUb1JlbGF0aXZlTGF5b3V0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYyZmFmNGFjNjk2ZjMwMjFhZDk2YWMxZDc3NDIyMDRlNTQ1ODMwNjAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEdyaWRUb1JlbGF0aXZlTGF5b3V0XG5cblRoaXMgWGFtYXJpbi5Gb3JtcyBzYW1wbGUgYXBwIHdhcyBjcmVhdGVkIHRvIGFuc3dlciBhIFN0YWNrT3ZlcmZsb3cgcXVlc3Rpb24uXG5cbkl0IGRlbW9uc3RyYXRlcyBob3cgdG8gY3JlYXRlIGEgIGEgYFJlbGF0aXZlTGF5b3V0YCBmcm9tIGEgYEdyaWRgIGxheW91dC5cblxuIyMjIFN0YWNrT3ZlcmZsb3cgQW5zd2VyXG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDU4NDk0ODMvNTk1MzY0M1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjg1MzVhMWI2LTZhNGQtNGNkOS1iMDM2LWQ4ODZkMDNlMTYyMiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UVXpOalUxTURNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaGVsbG8tZnVuY3Rpb25zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM1Zjc2ZGI1NWZkYmIzZjMxZDNjZjAzMjNkYjkzYzkzMTcxMTMxMzUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EWXpOREk1TURnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdFRyZW5kcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhY2U1MmY1MjM2NzBjZGRlMTU3NDk4ODExODU5OTQyZjk2NTE1Nzc5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UWTFNRGcwTlRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5MWI1MmI2ODYwM2Y5ZmMzZWUxNDNkZmM0ZWVlZjI5ODIyYmIwODYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UUXpNekkxTlRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkludm9rZU9uTWFpblRocmVhZEFzeW5jX1JlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjFlMGY5YTQ5NTRlZTM4NTdkN2JkZWE4NzAyNDhjOGUwYTY4ZWVmYzYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UZzRNelUyT0RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jb2duaXRpdmUtc2VydmljZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzI4MGIwNTU5MjliNDU3N2Q5YTEzNjg3Y2FmMmY4NzZiODU2ZDQwOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQXlNREUzTXpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm9kZWJpbmFyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYwNjcxMDIwOGM3YTViYTY5N2ZmZjNmYWYwNjBmOTdiZTNlOGJlODkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UWXlNakExTURBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZVhhbWFyaW5HcmFwaFFMIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImFkYTA2ZTY4MDI0NDY0N2ZmYTIxYTYwOTBhNTRmMzI0NTBjN2RhM2UiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qUXpNak0wTmpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzLWRlcHJlY2F0ZWQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTE5Y2M4NjM3ZThlNDhhZDQ5MDVmZDIwZmQ0YTJmNzY2ZmQ3NDhhZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UUXlPVFl5TkE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctYXoiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDY3Y2Q5N2RkNTA1NWM2Njg5MjJjZmVhMGQwNmRkMjJlYzYzNTc4MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQW5ndWxhckF6XG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjEuMy5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cbkJlZm9yZSBydW5uaW5nIHRoZSB0ZXN0cyBtYWtlIHN1cmUgeW91IGFyZSBzZXJ2aW5nIHRoZSBhcHAgdmlhIGBuZyBzZXJ2ZWAuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0MWZkMmE1MC1kOTA4LTRiMWEtYjg3NC02MzNkNmMxZjYyNzkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1ERTVOell5T1RnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1vYmlsZUJsYXpvckJpbmRpbmdzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImVhMmIxZjJiZjE5OTkzNDI5MWI5YTY0Yzc3MTkzOTEyMTAwMDdmMDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qZzVOekl3TmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaWduaXRlLXRoZS10b3VyLWZ1bjMwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5MzQ2MjFkOWYzNjMwMWFmOGI0M2RiZGNmZDJkMTlmNjgxMTFhZGMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EUTFOalk1T0RjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogInhhbWFyaW4tMTAxIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRkMDVkYTIyYjg3NmFhYjVkMzYwZGY1ZWI2YjgxZmUxMzhlODkxYjgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EY3lNRFF3T0RFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNhbmNlbFRleHRUb1NwZWVjaFNhbXBsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkMTZiOTY0NGUyZWIyMDNiOTdiYmE1Y2Q5MzFjNjgwOTc3MmU3M2Q0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXlPVGM0TkRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzFlMjMwMmRkM2M5YmNmMWY2MTI2N2VjMTYxMzQ3YTQ0NGQ4YmY4NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EZ3hOemN4T1RFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkpzb25QYXJzZVRleHRSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5MTFiNzk2YjI0MDMzNDZkZjY3N2I0N2ZiZDBhNDk4NTQ0OTk1NGQ0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXpNRFV5TURJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYmI2MDJmN2FlYWI4YTVlMjY3ZDcyMzNiMzMwYTI0ODVlZDM3YjliYiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1URXhORFl3TVRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlPU0xhcmdlVGl0bGVSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MDk2MTE4MzZkMTAwZTRiNzk0MzYzNjA5YTJjZjIxNDVkODZkY2FkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERXlNelEyT1RjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkF6dXJlTWVkaWFTZXJ2aWNlc1NhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmMTFjMzEwZGEwMjgyNzNkNDYwZmI0MmJhODdkOGZhNTEwOTMzNmMzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQXp1cmVNZWRpYVNlcnZpY2VzU2FtcGxlQXBwXG5BbiBpT1MgYW5kIEFuZHJvaWQgYXBwIG1hZGUgaW4gWGFtYXJpbi5Gb3JtcyB0aGF0IGludGVncmF0ZXMgd2l0aCBBenVyZSBNZWRpYSBTZXJ2aWNlc1xuXG4jIGlPUyBEZW1vXG4hW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvMjk2NDM1ODUtZTA4MWYxNjYtODgyNC0xMWU3LTk2ZjMtNzhjN2NjYjE2YWJlLmdpZilcblxuIyBBbmRyb2lkIERlbW9cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy8yOTY0MzgxMi02OWE3NzAwYS04ODI2LTExZTctOGUxMy00MGI1MDA3MWYyNjAuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImI0ODk0YmIyLTQxYzctNGM4OS04ZWVhLWQ2NWQyMGZhYjBlNyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXpNRGcwTVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTY1MjYwNTAwODkyODhhNWEwNTgxODAxNzQzNjc4YWJmOWVmYzNkNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1URTBNREU1TkRVPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlPUzEzU2ltdWxhdG9yRW50cnlSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNzZlYWQyNzE5OTQxNWVhMGJjZGY0MGM2YjM0MmY2NmIxNGYwNGY2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56RTJOVFEzT1RZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtY291cnNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjFjMGEyMDRjOWJjYTUwMzE4Mjg2NjM3ZTM3NzBhYmZiODlkMDE2MzIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56TTNNVGN4TVRZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidHdlZXR2ZXJzZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwNWViN2IyNzMzMTg4MmY5YzY1NjM0OWY1ODM1ZWY5MmQ2ZWIwMjAwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UTTBOVEV6TnpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1hc3RlckRldGFpbFRhYmJlZFNlYXJjaEJhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiY2RiMTE0ZDA5ZDJjZTQ5ZWYyNzQ2MzljYmU3Y2MxZmY2MjE3ZTAxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTFNRFEwTVRBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlZpZXdDZWxsT25EaXNhcHBlYXJpbmciLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjA3ODhhMTgyNjE4Mjk2NTE5MDM1MDBkNDE0ZGFhZmNkMjkzMTcwMyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgVmlld0NlbGxPbkRpc2FwcGVhcmluZ1xuQSByZXByb2R1Y3Rpb24gb2YgVmlld0NlbGwuT25EaXNhcHBlYXJpbmcgbm90IGZpcmluZ1xuXG4jIyBSZXByb2R1Y3Rpb24gU3RlcHNcbjEuIE9wZW4gYFZpZXdDZWxsT25EaXNhcHBlYXJpbmcuc2xuYFxuMi4gQnVpbGQvRGVwbG95IGBWaWV3Q2VsbE9uRGlzYXBwZWFyaW5nLmlPU2Agb3IgYFZpZXdDZWxsT25EaXNhcHBlYXJpbmcuRHJvaWRgXG4zLiBSdW4gYFZpZXdDZWxsT25EaXNhcHBlYXJpbmcuaU9TYCBvbiBhbiBpT1MgZGV2aWNlIG9yIGBWaWV3Q2VsbE9uRGlzYXBwZWFyaW5nLkRyb2lkYCBvbiBhbiBBbmRyb2lkIGRldmljZVxuNC4gQ2xpY2sgb24gYExpc3QgUGFnZWAgYnV0dG9uXG41LiBJbiB0aGUgQXBwbGljYXRpb24gT3V0cHV0LCBgT25BcHBlYXJpbmcgRmlyZWRgIGlzIHByaW50ZWQgZm9yIGVhY2ggVmlld0NlbGxcbjYuIEluIHRoZSBuYXZpZ2F0aW9uIGJhciwgY2xpY2sgb24gdGhlIGJhY2sgYnV0dG9uXG43LiBJbiB0aGUgQXBwbGljYXRpb24gT3V0cHV0LCBgT25EaXNwcGVhcmluZyBGaXJlZGAgaXMgKipub3QqKiBwcmludGVkIGZvciBlYWNoIFZpZXdDZWxsXG5cblxuIyMgRW52aXJvbm1lbnRcblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE3IGZvciBNYWMgPT09XG5cblZlcnNpb24gNy4xIChidWlsZCAxMjk3KVxuSW5zdGFsbGF0aW9uIFVVSUQ6IDZlNTE0MmI0LWU4YmUtNGQxYy1iNzVlLTQ3NDRiMGQ4YzNkZVxuUnVudGltZTpcbj5Nb25vIDUuMi4wLjIxNSAoZDE1LTMvZGE4MDg0MCkgKDY0LWJpdClcbj5HVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG4+XG4+UGFja2FnZSB2ZXJzaW9uOiA1MDIwMDAyMTVcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA0LjMuMC4yNDE4XG5cbj09PSAuTkVUIENvcmUgPT09XG5cblJ1bnRpbWU6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L2RvdG5ldFxuUnVudGltZSBWZXJzaW9uczpcblx0MS4xLjFcblx0MS4wLjRcblNESzogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvc2RrLzEuMC4xL1Nka3NcblNESyBWZXJzaW9uOiAxLjAuMVxuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzUuMi4wL2xpYi9tb25vL21zYnVpbGQvMTUuMC9iaW4vU2Rrc1xuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS41LjVcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IEFwcGxlIERldmVsb3BlciBUb29scyA9PT1cblxuWGNvZGUgOC4zLjMgKDEyMTc1LjEpXG5CdWlsZCA4RTMwMDRiXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTAuMTIuMC4yMCAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogODBiODQ4N2RcbkJyYW5jaDogZDE1LTNcbkJ1aWxkIGRhdGU6IDIwMTctMDgtMTggMTY6MDc6MjYtMDQwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiA3LjQuMC4yMSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFuZG9ubS9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ0LjEgKEFQSSBsZXZlbCAxNilcblx0XHQ2LjAgKEFQSSBsZXZlbCAyMylcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblx0XHQ3LjEgKEFQSSBsZXZlbCAyNSlcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjAuMlxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI2LjAuMFxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI2LjAuMVxuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTIxXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEyMS1iMTMpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEyMS1iMTMsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS4yLjJcbkhhc2g6IGI3MWIwMzVcbkJyYW5jaDogZDE1LTFcbkJ1aWxkIGRhdGU6IEZyaSwgMjEgQXByIDIwMTcgMTc6NTc6MTIgR01UXG5cbj09PSBYYW1hcmluLk1hYyA9PT1cblxuVmVyc2lvbjogMy42LjAuMTkgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcblxuPT09IEJ1aWxkIEluZm9ybWF0aW9uID09PVxuXG5SZWxlYXNlIElEOiA3MDEwMDEyOTdcbkdpdCByZXZpc2lvbjogOWM1Mjk5NjY2NTM4YjJmOGJhZjUwMTQxOGE1YzA2NGQ3ODRkNjRkYVxuQnVpbGQgZGF0ZTogMjAxNy0wOC0wNyAxMToyOTozNS0wNFxuWGFtYXJpbiBhZGRpbnM6IDNiYjBjMzJhMTRmMWI3ZTM2OGJmNWFjNTNhODRjMzU4MWMwMTkzOTFcbkJ1aWxkIGxhbmU6IG1vbm9kZXZlbG9wLWxpb24tZDE1LTNcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjEyLjVcbkRhcndpbiAxNi42LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE2LjYuMFxuICAgIEZyaSBBcHIgMTQgMTY6MjE6MTYgUERUIDIwMTdcbiAgICByb290OnhudS0zNzg5LjYwLjI0fjYvUkVMRUFTRV9YODZfNjQgeDg2XzY0XG5cbj09PSBFbmFibGVkIHVzZXIgaW5zdGFsbGVkIGFkZGlucyA9PT1cblxuTnVHZXQgUGFja2FnZSBNYW5hZ2VtZW50IEV4dGVuc2lvbnMgMC4xMi4yXG5cblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImMyM2Q4Mjc0LTIwYmItNDEyOS04YjY1LTA4ZjZlZjJiOGY1YiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTROekkyT1RVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibGlua3ktbGluayIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwYTY4YWE1YTRmZGE5MzMzZWJhMjAzNTQ4M2NmZTY0NGIyMDEwNDAxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UUTFNemd6T0RBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRhcmtNb2RlU3BsYXNoU2NyZWVuIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjkzYThiZWZiNzk1MDc3YjRmNjlhNmVmMzgwMWM4ZjU3N2FhNDZjYzYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56WTNNelV4TXpNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwYjZhZDQ3YmU1ZmQ0ODAzMzExYWUyMjEwZWY0NmQ2OGE3NjAxZGQ5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56azRNekE0TXpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVkZGl0aWZpZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODcyNWU0MmRhNmVjZDM3Y2QwNzUyYTQ2OGZlODJlNmUyYjEzM2Q1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UZ3hOamMyTURFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRvdE5ldEdyYXBoUUwiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjBhMzcyYzU3ODUzYWRlZTlkODZiMmY5NDdiMGFhM2UzOWFiZjQ2MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EQTVOamcyTkRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jYW4tZG8tdGhhdCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4ZjJmZDBlNWE0OTZmNDgyOGIyYWQ2MTIyM2VjMGQzNzFmODQ3YmNmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UazROakEyTmpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3T2JzZXJ2YWJsZUNvbGxlY3Rpb25SZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiOTJlOTllZjEyMGU1NWFkY2MwZmEyNWNmMDhlZjQ5YmEyODI5NTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ETXhOekUzTnpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3JhcGhsZXNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgyOGJlN2RiZDZlOWEwZDZkMGRiNDczZjAxY2JmODNiYTlkMTZjNTkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qRTBOelEwTXpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFwcENlbnRlckF1dGhEYXRhU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMzMTYzMGE1NTE0MTUzZmI3OGNiNTZkYzZkMjMxYWZmNjI1YzA0NzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTXlOakUyTnpVPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlRlbXAtQXN5bmMtYW5kLUF3YWl0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY0YjRlODg2MWM5ZjYzZWRiYmQ2MGYyMmZiYmY3ODllNjAxNDQ0YjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9ETXhOVEE0TXc9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtcGVyZiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NTI0NGVhOWQ0YjU1MmU4NDNiMmNmZTE4NTlmZThhZmZmMjI4ZjQ3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyByZWFjdC1wZXJmXG5UaGlzIGlzIGEgY29sbGVjdGlvbiBvZiBhcnRpY2xlcyB0aGF0IGRlc2NyaWJlIHBlcmZvcm1hbmNlIGlzc3VlcyB3aXRoIFJlYWN0IGFuZCBob3cgdG8gdGFja2xlIHRoZW1cblxuLSBodHRwczovL21lZGl1bS5jb20vQGFyaWttYW9yL3JlYWN0LXJlZHV4LXBlcmZvcm1hbmNlLXR1bmluZy10aXBzLWNlZjFhNmM1MDc1OSMuYmNlcXQwOTRrXG4tIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlZHV4L2lzc3Vlcy8xMzAzXG4tIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJlZHV4L2Jsb2IvbWFzdGVyL2RvY3MvYXBpLm1kXG4tIGh0dHBzOi8vbWFybWVsYWIuY29tL2Jsb2cvMjAxNy8wMi8wNi9yZWFjdC1pcy1zbG93LXJlYWN0LWlzLWZhc3QuaHRtbFxuLSBodHRwOi8vYmVuY2hsaW5nLmVuZ2luZWVyaW5nL2RlZXAtZGl2ZS1yZWFjdC1wZXJmLWRlYnVnZ2luZy9cbi0gaHR0cHM6Ly9lbmdpbmVlcmluZy5tdXNlZmluZC5jb20vaG93LXRvLWJlbmNobWFyay1yZWFjdC1jb21wb25lbnRzLXRoZS1xdWljay1hbmQtZGlydHktZ3VpZGUtZjU5NWJhZjEwMTRjIy5wa2J2cWI1NG9cbi0gaHR0cHM6Ly9hdXRoMC5jb20vYmxvZy9vcHRpbWl6aW5nLXJlYWN0LyNcbi0gaHR0cHM6Ly9vbnNlbi5pby9ibG9nL3JlYWN0LXN0YXRlLW1hbmFnZW1lbnQtcmVkdXgtc3RvcmUvXG4tIGh0dHBzOi8vbWVkaXVtLmNvbS9AYWxleGFuZGVyZWFyZG9uL3BlcmZvcm1hbmNlLW9wdGltaXNhdGlvbnMtZm9yLXJlYWN0LWFwcGxpY2F0aW9ucy1iNDUzYzU5N2IxOTEjLjhtNmZidmxpYlxuLSBodHRwczovL21lZGl1bS5jb20vamF2YXNjcmlwdC1zY2VuZS8xMC10aXBzLWZvci1iZXR0ZXItcmVkdXgtYXJjaGl0ZWN0dXJlLTY5MjUwNDI1YWY0NCMucTRueXI4c3Q1XG4tIGh0dHBzOi8vbWVkaXVtLmNvbS9AYXJpa21hb3IvcmVhY3QtcmVkdXgtcGVyZm9ybWFuY2UtdHVuaW5nLXRpcHMtY2VmMWE2YzUwNzU5Iy5xOTI5cjAzMjVcbi0gaHR0cDovL2Jsb2cucmFuZ2xlLmlvL3JlYWN0LWFuZC1yZWR1eC1wZXJmb3JtYW5jZS13aXRoLXJlc2VsZWN0L1xuLSBodHRwczovL3R5bGVybWNnaW5uaXMuY29tL2J1aWxkaW5nLXVzZXItaW50ZXJmYWNlcy13aXRoLXB1cmUtZnVuY3Rpb25zLWFuZC1mdW5jdGlvbi1jb21wb3NpdGlvbi1pbi1yZWFjdC1qcy8/dXRtX3NvdXJjZT1yZWFjdG5sJnV0bV9tZWRpdW09ZW1haWxcbi0gaHR0cHM6Ly9tZWRpdW0uY29tL0BkYW5fYWJyYW1vdi9taXhpbnMtYXJlLWRlYWQtbG9uZy1saXZlLWhpZ2hlci1vcmRlci1jb21wb25lbnRzLTk0YTBkMmY5ZTc1MFxuLSBodHRwOi8vYmVuY2hsaW5nLmVuZ2luZWVyaW5nL2RlZXAtZGl2ZS1yZWFjdC1wZXJmLWRlYnVnZ2luZy9cbi0gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVzZWxlY3QjcS1ob3ctZG8taS10ZXN0LWEtc2VsZWN0b3Jcbi0gaHR0cHM6Ly9oYWNrZXJub29uLmNvbS9yZWFjdC1zdGF0ZWxlc3MtZnVuY3Rpb25hbC1jb21wb25lbnRzLW5pbmUtd2lucy15b3UtbWlnaHQtaGF2ZS1vdmVybG9va2VkLTk5N2IwZDkzM2RiY1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQ1NGRkZTZiLWVhM2EtNDZjMS05MTU4LTNmYTk5MDIxNThjMyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ETTRNakUwTURNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYXV0by1iYW5uZXItaW1hZ2UtbWFrZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTk2MmFiNmEwODQxZTQ0MWZkMDhiNTM3ZTIzMzFkOWQxZjM3MGEzNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXdNekUwT1RBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY3JlYXRlLWdyYXBobGVzcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkOGY4OWRlZTI5NDEzNjgzZTgwNDgzZDJlNDVmZmQzZGVlNDIzNzc2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qZzNNRFV6T0RFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlBlcmZlY3QtR2lmdCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxY2Q0NmM3NjM3OGM2MWIyOTcwNThlMTI2ZTc0ZDdmYWYwNmJmMWQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTFOemc1TnpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3NzZiYTkwMjdjNThlNGQ5NWVjNmNkMjYxZjBiOTc1ZDRjODFiOTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIERyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvXG5SZXByb2R1Y3Rpb24gb2YgYSByZWdyZXNzaW9uIGluIFhhbWFyaW4uVUlUZXN0IHYyLjAuMTBcblxuIyMgRXJyb3JcblRoZSBmb2xsb3dpbmcgZXJyb3IgYXBwZXJzIHdoZW4gcGVyZm9ybWluZyBgRHJhZ0Nvb3JkaW5hdGVzYCBvbiBpT1M6XG5cbj5TeXN0ZW0uRXhjZXB0aW9uIDogRXJyb3Igd2hpbGUgcGVyZm9ybWluZyBEcmFnQ29vcmRpbmF0ZXMoMTg3LjUsIDg0LCAxODcuNSwgNjQ3LCBudWxsKVxuICAtLS0tPiBTeXN0ZW0uQWdncmVnYXRlRXhjZXB0aW9uIDogT25lIG9yIG1vcmUgZXJyb3JzIG9jY3VycmVkLlxuICAtLS0tPiBNaWNyb3NvZnQuQ1NoYXJwLlJ1bnRpbWVCaW5kZXIuUnVudGltZUJpbmRlckV4Y2VwdGlvbiA6IENhbm5vdCBpbXBsaWNpdGx5IGNvbnZlcnQgdHlwZSAndm9pZCcgdG8gJ29iamVjdCdcbiAgXG5Ob3RlOiBgRHJhZ0Nvb3JkaW5hdGVzYCB3b3JrcyBmaW5lIG9uIEFuZHJvaWQuXG5cbiMjIFJlcHJvZHVjdGlvbiBTdGVwc1xuMS4gRG93bmxvYWQgYW5kIG9wZW4gRHJhZ0Nvb3JkaW5hdGVzVUlUZXN0UmVwcm8uc2xuXG4yLiBCdWlsZC9Db21waWxlIGBEcmFnQ29vcmRpbmF0ZXNVSVRlc3RSZXByby5pT1NgXG4zLiBCdWlsZC9Db21waWxlIGBEcmFnQ29vcmRpbmF0ZXNVSVRlc3RSZXByby5VSVRlc3RzYFxuNC4gUnVuIHRoZSBgUHVsbFRvUmVmcmVzaF9EcmFnRHJvcENvb3JkaW5hdGVzYCBVSVRlc3Qgb24gYERyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvLmlPU2AgcnVubmluZyBpT1MgMTAuM1xuNS4gVGhlIHRlc3RzIGZhaWxzIGBTeXN0ZW0uRXhjZXB0aW9uIDogRXJyb3Igd2hpbGUgcGVyZm9ybWluZyBEcmFnQ29vcmRpbmF0ZXNgXG5cbiMjIFdvcmsgQXJvdW5kXG4xLiBJbnN0YWxsIFhhbWFyaW4uVUlUZXN0IHYyLjAuOVxuMi4gUnVuIHRoZSBgUHVsbFRvUmVmcmVzaF9EcmFnRHJvcENvb3JkaW5hdGVzYCBVSVRlc3Qgb24gYERyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvLmlPU2AgcnVubmluZyBpT1MgMTAuM1xuXG4jIyBFbnZpcm9ubWVudFxuXG49PT0gVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlIDIwMTcgZm9yIE1hYyA9PT1cblxuVmVyc2lvbiA3LjEgKGJ1aWxkIDEyOTcpXG5JbnN0YWxsYXRpb24gVVVJRDogNmU1MTQyYjQtZThiZS00ZDFjLWI3NWUtNDc0NGIwZDhjM2RlXG5cblJ1bnRpbWU6XG5cbi0gTW9ubyA1LjIuMC4yMTUgKGQxNS0zL2RhODA4NDApICg2NC1iaXQpXG4tIEdUSysgMi4yNC4yMyAoUmFsZWlnaCB0aGVtZSlcbi0gUGFja2FnZSB2ZXJzaW9uOiA1MDIwMDAyMTVcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA0LjMuMC4yNDE4XG5cbj09PSAuTkVUIENvcmUgPT09XG5cblJ1bnRpbWU6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L2RvdG5ldFxuUnVudGltZSBWZXJzaW9uczpcblx0MS4xLjFcblx0MS4wLjRcblNESzogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvc2RrLzEuMC4xL1Nka3NcblNESyBWZXJzaW9uOiAxLjAuMVxuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzUuMi4wL2xpYi9tb25vL21zYnVpbGQvMTUuMC9iaW4vU2Rrc1xuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS41LjVcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IEFwcGxlIERldmVsb3BlciBUb29scyA9PT1cblxuWGNvZGUgOC4zLjMgKDEyMTc1LjEpXG5CdWlsZCA4RTMwMDRiXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTAuMTIuMC4yMCAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogODBiODQ4N2RcbkJyYW5jaDogZDE1LTNcbkJ1aWxkIGRhdGU6IDIwMTctMDgtMTggMTY6MDc6MjYtMDQwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiA3LjQuMC4yMSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFuZG9ubS9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ0LjEgKEFQSSBsZXZlbCAxNilcblx0XHQ2LjAgKEFQSSBsZXZlbCAyMylcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblx0XHQ3LjEgKEFQSSBsZXZlbCAyNSlcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjAuMlxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI2LjAuMFxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI2LjAuMVxuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTIxXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEyMS1iMTMpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEyMS1iMTMsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS4yLjJcbkhhc2g6IGI3MWIwMzVcbkJyYW5jaDogZDE1LTFcbkJ1aWxkIGRhdGU6IEZyaSwgMjEgQXByIDIwMTcgMTc6NTc6MTIgR01UXG5cbj09PSBYYW1hcmluLk1hYyA9PT1cblxuVmVyc2lvbjogMy42LjAuMTkgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcblxuPT09IEJ1aWxkIEluZm9ybWF0aW9uID09PVxuXG5SZWxlYXNlIElEOiA3MDEwMDEyOTdcbkdpdCByZXZpc2lvbjogOWM1Mjk5NjY2NTM4YjJmOGJhZjUwMTQxOGE1YzA2NGQ3ODRkNjRkYVxuQnVpbGQgZGF0ZTogMjAxNy0wOC0wNyAxMToyOTozNS0wNFxuWGFtYXJpbiBhZGRpbnM6IDNiYjBjMzJhMTRmMWI3ZTM2OGJmNWFjNTNhODRjMzU4MWMwMTkzOTFcbkJ1aWxkIGxhbmU6IG1vbm9kZXZlbG9wLWxpb24tZDE1LTNcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjEyLjVcbkRhcndpbiAxNi42LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE2LjYuMFxuICAgIEZyaSBBcHIgMTQgMTY6MjE6MTYgUERUIDIwMTdcbiAgICByb290OnhudS0zNzg5LjYwLjI0fjYvUkVMRUFTRV9YODZfNjQgeDg2XzY0XG5cbj09PSBFbmFibGVkIHVzZXIgaW5zdGFsbGVkIGFkZGlucyA9PT1cblxuTnVHZXQgUGFja2FnZSBNYW5hZ2VtZW50IEV4dGVuc2lvbnMgMC4xMi4yXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2MzQyZWQxNy0xOGIwLTQyZWItOTYxZS04OGEyZjg5ZDJmOTIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXpOemsxT0RFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYnVpbGRncmFwaGxlc3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjI0NDIzNjJjZTg1MDAzN2E3MWUyODFhMzc2ZTQ2Y2IwYTdjOWNkMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16SXlORE15TkRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlN3aXBlVmlld0NyYXNoUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzhiNjE0MzEwMDJkZTE5NWVhYjlmYTJlY2MxZWU4MjdjMWJjMWI5OCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16TTNNREl3TlRjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkxvY2FsTm90aWZpY2F0aW9uc1NhbXBsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNmJhYTIxMTE0YjI0MjI1ZWViNTFmNzFkNTY1MmEwMmE5MTNmZGJmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UQTFOVGN3TkRVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2VibWwiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjUyMjliNWY2MDExNDcwYzgzNTRjMTI0NGY4ZDkxNjNkNTVhNDQwNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16VTVORFV4T0RRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVJTW9kYWxQcmVzZW50YXRpb25TdHlsZUZvcm1TaGVldE9uQXBwZWFyaW5nUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMmNmOWE1OTlkZTA4YTMyMzkzZjcxYzQxNTE3ZjYzYWFmMzI5MTkyMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EUXhNelkxTlRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VuZC1lbWFpbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMGI3OTgyNDk5ZWI5YzIxOWU3YTNjNmRhODExMDIxYzNhYmM1NWRlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EZ3lNalV5TVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3JhcGhsZXNzLWhlbGxvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI0NzMzMjJjMmI5ZGJkZWYwZTVlOTViMWM1NWFhZDUwM2M3MDQwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5URTBNVEEzTlRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3Rm9vdGVyUmVmcmVzaFZpZXdSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyMGVjZjMwZjc3NTVlYjRmMTllZGUxZjdhYjA2YjNlMTM5NTRkNGQ5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UTTRPVGd6TXpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlRyYWl0Q29sbGVjdGlvbkRpZENoYW5nZVJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImMwNjhhODhiNzRmNTBjODJmYTExNzNlYTU2OTJhMzUyMGY5Y2VhZWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UZzFOelk0TlRZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1lZGlhRWxlbWVudFJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjFkYzQ0NTU4ZDk3Mzc4N2JmZWMyZjkxZWU4NzIzYjA3OWNiMzM5NmQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ESTFNREkwTmpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZhY2lhbFJlY29nbml0aW9uTG9naW4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTZkMjIxYjZmMWY0ZGIyYzQzMDIwZGZjZTdkMGE0NjU2NTNhZWQ4NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEZhY2lhbCBSZWNvZ25pdGlvbiBMb2dpblxuXG48YSBocmVmPVwiaHR0cHM6Ly93d3cuYnV5bWVhY29mZmVlLmNvbS9ibWlubmlja1wiIHRhcmdldD1cIl9ibGFua1wiPjxpbWcgc3JjPVwiaHR0cHM6Ly9jZG4uYnV5bWVhY29mZmVlLmNvbS9idXR0b25zL2RlZmF1bHQtb3JhbmdlLnBuZ1wiIGFsdD1cIkJ1eSBNZSBBIENvZmZlZVwiIHN0eWxlPVwiaGVpZ2h0OiA1MXB4ICFpbXBvcnRhbnQ7d2lkdGg6IDIxN3B4ICFpbXBvcnRhbnQ7XCIgPjwvYT5cblxuQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCB0aGF0IHVzZXMgZmFjaWFsIHJlY29nbml0aW9uIHRvIHByb3ZpZGUgMi1mYWN0b3IgYXV0aGVudGljYXRpb24gZm9yIGEgbG9naW4gcGFnZS4gXG5cbkJ1aWx0IHVzaW5nIFtYYW1hcmluLkZvcm1zXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS94YW1hcmluL3hhbWFyaW4tZm9ybXM/V1QubWNfaWQ9ZmFjaWFscmVjb2duaXRpb25sb2dpbi1naXRodWItYnJhbWluKSBhbmQgW01pY3Jvc29mdCBDb2duaXRpdmUgU2VydmljZXNdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9zZXJ2aWNlcy9jb2duaXRpdmUtc2VydmljZXMvZmFjZT9XVC5tY19pZD1mYWNpYWxyZWNvZ25pdGlvbmxvZ2luLWdpdGh1Yi1icmFtaW4pLlxuXG4jIyBMb2dnaW5nIEluXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvRmFjaWFsUmVjb2duaXRpb25Mb2dpbi9Mb2dpbkRlbW8uZ2lmKVxuXG4jIyBDcmVhdGluZyBOZXcgVXNlciBBY2NvdW50XG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvRmFjaWFsUmVjb2duaXRpb25Mb2dpbi9DcmVhdGVVc2VyRGVtby5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOGM2ZTczZTctZjc2NC00NTY0LWEyMGMtN2M0N2FjN2IzZTE2Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UTTVOall3TkRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY29uY2F0ZW5hdGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjEzOTNmNTAwMjE2NGQwMTM1OThmMjkxODU1Y2I0MGU3OWNjNWNlYyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qRXdORE0wTnpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkVtcHR5Vmlld0xheW91dE9wdGlvbnNSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwZDc0NmRjODUyMDhhNzBjY2RkNmUwYTg3N2M4YTAxYjYzYzVlY2YxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qSXlNRGt3TlRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZHVyYWJsZS1zbGFjay1yZW1pbmRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhMTI0YTE5NDZlMDcxNjIyNTA0NGM1YmY3NWM3OWI0YmY0MDhjOWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qRXlPREl4TXpnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJHQmFja2dyb3VuZFRhc2tXb3JrYXJvdW5kIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU4NTNjNzZlOTE0ZjQ4MDVlODNkZDM5YjY5YTYwY2NkYzMwOGEwMTIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTXdNelEwTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVwcHktcm9kZW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmFlMGUzN2FiOTk5MzYyZTE5ZGUzMWYzZDUzN2ZhNGEzODY3ZWQ4OCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qVXdPRFV4TmpjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jaGFsbGVuZ2VzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQwNTI2OWNlMGEwZjM4ODNkMGE3ODJiNDMyNzM4MDU1ODY1YWM3MDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVXlOak16TWpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZmF2LXRhbGtzLWV2ZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjRkZGMzZjcwNTk5N2U1MDMyZGY1YWIyYzdlZjJjYTEzZDg4ZmNkOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgZmF2LXRhbGtzLWV2ZXJcblRoaXMgaXMgYSBsaXN0IG9mIG15IGZhdm91cml0ZSB0YWxrcyBcblxuKiBBbWF6aW5nIHRhbGsgYWJvdXQgc3RheWluZyBoYXBweTogaHR0cHM6Ly93d3cudGVkLmNvbS90YWxrcy9zaGF3bl9hY2hvcl90aGVfaGFwcHlfc2VjcmV0X3RvX2JldHRlcl93b3JrIFxuKiBQdWJsaWMgc3BlYWtpbmcgdGlwczogaHR0cHM6Ly93d3cudGVkLmNvbS90YWxrcy9qdWxpYW5fdHJlYXN1cmVfNV93YXlzX3RvX2xpc3Rlbl9iZXR0ZXIgXG4qIEludHJvdmVydHMgdnMgZXh0cm92ZXJ0czogaHR0cHM6Ly93d3cudGVkLmNvbS90YWxrcy9icmlhbl9saXR0bGVfd2hvX2FyZV95b3VfcmVhbGx5X3RoZV9wdXp6bGVfb2ZfcGVyc29uYWxpdHkgXG4qIEFsZXggQ29ybmVsbCdzIHRhbGsgYWJvdXQgY3JlYXRpdmUgcHJvY2VzczogaHR0cHM6Ly95b3V0dS5iZS9qbDZ1bGlBbDhGSSBcbiogQXNpbSBIdXNzYWluJ3MgdGFsayAtIEhvdyB0byBoYWNrIGEgTm9kZSBhcHA6IGh0dHBzOi8veW91dHUuYmUvV3gzV2xRTEZhM3dcblxuXG5UbyB3YXRjaDpcblxuKiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMNjVwcDZUcGs2OTJsTDg1anZvT0FUX2U5WXV6el9ud0FcblxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1YzFlMzUwZS00ZmVmLTQ1N2UtOWMyYS1mMmU1ZjlkZGFhNmUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qYzNNREUxTlRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiMjVkYXlzb2ZzZXJ2ZXJsZXNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjAzNTBiYjJjYzUyYzRmMjVmNzM4ZjY4OGU2NjAzODk0NWJmN2M3YzMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16TXdORFV6TnpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Vyc2UiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDhkYzFiYWY4ZGQ0ODk2YzM3NTgwM2U4MzQyNjcxYTYzNDVlMjRiMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16ZzNNREl3TkRJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctZ29vZHJlYWRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgwOTJlYzQ0OWVlOTQwMTU1OGIwMzBjODRlOTQ2ZmNkNmViNzZmZjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5URXdOamMwTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYXp1cmUtc3RhcnR1cHMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTdjOTVlMThiZmI0NTU1OWU2YzM0MjZmZDJkYWFkMjU2NWIzNWViMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5USTBNekUzTURnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZHVyYWJsZWRheXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMWEyYTk0OTA2OTkwMjFhYTY2ZjY1YjFhOTc3MDVlNGVjODc2Y2M4MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qRTROalF5TXpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZUNTaGFycE1hcmt1cCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0NmIwYjZhMjg0Y2MwNDZmZTJjODcwZThiYmUxNzAzOWUwZWM1ZjM1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UUTJNekExTVRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2NoZWR1bGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI1NDI1NGUxNDBhNjUxNGIwZWJjYWE4ZWVjMGU3YTE4ZDc3ODBjZjkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qSTVNRGMxTnpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdFN0YXR1cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyMTA3ODA2YTY4ZjA3ZGVjZjgwNTYxNzI0ZTJiODM5YTUzMjkxMGY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EUXdPVFl5TWpJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNlbnRpbWVudEFuYWx5c2lzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI3MzU4N2ZiZjI0OWYzNGQ2NmRkZjlhNDVmODM1OWU2NDZmZmExNTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBTZW50aW1lbnQgQW5hbHlzaXNcblxuVGhpcyBhcHAgd2FzIG1hZGUgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgTWljcm9zb2Z0IEJsb2csIFtVcGdyYWRlIFlvdXIgQXBwIFdpdGggU2VudGltZW50IEFuYWx5c2lzXShodHRwczovL2RldmJsb2dzLm1pY3Jvc29mdC5jb20veGFtYXJpbi91cGdyYWRlLXlvdXItYXBwLXdpdGgtc2VudGltZW50LWFuYWx5c2lzP1dULm1jX2lkPXNlbnRpbWVudGFuYWx5c2lzLWdpdGh1Yi1icmFtaW4pLlxuXG58IEhhcHB5IFNlbnRpbWVudCAgICAgIHwgU2FkIFNlbnRpbWVudCB8XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCAhW0hhcHB5IFNlbnRpbWVudF0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNDUzODQzMzItOTMwYTJhODAtYjVjMi0xMWU4LTkzYTMtMTIwYTVmNTc0Y2ZiLmdpZil8ICAhW1NhZCBTZW50aW1lbnRdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzQ1Mzg0MzMzLTkzYTJjMTAwLWI1YzItMTFlOC04MWQ0LTM5Y2JlOTczMTY0Yy5naWYpfFxuXG5NaWNyb3NvZnQncyBbQ29nbml0aXZlIFNlcnZpY2VzXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vc2VydmljZXMvY29nbml0aXZlLXNlcnZpY2VzP1dULm1jX2lkPXNlbnRpbWVudGFuYWx5c2lzLWdpdGh1Yi1icmFtaW4pIHRlYW0gaGF2ZSBjcmVhdGVkIHRoZSBbU2VudGltZW50IEFuYWx5c2lzIEFQSV0oaHR0cHM6Ly93ZXN0dXMuZGV2LmNvZ25pdGl2ZS5taWNyb3NvZnQuY29tL2RvY3Mvc2VydmljZXMvVGV4dEFuYWx5dGljcy5WMi4wL29wZXJhdGlvbnMvNTZmMzBjZWVlZGE1NjUwZGIwNTVhM2M5Lz9XVC5tY19pZD1zZW50aW1lbnRhbmFseXNpcy1naXRodWItYnJhbWluKSB0aGF0IHVzZXMgbWFjaGluZSBsZWFybmluZyB0byBkZXRlcm1pbmUgdGhlIHNlbnRpbWVudCBvZiB1cGxvYWRlZCB0ZXh0LiBBbmQgdGhlIGJlc3QgcGFydCBpcywgd2UgZG9uJ3QgbmVlZCB0byBiZSBtYWNoaW5lIGxlYXJuaW5nIGV4cGVydHMgdG8gdXNlIGl0LlxuXG5JIGp1c3Qgc3VibWl0IHRoZSB0ZXh0IGFzIGEgUE9TVCBSZXF1ZXN0OlxuXG5gYGBqc29uXG57XG4gIFwiZG9jdW1lbnRzXCI6IFtcbiAgICB7XG4gICAgICBcImxhbmd1YWdlXCI6IFwiZW5cIixcbiAgICAgIFwiaWRcIjogXCIyNTFjOTlkNy0xZjg5LTQyNmEtYTNhZC1jNmZhMWIzNGYwMjBcIixcbiAgICAgIFwidGV4dFwiOiBcIkkgaG9wZSB5b3UgZmluZCB0aW1lIHRvIGFjdHVhbGx5IGdldCB5b3VyIHJlcG9ydHMgZG9uZSB0b2RheS5cIlxuICAgIH1cbiAgXVxufVxuYGBgXG5cbkFuZCB0aGUgQVBJIHJldHVybnMgYmFjayBpdHMgc2VudGltZW50IHNjb3JlOlxuXG5gYGBqc29uXG57XG5cInNlbnRpbWVudFwiOiB7XG4gIFwiZG9jdW1lbnRzXCI6IFtcbiAgICB7XG4gICAgICBcImlkXCI6IFwiMjUxYzk5ZDctMWY4OS00MjZhLWEzYWQtYzZmYTFiMzRmMDIwXCIsXG4gICAgICBcInNjb3JlXCI6IDAuNzc2MzU1NTA0OTg5NjI0XG4gICAgfVxuICBdXG59XG5gYGBcblxuVGhlIHNlbnRpbWVudCBzY29yZSByYW5nZXMgYmV0d2VlbiAwIGFuZCAxLlxuXG5TY29yZXMgY2xvc2UgdG8gMCBpbmRpY2F0ZSBuZWdhdGl2ZSBzZW50aW1lbnQsIHdoaWxlIHNjb3JlcyBjbG9zZSB0byAxIGluZGljYXRlIHBvc2l0aXZlIHNlbnRpbWVudC5cblxuIyMgTGVhcm4gTW9yZVxuXG4tIFtVcGdyYWRlIFlvdXIgQXBwIFdpdGggU2VudGltZW50IEFuYWx5c2lzIHwgTWljcm9zb2Z0IEJsb2ddKGh0dHBzOi8vZGV2YmxvZ3MubWljcm9zb2Z0LmNvbS94YW1hcmluL3VwZ3JhZGUteW91ci1hcHAtd2l0aC1zZW50aW1lbnQtYW5hbHlzaXM/V1QubWNfaWQ9c2VudGltZW50YW5hbHlzaXMtZ2l0aHViLWJyYW1pbilcbi0gW0NvZ25pdGl2ZSBTZXJ2aWNlc10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL3NlcnZpY2VzL2NvZ25pdGl2ZS1zZXJ2aWNlcz9XVC5tY19pZD1zZW50aW1lbnRhbmFseXNpcy1naXRodWItYnJhbWluKVxuLSBbVGV4dCBBbmFseXRpY3NdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9zZXJ2aWNlcy9jb2duaXRpdmUtc2VydmljZXMvdGV4dC1hbmFseXRpY3M/V1QubWNfaWQ9c2VudGltZW50YW5hbHlzaXMtZ2l0aHViLWJyYW1pbilcbi0gW1NlbnRpbWVudCBBbmFseXNpcyBBUEldKGh0dHBzOi8vd2VzdHVzLmRldi5jb2duaXRpdmUubWljcm9zb2Z0LmNvbS9kb2NzL3NlcnZpY2VzL1RleHRBbmFseXRpY3MuVjIuMC9vcGVyYXRpb25zLzU2ZjMwY2VlZWRhNTY1MGRiMDU1YTNjOT9XVC5tY19pZD1zZW50aW1lbnRhbmFseXNpcy1naXRodWItYnJhbWluKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjE3Yzg4ZWUzLTBkNjctNGYwYi1iZmNiLWIyNmIwYTk3MjRkNiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EWTFNemMyTmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY2lyY2xlY2kiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMGIxZmY4M2UwYjRiMjVkNzEzNmVkOGIzNjRlYzU3ZjE2NWI0ZTMwMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ2lyY2xlY2lcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDEuNC40LlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLXByb2RgIGZsYWcgZm9yIGEgcHJvZHVjdGlvbiBidWlsZC5cblxuIyMgUnVubmluZyB1bml0IHRlc3RzXG5cblJ1biBgbmcgdGVzdGAgdG8gZXhlY3V0ZSB0aGUgdW5pdCB0ZXN0cyB2aWEgW0thcm1hXShodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8pLlxuXG4jIyBSdW5uaW5nIGVuZC10by1lbmQgdGVzdHNcblxuUnVuIGBuZyBlMmVgIHRvIGV4ZWN1dGUgdGhlIGVuZC10by1lbmQgdGVzdHMgdmlhIFtQcm90cmFjdG9yXShodHRwOi8vd3d3LnByb3RyYWN0b3J0ZXN0Lm9yZy8pLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYWQyMThjNmItMThhMS00MzBhLWE5YjctZTMwZmQxZGYxYzExIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qYzJOekV6TkRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkV4cGFuZGVyU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4OWMxODYzYTI0NGJmYWIwNzE2NDRmODFjOTQxZmQxNzAzN2NmYWQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzU0ZjNhYTYtOTQzMC00NGQzLWIwMGMtY2IyNTEwNzMyZGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qazBOVFk0TlRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldlYkF1dGhlbnRpY2F0b3JSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkOTRiOGMxOGU0MjUwY2I2ZjJkNjVlMTE2Zjk1ZjQ1NmIxOWMzNGViIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc1NGYzYWE2LTk0MzAtNDRkMy1iMDBjLWNiMjUxMDczMmRlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56WTNOVEEwTXpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3Qm91bmRzRXhjZXB0aW9uUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODM1OGI0YTlhMjI5ZTU4MTczMzUxNzdkZjUxYzk3MjcxMjUwMWY4NCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9ETXpNVFV4TXpFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YlJlYWRtZVdlYlRyZW5kcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZTA1NWU5NzY5YzI3Y2ZhNWFiZDg5Yjk4NDg5NDA5ZGUzNGZmYzQ0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NTRmM2FhNi05NDMwLTQ0ZDMtYjAwYy1jYjI1MTA3MzJkZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ea3hNalUyTmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ2VuZXJhdGUtc2FzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0MmRhOTllZDM0ZjFkNzI3MWRhMjM1NDA4MzNkYzg0MTlhNDZjNTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGdlbmVyYXRlLXNhc1xuRnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgU2hhcmVkIEFjY2VzcyBTaWduYXR1cmUgKFNBUykgcmVxdWlyZWQgZm9yIEJsb2IgU3RvcmFnZVxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOTMxMmRkZGMtOTVjZi00ODVjLWI0ZTQtNjk0NWNiYmFhMGVjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UUTJOVFl5T1RrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYWR2YW5jZWQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYWUwNDkyMjIzZGJhOWMzY2JkODFlNDMzMWZmZmExNzM0NGRiM2MwOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1URXpNamczTWpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdlb2xvY2F0b3JTYW1wbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZmM4ZTQxOWMyMzJhNmQ4NzFlNDBjMjg5MTgxMzI1NTQ0M2U0MjNjNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIhW2xvZ29dKEFydHdvcmsvaG9yaXpvbnRhbC5wbmcpXG5cbmlPUyBhbmQgQW5kcm9pZCBhcHAgdGhhdCBnYXRoZXJzIEdlb2xvY2F0aW9uIGRhdGEsIGNyZWF0ZWQgaW4gWGFtYXJpbi5Gb3Jtc1xuXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvR2VvbG9jYXRvclNhbXBsZS9HUFMuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjUzZTM3NzY2LWM3NjctNDRmNi04MDlhLTRhNGFmYTQyNjk2OSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ea3hNall5TnprPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxvYi11cGxvYWRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNDI4MjYyYTJjYjQxM2U5NWMxMzc5ZTA4OTEwMmZiZjgwZTRmOTVlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBVcGxvYWRlclxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS40LjQuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJiNmMxMDVhYi0yNGIwLTRjNDctYjFjMC1jMmNhNjI0MzRmMzQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UZzNPRFExTmpBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic3Bpcml0ZG9nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRjMDRiYTQ4ZWU5ZDhjZjFhMDNiZDE0YjgyYzg4MjRlNGJkYjg0MWIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5Ua3lOakUzTVRNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidHVlc2RheXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNDhhZDcxODAxZmNhNmJlZDE3NGFiNDNhMzgzNjZhYTFiM2E2MDA0YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVPRFV3TlRFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlcGVhdFRhYnNSZXByb2R1Y3Rpb25TYW1wbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTA5YjY5NjhlOTExOWNjY2I5YmJmYzAwM2M0MWEzODBkMWYzMWEwNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgUmVwZWF0VGFic1JlcHJvZHVjdGlvblNhbXBsZVxuU2FtcGxlIGFwcCB0byByZXByb2R1Y2UgbXVsdGlwbGUgdGFicyBidWcgaW4gWGFtYXJpbi5Gb3Jtc1xuXG4hW0RlbW9dKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVmlkZW9zL2Jsb2IvbWFzdGVyL1JlcGVhdFRhYnNSZXByb2R1Y3Rpb25TYW1wbGUvRGVtby5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiM2EyM2MyNDgtODMxZS00NzdmLWIyNTYtZDVjNjdjMDg1ODU1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UazFPVGMwTnpBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibW9uZGF5cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0OGZhZTFjZWQ0NDMwN2JmOGUyNGJlNjgzOTBjNjdmMzkwNTFjMWFmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UazJNREV4T1RnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZnJpZGF5cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmMWY3OWM4NDU0MWZhMmYxYWE1MWVhMTYwMWRmZjUzNzE0YTI0N2EzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qSXhOamt4TmpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2hvcGF0aG9tZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NzQyZDY4ZmM1ZGJjZDNhNTIxYTNkMGNlMTQyMGY5ZDM0N2VjNGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qTTROell4TVRnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2hvcGF0aG9tZTEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzQ4ZDk2YWY4OTUzNzhlZGUzZWRlMjc3ZTUzYzM0MTI5ZWMyN2MwNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qUTBNamMxTXpBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVtcGxhdGUtc2hvcGF0aG9tZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5NmVlY2NjZTAxOTg3NDBmNDQwMjMwM2E4NDgzOTZkODIzYjk3Yjc0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQTRNREk1TnpNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxvYi10cmlnZ2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjkzOGRmNzcwNjc4NDU4YjNkZjdhNTk3NzVmY2Q4OTRiNmQ4OGM5MzQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGJsb2ItdHJpZ2dlclxuXG5GdW5jdGlvbiB0aGF0IHJ1bnMgb24gaW1hZ2UgdXBsb2FkIGluIEJsb2IgU3RvcmFnZSBhY2NvdW50XG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYTNhODYwZDktZDczZS00ODJmLWI1M2MtNTgxZTg5MGViYWE2Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qVXhOelUwTWpJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZHJ5cnVuMTgiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTFkYWMzMDMxNDE4MTU1OGY3YzQzYTBlYTQ1ZjA4MGMyM2VkODYzYiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qVXlNVEF6TkRNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaGVsbG93b3JsZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZTlkZWJjODg3ODVmYTQ3ZDk1NTM4NWU0YWMzNjkzZDliZTQzMTg0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qVXlNak0zTVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaGVsbG8tY29kZXNwYWNlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwZjM0MmMyOTQ2MmJjMzNhNTgyOWI3NTRkMjUyYjljNDQ5NDU0ZmIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQTRNemN5TVRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1sb25kb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTY1MDc4ZGMwOGQ3Y2VmMmU0Y2JiZTIyNmQwYWMxMTgzNWY0MTU4NiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgc2VydmVybGVzcy1sb25kb25cblxuVGhpcyBpcyBhIGRlbW8gcHJvamVjdFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYwYzdiMzU4LTU4N2QtNGMwZC05NGJmLWY4ZDdmOGI1YzAyNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UY3hOVEV4TXpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkhlYWx0aENsaW5pYyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhNTYxNjY2Yzg1YTU4MDIxOWI1MDVhMmRhNzM4ZmZiMDAyM2RhN2Q5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIlshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzL2U3YjBmMGJiLTM4ZDEtNDU0ZC04M2NjLTE3NzQ3NWY1MmMwNi9icmFuY2hlcy9tYXN0ZXIvYmFkZ2UpXShodHRwczovL2FwcGNlbnRlci5tcylcblxuIyBIZWFsdGhDbGluaWNcblxuQW4gaU9TICYgQW5kcm9pZCBhcHAgdGhhdCBwYXJzZXMgaW1hZ2VzIG9mIGZvb2QgdG8gcHJvdmlkZSBudXRyaXRpb25hbCBpbmZvcm1hdGlvbi5cblxuVGhlIGxvZ2ljIG9uIHRoZSBiYWNrZW5kIHVzZXMgW01pY3Jvc29mdCBDb2duaXRpdmUgU2VydmljZXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlLz9XVC5tY19pZD1oZWFsdGhjbGluaWMtZ2l0aHViLWJyYW1pbikgdG8gcGFyc2UgdGhlIGltYWdlIGFuZCBkZXRlcm1pbmUgdGhlIGZvb2QuIFRoZSBmb29kIGlzIHRoZW4gbG9nZ2VkIGluIGEgZGF0YWJhc2UgYW5kIGFkZGVkIHRvIHRoZSBsaXN0LlxuXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvSGVhbHRoQ2xpbmljL0hlYWx0aENsaW5pYy5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNmVlYmNjNTctYWY3NS00ZGExLTllMTctNDczMWJkMmNlYzg0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVNek0yTnpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm91bmFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjZjcwZWRlMDFjOWZlZGYwNDE5MGNkMDEwYTBjY2FlODIzZDI4ODM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBub3VuYXBpXG5cbkEgQXp1cmUgZnVuY3Rpb24gdGhhdCByZXRyaWV2ZXMgaWNvbiBzdWdnZXN0aW9ucyB1c2luZyB0aGUgbm91biBwcm9qZWN0IGFwaVxuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHA6Ly9henVyZWRlcGxveS5uZXQvZGVwbG95YnV0dG9uLnBuZyldKGh0dHBzOi8vZGVwbG95LmF6dXJlLmNvbS8/cmVwb3NpdG9yeT1odHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vbm91bmFwaSMvZm9ybS9kZXBsb3kpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTRkN2EzZTctNjJjMy00Yjk3LTkwNzktZjU0MDFmN2IwY2JhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXdNemM1TVRZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkN1c3RvbVN0ZXBwZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYmVkNTVkMzhjZjg5YWRhOTczNDExZmFhZjMwZjUzMzFmNzEyOTZjZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEN1c3RvbVN0ZXBwZXJcblNhbXBsZSBhcHAgc2hvd2luZyBob3cgdG8gc2V0IHRoZSBjb2xvciBvZiBhIFhhbWFyaW4uRm9ybXMuU3RlcHBlciB1c2luZyBFZmZlY3RzIGFuZCBDdXN0b20gUmVuZGVyZXJzLlxuXG4jIEFuZHJvaWQgXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvQ3VzdG9tU3RlcHBlci9SZWQlMjBBbmRyb2lkJTIwU3RlcHBlci5wbmcpXG5cbiMgaU9TIFxuIVtdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVmlkZW9zL2Jsb2IvbWFzdGVyL0N1c3RvbVN0ZXBwZXIvUmVkJTIwaU9TJTIwU3RlcHBlci5wbmcpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTUyMWIxMGUtM2QxNS00NmI2LTkxZTUtMmM4OGEyOGUwMDk1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qVTRORGN3TkRVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibW90aXZhdGlvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZTVmNzMyZDZkNmNkOTA0MTg4ODMwYjVkNDdmYWVmYzBhOGIwMmM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWXlOall3TnpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY3JhLWNpLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZGY3Y2ZiZTllNDAxNzUyYTE1NzQ4YTk1MDc4YTRmZWFlMWY2NDNmNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQTFOVEkwTVRRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkhhY2tlck5ld3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzQ1NjM1YWVhN2JhMzJlMTM1ZWQwYmJjODZhMjBjNTIzMjBiNTFiNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEhhY2tlck5ld3NcblxuPGEgaHJlZj1cImh0dHBzOi8vd3d3LmJ1eW1lYWNvZmZlZS5jb20vYm1pbm5pY2tcIiB0YXJnZXQ9XCJfYmxhbmtcIj48aW1nIHNyYz1cImh0dHBzOi8vY2RuLmJ1eW1lYWNvZmZlZS5jb20vYnV0dG9ucy9kZWZhdWx0LW9yYW5nZS5wbmdcIiBhbHQ9XCJCdXkgTWUgQSBDb2ZmZWVcIiBzdHlsZT1cImhlaWdodDogNTFweCAhaW1wb3J0YW50O3dpZHRoOiAyMTdweCAhaW1wb3J0YW50O1wiID48L2E+XG5cbkEgWGFtYXJpbi5Gb3JtcyBhcHAgZm9yIGRpc3BsYXlpbmcgdGhlIHRvcCBwb3N0cyBvbiBIYWNrZXIgTmV3cy5cblxuVGhpcyBhcHAgZGVtb25zdHJhdGVzIGhvdyB0byB1c2UgYElBc3luY0VudW1lcmFibGVgICsgQyMgOC4wIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UuIFRoYW5rcyB0byBgSUFzeW5jRW51bWVyYWJsZWAsIHRoZSBpdGVtcyBhcmUgYWRkZWQgdG8gdGhlIGxpc3QgYXMgc29vbiBhcyB0aGV5J3JlIGF2YWlsYWJsZSBtYWtpbmcgdGhlIGFwcCBmZWVsIGZhc3RlciBhbmQgbW9yZSByZXNwb25zaXZlLlxuXG5UaGlzIGFwcCBhbHNvIHVzZXMgdGhlIFtUZXh0IEFuYWx5dGljcyBBUEldKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9zZXJ2aWNlcy9jb2duaXRpdmUtc2VydmljZXMvdGV4dC1hbmFseXRpY3M/V1QubWNfaWQ9aGFja2VybmV3cy1naXRodWItYnJhbWluKSBmcm9tIFtNaWNyb3NvZnQgQ29nbml0aXZlIFNlcnZpY2VzXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vc2VydmljZXMvY29nbml0aXZlLXNlcnZpY2VzP1dULm1jX2lkPWhhY2tlcm5ld3MtZ2l0aHViLWJyYW1pbikgdG8gYW5hbHl6ZSB0aGUgc2VudGltZW50IG9mIGVhY2ggaGVhZGxpbmUuIFxuLSDwn5iDIEhlYWRsaW5lIGlzIEhhcHB5IFxuLSDimLnvuI8gSGVhZGxpbmUgaXMgU2FkIFxuLSDwn5iQIEhlYWRsaW5lIGlzIE5laXRoZXIgSGFwcHkgb3IgU2FkXG5cbiFbSGFja2VyIE5ld3MgRGVtb10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjY5NTY5MTgtMjg3M2JiODAtZjAxYS0xMWU5LTgzOWMtNmU5MzVjMGI2MDZjLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzZDZhNWM5YS03MDQ2LTQ3ODEtOTA2Ny1kOTJmMzA4ZWY5YjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWXpNVFk1TWpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAib2xkdjIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTE4NGUxMDkwYTNiNDRkZjNiNjNkOWNjNmM4Mzc5ZjNkNzg4ZGI0ZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWXpNemd3T0RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVzdC1jaXJjbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzgxNmEyMmIzMDM0NzY1ZjEwZWY1NjdhNGE3ZWEyMjE5MjgxMThmOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ua3lOelV5T0RRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidG9kbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmZWNiYWY3YTIxNDc5YWQwOTc4MmQ4YTQ1MjdmOTNlNjE5MDZiZjg1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBUb2RvXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjYuNi5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImM1NzM0NDdhLWQzODItNGNmNS04NWE4LTM2MjE0NzEzODAzNiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ua3lORFF3T1RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmdyeC1zY2hlbWF0aWNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImExOWFiYjFhYmZmM2ExYzk2M2Y4ZmMwNDI4YTViM2FlYTQ3ZmUyODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEZpcnN0XG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjYuNi5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQ5NWYzZWQ4LTNkMjUtNDBkYy05N2RhLTFjM2VlODU2Y2M3YiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTFNVGsyTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzLXYzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZkYzg1ZDM5M2NmMDc0ZjE2OGEwN2RjNDNmZThiM2YxMmUxZWMzZTMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTROVFUyTURNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5CbG9iU3RvcmFnZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyODMxMjlkYTMzMzQ3Y2Y4OTcyMTQ0NzAzZTE0ZTQ0ODU3YjZhOGVmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiMgWGFtYXJpbkJsb2JTdG9yYWdlQXBwXG5cbkEgYSBzaW5nbGUtcGFnZSBYYW1hcmluLkZvcm1zIGFwcCB0aGF0IGRpc3BsYXlzIGFuIGltYWdlIGZyb20gQXp1cmUgQmxvYiBTdG9yYWdlIGJ5IGNvbW11bmljYXRpbmcgZGlyZWN0bHkgd2l0aCBhbiBBenVyZSBCbG9iIFN0b3JhZ2UgQ29udGFpbmVyIHVzaW5nIHRoZSBbQXp1cmUgU3RvcmFnZSBTREsgZm9yIC5ORVRdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2RvdG5ldC9hcGkvb3ZlcnZpZXcvYXp1cmUvc3RvcmFnZS8/V1QubWNfaWQ9eGFtYXJpbmJsb2JzdG9yYWdlYXBwLWdpdGh1Yi1icmFtaW4pLlxuXG4jIyBMZWFybiBNb3JlXG4tIFtUaGUgWGFtYXJpbiBTaG93OiBBenVyZSBCbG9iIFN0b3JhZ2UgZm9yIE1vYmlsZV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbS9TaG93cy9YYW1hcmluU2hvdy9BenVyZS1CbG9iLVN0b3JhZ2UtZm9yLU1vYmlsZS13aXRoLUJyYW5kb24tTWlubmljay8/V1QubWNfaWQ9eGFtYXJpbmJsb2JzdG9yYWdlYXBwLWdpdGh1Yi1icmFtaW4pXG4tIFtYYW1hcmluIEJsb2c6IEFkZCBDbG91ZCBTdG9yYWdlIHRvIFhhbWFyaW4gQXBwcyB3aXRoIEF6dXJlIEJsb2IgU3RvcmFnZV0oaHR0cHM6Ly9ibG9nLnhhbWFyaW4uY29tL3hhbWFyaW4tcGx1cy1henVyZS1ibG9iLWNsb3VkLXN0b3JhZ2UvP1dULm1jX2lkPW5vbmUtY2g5LWJyYW1pbilcbi0gW0F6dXJlIEJsb2IgU3RvcmFnZV0oaHR0cHM6Ly9ha2EubXMveGFtYXJpbmJsb2cvYXp1cmVibG9ic3RvcmFnZSlcbi0gW0hvdyB0byB1c2UgQmxvYiBTdG9yYWdlIGZyb20gWGFtYXJpbl0oaHR0cHM6Ly9ha2EubXMvWGFtYXJpbkJsb2cvQXp1cmVCbG9iU3RvcmFnZVdpdGhYYW1hcmluKVxuXG4hW1hhbWFyaW4gQmxvYiBTdG9yYWdlIFNhbXBsZSBBcHAgRGlhZ3JhbV0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvQXp1cmVCbG9iU3RvcmFnZVNhbXBsZUFwcC9BenVyZUJsb2JTdG9yYWdlU2FtcGxlQXBwRGlhZ3JhbS9YYW1hcmluQmxvYlN0b3JhZ2VTYW1wbGVBcHBEaWFncmFtLnBuZylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMjYxY2VjYi1mYzlhLTRlMjAtYmFlMS05ZjEyY2EzMzJkMzgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTFPVEUzTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzLXY0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0MjNmMjQzNzQ0NzM2OGJmMTU1NTI3ZmVlOWZhMDEyY2ZjZjkzMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTBNalUyTkRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIjI0SG91clRpbWVQaWNrZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTc2YmQ0MWEyYzA5ZmU0MWU1OWJkZmY4YzcxNDEzZjY0ZGE3NTRiNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgMjRIb3VyVGltZVBpY2tlclxuQSAyNCBIb3VyIFRpbWUgUGlja2VyIGZvciBbWGFtYXJpbi5Gb3Jtc10oaHR0cHM6Ly9kb3RuZXQubWljcm9zb2Z0LmNvbS9hcHBzL3hhbWFyaW4veGFtYXJpbi1mb3Jtcz9XVC5tY19pZD0yNGhvdXJ0aW1lcGlja2VyLWdpdGh1Yi1icmFtaW4pXG5cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy84ODQyMjM2OS1mZmU1ZDI4MC1jZDllLTExZWEtOTRhOS01MWUxYWI0N2IwMjIuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjlmZGM5MTI2LWZjYzctNDc2YS04ZGY0LWI1Mzk4Y2I5ZTU0NyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTNNek0wTmpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYWR2YW5jZWQtY291cnNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQwODM0NTIyYzE5MWQxMDYxNTQzMGEzOTJjMDM1NGQzNjViZmM4Y2QiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTNOekk0TnpjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3RhZHZhbmNlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxMWRkMDgyNjVhNmFlYjczZjI3MzFiYzNhNDQxNWE4OGI5ODU4MjY3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzZTExNDc3LTI2ZWEtNDU0Yy1hZTFlLTBmODYyZDg3NjNiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56RXdNVFk0TURFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVkaXJlY3RzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjc5YWUyZTNkYjUxYjIxODEyNGFiMmY5NDA5MzQ4M2ZiMmU5MzIwN2IiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56azFOREl3TXpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYWktam9rZXMtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk2Yzg3YTEyN2JmYzE1YzVkYmE5ZjhmYTMzYThiZGFmOTQ5YzhlMjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXpOVFkzT1RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGJwLXNlcnZlcmxlc3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2JlYzJiNmQxNTg1YTQ2ODk4ZTUwZWY0MGVlYmYxZjJlYTljZWNiMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ1JVRCBTZXJ2ZXJsZXNzIEFQSVxuXG5UaGlzIHByb2plY3QgcmVwcmVzZW50cyBhIGZ1bGx5IHNlcnZlcmxlc3MgaW1wbGVtZW50YXRpb24gZm9yIGEgQ1JVRCAoQ3JlYXRlLCBSZXRyaWV2ZSwgVXBkYXRlLCBEZWxldGUpIEFQSSBpbXBsZW1lbnRlZCB3aXRoIFtBenVyZSBGdW5jdGlvbnNdKGh0dHBzOi8vYWthLm1zL2F6dXJlLWZ1bmN0aW9ucykgYW5kIFtBenVyZSBDb3Ntb3MgREJdKGh0dHBzOi8vYWthLm1zL2F6dXJlLWNvc21vc2RiKS5cblxuRm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgZGVtbyB3ZSBhcmUgZ29pbmcgdG8gdXNlIGFuIEFuZ3VsYXIgYXBwbGljYXRpb24gYnVpbHQgYnkgW0pvaG4gUGFwYV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGEpLiBUaGUgY29kZSBmb3IgdGhpcyBhcHBsaWNhdGlvbiBpcyBhdmFpbGFibGUgb24gR2l0aHViIGF0IFtBbmd1bGFyIENvc21vcyBEQl0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIpLlxuXG5Zb3UgY2FuIHdhdGNoIEpvaG4gUGFwYSBhbmQgSSB0YWxrIGFib3V0IHRoaXMgcHJvamVjdCBpbiB0aGlzIFtQbHVyYWxzaWdodCBjb3Vyc2VdKGh0dHBzOi8vYWthLm1zL3BicCkuIFxuXG4jIyBSZXF1aXJlbWVudHNcblxuMS4gIEluc3RhbGwgdGhlIFtBenVyZSBGdW5jdGlvbnMgZm9yIFZpc3VhbCBTdHVkaW8gQ29kZV0oaHR0cHM6Ly9ha2EubXMvdnNjb2RlLWF6dXJlLWZ1bmN0aW9ucykgZXh0ZW5zaW9uXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiAgQ2xvbmUgdGhpcyByZXBvc2l0b3J5XG5cbiAgICBgYGBiYXNoXG4gICAgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9wYnAtc2VydmVybGVzcy5naXRcbiAgICBjZCBwYnAtc2VydmVybGVzc1xuICAgIGBgYFxuXG4xLiAgSW5zdGFsbCB0aGUgbnBtIHBhY2thZ2VzXG5cbiAgICBgYGBiYXNoXG4gICAgbnBtIGlcbiAgICBgYGBcblxuMS4gIENvbmZpZ3VyZSBDb3Ntb3MgREIgc2VydmVyIHNldHRpbmdzXG5cbiAgICBHbyB0byBgbG9jYWwuc2V0dGluZ3MuanNvbmAgaW4gdGhlIHByb2plY3Qgcm9vdCBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIElmIHRoZSBmaWxlIGRvZXNuJ3QgZXhpc3QsIG1ha2Ugc3VyZSB0byBjcmVhdGUgaXQuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUsIHBhc3N3b3JkIGFuZCBwb3J0IHdpdGggeW91ciBzcGVjaWZpYyBjb25maWd1cmF0aW9uLlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIC8vIGxvY2FsLnNldHRpbmdzLmpzb25cbiAgICB7XG4gICAgXCJJc0VuY3J5cHRlZFwiOiBmYWxzZSxcbiAgICAgICAgXCJWYWx1ZXNcIjoge1xuICAgICAgICAgICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCI6IFwiXCIsXG4gICAgICAgICAgICBcIkNvc21vc0RCVVJMXCI6IFwibW9uZ29kYjovLzx5b3VyLUhPU1QtZ29lcy1oZXJlPjo8eW91ci1QT1JULWdvZXMtaGVyZT4vP3NzbD10cnVlXCIsXG4gICAgICAgICAgICBcIkNvc21vc0RCVXNlclwiOiBcIjx5b3VyLVVTRVJOQU1FLWdvZXMtaGVyZT5cIixcbiAgICAgICAgICAgIFwiQ29zbW9zREJQYXNzXCI6IFwiPHlvdXItUEFTU1dPUkQtZ29lcy1oZXJlPlwiLFxuICAgICAgICAgICAgXCJDb3Ntb3NEQlwiOiBcIjx5b3VyLWNvc21vcy1kYi1uYW1lLWdvZXMtaGVyZT5cIlxuICAgICAgICB9LFxuICAgICAgICBcIkhvc3RcIjoge1xuICAgICAgICAgICAgXCJMb2NhbEh0dHBQb3J0XCI6IDcwNzEsXG4gICAgICAgICAgICBcIkNPUlNcIjogXCIqXCJcbiAgICAgICAgfVxuICAgIH1cbiAgICBgYGBcblxuMS4gIEdvIHRvIFtBbmd1bGFyIENvc21vcyBEQl0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIpIGFuZCBmb2xsb3cgc3RlcHMgdG8gZ2V0IHN0YXJ0ZWQgYW5kIHJ1biB0aGUgYXBwIHRoZXJlXG5cbiMjIFJ1bm5pbmcgdGhlIGFwcGxpY2F0aW9uIGxvY2FsbHlcblxuMS4gIE9wZW4gdGhlIGFwcGxpY2F0aW9uIGluIFZTIENvZGUgYW5kIHJ1biBhcHBsaWNhdGlvblxuXG4gICAgIVtSdW4gQXp1cmUgRnVuY3Rpb25zIGxvY2FsbHkgaW4gVlMgQ29kZV0oaHR0cHM6Ly9pLmltZ3VyLmNvbS9HZmp1RUtELmdpZilcblxuMS4gIEFzc3VtaW5nIHlvdSB3ZW50IHRocm91Z2ggdGhlIHN0ZXBzIG9mIGluc3RhbGxpbmcgYW5kIHJ1bm5pbmcgeW91ciBBbmd1bGFyIGFwcGxpY2F0aW9uIGxvY2FsbHkgbm93IG9wZW4gdGhlIGFwcCBpbiBWUyBDb2RlIGFuZCBnbyB0byBgaGVyby5zZXJ2aWNlLnRzYCBhbmQgY29uZmlndXJlIHlvdXIgZW5kcG9pbnQgdG8gYmUgdGhlIG5ld2x5IGNyZWF0ZWQgZnVuY3Rpb25zOlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGNvbnN0IGFwaSA9ICdodHRwOi8vbG9jYWxob3N0OjcwNzEvYXBpJztcbiAgICBgYGBcblxuIyMgUHVibGlzaCB5b3VyIEFQSSB0byB0aGUgY2xvdWRcblxuMS4gIEluIFZTIENvZGUgZ28gdG8gQXp1cmUgRnVuY3Rpb25zIGV4dGVuc2lvbiBhbmQgZm9sbG93IHN0ZXBzIGluIHRoaXMgW3ZpZGVvXShodHRwczovL3lvdXR1LmJlLzhHQU8zb2JnRXpjKVxuXG4xLiAgSW4gdGhlIEF6dXJlIHBvcnRhbCBnbyB0byB5b3VyIG5ld2x5IHB1Ymxpc2hlZCBmdW5jdGlvbiBhcHAgYW5kIGNvcHkgVVJMXG5cbiAgICAhW0dldCBGdW5jdGlvbiBVUkwgZnJvbSB0aGUgQXp1cmUgcG9ydGFsXShodHRwczovL2kuaW1ndXIuY29tL0xDbDFrTk4uZ2lmKVxuXG4xLiAgSW4geW91ciBBbmd1bGFyIGFwcCBnbyB0byBgaGVyby5zZXJ2aWNlLnRzYCBhbmQgY29uZmlndXJlIHlvdXIgZW5kcG9pbnQgdG8gcG9pbnQgdG8gdGhlIG5ld2x5IGRlcGxveWVkIGZ1bmN0aW9uOlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGNvbnN0IGFwaSA9ICdodHRwczovL3NpY290aW4tc2VydmVybGVzcy5henVyZXdlYnNpdGVzLm5ldC9hcGknO1xuICAgIGBgYFxuXG4tLS1cblxuSWYgeW91J3JlIGxvb2tpbmcgZm9yIG1vcmUgdXNlIGNhc2VzIG9uIHdoYXQgeW91IGNhbiBidWlsZCB3aXRoIHNlcnZlcmxlc3MgbWFrZSBzdXJlIHRvIGNoZWNrb3V0IFtBbiBvcGVuIHNvdXJjZSBzZXQgb2YgY29tbW9uIHVzZSBjYXNlcyBmb3IgQXp1cmUgRnVuY3Rpb25zXShodHRwczovL2FrYS5tcy9zZXJ2ZXJsZXNzLWRlbW9zKVxuXG4jIyBQcm9ibGVtcyBvciBTdWdnZXN0aW9uc1xuXG5bT3BlbiBhbiBpc3N1ZSBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vcGJwLXNlcnZlcmxlc3MvaXNzdWVzKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjZjMWM1MGJkLTUwYmEtNDIzMC04NTc5LWU2YjU5OTQ1MWYzOCIKfQ==ewogICJGdWxsTmFtZSI6ICJTaGF5bmUgQm95ZXIiLAogICJVc2VyTmFtZSI6ICJzcGJveWVyIiwKICAiTWljcm9zb2Z0QWxpYXMiOiAic2hib3llciIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4ZGYzZmJjNi0zZjAzLTQxYTctOTgyYy1hM2MwN2I0YjNlMjYiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVNek0yTnpnPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJub3VuYXBpIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjZjcwZWRlMDFjOWZlZGYwNDE5MGNkMDEwYTBjY2FlODIzZDI4ODM5IiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBub3VuYXBpXG5cbkEgQXp1cmUgZnVuY3Rpb24gdGhhdCByZXRyaWV2ZXMgaWNvbiBzdWdnZXN0aW9ucyB1c2luZyB0aGUgbm91biBwcm9qZWN0IGFwaVxuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHA6Ly9henVyZWRlcGxveS5uZXQvZGVwbG95YnV0dG9uLnBuZyldKGh0dHBzOi8vZGVwbG95LmF6dXJlLmNvbS8/cmVwb3NpdG9yeT1odHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20lMkZzaW1vbmFjbyUyRm5vdW5hcGkmV1QubWNfaWQ9bm91bmFwaS1naXRodWItc2ljb3RpbiMvZm9ybS9kZXBsb3kpXG4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMWE5NTYwZmEtZDc1Yy00M2NmLTg5OTgtYWUyZDE1ODBhMzg3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qRXpNVFk1T1RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2ViYXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY1MzdjY2EyNmRiM2ExNjQ2ZmU2ODFlYjE2NTgyNzllNTRiNGU2YzYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFdlYmFwcFxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS42LjYuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzYWE4MGIyNy04ZjQ3LTQ1NGMtYjViYi01NDM3ZTU5OTE2MjgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTROVGt6TVRZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbG9yRXF1YWxzUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzRhNTBmMTRlNzg2NWM0ODZhMDlkN2I1MTgyYzBmMzg3YzU0ZWE1OSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ29sb3JFcXVhbHNSZXByb1xuQSByZXByb2R1Y3Rpb24gb2YgdGhpcyBTdGFja092ZXJmbG93IHF1ZXN0aW9uOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDk0MzkxODEvNTk1MzY0M1xuXG4jIyBFbnZpcm9ubWVudFxuXG49PT0gVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlIDIwMTcgZm9yIE1hYyAoUHJldmlldykgPT09XG5cblZlcnNpb24gNy41IFByZXZpZXcgKDcuNSBidWlsZCA5MzMpXG5JbnN0YWxsYXRpb24gVVVJRDogOTdmOTNiNzQtYmQ4NC00MTYxLTg2ZmItZThjNDc0ZDFhMjczXG5SdW50aW1lOlxuIC0gTW9ubyA1LjEwLjAuMTc5ICgyMDE3LTEyL2RhYzYwNzc1NjE2KSAoNjQtYml0KVxuIC0gR1RLKyAyLjI0LjIzIChSYWxlaWdoIHRoZW1lKVxuIC0gWGFtYXJpbi5NYWMgNC40LjAuMzYgKG1hc3RlciAvIDBjN2M0OWE2KVxuXG4gLSBQYWNrYWdlIHZlcnNpb246IDUxMDAwMDE3OVxuXG49PT0gTnVHZXQgPT09XG5cblZlcnNpb246IDQuMy4xLjQ0NDVcblxuPT09IC5ORVQgQ29yZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5SdW50aW1lIFZlcnNpb246IDIuMC41XG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8yLjEuNC9TZGtzXG5TREsgVmVyc2lvbjogMi4xLjRcbk1TQnVpbGQgU0RLczogL0xpYnJhcnkvRnJhbWV3b3Jrcy9Nb25vLmZyYW1ld29yay9WZXJzaW9ucy81LjEwLjAvbGliL21vbm8vbXNidWlsZC8xNS4wL2Jpbi9TZGtzXG5cbj09PSBYYW1hcmluLlByb2ZpbGVyID09PVxuXG5WZXJzaW9uOiAxLjYuMlxuTG9jYXRpb246IC9BcHBsaWNhdGlvbnMvWGFtYXJpbiBQcm9maWxlci5hcHAvQ29udGVudHMvTWFjT1MvWGFtYXJpbiBQcm9maWxlclxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSA5LjIgKDEzNzcyKVxuQnVpbGQgOUM0MGJcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5WZXJzaW9uOiA0LjQuMC4zMSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuXG49PT0gWGFtYXJpbi5pT1MgPT09XG5cblZlcnNpb246IDExLjEwLjAuMzIgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDRkOGM0ZTMyXG5CcmFuY2g6IGQxNS03XG5CdWlsZCBkYXRlOiAyMDE4LTAzLTA3IDE4OjM5OjQ2LTA1MDBcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogOC4zLjAuNSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFtaW4vTGlicmFyeS9BbmRyb2lkL3Nka1xuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ3LjEgKEFQSSBsZXZlbCAyNSlcblx0XHQ4LjAgKEFQSSBsZXZlbCAyNilcblx0XHQ4LjEgKEFQSSBsZXZlbCAyNylcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjEuMVxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI3LjAuMVxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI2LjAuMlxuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTMxXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEzMS1iMTEpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEzMS1iMTEsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS40LjBcbkhhc2g6IGIzZjkyZjlcbkJyYW5jaDogbWFzdGVyXG5CdWlsZCBkYXRlOiBGcmksIDE5IEphbiAyMDE4IDIyOjAwOjM0IEdNVFxuQ2xpZW50IGNvbXBhdGliaWxpdHk6IDFcblxuPT09IEJ1aWxkIEluZm9ybWF0aW9uID09PVxuXG5SZWxlYXNlIElEOiA3MDUwMDA5MzNcbkdpdCByZXZpc2lvbjogYWNlMWUxMDdjODg0NzdkYjFhYmU1ZTgwNzgwOTY1MGYwNjQxMTJjNFxuQnVpbGQgZGF0ZTogMjAxOC0wMy0xOSAxNzo0Mjo0MS0wNFxuWGFtYXJpbiBhZGRpbnM6IGEwMTI2M2JkYmJhMjU4OWIxZjZlNDJlZjA4NWJkMzFmNmUzYmZjZjRcbkJ1aWxkIGxhbmU6IG1vbm9kZXZlbG9wLWxpb24tZDE1LTdcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjEzLjNcbkRhcndpbiAxNy40LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE3LjQuMFxuICAgIFN1biBEZWMgMTcgMDk6MTk6NTQgUFNUIDIwMTdcbiAgICByb290OnhudS00NTcwLjQxLjJ+MS9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuPT09IEVuYWJsZWQgdXNlciBpbnN0YWxsZWQgYWRkaW5zID09PVxuXG5NRnJhY3RvciAzLjA0LjE0XG5BZGRpbk1ha2VyIDEuNC4yXG5OdUdldCBQYWNrYWdlIE1hbmFnZW1lbnQgRXh0ZW5zaW9ucyAwLjEyLjZcblRlbXBsYXRlIENyZWF0b3IgMC4yXG5XYWthVGltZSAzLjAuMlxuUmVkdGgncyBBZGRpbnMgMS4wLjlcbkludGVybmV0IG9mIFRoaW5ncyAoSW9UKSBkZXZlbG9wbWVudCAoUHJldmlldykgNy4xXG5cblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjlmN2U4MDlkLTc2YTUtNDljNC04NjgyLTFhMThlYWM2YTdiNyIKfQ==ewogICJGdWxsTmFtZSI6ICJTaGF5bmUgQm95ZXIiLAogICJVc2VyTmFtZSI6ICJzcGJveWVyIiwKICAiTWljcm9zb2Z0QWxpYXMiOiAic2hib3llciIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4ZGYzZmJjNi0zZjAzLTQxYTctOTgyYy1hM2MwN2I0YjNlMjYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qY3dOemsxTWpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlZhbHVlVGFza1JlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk2MGEyZTQwZjJmZTFmZTFjZDYxM2MxNDJlODVlYjZmMGU5OTczYWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFZhbHVlVGFza1JlcHJvXG5SZXByb2R1Y3Rpb24gZm9yIHRoZSBmb2xsb3dpbmcgVmFsdWVUYXNrIGVycm9yOlxuXG4+L1VzZXJzL2JyYW1pbi9Qcm9qZWN0cy9WYWx1ZVRhc2tSZXByby9pT1MvUGF0aF9pT1MuY3MoMjYsMjYpOiBFcnJvciBDUzAwMTI6IFRoZSB0eXBlICdWYWx1ZVRhc2s8PicgaXMgZGVmaW5lZCBpbiBhbiBhc3NlbWJseSB0aGF0IGlzIG5vdCByZWZlcmVuY2VkLiBZb3UgbXVzdCBhZGQgYSByZWZlcmVuY2UgdG8gYXNzZW1ibHkgJ1N5c3RlbS5UaHJlYWRpbmcuVGFza3MuRXh0ZW5zaW9ucywgVmVyc2lvbj00LjEuMS4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWNjN2IxM2ZmY2QyZGRkNTEnLiAoQ1MwMDEyKSAoVmFsdWVUYXNrUmVwcm8uaU9TKVxuXG4jIyBTdGVwcyB0byBSZXByb2R1Y2VcbjEuIEluc3RhbGwgdGhlIGN1cnJlbnQgVmlzdWFsIFN0dWRpbyBNYWMgQmV0YSBDaGFubmVsIHJlbGVhc2UsIGFzIG9mIDAzNDAgMjggTWFyY2ggMjAxOCAoRW52aXJvbm1lbnQgSW5mb3JtYXRpb24gYmVsb3cpXG4yLiBPcGVuIFZhbHVlVGFza1JlcHJvLnNsbiBpbiBWaXN1YWwgU3R1ZGlvIE1hYyAoQmV0YSBDaGFubmVsKVxuMy4gQnVpbGQgVmFsdWVUYXNrUmVwcm8uaU9TIG9yIFZhbHVlVGFza1JlcHJvLkRyb2lkXG5cbiMjIEF2YWlsYWJsZSBXb3JrYXJvdW5kXG4xLiBJbnN0YWxsIHRoZSBjdXJyZW50IFZpc3VhbCBTdHVkaW8gTWFjIFN0YWJsZSBDaGFubmVsIHJlbGVhc2UsIGFzIG9mIDAzNDAgMjggTWFyY2ggMjAxOCBcbjIuIE9wZW4gVmFsdWVUYXNrUmVwcm8uc2xuIGluIFZpc3VhbCBTdHVkaW8gTWFjIChTdGFibGUgQ2hhbm5lbClcbjMuIEluc3RhbGwgW1N5c3RlbS5UaHJlYWRpbmcuVGFza3MuRXh0ZW5zaW9ucyBOdUdldCBQYWNrYWdlXShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvU3lzdGVtLlRocmVhZGluZy5UYXNrcy5FeHRlbnNpb25zLykgaW50byB0aGUgVmFsdWVUYXNrUmVwcm8uaU9TIHByb2plY3RcbjQuIEluc3RhbGwgW1N5c3RlbS5UaHJlYWRpbmcuVGFza3MuRXh0ZW5zaW9ucyBOdUdldCBQYWNrYWdlXShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvU3lzdGVtLlRocmVhZGluZy5UYXNrcy5FeHRlbnNpb25zLykgaW50byB0aGUgVmFsdWVUYXNrUmVwcm8uRHJvaWQgcHJvamVjdFxuNS4gQnVpbGQgVmFsdWVUYXNrUmVwcm8uaU9TIG9yIFZhbHVlVGFza1JlcHJvLkRyb2lkXG5cbiMjIEVudmlyb25tZW50XG5cbj09PSBWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UgMjAxNyBmb3IgTWFjIChQcmV2aWV3KSA9PT1cblxuVmVyc2lvbiA3LjUgUHJldmlldyAoNy41IGJ1aWxkIDkzMylcbkluc3RhbGxhdGlvbiBVVUlEOiA5N2Y5M2I3NC1iZDg0LTQxNjEtODZmYi1lOGM0NzRkMWEyNzNcblJ1bnRpbWU6XG4tXHRNb25vIDUuMTAuMC4xNzkgKDIwMTctMTIvZGFjNjA3NzU2MTYpICg2NC1iaXQpXG4tXHRHVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG4tXHRYYW1hcmluLk1hYyA0LjQuMC4zNiAobWFzdGVyIC8gMGM3YzQ5YTYpXG5cbi1cdFBhY2thZ2UgdmVyc2lvbjogNTEwMDAwMTc5XG5cbj09PSBOdUdldCA9PT1cblxuVmVyc2lvbjogNC4zLjEuNDQ0NVxuXG49PT0gLk5FVCBDb3JlID09PVxuXG5SdW50aW1lOiAvdXNyL2xvY2FsL3NoYXJlL2RvdG5ldC9kb3RuZXRcblJ1bnRpbWUgVmVyc2lvbnM6XG5cdDIuMC42XG5cdDIuMC41XG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8yLjEuMTAxL1Nka3NcblNESyBWZXJzaW9uczpcblx0Mi4xLjEwMVxuXHQyLjEuNFxuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzUuMTAuMC9saWIvbW9uby9tc2J1aWxkLzE1LjAvYmluL1Nka3NcblxuPT09IFhhbWFyaW4uUHJvZmlsZXIgPT09XG5cblZlcnNpb246IDEuNi4yXG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIFByb2ZpbGVyLmFwcC9Db250ZW50cy9NYWNPUy9YYW1hcmluIFByb2ZpbGVyXG5cbj09PSBBcHBsZSBEZXZlbG9wZXIgVG9vbHMgPT09XG5cblhjb2RlIDkuMiAoMTM3NzIpXG5CdWlsZCA5QzQwYlxuXG49PT0gWGFtYXJpbi5NYWMgPT09XG5cblZlcnNpb246IDQuNC4wLjMxIChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTEuMTAuMC4zMiAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogNGQ4YzRlMzJcbkJyYW5jaDogZDE1LTdcbkJ1aWxkIGRhdGU6IDIwMTgtMDMtMDcgMTg6Mzk6NDYtMDUwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiA4LjMuMC41IChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5BbmRyb2lkIFNESzogL1VzZXJzL2JyYW1pbi9MaWJyYXJ5L0FuZHJvaWQvc2RrXG5cdFN1cHBvcnRlZCBBbmRyb2lkIHZlcnNpb25zOlxuXHRcdDcuMSAoQVBJIGxldmVsIDI1KVxuXHRcdDguMCAoQVBJIGxldmVsIDI2KVxuXHRcdDguMSAoQVBJIGxldmVsIDI3KVxuXG5TREsgVG9vbHMgVmVyc2lvbjogMjYuMS4xXG5TREsgUGxhdGZvcm0gVG9vbHMgVmVyc2lvbjogMjcuMC4xXG5TREsgQnVpbGQgVG9vbHMgVmVyc2lvbjogMjYuMC4yXG5cbkphdmEgU0RLOiAvdXNyXG5qYXZhIHZlcnNpb24gXCIxLjguMF8xMzFcIlxuSmF2YShUTSkgU0UgUnVudGltZSBFbnZpcm9ubWVudCAoYnVpbGQgMS44LjBfMTMxLWIxMSlcbkphdmEgSG90U3BvdChUTSkgNjQtQml0IFNlcnZlciBWTSAoYnVpbGQgMjUuMTMxLWIxMSwgbWl4ZWQgbW9kZSlcblxuQW5kcm9pZCBEZXNpZ25lciBFUEwgY29kZSBhdmFpbGFibGUgaGVyZTpcbmh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL0FuZHJvaWREZXNpZ25lci5FUExcblxuPT09IFhhbWFyaW4gSW5zcGVjdG9yID09PVxuXG5WZXJzaW9uOiAxLjQuMFxuSGFzaDogYjNmOTJmOVxuQnJhbmNoOiBtYXN0ZXJcbkJ1aWxkIGRhdGU6IEZyaSwgMTkgSmFuIDIwMTggMjI6MDA6MzQgR01UXG5DbGllbnQgY29tcGF0aWJpbGl0eTogMVxuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDcwNTAwMDkzM1xuR2l0IHJldmlzaW9uOiBhY2UxZTEwN2M4ODQ3N2RiMWFiZTVlODA3ODA5NjUwZjA2NDExMmM0XG5CdWlsZCBkYXRlOiAyMDE4LTAzLTE5IDE3OjQyOjQxLTA0XG5YYW1hcmluIGFkZGluczogYTAxMjYzYmRiYmEyNTg5YjFmNmU0MmVmMDg1YmQzMWY2ZTNiZmNmNFxuQnVpbGQgbGFuZTogbW9ub2RldmVsb3AtbGlvbi1kMTUtN1xuXG49PT0gT3BlcmF0aW5nIFN5c3RlbSA9PT1cblxuTWFjIE9TIFggMTAuMTMuM1xuRGFyd2luIDE3LjQuMCBEYXJ3aW4gS2VybmVsIFZlcnNpb24gMTcuNC4wXG4gICAgU3VuIERlYyAxNyAwOToxOTo1NCBQU1QgMjAxN1xuICAgIHJvb3Q6eG51LTQ1NzAuNDEuMn4xL1JFTEVBU0VfWDg2XzY0IHg4Nl82NFxuXG49PT0gRW5hYmxlZCB1c2VyIGluc3RhbGxlZCBhZGRpbnMgPT09XG5cbk1GcmFjdG9yIDMuMDQuMTRcbkFkZGluTWFrZXIgMS40LjJcbk51R2V0IFBhY2thZ2UgTWFuYWdlbWVudCBFeHRlbnNpb25zIDAuMTIuNlxuVGVtcGxhdGUgQ3JlYXRvciAwLjJcbldha2FUaW1lIDMuMC4yXG5SZWR0aCdzIEFkZGlucyAxLjAuOVxuSW50ZXJuZXQgb2YgVGhpbmdzIChJb1QpIGRldmVsb3BtZW50IChQcmV2aWV3KSA3LjFcblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM2NTQ3NTlmLTIwNGItNGY0ZC1iNThmLWE2NjA5OWUyMmY3MyIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVNek0yTnpnPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJub3VuYXBpIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjZjcwZWRlMDFjOWZlZGYwNDE5MGNkMDEwYTBjY2FlODIzZDI4ODM5IiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBub3VuYXBpXG5cbkEgQXp1cmUgZnVuY3Rpb24gdGhhdCByZXRyaWV2ZXMgaWNvbiBzdWdnZXN0aW9ucyB1c2luZyB0aGUgbm91biBwcm9qZWN0IGFwaVxuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHA6Ly9henVyZWRlcGxveS5uZXQvZGVwbG95YnV0dG9uLnBuZyldKGh0dHBzOi8vZGVwbG95LmF6dXJlLmNvbS8/cmVwb3NpdG9yeT1odHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20lMkZzaW1vbmFjbyUyRm5vdW5hcGkmV1QubWNfaWQ9bm91bmFwaS1naXRodWItc2ljb3RpbiMvZm9ybS9kZXBsb3kpXG4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMWE5NTYwZmEtZDc1Yy00M2NmLTg5OTgtYWUyZDE1ODBhMzg3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qRTNORFUwTWpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidWx0aW1hdGUtcHdhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NDhlZGU2ZWRhNTExZDU4OWM2NmFiZmU5NDg5NjA5NTYzNDYwNzMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFBXQVxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS42LjYuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2MTQ5Yzc3Yy1iNTgxLTQ1ZTMtYjc0MC1iYzcxNTIxOTdkMjYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTJNekV6T0RjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxhMiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNTFiMzg2ODZiN2YyMjIyZWE0OTJmZDc2NWY3MTZmNTYwNWE1OGFlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBNeVNob3BcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDEuNi43LlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLXByb2RgIGZsYWcgZm9yIGEgcHJvZHVjdGlvbiBidWlsZC5cblxuIyMgUnVubmluZyB1bml0IHRlc3RzXG5cblJ1biBgbmcgdGVzdGAgdG8gZXhlY3V0ZSB0aGUgdW5pdCB0ZXN0cyB2aWEgW0thcm1hXShodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8pLlxuXG4jIyBSdW5uaW5nIGVuZC10by1lbmQgdGVzdHNcblxuUnVuIGBuZyBlMmVgIHRvIGV4ZWN1dGUgdGhlIGVuZC10by1lbmQgdGVzdHMgdmlhIFtQcm90cmFjdG9yXShodHRwOi8vd3d3LnByb3RyYWN0b3J0ZXN0Lm9yZy8pLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMjk4M2Q5OTAtNjZhMC00MDAwLTlmYjMtODY2NjQ1Zjg5YzI3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUXhNRFEyTlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm9kZS1xcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkN2E2NmZjZDhmZmM4YzkwMmVhN2ZkNGE0ZTAzNjE5ZmJlNDM3NzhlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBub2RlLXFzXG5cblRoaXMgaXMgYSBzYW1wbGUgcHJvamVjdCBjcmVhdGVkIHdpdGggZXhwcmVzcy1nZW5lcmF0b3IgZm9sbG93aW5nIHN0ZXBzIG9uIDxodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS90dXRvcmlhbHMvYXBwLXNlcnZpY2UtZXh0ZW5zaW9uL2NyZWF0ZS1hcHA+XG5cbllvdSBjYW4gc2NhZmZvbGQgKGNyZWF0ZSkgYSBuZXcgRXhwcmVzcyBhcHBsaWNhdGlvbiB1c2luZyB0aGUgRXhwcmVzcyBHZW5lcmF0b3IgdG9vbC4gVGhlIEV4cHJlc3MgR2VuZXJhdG9yIGlzIHNoaXBwZWQgYXMgYW4gbnBtIG1vZHVsZSBhbmQgaW5zdGFsbGVkIGJ5IHVzaW5nIHRoZSBucG0gY29tbWFuZCBsaW5lIHRvb2wgbnBtLlxuXG5gYGBcbiQgbnBtIGluc3RhbGwgLWcgZXhwcmVzcy1nZW5lcmF0b3JcbmBgYFxuXG5UaGUgLWcgc3dpdGNoIGluc3RhbGxzIHRoZSBFeHByZXNzIEdlbmVyYXRvciBnbG9iYWxseSBvbiB5b3VyIG1hY2hpbmUgc28geW91IGNhbiBydW4gaXQgZnJvbSBhbnl3aGVyZS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGUxNmM5OC03MmUzLTRmNTEtOTlhYi1hYzNjYjJlMjkwOWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qYzBOVFkwTkRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkR5bmFtaWNTdGFja0xheW91dFNpemUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzdkNDI4YWQxYTM2MzIwYWMzM2MzNmFmMGYyYjQ0NTBkYjJhZjYxMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIER5bmFtaWNTdGFja0xheW91dFNpemVcbkEgc2FtcGxlIGFwcCB3cml0dGVuIGluIFhhbWFyaW4uRm9ybXMgdGhhdCBzaG93cyBob3cgdG8gZHluYW1pY2FsbHkgY2hhbmdlIHRoZSBoZWlnaHQgb2YgYSBYYW1hcmluLkZvcm1zLlN0YWNrTGF5b3V0XG5cbiFbXShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1ZpZGVvcy9ibG9iL21hc3Rlci9EeW5hbWljU3RhY2tMYXlvdXRTaXplL1Jlc2l6ZVN0YWNrTGF5b3V0LmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzN2QxOWIyZS1jMzg5LTQyZGEtODcyZS1kMWZiZWRmNmMyZWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWXpPVEUzTlRnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctbWF0ZXJpYWwtc3RhcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiZDJjZTNhZTM3MjNiMGMwYWI5NGZkYzg1YjgwYWU2NGM5Y2IwM2YxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBDbGllbnRcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDEuNi42LlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLXByb2RgIGZsYWcgZm9yIGEgcHJvZHVjdGlvbiBidWlsZC5cblxuIyMgUnVubmluZyB1bml0IHRlc3RzXG5cblJ1biBgbmcgdGVzdGAgdG8gZXhlY3V0ZSB0aGUgdW5pdCB0ZXN0cyB2aWEgW0thcm1hXShodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8pLlxuXG4jIyBSdW5uaW5nIGVuZC10by1lbmQgdGVzdHNcblxuUnVuIGBuZyBlMmVgIHRvIGV4ZWN1dGUgdGhlIGVuZC10by1lbmQgdGVzdHMgdmlhIFtQcm90cmFjdG9yXShodHRwOi8vd3d3LnByb3RyYWN0b3J0ZXN0Lm9yZy8pLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNmY3MTdkOTMtYjEzMy00ODY2LWIyNmEtOGU0ODk0ZWUyNWI1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWXpPVEl4TmpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZG9wcGVsZ2FuZ2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgzYjgyOThmMTU1MWZjNzNmZWIwODlhOTIxNDJiMjUyYzA1MGViYjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIENsaWVudFxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS42LjYuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NmM1N2IxYS01NGE0LTQ0MmEtYmM4NS0wMDU2Y2M0NGMyOTUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTVOak0wTVRnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVucyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkYzc5ZDZhODE3NmFlYTAyOTczMzM2MjJhN2UzZmVlODNmZjNhYTRmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwdW5zXG5cbltQdW5wZWRpYV0oaHR0cDovL3B1bnBlZGlhLm9yZy8pXFxcbltGcm9udGVuZCBXZWIgRGV2IEpva2VzXShodHRwOi8vZWxpamFobWFub3IuY29tL2Zyb250LWVuZC13ZWItZGV2LWpva2VzLylcXFxuW1Byb2dyYW1taW5nIFB1bnNdKGh0dHA6Ly93aWtpLmMyLmNvbS8/UHJvZ3JhbW1pbmdQdW5zKVxcXG5bQ29kZSBQdW5zXShodHRwOi8vd3d3LmNvZGVwdW5zLmNvbS8pXFxcbltQcm9ncmFtbWluZyBKb2tlc10oaHR0cHM6Ly93d3cuaG9uZ2tpYXQuY29tL2Jsb2cvcHJvZ3JhbW1pbmctam9rZXMvKVxcXG5bUHJvZ3JhbW1pbmcgUHVuc10oaHR0cHM6Ly90ZWNoYmxvZy5ib3poby5uZXQvcHJvZ3JhbW1pbmctcHVucy8pXFxcbltQcm9ncmFtbWluZyBMYW5ndWFnZSBMaW1lcmlja3NdKGh0dHBzOi8vbWVkaXVtLmZyZWVjb2RlY2FtcC5vcmcvcHJvZ3JhbW1pbmctbGFuZ3VhZ2UtbGltZXJpY2tzLWE4ZmIzNDE2ZTBlNClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4NzZjNjIyNC1kZDAwLTRkOTctYjE1ZS04MWFjZTkxMWYwNjIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qYzJNVEV5TXpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHJvcGVydHktc3VnZ2VzdGVyLXVpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY0ZTM1YjYxY2ZhNzhmZDQxZDk0OTkwNTc0Yzc5Mjc4YTlmYWZmYmMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIENsaWVudFxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS42LjYuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3YzhiNjVlMC05ZmYzLTRkZTktOTE4NS0yZWViYjliOTgwMGQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZ3pOams1TVRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2Vla2x5LXJlYWRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImRiZDJhMjkxMjFmZmVhZjcyZmE3M2ZkODY3MTQ1YTYxZGViZWYxYTQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHdlZWtseS1yZWFkc1xuVGhpcyBpcyAoeWV0KSBhbm90aGVyIGF0dGVtcHQgYXQgb3JnYW5pc2luZyBteSB3ZWVrbHkgcmVhZHNcblxuSSB3aWxsIHBvc3QgaGVyZSBhcnRpY2xlcyB0aGF0IEknbSBwbGFubmluZyB0byByZWFkIHdpdGggYSB3ZWVrbHkgZ29hbFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQzYWZhZjAwLTQyNTctNDJhOS1iYjFmLTgxZmJjMWI1ODdjMSIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUXhNRFEyTlRFPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJub2RlLXFzIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkN2E2NmZjZDhmZmM4YzkwMmVhN2ZkNGE0ZTAzNjE5ZmJlNDM3NzhlIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBub2RlLXFzXG5cblRoaXMgaXMgYSBzYW1wbGUgcHJvamVjdCBjcmVhdGVkIHdpdGggZXhwcmVzcy1nZW5lcmF0b3IgZm9sbG93aW5nIHN0ZXBzIG9uIDxodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS90dXRvcmlhbHMvYXBwLXNlcnZpY2UtZXh0ZW5zaW9uL2NyZWF0ZS1hcHA/V1QubWNfaWQ9bm9kZXFzLWdpdGh1Yi1zaWNvdGluPlxuXG5Zb3UgY2FuIHNjYWZmb2xkIChjcmVhdGUpIGEgbmV3IEV4cHJlc3MgYXBwbGljYXRpb24gdXNpbmcgdGhlIEV4cHJlc3MgR2VuZXJhdG9yIHRvb2wuIFRoZSBFeHByZXNzIEdlbmVyYXRvciBpcyBzaGlwcGVkIGFzIGFuIG5wbSBtb2R1bGUgYW5kIGluc3RhbGxlZCBieSB1c2luZyB0aGUgbnBtIGNvbW1hbmQgbGluZSB0b29sIG5wbS5cblxuYGBgXG4kIG5wbSBpbnN0YWxsIC1nIGV4cHJlc3MtZ2VuZXJhdG9yXG5gYGBcblxuVGhlIC1nIHN3aXRjaCBpbnN0YWxscyB0aGUgRXhwcmVzcyBHZW5lcmF0b3IgZ2xvYmFsbHkgb24geW91ciBtYWNoaW5lIHNvIHlvdSBjYW4gcnVuIGl0IGZyb20gYW55d2hlcmUuXG4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjM3MDJlZDQtOTIwZS00NWE3LWI1NTItZmRjMmRmNmY0ZWVkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzJNekl4T1RjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZG9wcGVsZ2FuZ2VyLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1YmJmNmJmMjMyZGU5ZGUyNjdhYzM1MmU2OGNhY2QyODA2ODFlMWFjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBkb3BwZWxnYW5nZXItYXBpXG5UaGlzIGlzIGEgc2VydmVybGVzcyBBUEkgZm9yIHRoZSBkb3BwZWxnYW5nZXIgYXBwXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjUzYWYzNDktODNlZi00NzA2LWEyZDgtYjdiMTEzOWI1OWQxIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpORGc0TkRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hanMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzJkYTMwZTk2ZDBjNmE0OTNlYzVmNzYwNTlkOWU4M2Q3ZDhjNWQxMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgc2ltb25hanNcblBvdGVudGlhbGx5IGEgbmV3IGpzIGZyYW1ld29yayDwn5iCXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjA1NDdiZjUtOWVlZS00Njg5LWJmMGItZTBiOTE1NDQ5NDFjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzFOak01TWpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNoYW5nZVRhYmJlZFBhZ2VJY29uU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZmNGY3ZjY5NjEyNDZiYTAyMDVhMjI0NDU1ZDkwYTE1MDNiY2UzYzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIENoYW5nZVRhYmJlZFBhZ2VJY29uU2FtcGxlXG5BIHNhbXBsZSBYYW1hcmluLkZvcm1zIGFwcCBkZW1vbnN0cmF0aW5nIGhvdyB0byB1cGRhdGUgdGhlIGljb24gYW5kIHRpdGxlIG9mIGEgVGFiYmVkUGFnZSBhbnkgdGltZSBpdCBpcyB0YXBwZWRcblxuIVtdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVmlkZW9zL2Jsb2IvbWFzdGVyL0NoYW5nZVRhYmJlZFBhZ2VJY29uU2FtcGxlL0NoYW5nZVRhYmJlZFBhZ2VJY29uU2FtcGxlLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyNDg1NWQ5NC05MmU5LTRiZWItOWQxYi1mZjA5OTRhZTJjMDAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXlPVFl4TVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVwcGllcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5OWYyODJhZTM1MDg3YTM2OGU5NDY4OTdhMTI1NWFmMjVmYWMzOTY4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5PcmlnaW5hbCBwcm9qZWN0IGJ5IFtKb2huIFBhcGFdKGh0dHA6Ly90d2l0dGVyLmNvbS9qb2huX3BhcGEpXG5cbllvdSBhcmUgdmlld2luZyBhIGZvcmsgYWRhcHRlZCBieSBbU2ltb25hIENvdGluXShodHRwOi8vdHdpdHRlci5jb20vc2ltb25hX2NvdGluKVxuXG5Zb3UgY2FuIFt3YXRjaCBKb2huIFBhcGEgYnVpbGQgdGhlIGFwcCBhcyBwYXJ0IG9mIGhpcyBzZXJpZXMgaGVyZV0oaHR0cHM6Ly9qb2hucGFwYS5uZXQvYW5ndWxhci1jb3Ntb3NkYi0xLylcblxuWW91IGNhbiBbdmlldyBhbGwgdmlkZW9zIHRvZ2V0aGVyIGhlcmVdKC9WSURFT1MubWQpXG5cbltMZWFybiBtb3JlIGFib3V0IGRldmVsb3BpbmcgTm9kZS5qcyBhcHBzIHdpdGggQXp1cmUncyBjbG91ZCBzZXJ2aWNlcyBoZXJlXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9ub2RlanMvYXp1cmUpXG5cbiMjIERvY2tlclxuXG5DcmVhdGUgdGhlIERvY2tlciBpbWFnZSBhbmQgcnVuIGl0IGxvY2FsbHlcblxuYGBgYmFzaFxuZG9ja2VySW1hZ2U9YW5ndWxhci1jb3Ntb3NkYlxuZG9ja2VyIGJ1aWxkIC10ICRkb2NrZXJJbWFnZSAuXG5kb2NrZXIgcnVuIC1kIC1wIDMwMDA6ODAgJGRvY2tlckltYWdlXG5gYGBcblxuIyMgUmVxdWlyZW1lbnRzXG5cbjEuIEluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJXG5cbiAgIGBgYGJhc2hcbiAgIG5wbSBpbnN0YWxsIC1nIEBhbmd1bGFyL2NsaVxuICAgYGBgXG5cbjEuIEluc3RhbGwgdGhlIFtBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaSlcblxuIyMgR2V0dGluZyBTdGFydGVkXG5cbjEuIENsb25lIHRoaXMgcmVwb3NpdG9yeVxuXG4gICBgYGBiYXNoXG4gICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3B1cHBpZXNcbiAgIGNkIHB1cHBpZXNcbiAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBucG0gcGFja2FnZXNcblxuICAgYGBgYmFzaFxuICAgbnBtIGlcbiAgIGBgYFxuXG4xLiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICBSZW5hbWUgdGhlIGBleGFtcGxlLWVudmlyb25tZW50LmpzYCBmaWxlIHRvIGBlbnZpcm9ubWVudC5qc2AgaW4gdGhlIGBzZXJ2ZXIvZW52L2AgZm9sZGVyIGFuZCB1cGRhdGUgaXQgd2l0aCB5b3VyIENvc21vcyBEQiBzZXR0aW5ncy4gUmVwbGFjZSB0aGUgZGF0YWJhc2UgbmFtZSBrZXksIGFuZCBwb3J0IHdpdGggeW91ciBzcGVjaWZpYyBjb25maWd1cmF0aW9uLlxuXG4gICBgYGBqYXZhc2NyaXB0XG4gICAvLyBzZXJ2ZXIvZW52L2Vudmlyb25tZW50LmpzXG4gICBjb25zdCBjb3Ntb3NQb3J0ID0gMTIzNDsgLy8gcmVwbGFjZSB3aXRoIHlvdXIgcG9ydFxuICAgY29uc3QgZGJOYW1lID0gJ3lvdXItY29zbW9zLWRiLW5hbWUtZ29lcy1oZXJlJztcbiAgIGNvbnN0IGtleSA9ICd5b3VyLWtleS1nb2VzLWhlcmUnO1xuXG4gICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgY29zbW9zUG9ydCxcbiAgICAgZGJOYW1lLFxuICAgICBrZXlcbiAgIH07XG4gICBgYGBcblxuIyMgUnVubmluZyB0aGUgYXBwXG5cbjEuIEJ1aWxkIHRoZSBBbmd1bGFyIGFwcFxuXG4gICBgYGBiYXNoXG4gICBuZyBidWlsZFxuICAgYGBgXG5cbjEuIExhdW5jaCB0aGUgc2VydmVyXG5cbiAgIGBgYGJhc2hcbiAgIG5vZGUgc3JjL3NlcnZlci9pbmRleC5qc1xuICAgYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gaHR0cDovL2xvY2FsaG9zdDozMDAwXG5cbiMjIFByb2JsZW1zIG9yIFN1Z2dlc3Rpb25zXG5cbltPcGVuIGFuIGlzc3VlIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9wdXBwaWVzL2lzc3VlcylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmNzg0ODAzZC1hMTYxLTRmYjEtOTMzYy1hOTA0YjAxMDUzYmMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXlPVGN6TmpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVwcGllcy1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZGZkYWExNmM0MWQ3OGY3NjA1OGVjYjI5MTQ0MzcyNjk5ZWNjMGI5MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgcHVwcGllcy1hcGlcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyNDBiMmJkOS0wY2EzLTRlYzktYWY5ZS1kN2ZiODY5NzJmMjYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16QXlOVFU0TURNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkN1c3RvbVNsaWRlckNvbG9yIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE5M2IxOGQzMzA4N2FiOWMwMWFjZmRjM2E3OWI2NzE4ZjQxMzc1N2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEN1c3RvbVNsaWRlckNvbG9yXG5BIFhhbWFyaW4uRm9ybXMgc2FtcGxlIHRoYXQgc2hvd3MgaG93IHRvIGN1c3RvbWl6ZSB0aGUgY29sb3Igb2YgYSBYYW1hcmluLkZvcm1zLlNsaWRlciBjb250cm9sXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzg4Y2E2ZjEtYjBlOC00OTMyLTk0YzAtZDNlYWJiZGNmNjE1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qazRNakUzTmpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNmNDg2YjEwYjBjZDAxMjZjMjI2NjZjZjJjMGQxMTQ0ODBiY2ZlMTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlXG5BIHNhbXBsZSBhcHAgdG8gZGVtb25zdHJhdGUgaG93IHRvIGNyYXNoIGEgWGFtYXJpbi5Gb3JtcyBhcHAgdXNpbmcgc2ltdWx0YW5lb3VzIGFuaW1hdGlvbnNcblxuIVtdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVmlkZW9zL2Jsb2IvbWFzdGVyL0FuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlL0FuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkMTQwMGUwNy0yNzdmLTQyNmYtOTgwMC01NDBjMmIzN2NiZWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16STROelF6TnpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hLXBicCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzZTU5ODViMWFjODlkNDVlNGZmZTVkZTJkODE0Y2E1NmFkMTY0ZmJmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyMjIEJ1aWxkIGFuZCBkZXBsb3kgQW5ndWxhciB0byB0aGUgQ2xvdWQgXG5cblRoaXMgYXJ0aWNsZSB3YXMgb3JpZ2luYWxseSBwb3N0ZWQgb24gdGhlIG5nLWNvbmYgYmxvZyBhdCBodHRwczovL3d3dy5uZy1jb25mLm9yZy9idWlsZC1kZXBsb3ktYW5ndWxhci1jbG91ZC8gXG5cbiMjIyBTdGFycmluZyBBbmd1bGFyIENMSSwgQ2lyY2xlQ0kgYW5kIEF6dXJlXG5cbkFzIGEgZGV2ZWxvcGVyLCBJIHdhbnQgdG8gd3JpdGUgY29kZS4gSSB3YW50IHRvIHB1c2ggbXkgY2hhbmdlcyB0byBnaXQsIGdldFxubm90aWZpZWQgd2hlbiBJIGJyZWFrIHRoZSBidWlsZCBvciB0ZXN0cywgZml4IGFuZCB0aGVuIHJlcGVhdC4gSXMgdGhhdCB0b28gbXVjaFxudG8gYXNrPyBBcHBhcmVudGx5LCBiZWNhdXNlIHNldHRpbmcgdGhpcyB1cCBpbiAyMDE3IGlzIHN0aWxsIGtpbmQgb2YgYVxubmlnaHRtYXJlLiBCdXQgZG9lcyBpdCBoYXZlIHRvIGJlPyBcblxuSW4gdGhpcyBwb3N0IHdl4oCZbGwgc2VlIGhvdyB3ZSBjYW4gYWNoaWV2ZSBpdCBhbGwgdGhyb3VnaCBhIHNlcmllcyBvZiBzaW1wbGVcbnN0ZXBzOlxuXG4xLiAgQ29uZmlndXJlIFtDaXJjbGVDSV0oaHR0cDovL2NpcmNsZWNpLmNvbSkgdG8gYnVpbGQgYW5kIHRlc3QgeW91ciBhcHAgb24gZWFjaFxuY2hhbmdlIHB1c2hlZCB0byBHaXRodWJcbjEuICBCdWlsZCBhIERvY2tlciBpbWFnZSB3aXRoIHVwZGF0ZWQgY29kZSBhbmQgcHVzaCBpdCB0byBBenVyZSBDb250YWluZXIgUmVnaXN0cnlcbjEuICBIb3N0IHlvdXIgYXBwIG9uIEF6dXJlIGFuZCBjb250aW51b3VzbHkgZGVwbG95IG5ldyBjaGFuZ2VzIHVzaW5nIHdlYmhvb2tzXG5cbioqKioqXG5cbj4gQnV0IENJQ0QgaXMgdGVycmlmeWluZyFcblxuPiDigJQgUG9zc2libHkgWW91LiBQb3NzaWJseSBqdXN0IG5vdy5cblxuWW91IG1pZ2h0IGFsc28gdGhpbmsgaXTigJlzIG5vdCB5b3VyIGpvYiBhbmQgeW91IG5lZWQgdG8ga25vdyBhbGwgdGhpbmdzIGFib3V0XG5Eb2NrZXIgYW5kIEt1YmVybmV0ZXMgYW5kIFN3YXJtIGFuZCAuLiBhbmQgLi4gU3BvaWxlciBhbGVydCEgQ29udGludW91c1xuSW50ZWdyYXRpb24gLyBEZWxpdmVyeSAoQ0kvQ0QpIGNhbiBoZWxwIHlvdSAqKnNhdmUgdGltZSoqIGFuZCBpdOKAmXMgbm90IHRoYXQgaGFyZFxudG8gZ2V0IHN0YXJ0ZWQhXG5cbiFbXShodHRwczovL2Nkbi1pbWFnZXMtMS5tZWRpdW0uY29tL21heC8xNjAwLzEqSmR1VUV3blo4cnJ1X3kwd0ZTY0ZhQS5wbmcpXG48c3BhbiBjbGFzcz1cImZpZ2NhcHRpb25faGFja1wiPkNJQ0Q8L3NwYW4+XG5cbj4gKipDb250aW51b3VzIEludGVncmF0aW9uKiogKENJKSBpcyBhIGRldmVsb3BtZW50IHByYWN0aWNlIHRoYXQgcmVxdWlyZXNcbj4gZGV2ZWxvcGVycyB0byAqKmludGVncmF0ZSoqIGNvZGUgaW50byBhIHNoYXJlZCByZXBvc2l0b3J5IHNldmVyYWwgdGltZXMgYSBkYXkuXG5cbj4gKipDb250aW51b3VzIERlbGl2ZXJ5ICoqKENEKSoqICoqaXMgYSBzb2Z0d2FyZSBkZXZlbG9wbWVudCBkaXNjaXBsaW5lIHdoZXJlIHlvdVxuPiBidWlsZCBzb2Z0d2FyZSBpbiBzdWNoIGEgd2F5IHRoYXQgdGhlIHNvZnR3YXJlIGNhbiBiZSByZWxlYXNlZCB0byBwcm9kdWN0aW9uIGF0XG5hbnkgdGltZS5cblxuVG8gc3RhcnQgYnVpbGRpbmcgeW91ciBDSUNEIHBpcGVsaW5lLCB5b3UgY291bGQgd3JpdGUgeW91ciBvd24gc2hlbGwgc2NyaXB0c1xuZnJvbSBzY3JhdGNoLiBCdXQgaWYgeW91IGxpa2UgKiplYXN5KiosIHRoZXJlIGFyZSBhIGxvdCBvZiB0b29scyB0aGF0IGNhbiBtYWtlXG55b3VyIHlvdXIgbGlmZSBhIGxvdCAqKmVhc2llcioqLlxuXG4hW10oaHR0cHM6Ly9jZG4taW1hZ2VzLTEubWVkaXVtLmNvbS9tYXgvMTYwMC8xKmU3UHo1UEo3aHJ5T1lEMTVRUTRUVWcucG5nKVxuPHNwYW4gY2xhc3M9XCJmaWdjYXB0aW9uX2hhY2tcIj5Db250aW51b3VzIEludGVncmF0aW9uIFRvb2xzPC9zcGFuPlxuXG5PbmUgb2YgbXkgZmF2b3VyaXRlIHRvb2xzIGlzIENpcmNsZUNJIGJlY2F1c2UgaXQgaGFzIGEgbmljZSBVSSBhbmQgaXTigJlzIGZyZWUgZm9yXG5vcGVuIHNvdXJjZSBwcm9qZWN0cy4gQWxsIHlvdSBuZWVkIHRvIGdldCBzdGFydGVkIHdpdGggQ2lyY2xlQ0kgaXMgYSBHaXRIdWIgb3JcbkJpdGJ1Y2tldCBhY2NvdW50LiBHbyB0byBbaHR0cHM6Ly9jaXJjbGVjaS5jb20vXShodHRwczovL2NpcmNsZWNpLmNvbS8pIGFuZCBzaWduXG51cCBmb3IgYSBuZXcgYWNjb3VudC5cblxuKioqKipcblxuIyMjIyBTZXR1cCBDaXJjbGVDSSBcblxuTGV04oCZcyBjcmVhdGUgYSBuZXcgcHJvamVjdCB1c2luZyB0aGUgQW5ndWxhciBDTEkgYW5kIHB1c2ggaXQgdG8gR2l0SHViLiBJZiB5b3VcbmhhdmUgYW4gZXhpc3RpbmcgcHJvamVjdCwgeW91IGNhbiBtb3ZlIG9uIHRvIHRoZSBuZXh0IHN0ZXBzLlxuXG4gICAgJCBuZyBuZXcgYXdlc29tZS1hcHBcblxuSW4gQ2lyY2xlQ0ksIGNvbmZpZ3VyZSB5b3VyIG5ldyBhd2Vzb21lIHByb2plY3QgdG8gYnVpbGQgYW5kIHJ1biB0ZXN0cyBieVxuZm9sbG93aW5nIHRoZSBzdGVwcyBiZWxsb3cuXG5cbjEuICBHbyB0byBQcm9qZWN0cyB0YWIgYW5kIGNsaWNrIOKAmEFkZCBwcm9qZWN04oCdXG4xLiAgQ2hvb3NlIHRoZSDigJhhd2Vzb21lLWFwcOKAmSBwcm9qZWN0IGFuZCBjbGljayDigJhTZXR1cCBwcm9qZWN04oCZXG4xLiAgTGVhdmUgZGVmYXVsdHMgZm9yIG9wZXJhdGluZyBzeXN0ZW0gYW5kIHZlcnNpb24gXG4xLiAgUGljayB5b3VyIGxhbmd1YWdlIG9mIGNob2ljZSwgZm9yIGV4YW1wbGUgTm9kZVxuXG5JbiB0aGUgcm9vdCBvZiB5b3VyIHByb2plY3QsIGNyZWF0ZSBhIGZvbGRlciBuYW1lZCAqLmNpcmNsZWNpKiBhbmQgYWRkIGEgZmlsZVxuKmNvbmZpZy55bWwqLiBDb3B5IGFuZCBwYXN0ZSB0aGUgZ2lzdCBiZWxsb3cgaW4gdGhlIG5ldyBmaWxlLlxuXG5gYGBcbnZlcnNpb246IDJcbmpvYnM6XG4gIGJ1aWxkOlxuICAgIGRvY2tlcjpcbiAgICAgIC0gaW1hZ2U6IGNpcmNsZWNpL25vZGU6Ni1icm93c2Vyc1xuXG4gICAgd29ya2luZ19kaXJlY3Rvcnk6IH4vcmVwb1xuXG4gICAgc3RlcHM6XG4gICAgICAtIGNoZWNrb3V0XG5cbiAgICAgIC0gcmVzdG9yZV9jYWNoZTpcbiAgICAgICAgICBrZXlzOlxuICAgICAgICAgIC0gdjEtZGVwZW5kZW5jaWVzLXt7IGNoZWNrc3VtIFwicGFja2FnZS5qc29uXCIgfX1cbiAgICAgICAgICAjIGZhbGxiYWNrIHRvIHVzaW5nIHRoZSBsYXRlc3QgY2FjaGUgaWYgbm8gZXhhY3QgbWF0Y2ggaXMgZm91bmRcbiAgICAgICAgICAtIHYxLWRlcGVuZGVuY2llcy1cblxuICAgICAgLSBydW46IHlhcm4gaW5zdGFsbFxuXG4gICAgICAtIHNhdmVfY2FjaGU6XG4gICAgICAgICAgcGF0aHM6XG4gICAgICAgICAgICAtIG5vZGVfbW9kdWxlc1xuICAgICAgICAgIGtleTogdjEtZGVwZW5kZW5jaWVzLXt7IGNoZWNrc3VtIFwicGFja2FnZS5qc29uXCIgfX1cblxuICAgICAgLSBydW46IHlhcm4gbmcgYnVpbGQgLS1wcm9kIC0tYnVpbGQtb3B0aW1pemVyIC0tbm8tcHJvZ3Jlc3NcbiAgICAgIC0gcnVuOiB5YXJuIG5nIHRlc3QgLS1zaW5nbGUtcnVuIC0tbm8tcHJvZ3Jlc3NcbmBgYFxuXG5UaGVyZeKAmXMgYSBmZXcga2V5IHRoaW5ncyBoYXBwZW5pbmcgaGVyZTpcblxuMS4gIEluIENpcmNsZUNJLCBhIHJ1biBpcyBjb21wcmlzZWQgb2Ygb25lIG9yIG1vcmUgbmFtZWQgam9icy4gQXQgdGhlIG1vbWVudCBvdXJcbmNvbmZpZyBvbmx5IGRlZmluZXMgb25lIGpvYiwgY2FsbGVkIGBidWlsZGAuIFRoaXMgam9iIGlzIHRoZSBkZWZhdWx0IGVudHJ5LXBvaW50XG5mb3IgYSBydW4gdGhhdCBpcyB0cmlnZ2VyZWQgYnkgYSBwdXNoIHRvIEdpdGh1Yi5cbjEuICBXZSBhbHNvIG5lZWQgdG8gZGVmaW5lIGEgKipwbGFjZSoqIHdoZXJlIG91ciBqb2JzIHdpbGwgcnVuIC4gVGhpcyBpcyBjYWxsZWQgYW5cbioqZXhlY3V0b3IqKiBpbiBDaXJjbGVDSSBhbmQgdGhlcmUgYXJlIHR3byBvcHRpb25zOiB1c2UgZG9ja2VyIG9yIGEgZnVsbCB2aXJ0dWFsXG5tYWNoaW5lLiBMZXTigJlzIHVzZSBkb2NrZXIgZm9yIG5vdyBhbmQgdXNlIHRoZSBjaXJjbGVjaS9ub2RlOjYtYnJvd3NlcnMgaW1hZ2UuXG4xLiAgQSBqb2IgaXMgYSBjb2xsZWN0aW9uIG9mICoqc3RlcHMqKiB0aGF0IHJ1biBjb21tYW5kcyBmb3IgdXNcbjEuICBDaXJjbGVDSSBjYW4gbWFrZSBvdXIgYnVpbGRzIGZhc3RlciBieSBjYWNoaW5nIG91ciBub2RlX21vZHVsZXNcbjEuICBGaW5hbGx5LCB3ZSBydW4gY29tbWFuZHMgdG8gYnVpbGQgb3VyIHByb2plY3QgZm9yIHByb2R1Y3Rpb24gYW5kIHJ1biB0ZXN0cyB1c2luZ1xuQW5ndWxhciBDTElcblxuQXQgdGhpcyBwb2ludCB3ZSBoYXZlIGF1dG9tYXRlZCB0aGUgYnVpbGQgYW5kIHRlc3QgcnVucyBzbyBsZXTigJlzIGdvIGFoZWFkIGFuZFxuc2VlIHNvbWUgcmVzdWx0cyEgUHVzaCB0aGUgY29uZmlnIGZpbGUgdG8gR2l0SHViIGFuZCBpbiBDaXJjbGVDSSBjbGljayDigJhTdGFydFxuYnVpbGRpbmfigJkuIFlvdSB3aWxsIGJlIHJlZGlyZWN0ZWQgdG8gYSBwYWdlIHdoZXJlIHlvdSBjYW4gc2VlIHRoZSBzdGF0dXMgb2YgeW91clxucnVubmluZyBidWlsZC4gSWYgZXZlcnl0aGluZyBpcyBjb3JyZWN0LCB5b3VyIHJ1biBzaG91bGQgY29tcGxldGUgc3VjY2Vzc2Z1bGx5XG5pbiBhYm91dCBhIG1pbnV0ZS5cblxuIVtdKGh0dHBzOi8vY2RuLWltYWdlcy0xLm1lZGl1bS5jb20vbWF4LzE2MDAvMSpLS1lxODF3QmZiZ2ktOGJmY3FfX0dRLnBuZylcbjxzcGFuIGNsYXNzPVwiZmlnY2FwdGlvbl9oYWNrXCI+Q2lyY2xlQ0kgZmlyc3QgcnVuIHJlc3VsdDwvc3Bhbj5cblxuKioqKipcblxuQXdlc29tZSEgTGV04oCZcyBuZXh0IGxvb2sgaW50byBjb25maWd1cmluZyBbRG9ja2VyXShodHRwczovL3d3dy5kb2NrZXIuY29tLykgYW5kXG5bQXp1cmVdKGh0dHBzOi8vYWthLm1zL0s4a3RraSlcblxuIVtdKGh0dHBzOi8vY2RuLWltYWdlcy0xLm1lZGl1bS5jb20vbWF4LzE2MDAvMSpILS1RWW1reXNmS1A3S04wcjRLY1RBLnBuZylcblxuTmV4dCB3ZeKAmWxsIG5lZWQgYW4gQXp1cmUgYWNjb3VudC4gSWYgeW91IGRvbuKAmXQgaGF2ZSBvbmUsIGdvIGFoZWFkIGFuZCByZWdpc3RlclxuYXQgW2h0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9mcmVlXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZnJlZSkuIFxuXG4jIyMjIEJ1aWxkIGFuZCBwdXNoIERvY2tlciBpbWFnZVxuXG5DcmVhdGUgYSBuZXcgZmlsZSBuYW1lZCBEb2NrZXJmaWxlIGFuZCBzYXZlIGl0IGluIHRoZSByb290IG9mIHlvdXIgcHJvamVjdC5cblxuYGBgXG5GUk9NIG5naW54OmFscGluZVxuTEFCRUwgYXV0aG9yPVwiU2ltb25hIENvdGluXCJcbkNPUFkgLi9kaXN0IC91c3Ivc2hhcmUvbmdpbngvaHRtbFxuRVhQT1NFIDgwIDQ0M1xuRU5UUllQT0lOVCBbXCJuZ2lueFwiLFwiLWdcIixcImRhZW1vbiBvZmY7XCJdXG5gYGBcblxuVG8gc3RvcmUgeW91ciBkb2NrZXIgaW1hZ2VzLCBvcGVuIHRoZSBBenVyZSBwb3J0YWwgYW5kIGNyZWF0ZSBuZXcgW0F6dXJlXG5Db250YWluZXIgUmVnaXN0cnldKGh0dHBzOi8vYWthLm1zL0JicTQ3YikgKEFDUikuXG5cbj4gQXp1cmUgQ29udGFpbmVyIFJlZ2lzdHJ5IGFsbG93cyB5b3UgdG8gc3RvcmUgaW1hZ2VzIGZvciBhbGwgdHlwZXMgb2YgY29udGFpbmVyXG4+IGRlcGxveW1lbnRzIGluY2x1ZGluZyBEQy9PUywgRG9ja2VyIFN3YXJtLCBLdWJlcm5ldGVzLCBhbmQgQXp1cmUgc2VydmljZXMgc3VjaFxuYXMgQXBwIFNlcnZpY2UsIEJhdGNoLCBTZXJ2aWNlIEZhYnJpYywgYW5kIG90aGVycy4gWW91ciBEZXZPcHMgdGVhbSBjYW4gbWFuYWdlXG50aGUgY29uZmlndXJhdGlvbiBvZiBhcHBzIGlzb2xhdGVkIGZyb20gdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGhvc3RpbmdcbmVudmlyb25tZW50LlxuXG48YSBocmVmPVwiaHR0cHM6Ly95b3V0dS5iZS9mR2hoRVF6ZWtzSVwiIHRhcmdldD1cIl9ibGFua1wiPjxpbWcgc3JjPVwiaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL2RlcGxveS1hbmd1bGFyLWNsb3VkL2Jsb2IvbWFzdGVyL0NyZWF0ZUF6dXJlQ29udGFpbmVyUmVnaXN0cnkucG5nXCIgXG5hbHQ9XCJDcmVhdGUgQXp1cmUgQ29udGFpbmVyIFJlZ2lzdHJ5XCIgLz48L2E+XG5cbkVkaXQgKmNvbmZpZy55bWwqIHRvIGJ1aWxkIGFuZCBwdXNoIGRvY2tlciBpbWFnZXMgdG8gQUNSLiBDb3B5IGFuZCBwYXN0ZSB0aGVcbmNvbmZpZyBiZWxsb3cgYW5kIHJlcGxhY2UgKmF3ZXNvbWVhcHAuYXp1cmVjci5pbyAqd2l0aCB5b3VyIG93biBMb2dpbiBTZXJ2ZXJcbnZhbHVlLiBZb3UgY2FuIGZpbmQgaXQgb24gdGhlIE92ZXJ2aWV3IHBhZ2Ugb2YgeW91ciBuZXcgY29udGFpbmVyIHJlZ2lzdHJ5LlxuXG5gYGBcbnZlcnNpb246IDJcbmpvYnM6XG4gIGJ1aWxkOlxuICAgIGRvY2tlcjpcbiAgICAgIC0gaW1hZ2U6IGNpcmNsZWNpL25vZGU6Ni1icm93c2Vyc1xuXG4gICAgd29ya2luZ19kaXJlY3Rvcnk6IH4vcmVwb1xuXG4gICAgc3RlcHM6XG4gICAgICAtIGNoZWNrb3V0XG4gICAgICAtIHNldHVwX3JlbW90ZV9kb2NrZXJcblxuICAgICAgLSByZXN0b3JlX2NhY2hlOlxuICAgICAgICAgIGtleXM6XG4gICAgICAgICAgLSB2MS1kZXBlbmRlbmNpZXMte3sgY2hlY2tzdW0gXCJwYWNrYWdlLmpzb25cIiB9fVxuICAgICAgICAgICMgZmFsbGJhY2sgdG8gdXNpbmcgdGhlIGxhdGVzdCBjYWNoZSBpZiBubyBleGFjdCBtYXRjaCBpcyBmb3VuZFxuICAgICAgICAgIC0gdjEtZGVwZW5kZW5jaWVzLVxuXG4gICAgICAtIHJ1bjogeWFybiBpbnN0YWxsXG5cbiAgICAgIC0gc2F2ZV9jYWNoZTpcbiAgICAgICAgICBwYXRoczpcbiAgICAgICAgICAgIC0gbm9kZV9tb2R1bGVzXG4gICAgICAgICAga2V5OiB2MS1kZXBlbmRlbmNpZXMte3sgY2hlY2tzdW0gXCJwYWNrYWdlLmpzb25cIiB9fVxuXG4gICAgICAtIHJ1bjogeWFybiBuZyBidWlsZCAtLXByb2QgLS1idWlsZC1vcHRpbWl6ZXIgLS1uby1wcm9ncmVzc1xuICAgICAgLSBydW46IHlhcm4gbmcgdGVzdCAtLXNpbmdsZS1ydW4gLS1uby1wcm9ncmVzc1xuICAgICAgLSBydW46XG4gICAgICAgICAgY29tbWFuZDogfFxuICAgICAgICAgICAgZG9ja2VyIGJ1aWxkIC10IGF3ZXNvbWVhcHAuYXp1cmVjci5pby9hbmd1bGFyLWNsaS1uZ2lueDoxLjAgLlxuICAgICAgLSBydW46XG4gICAgICAgICAgY29tbWFuZDogfFxuICAgICAgICAgICAgZG9ja2VyIGxvZ2luIC0tdXNlcm5hbWUgJERPQ0tFUl9VU0VSIC0tcGFzc3dvcmQgJERPQ0tFUl9QQVNTIGF3ZXNvbWVhcHAuYXp1cmVjci5pb1xuICAgICAgLSBydW46XG4gICAgICAgICAgY29tbWFuZDogfFxuICAgICAgICAgICAgZG9ja2VyIHB1c2ggYXdlc29tZWFwcC5henVyZWNyLmlvL2FuZ3VsYXItY2xpLW5naW54OjEuMFxuYGBgXG48c3BhbiBjbGFzcz1cImZpZ2NhcHRpb25faGFja1wiPlVwZGF0ZWQgY29uZmlnLnltbCBpbmNsdWRpbmcgZG9ja2VyIGNvbmZpZzwvc3Bhbj5cblxuVG8gcmV0cmlldmUgeW91ciBjb250YWluZXIgcmVnaXN0cnkgbG9naW4gZGV0YWlscyBnbyB0byB0aGUgQWNjZXNzIEtleXMgdGFiIGluXG50aGUgQXp1cmUgUG9ydGFsLiBPbiB0aGlzIHBhZ2UsIGNvcHkgdGhlIHVzZXIgbmFtZSBmaWVsZC4gR28gdG8gQ2lyY2xlQ0ksXG5wcm9qZWN0IHNldHRpbmdzLCBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIENsaWNrIEFkZCBWYXJpYWJsZSwgZ2l2ZSBpdCB0aGUgbmFtZVxuRE9DS0VSX1VTRVIgYW5kIHBhc3RlIHRoZSB1c2VyIG5hbWUgeW91IGNvcGllZCBlYXJsaWVyLiBGb2xsb3cgdGhlIHNhbWUgc3RlcHMgdG9cbnNldHVwIERPQ0tFUl9QQVNTLCBidXQgdGhpcyB0aW1lIGNvcHkgdGhlIHBhc3N3b3JkIGZpZWxkLlxuXG4jIyMjIEhvc3QgeW91ciBhcHAgYW5kIGNvbnRpbnVvdXNseSBkZXBsb3kgY2hhbmdlc1xuXG5UbyBob3N0IHlvdXIgYXdlc29tZS1hcHAgeW91IG5lZWQgdG8gY3JlYXRlIG5ldyBbQXp1cmUgV2ViIEFwcCBmb3JcbkNvbnRhaW5lcnNdKGh0dHBzOi8vYWthLm1zL0JtcnM4MSkuIFxuXG4+IFtXZWJcbj4gQXBwXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9hcHAtc2VydmljZS9hcHAtc2VydmljZS13ZWItb3ZlcnZpZXcpXG5pcyBhIGZ1bGx5IG1hbmFnZWQgY29tcHV0ZSBwbGF0Zm9ybSB0aGF0IGlzIG9wdGltaXplZCBmb3IgaG9zdGluZyB3ZWJzaXRlcyBhbmRcbndlYiBhcHBsaWNhdGlvbnMuXG5cbjxhIGhyZWY9XCJodHRwczovL3lvdXR1LmJlL3gzZl9OQnpZN2tZXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGltZyBzcmM9XCJodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vZGVwbG95LWFuZ3VsYXItY2xvdWQvYmxvYi9tYXN0ZXIvQ3JlYXRlQXp1cmVXZWJBcHBDb250YWluZXIucG5nXCIgXG5hbHQ9XCJDcmVhdGUgQXp1cmUgV2ViIEFwcCBmb3IgQ29udGFpbmVyc1wiIC8+PC9hPlxuXG5Db25maWd1cmUgY29udGludW91cyBkZXBsb3ltZW50IG9mIHlvdXIgYXBwIHVzaW5nIHdlYmhvb2tzLiBUaGUgZmlyc3QgdGhpbmcgeW91XG5uZWVkIHRvIGRvIGlzIGNyZWF0ZSBhIG5ldyBXZWJob29rLiBPcGVuIHRoZSBwb3J0YWwgYW5kIGdvIHRvIHlvdXIgbmV3IGNvbnRhaW5lclxucmVnaXN0cnkuIENsaWNrIG9uIHRoZSB3ZWJob29rcyBsaW5rIGluIHRoZSBsZWZ0IGhhbmQgc2lkZSBtZW51IGFuZCBhZGQgYSBuZXdcbndlYmhvb2suIFlvdSBuZWVkIHRvIGRlZmluZSBhIG5hbWUsIGEg4oCYU2VydmljZSBVUknigJkgYW5kIGEgZmV3IG90aGVyIHZhbHVlcy4gWW91XG5jYW4gYnVpbGQgeW91ciBzZXJ2aWNlIHVyaSBieSBkb3dubG9hZGluZyB0aGUgcHVibGlzaCBwcm9maWxlIGNvbmZpZyBmcm9tIHRoZVxud2ViIGFwcCBvdmVydmlldyBwYWdlLiBJdCBzaG91bGQgbG9vayBsaWtlIHRoaXNcblxuKmh0dHBzOi8vPHVzZXJOYW1lPjo8dXNlclB3ZD5APG1zRGVwbG95U2l0ZT4uc2NtLmF6dXJld2Vic2l0ZXMubmV0L2RvY2tlci9ob29rKlxuXG5SZXBsYWNlIHRoZSBwbGFjZWhvbGRlcnMgd2l0aCB0aGUgYWN0dWFsIHZhbHVlcyBmcm9tIHlvdXIgcHVibGlzaCBwcm9maWxlLiBPbmNlXG55b3UgaGF2ZSB0aGlzIGNvbmZpZ3VyZWQgeW91IG5lZWQgdG8gc3BlY2lmeSB3aGljaCBldmVudHMgd2lsbCB0cmlnZ2VyIHRoZVxud2ViaG9vay4gQ2hvb3NlIHB1c2ggdG8gbGlzdGVuIHRvIGRvY2tlciBwdXNoIGV2ZW50cy5cblxuVGhlIGZpbmFsIHN0ZXAgYWZ0ZXIgY3JlYXRpbmcgdGhpcyB3ZWJob29rIGlzIGVuYWJsaW5nIENJIGluIHlvdXIgd2ViIGFwcC4gSW5cbnRoZSBwb3J0YWwsIGNob29zZSB0aGUgYXdlc29tZS1hcHAgYW5kIGNsaWNrIG9uIHRoZSBBcHBsaWNhdGlvbiBTZXR0aW5ncyBsaW5rLlxuT24gdGhpcyBwYWdlIGFkZCBhIG5ldyB2YXJpYWJsZSBjYWxsZWQgRE9DS0VSX0VOQUJMRV9DSSB3aXRoIHRoZSB2YWx1ZSB0cnVlIGFuZFxudGhlbiBTYXZlLlxuXG48YSBocmVmPVwiaHR0cHM6Ly95b3V0dS5iZS9PZ2xqUGxzWlBWUVwiIHRhcmdldD1cIl9ibGFua1wiPjxpbWcgc3JjPVwiaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL2RlcGxveS1hbmd1bGFyLWNsb3VkL2Jsb2IvbWFzdGVyL0NyZWF0ZUF6dXJlV2ViaG9vay5wbmdcIiBcbmFsdD1cIkNyZWF0ZSBBenVyZSBXZWJob29rXCIgLz48L2E+XG5cblB1c2ggdGhlIHVwZGF0ZWQgY29uZmlnLnltbCBmaWxlIHRvIEdpdEh1YiB0byB0cmlnZ2VyIGEgbmV3IGJ1aWxkIHdpdGggdGhlIG5ld1xuY2hhbmdlcy4gXG5cbkF0IHRoaXMgcG9pbnQsIHdoZW5ldmVyIHdlIHB1c2ggYSBuZXcgY2hhbmdlIHRvIEdpdEh1YiwgYSBuZXcgQ2lyY2xlQ0kgcnVuXG5zaG91bGQgc3RhcnQuIFRoaXMgd2lsbCBidWlsZCB5b3VyIGFwcCwgcnVuIHRlc3RzIGFnYWluc3QgdGhlIG5ldyBjb2RlIGFuZFxuZmluYWxseSBkZXBsb3kgaXQgdG8gdGhlIGNsb3VkLlxuXG5cbioqKioqXG5cbiFbXShodHRwczovL2Nkbi1pbWFnZXMtMS5tZWRpdW0uY29tL21heC8xNjAwLzEqa3BLZzU0QzBIak9TRTNOdWN1dXlkdy5qcGVnKVxuXG5UaGVyZSEgQ0lDRCBzdXBlcnBvd2VycyB1bmxvY2tlZCFcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxYWIyNDIxYy02M2JiLTQ0ZmQtYWQ5Ni1iNDI0Mjc3M2RhZTciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TXlOelkxTlRRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk11bHRpcGxlVmlld01vZGVsU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ2NGU4MWE1NjdmMWNiZTk2ZjMyNDM1Yzk2OWY0ZDIxOGNhNTRkMTMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBNdWx0aXBsZVZpZXdNb2RlbFNhbXBsZVxuQW4gaU9TIGFuZCBBbnJkb2lkIGFwcCBidWlsdCB1c2luZyBYYW1hcmluLkZvcm1zIGRlbW9uc3RyYXRpbmcgaG93IHRvIGhhdmUgbXVsdGlwbGUgdmlld3MgcmVmZXJlbmNlIHR3byBkaWZmZXJlbnQgVmlld01vZGVscyBmcm9tIHRoZSBzYW1lIENvbnRlbnRQYWdlXG5cblxuYGBgY3NoYXJwXG48P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJ1dGYtOFwiPz5cbjxDb250ZW50UGFnZSB4bWxucz1cImh0dHA6Ly94YW1hcmluLmNvbS9zY2hlbWFzLzIwMTQvZm9ybXNcIiBcbiAgICAgICAgICAgICB4bWxuczp4PVwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA5L3hhbWxcIiBcbiAgICAgICAgICAgICB4bWxuczpsb2NhbD1cImNsci1uYW1lc3BhY2U6TXVsdGlwbGVWaWV3TW9kZWxTYW1wbGVcIiBcbiAgICAgICAgICAgICB4OkNsYXNzPVwiTXVsdGlwbGVWaWV3TW9kZWxTYW1wbGUuTWFpblBhZ2VcIj5cbiAgICBcbiAgICA8U3RhY2tMYXlvdXRcbiAgICAgICAgSG9yaXpvbnRhbE9wdGlvbnM9XCJDZW50ZXJcIlxuICAgICAgICBWZXJ0aWNhbE9wdGlvbnM9XCJDZW50ZXJcIj5cbiAgICAgICAgXG4gICAgICAgIDxMYWJlbCBcbiAgICAgICAgICAgIHg6TmFtZT1cIlZpZXdNb2RlbDFMYWJlbFwiIFxuICAgICAgICAgICAgQmluZGluZ0NvbnRleHQ9XCJ7QmluZGluZyBTb3VyY2UgPXtsb2NhbDpWaWV3TW9kZWwxIH19XCIgXG4gICAgICAgICAgICBUZXh0PVwie0JpbmRpbmcgTGFiZWxUZXh0fVwiIFxuICAgICAgICAgICAgSG9yaXpvbnRhbE9wdGlvbnM9XCJDZW50ZXJcIiBcbiAgICAgICAgICAgIEhvcml6b250YWxUZXh0QWxpZ25tZW50PVwiQ2VudGVyXCIgLz5cbiAgICAgICAgPExhYmVsIFxuICAgICAgICAgICAgeDpOYW1lPVwiVmlld01vZGVsMkxhYmVsXCIgXG4gICAgICAgICAgICBCaW5kaW5nQ29udGV4dD1cIntCaW5kaW5nIFNvdXJjZSA9e2xvY2FsOlZpZXdNb2RlbDIgfX1cIiBcbiAgICAgICAgICAgIFRleHQ9XCJ7QmluZGluZyBMYWJlbFRleHR9XCIgXG4gICAgICAgICAgICBIb3Jpem9udGFsT3B0aW9ucz1cIkNlbnRlclwiIFxuICAgICAgICAgICAgSG9yaXpvbnRhbFRleHRBbGlnbm1lbnQ9XCJDZW50ZXJcIiAvPlxuICAgICAgICBcbiAgICA8L1N0YWNrTGF5b3V0PlxuICAgIFxuPC9Db250ZW50UGFnZT5cbmBgYFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjAxOWU1YjZjLTA2NmEtNDk5NS1iN2ZiLWJkODdlODdiNDhlMSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16STROelkwT1RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hY28uZ2l0aHViLmlvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdiOGJiYWI2YjkxMGRhOGVmMzcxNTFlYmE4ZWZiMTkzMzRiNmVkMDAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHNpbW9uYWNvdGluLmdpdGh1Yi5pb1xuXG5UZXN0XG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNmNhNzdmZmMtNTNhMi00YTAyLTg2MTQtZTUxYzhlYzc4ZWQ2Igp9ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXlPVFl4TVRRPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJwdXBwaWVzIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5OWYyODJhZTM1MDg3YTM2OGU5NDY4OTdhMTI1NWFmMjVmYWMzOTY4IiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5PcmlnaW5hbCBwcm9qZWN0IGJ5IFtKb2huIFBhcGFdKGh0dHA6Ly90d2l0dGVyLmNvbS9qb2huX3BhcGEpXG5cbllvdSBhcmUgdmlld2luZyBhIGZvcmsgYWRhcHRlZCBieSBbU2ltb25hIENvdGluXShodHRwOi8vdHdpdHRlci5jb20vc2ltb25hX2NvdGluKVxuXG5Zb3UgY2FuIFt3YXRjaCBKb2huIFBhcGEgYnVpbGQgdGhlIGFwcCBhcyBwYXJ0IG9mIGhpcyBzZXJpZXMgaGVyZV0oaHR0cHM6Ly9qb2hucGFwYS5uZXQvYW5ndWxhci1jb3Ntb3NkYi0xLylcblxuWW91IGNhbiBbdmlldyBhbGwgdmlkZW9zIHRvZ2V0aGVyIGhlcmVdKC9WSURFT1MubWQpXG5cbltMZWFybiBtb3JlIGFib3V0IGRldmVsb3BpbmcgTm9kZS5qcyBhcHBzIHdpdGggQXp1cmUncyBjbG91ZCBzZXJ2aWNlcyBoZXJlXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9ub2RlanMvYXp1cmU/V1QubWNfaWQ9cHVwcGllcy1naXRodWItc2ljb3RpbilcblxuIyMgRG9ja2VyXG5cbkNyZWF0ZSB0aGUgRG9ja2VyIGltYWdlIGFuZCBydW4gaXQgbG9jYWxseVxuXG5gYGBiYXNoXG5kb2NrZXJJbWFnZT1hbmd1bGFyLWNvc21vc2RiXG5kb2NrZXIgYnVpbGQgLXQgJGRvY2tlckltYWdlIC5cbmRvY2tlciBydW4gLWQgLXAgMzAwMDo4MCAkZG9ja2VySW1hZ2VcbmBgYFxuXG4jIyBSZXF1aXJlbWVudHNcblxuMS4gSW5zdGFsbCB0aGUgQW5ndWxhciBDTElcblxuICAgYGBgYmFzaFxuICAgbnBtIGluc3RhbGwgLWcgQGFuZ3VsYXIvY2xpXG4gICBgYGBcblxuMS4gSW5zdGFsbCB0aGUgW0F6dXJlIENMSV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vY2xpL2F6dXJlL2luc3RhbGwtYXp1cmUtY2xpP1dULm1jX2lkPXB1cHBpZXMtZ2l0aHViLXNpY290aW4pXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnlcblxuICAgYGBgYmFzaFxuICAgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9wdXBwaWVzXG4gICBjZCBwdXBwaWVzXG4gICBgYGBcblxuMS4gSW5zdGFsbCB0aGUgbnBtIHBhY2thZ2VzXG5cbiAgIGBgYGJhc2hcbiAgIG5wbSBpXG4gICBgYGBcblxuMS4gQ29uZmlndXJlIENvc21vcyBEQiBzZXJ2ZXIgc2V0dGluZ3NcblxuICAgUmVuYW1lIHRoZSBgZXhhbXBsZS1lbnZpcm9ubWVudC5qc2AgZmlsZSB0byBgZW52aXJvbm1lbnQuanNgIGluIHRoZSBgc2VydmVyL2Vudi9gIGZvbGRlciBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUga2V5LCBhbmQgcG9ydCB3aXRoIHlvdXIgc3BlY2lmaWMgY29uZmlndXJhdGlvbi5cblxuICAgYGBgamF2YXNjcmlwdFxuICAgLy8gc2VydmVyL2Vudi9lbnZpcm9ubWVudC5qc1xuICAgY29uc3QgY29zbW9zUG9ydCA9IDEyMzQ7IC8vIHJlcGxhY2Ugd2l0aCB5b3VyIHBvcnRcbiAgIGNvbnN0IGRiTmFtZSA9ICd5b3VyLWNvc21vcy1kYi1uYW1lLWdvZXMtaGVyZSc7XG4gICBjb25zdCBrZXkgPSAneW91ci1rZXktZ29lcy1oZXJlJztcblxuICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgIGNvc21vc1BvcnQsXG4gICAgIGRiTmFtZSxcbiAgICAga2V5XG4gICB9O1xuICAgYGBgXG5cbiMjIFJ1bm5pbmcgdGhlIGFwcFxuXG4xLiBCdWlsZCB0aGUgQW5ndWxhciBhcHBcblxuICAgYGBgYmFzaFxuICAgbmcgYnVpbGRcbiAgIGBgYFxuXG4xLiBMYXVuY2ggdGhlIHNlcnZlclxuXG4gICBgYGBiYXNoXG4gICBub2RlIHNyYy9zZXJ2ZXIvaW5kZXguanNcbiAgIGBgYFxuXG4xLiBPcGVuIHRoZSBicm93c2VyIHRvIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMFxuXG4jIyBQcm9ibGVtcyBvciBTdWdnZXN0aW9uc1xuXG5bT3BlbiBhbiBpc3N1ZSBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vcHVwcGllcy9pc3N1ZXMpXG4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNGFiZTFmY2MtNGFjNy00YTMwLThmY2MtNTcxNjA5NDQ5ZjdkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXhPVEF6T1RrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGFnZS10cmFuc2l0aW9ucy10cmF2ZWxhcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTY0Yzc5ZGMzOGIwMzUwMzNlM2E0YzA4OGZjZTI3M2Q5Yzc4ODE1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgUGFnZSBUcmFuc2l0aW9ucyBUcmF2ZWxhcHBcblxuIyMjIEZvcmtcblxu8J+Zi/Cfj7wgVGhpcyByZXBvc2l0b3J5IGlzIGEgcmV3cml0ZSB3aXRoIEFuZ3VsYXIgJiBBbmd1bGFyIFVuaXZlcnNhbCBvZiBbU2FyYWggRHJhc25lcl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9zYXJhaF9lZG8pJ3Mgb3JnaW5hbCB3b3JrIHdpdGggW1Z1ZSAmIE51eHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9zZHJhcy9wYWdlLXRyYW5zaXRpb25zLXRyYXZlbGFwcCkuXG5cbkxpdmUgZGVtbzogW2h0dHBzOi8vcGFnZS10cmFuc2l0aW9ucy10cmF2ZWxhcHAuYXp1cmV3ZWJzaXRlcy5uZXRdKGh0dHBzOi8vcGFnZS10cmFuc2l0aW9ucy10cmF2ZWxhcHAuYXp1cmV3ZWJzaXRlcy5uZXQpXG5cbiMjIyBPcmlnaW5hbFxuXG5UaGlzIGRlbW8gc2hvd3MgYW4gZXhhbXBsZSBvZiBob3cgdG8gYWNoaWV2ZSBuYXRpdmUtbGlrZSBwYWdlIHRyYW5zaXRpb25zIG9uIHRoZSB3ZWIuIFRoZXJlJ3MgbXVjaCB0byBiZSBpbXByb3ZlZCBoZXJlLSBpdCdzIG5vdCBtZWFudCB0byBiZSBhIGZ1bGwtZmxlZGdlZCB3ZWIgYXBwbGljYXRpb24sIGp1c3QgYSBxdWljayBkZW1vIHRvIHNob3cgaG93IHRoaXMga2luZCBvZiBpbXBsZW1lbnRhdGlvbiBjb3VsZCB0aGVvcmV0aWNhbGx5IHdvcmsuIFRoZXNlIGNvbmNlcHRzIGNhbiBhbmQgc2hvdWxkIGJlIGV4cHJlc3NlZCBkaWZmZXJlbnRseSBpbiB5b3VyIG93biBhcHBsaWNhdGlvbiwgdGhlIHNreSdzIHRoZSBsaW1pdCBoZXJlISBUaGlzIGlzIGNyZWF0ZWQgd2l0aCBOdXh0IGFuZCBWdWUuXG5cbkFydGljbGUgZXhwbGFpbmluZyB0aGUgZGVtbyBpcyBhdmFpbGFibGUgYXRcbltodHRwczovL2Nzcy10cmlja3MuY29tL25hdGl2ZS1saWtlLWFuaW1hdGlvbnMtZm9yLXBhZ2UtdHJhbnNpdGlvbnMtb24tdGhlLXdlYl0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9uYXRpdmUtbGlrZS1hbmltYXRpb25zLWZvci1wYWdlLXRyYW5zaXRpb25zLW9uLXRoZS13ZWIpXG5cbiMjIEJ1aWxkIFNldHVwXG5cbmBgYGJhc2hcbiMgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiQgbnBtIGluc3RhbGwgIyBPciB5YXJuIGluc3RhbGxcblxuIyBzZXJ2ZSB3aXRoIGhvdCByZWxvYWQgYXQgaHR0cDovL2xvY2FsaG9zdDo0MjAwL1xuJCBuZyBzZXJ2ZVxuXG4jIGJ1aWxkIGZvciBwcm9kdWN0aW9uIGFuZCBsYXVuY2ggc2VydmVyXG4kIG5wbSBydW4gYnVpbGQ6c3NyICYmIG5wbSBydW4gc2VydmU6c3NyXG5cbiMgZ2VuZXJhdGUgc3RhdGljIHByb2plY3RcbiQgbnBtIHJ1biBidWlsZDpzc3JcbmBgYFxuXG4jIyBSdW5pbmcgaW4gRG9ja2VyXG5cbkZpcnN0IGJ1aWxkIHRoZSBwcm9qZWN0LiBTZWUgW2J1aWxkXSgjYnVpbGQpIGZvciBkZXRhaWxzLlxuXG5Ob3cgeW91IGNhbiBidWlsZCBEb2NrZXIgaW1hZ2U6XG5cbmBgYGJhc2hcbmRvY2tlciBidWlsZCAtdCBwYWdlLXRyYW5zaXRpb25zLXRyYXZlbGFwcCAuXG5gYGBcblxuYW5kIHJ1biBpdDpcblxuYGBgYmFzaFxuZG9ja2VyIHJ1biAtcCA4MDo4MCBwYWdlLXRyYW5zaXRpb25zLXRyYXZlbGFwcFxuYGBgXG5cbk5hdmlnYXRlIHRvIGh0dHA6Ly9sb2NhbGhvc3QgaW4gb3JkZXIgdG8gc2VlIHRoZSBjb250YWluZXJpemVkIGFwcGxpY2F0aW9uLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuRm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGhvdyB0aGluZ3Mgd29yaywgY2hlY2tvdXQgdGhlIFtBbmd1bGFyIFVuaXZlcnNhbCBkb2NzXShodHRwczovL2FuZ3VsYXIuaW8vZ3VpZGUvdW5pdmVyc2FsKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyYTMzODk5MS04ZjJiLTRhNjctYTM2NS02ZjFiNjM0Yjc4MjgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16ZzRNREEwTnpnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJ4VUlPblByb3BlcnR5Q2hhbmdlZFJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImM0Nzc4M2FlMWIzNDJjOTc2NTI4ZTgzM2FhNjYxZDc4ZTIwMzA2ZjIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFJ4VUlPblByb3BlcnR5Q2hhbmdlZFJlcHJvXG5cbkEgc2FtcGxlIGFwcCByZXByb2R1Y2luZyB0aGUgYnVnIHRoYXQgb2NjdXJzIGluIFJ4VUkgd2hlbiBWaWV3TW9kZWwgcHJvcGVydGllcyBhcmUgbm90IHVwZGF0ZWQgb24gdGhlIE1haW4gVGhyZWFkLlxuXG5JbiB0aGlzIGV4YW1wbGUsIGEgYmFja2dyb3VuZCBUYXNrIGlzIGludm9rZWQgaW4gdGhlIGBWaWV3TW9kZWxgIHZpYSBidXR0b24gYENvbW1hbmRgLiBJZiBgQ29uZmlndXJlQXdhaXQoZmFsc2UpYCBpcyB1c2VkLCB0aGUgYmFja2dyb3VuZCB0aHJlYWQgY29udGludWVzIHRvIHVwZGF0ZSB0aGUgYHN0cmluZ2AgcHJvcGVydHkgYW5kIHRoZSBmb2xsb3dpbmcgYFVJS2l0LlVJS2l0VGhyZWFkQWNjZXNzRXhjZXB0aW9uYCBpcyB0aHJvd246XG4+VUlLaXQgQ29uc2lzdGVuY3kgZXJyb3I6IHlvdSBhcmUgY2FsbGluZyBhIFVJS2l0IG1ldGhvZCB0aGF0IGNhbiBvbmx5IGJlIGludm9rZWQgZnJvbSB0aGUgVUkgdGhyZWFkLlxuXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvUnhVSU9uUHJvcGVydHlDaGFuZ2VkUmVwcm8vUnhVSU9uUHJvcGVydHlDaGFuZ2VkUmVwcm8uZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzYzkyMGY1LTBlNDMtNGViYy1hOWE0LWE4ODhjYzdkNGVmNCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXlOVGsxT1RRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYW5ndWxhci13b3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ZjMwNzY2MjRhZWY2Njg3ODY5MDMwYjIwYjFhNjVkNDBiYjljYjU3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBUcmF2ZWxBcHBcblxuVGhpcyB3b3Jrc2hvcCBpcyBhbiBpbnRybyB0byBBbmd1bGFyLiBUbyBmb2xsb3cgYWxvbmcgbWFrZSBzdXJlIHRvIGNoZWNrb3V0IGJyYW5jaGVzIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XG5cbjEuIGVzNi10eXBlc2NyaXB0XG4yLiBjb21wb25lbnRzXG4zLiB0ZW1wbGF0aW5nXG40LiBjb21wb25lbnRzLWNvbW11bmljYXRpb25cbjUuIHNlcnZpY2VzXG42LiBmb3Jtc1xuNy4gcm91dGluZ1xuOC4gZmluYWxcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDYuMC4xLlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLS1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImI0ODA0MjdmLTAwNTctNGJjYi05NGVhLTEwOTQyZTBhZDc5OSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXpNRGswT0RVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGxhY2VzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5MDM5MmYxYjQ5MGNhNWY3OTQ2NGJiY2Q4NDI5YjdlODBiZjEzMDEyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbGFjZXMtYXBpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOTZjZjRiZDItYTI3ZS00NjRiLTk0M2YtZDI4YTQzMWEyZTQyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16VXhPRGszTmpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYWR2YW5jZWQtcHdhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjJkOTI1OGIwMWY0MmU3MWMzYmM4MzRkYjdhMGFhOTljNGEyZTlhYjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFB3YVxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gNi4wLjEuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtLXByb2RgIGZsYWcgZm9yIGEgcHJvZHVjdGlvbiBidWlsZC5cblxuIyMgUnVubmluZyB1bml0IHRlc3RzXG5cblJ1biBgbmcgdGVzdGAgdG8gZXhlY3V0ZSB0aGUgdW5pdCB0ZXN0cyB2aWEgW0thcm1hXShodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8pLlxuXG4jIyBSdW5uaW5nIGVuZC10by1lbmQgdGVzdHNcblxuUnVuIGBuZyBlMmVgIHRvIGV4ZWN1dGUgdGhlIGVuZC10by1lbmQgdGVzdHMgdmlhIFtQcm90cmFjdG9yXShodHRwOi8vd3d3LnByb3RyYWN0b3J0ZXN0Lm9yZy8pLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG5cbiMjIFRlc3RcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhMWE0MTk0My0xYmM0LTRmOGEtOTJhNS1kMTJiYTMyYTU2ODQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXdOakF3TmpFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5TZW50cnlBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjYyNDE5YjNhOWI5ZmQ4OTFhN2MyNTdiNGQ0N2U5NTI0MTRkMzVhYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFhhbWFyaW5TZW50cnlBcHBcblxuVGhpcyBzYW1wbGUgYXBwIHNob3dzIGhvdyB0byBpbXBsZW1lbnQgW1NlbnRyeV0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9jbGllbnRzL2NzaGFycC8pJ3MgY3Jhc2ggYW5kIGFuYWx5dGljcyB0b29scyBpbnRvIHlvdXIgW1hhbWFyaW5dKGh0dHBzOi8vdmlzdWFsc3R1ZGlvLm1pY3Jvc29mdC5jb20veGFtYXJpbj9XVC5tY19pZD14YW1hcmluc2VudHJ5YXBwLWdpdGh1Yi1icmFtaW4pIGFwcC5cblxuIVtTZW50cnkgQ3Jhc2ggUmVwb3J0XShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy80MzM0Njk0OS0zNDZkNzA3NC05MWE4LTExZTgtOTRkNi1lZDEwZmYwNzhhMmMucG5nKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImIyMjZkNGNmLTExZWEtNDQ3Ni04OWVkLTkzNDFkZTYyNzM3OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXpORGsxTlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmlrYml0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImVmMzJmNWI5NWIyNzhmMTRmZGY4MjRlMDExYjEzYWFhYWU1NjE4YjgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIG5pa2JpdFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImJjM2I5MGUyLTVjMjUtNDAxOC1iNzFkLTRiZjg2YTQ0MzI5NCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qUTVORGsyTXpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YkV4cGxvcmVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdmZWE0MDkyNjM4ZjBlODEwNzFlZTk5NTZhMzliMGUxMWQxZTEwZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEdpdEh1YiBFeHBsb3JlclxuQ29uc29sZSBBcHAgdG8gZXhwbG9yZSB0aGUgR2l0SHViIEdyYXBoUUwgQVBJXG5cbiFbQ29uc29sZSBTY3JlZW5zaG90XShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81MDk5ODk2Mi1lOGYxY2YwMC0xNGRkLTExZTktODFlOS0yODNjZDFmMjE2NjQucG5nKVxuXG4jIyBTZXR1cFxuR2l0SHViIHJlcXVpcmVzIGEgcGVyc29uYWwgYWNjZXNzIHRva2VuIHRvIGFjY2VzcyBpdHMgQVBJLlxuXG5Gb2xsb3cgdGhlIHN0ZXBzIGhlcmUgdG8gY3JlYXRlIHlvdXIgcGVyc29uYWwgYWNjZXNzIHRva2VuOiBodHRwczovL2hlbHAuZ2l0aHViLmNvbS9hcnRpY2xlcy9jcmVhdGluZy1hLXBlcnNvbmFsLWFjY2Vzcy10b2tlbi1mb3ItdGhlLWNvbW1hbmQtbGluZS8jY3JlYXRpbmctYS10b2tlbi5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0Zjc2ZWM0YS02M2VjLTQzMTMtYTBiYi0zMmU1NGE3YjZkMjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESTBORFkyTXpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidm90aW5nLWFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYmNjOTlmOGMzODgzNWQwYmJjM2JiYTc2MmQ0YmU3YmRlMzI4YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby52b3RpbmctYXBwP2JyYW5jaE5hbWU9bWFzdGVyKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3NpY290aW4vc2ljb3Rpbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0xMT9icmFuY2hOYW1lPW1hc3RlcilcblxuIyBWb3RpbmcgQXBwXG5cbkluIHRoaXMgd29ya3Nob3Agd2UnbGwgYnVpbGQgYSBTZXJ2ZXJsZXNzIEdyYXBoUUwgZW5kcG9pbnQgZm9yIGFuIGV4aXN0aW5nIHZvdGluZyBBUEkuXG5cbiMjIFByZXJlcXVpc2l0ZXNcblxuMS4gQSByZWNlbnQgdmVyc2lvbiBvZiBOb2RlICg4KylcblxuMS4gVlMgQ29kZTogW2Rvd25sb2FkIHBhZ2VdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2Rvd25sb2FkLz9XVC5tY19pZD13b3Jrc2hvcC1sZG5qcy1zaWNvdGluKSAgXG5cbjEuIEF6dXJlIEZ1bmN0aW9ucyBDTEk6IFtkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9henVyZS1mdW5jdGlvbnMvZnVuY3Rpb25zLXJ1bi1sb2NhbD9XVC5tY19pZD13b3Jrc2hvcC1sZG5qcy1zaWNvdGluKSAgXG5cbjEuIEF6dXJlIEZ1bmN0aW9ucyBFeHRlbnNpb24gZm9yIFZTIENvZGU6IFttYXJrZXRwbGFjZV0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zLz9XVC5tY19pZD13b3Jrc2hvcC1sZG5qcy1zaWNvdGluJml0ZW1OYW1lPW1zLWF6dXJldG9vbHMudnNjb2RlLWF6dXJlZnVuY3Rpb25zKSAgXG5cbjEuIEF6dXJlIGFjY291bnQ6IFtodHRwczovL2FrYS5tcy9mcmVlXShodHRwczovL2FrYS5tcy9mcmVlKVxuXG4jIyBTdGVwc1xuXG4xLiBDcmVhdGUgeW91ciBvd24gc2VydmljZXMgZm9sbG93aW5nIHN0ZXBzIG9uIFtzZXJ2aWNlcyByZWFkbWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9zZXJ2ZXJsZXNzLWdyYXBocWwtd29ya3Nob3AvYmxvYi9tYXN0ZXIvc2VydmljZXMvUmVhZG1lLm1kKVxuXG4xLiBDcmVhdGUgR3JhcGhRTCBlbmRwb2ludCBmb2xsb3dpbmcgc3RlcHMgb24gW2FwaSByZWFkbWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9zZXJ2ZXJsZXNzLWdyYXBocWwtd29ya3Nob3AvYmxvYi9tYXN0ZXIvZ3JhcGhxbC1hcGkvUmVhZG1lLm1kKVxuXG4xLiBBZGQgR3JhcGhpUUwgVUkgdXNpbmcgc3RlcHMgaW4gW3JlYWRtZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3NlcnZlcmxlc3MtZ3JhcGhxbC13b3Jrc2hvcC9ibG9iL21hc3Rlci9ncmFwaGlxbC9SZWFkbWUubWQpXG5cbiMjIERlbW8gYXBwXG5cbkdyYXBoUUwgZW5kcG9pbnQ6IFtodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaHFsXShodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaHFsKVxuXG5HcmFwaGlRTCBlbmRwb2ludDpcbltodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaGlxbF0oaHR0cHM6Ly9ncmFwaHFscGxheWdyb3VuZC5henVyZXdlYnNpdGVzLm5ldC9hcGkvZ3JhcGhpcWwpXG5cblNhbXBsZSBxdWVyeTpcblxuYGBgXG5xdWVyeSB7XG4gIHRlYW1zIHtcbiAgICBpZFxuICAgIG5hbWVcbiAgICBwb2ludHNcbiAgfVxufVxuYGBgXG5cblNhbXBsZSBtdXRhdGlvbjpcblxuYGBgXG5tdXRhdGlvbiB7XG4gIGluY3JlbWVudFBvaW50cyhpZDoyKSB7XG4gICAgaWRcbiAgICBuYW1lXG4gICAgcG9pbnRzXG4gIH1cbn1cbmBgYFxuXG4jIyBJbnN0YWxsIE1vYmlsZSBBcHBcblxufCBNb2JpbGUgT1MgfCBJbnN0YWxsYXRpb24gTGluayB8XG58LS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLXxcbnwgaU9TIHwgW0luc3RhbGwgaU9TIEFwcF0oLi9tb2JpbGUvVm90aW5nQXBwL2lPU19Eb3dubG9hZF9JbnN0cnVjdGlvbnMubWQpIHxcbnwgQW5kcm9pZCB8IFtJbnN0YWxsIEFuZHJvaWQgQXBwXShodHRwczovL2luc3RhbGwuYXBwY2VudGVyLm1zL29yZ3Mvdm90aW5nLWFwcC9hcHBzL2J1YmJsZS13YXIvZGlzdHJpYnV0aW9uX2dyb3Vwcy9sb25kb24lMjBncmFwaHFsJTIwd29ya3Nob3ApIHxcblxufENJIFRvb2wgICAgICAgICAgICAgICAgICAgIHxCdWlsZCBTdGF0dXN8XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLXxcbnwgQXBwIENlbnRlciwgaU9TIHwgWyFbQnVpbGQgc3RhdHVzXShodHRwczovL2J1aWxkLmFwcGNlbnRlci5tcy92MC4xL2FwcHMvNjAwNTZkNDUtZjQyZi00YmNkLTg3MGItMTljMTBjNDAwYzY2L2JyYW5jaGVzL21hc3Rlci9iYWRnZSldKGh0dHBzOi8vYXBwY2VudGVyLm1zKSB8XG58IEFwcCBDZW50ZXIsIEFuZHJvaWQgfCBbIVtCdWlsZCBzdGF0dXNdKGh0dHBzOi8vYnVpbGQuYXBwY2VudGVyLm1zL3YwLjEvYXBwcy9iMWNkY2YxYi0yNjg1LTQxMDUtODk0ZS05YjYwMDg3ZGZjNDgvYnJhbmNoZXMvbWFzdGVyL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpIHxcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJiNjZhMTc2MS1iZTk2LTQ3OGMtOWI2My1mNWZiNzdiN2Y2ZTUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qWXpOall6T0RBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YlhhbWFyaW4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmM0YjNlNjQ5YTY2ZTNjODY2MzQ5ZmIxNTJjOGM0OGNhZmMwZDU0MyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgR2l0SHViWGFtYXJpblxuXG5UaGlzIHJlcG8gaGFzIGJlZW4gbW92ZWQgdG8gaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9naXR0cmVuZHNcblxuQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCBidWlsdCBpbiBYYW1hcmluLkZvcm1zIHRvIHJldHJpZXZlIEdpdGh1YiBSZXBvc2l0b3JpZXMgdXNpbmcgR2l0SHViJ3MgR3JhcGhRTCBBUElcblxufCBpT1MgfCBBbmRyb2lkIHxcbnwtLS0tLXwtLS0tLS0tLS18XG58ICFbaU9TIEdpZl0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjI4MjY1ODgtZDZjNzM0ODAtYmI4My0xMWU5LTg1MzYtZWM2N2UzMmM1YzgyLmdpZikgfCAhW0FuZHJvaWQgR2lmXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy82MjgyNjg1OS1lNDMyZWQ4MC1iYjg4LTExZTktODQxOC0zY2UxY2RlMmRkNDIuZ2lmKSB8XG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDczNWU2ODItZDg5Mi00NmYyLTg1ZWYtNTllZTFhOTU0MzBjIgp9ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16a3lOalEzTWpZPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJmdW5jdGlvbnMtYmFzZS1hcm0tdGVtcGxhdGUiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImM2NGQ3YTZmZTBmM2NhMmMzYjRkZTZiYjkxYzM2ZWM1MDZmOWQxMDciLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIGZ1bmN0aW9ucy1iYXNlLWFybS10ZW1wbGF0ZVxuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHA6Ly9henVyZWRlcGxveS5uZXQvZGVwbG95YnV0dG9uLnBuZyldKGh0dHBzOi8vcG9ydGFsLmF6dXJlLmNvbS8/V1QubWNfaWQ9ZnVuY3Rpb25zYmFzZWFybXRlbXBsYXRlLWdpdGh1Yi1zaWNvdGluI2NyZWF0ZS9NaWNyb3NvZnQuVGVtcGxhdGUvdXJpL2h0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRnNpbW9uYWNvJTJGZnVuY3Rpb25zLWJhc2UtYXJtLXRlbXBsYXRlJTJGbWFzdGVyJTJGYXp1cmVkZXBsb3kuanNvbilcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJiOGFiNzI2ZS1hN2NiLTQzMjktOWMzYi04YWJhYTBhNzg4M2QiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EWTJOamd6TmprPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibGF5b3V0LXRyYW5zaXRpb24tZ3JvdXAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDFlODA0M2JkZjg3Y2E2YWMwZDZjZDQzYWMwZDgzY2Q1NDBiNDg1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgVHJhbnNpdGlvbnNBcHBcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDYuMS4yLlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLS1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjg3ZjYzMmIwLWMzY2UtNDdhYi05MjAxLTg0MWYzN2ViNGM1MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qYzRNVE01TXpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImNzaGFycC13b3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzZWFlMWQ1NGIxOGJkZmZiZmZiMjQyZWJjNGM0OGFlMTkwMjk0YTYxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBDIyBXb3Jrc2hvcFxuXG5bTkRDIExvbmRvbiAyMDE5XShodHRwczovL25kYy1sb25kb24uY29tL3dvcmtzaG9wL2JlY29tZS1hLWJldHRlci1jLXByb2dyYW1tZXItbW9yZS12YWx1ZS1tb3JlLWV4cHJlc3Npb25zLW5vLXdhaXRpbmcvKVxuXG5Ib3N0ZWQgYnkgW0JpbGwgV2FnbmVyXShodHRwczovL25kYy1sb25kb24uY29tL3NwZWFrZXIvYmlsbC13YWduZXIpXG5cbiMjIyBCZWNvbWUgYSBiZXR0ZXIgQyMgcHJvZ3JhbW1lcjogbW9yZSBWYWx1ZSwgbW9yZSBFeHByZXNzaW9ucywgbm8gV2FpdGluZ1xuXG5PdmVyIHRoZSBwYXN0IGZldyByZWxlYXNlcywgQyMgaGFzIGFkZGVkIGZlYXR1cmVzIHRoYXQgZ3JlYXRseSBpbXByb3ZlIHByb2R1Y3Rpdml0eS5cblxuSW4gdGhpcyB3b3Jrc2hvcCwgeW914oCZbGwgbGVhcm4gc2NlbmFyaW9zIHdoZXJlIHRoZXNlIG5ldyBmZWF0dXJlcyBtYWtlIHlvdSBtb3JlIHByb2R1Y3RpdmUsIGFuZCBpbXByb3ZlIHRoZSBjbGFyaXR5IG9mIHlvdXIgY29kZS4gWW914oCZbGwgZ2V0IGEgZ3VpZGVkIHRvdXIgdGhyb3VnaCB0aGUgYXN5bmMgYW5kIGF3YWl0IHdpbGRlcm5lc3MuIFlvdSdsbCBzdGFydCB3aXRoIGJhc2ljIHVzZXMgd2hlcmUgYXN5bmMgYW5kIGF3YWl0IHdvcmsgbGlrZSBtYWdpYy4gRnJvbSB0aGVyZSwgeW91J2xsIGxlYXJuIGNvbW1vbiBwcmFjdGljZXMgYW5kIGhvdyBhc3luYyB0YXNrcyBjb21wb3NlLiBZb3UnbGwgZGl2ZSBpbnRvIGVub3VnaCBvZiB0aGUgaW1wbGVtZW50YXRpb24gZGV0YWlscyB0byB1bmRlcnN0YW5kIGhvdyB0byBhcHBseSBhc3luYyBwcmFjdGljZXMuIEFmdGVyIHdvcmtpbmcgdGhyb3VnaCB0aGVzZSBkaWZmZXJlbnQgcHJhY3RpY2VzLCB5b3UnbGwgZW1lcmdlIGZyb20gdGhlIHdpbGRlcm5lc3MgdW5kZXJzdGFuZGluZyBob3cgdG8gd3JpdGUgY2xlYXIsIGNvcnJlY3QgYW5kIHNhZmUgYXN5bmMgY29kZS4gRnJvbSB0aGVyZSwgeW91J2xsIHdvcmsgdGhyb3VnaCBldmVyeWRheSBzY2VuYXJpb3Mgd2hlcmUgbW9kZXJuIEMjIGZyZWVzIGl0c2VsZiBmcm9tIHRoZSBzaGFja2xlcyBvZiBoaXN0b3J5LiBZb3UnbGwgc2VlIG5ldyB3YXlzIHRvIHdvcmsgd2l0aCB0ZXh0LCBuZXcgZXhwcmVzc2lvbnMgZm9yIGNvbnRyb2wgZmxvdywgYW5kIG5ldyB3YXlzIHRvIGJlbmQgdGhlIHR5cGUgc3lzdGVtIHRvIHlvdXIgd2lsbC5cbllvdeKAmWxsIGxlYXJuOlxuXG4tIFt4XSBHZXR0aW5nIHN0YXJ0ZWQgd2l0aCB0aGUgYmFzaWNzIG9mIGFzeW5jIGFuZCBhd2FpdFxuLSBbeF0gRGlzdGluZ3Vpc2ggYXN5bmNocm9ub3VzIHByb2dyYW1taW5nIGFuZCBwYXJhbGxlbCBwcm9ncmFtbWluZ1xuLSBbeF0gQ29tcG9zZSBhc3luY2hyb25vdXMgbWV0aG9kIGNhbGxzIHRocm91Z2hvdXQgeW91ciBjb2RlXG4tIFt4XSBVbmRlcnN0YW5kIHRoZSBwaXRmYWxscyBvZiBhc3luYyB2b2lkXG4tIFt4XSBEZXNpZ25pbmcgYXN5bmMgQVBJc1xuLSBbeF0gQWR2YW5jZWQgYXN5bmMgYW5kIFRhc2sgYmFzZWQgcHJvZ3JhbW1pbmdcbi0gW3hdIEhvdyBzdHJpbmcgaW50ZXJwb2xhdGlvbiBtYWtlcyBmb3JtYXR0aW5nIHN0cmluZ3MgbXVjaCBlYXNpZXIgYW5kIGNsZWFyZXIuXG4tIFt4XSBIb3cgdG8gY3JlYXRlIGNvbXBvdW5kIGFzc2lnbm1lbnRzIGFuZCBjb21wYXJpc29ucyB1c2luZyBUdXBsZXMgYW5kIERlY29uc3RydWN0aW9uXG4tIFt4XSBIb3cgdG8gc2ltcGxpZnkgaXRlcmF0b3JzIGFuZCBhc3luYyBlcnJvciBoYW5kbGluZyB1c2luZyBsb2NhbCBmdW5jdGlvbnNcbi0gW3hdIEhvdyB0byBzaW1wbGlmeSBlcnJvciByZXBvcnRpbmcgdXNpbmcgdGhyb3cgZXhwcmVzc2lvbnMgaW4gZXhwcmVzc2lvbiBib2RpZWQgbWVtYmVycy5cbi0gW3hdIFdyaXRlIG1vcmUgcGVyZm9ybWFudCBjb2RlIHVzaW5nIHZhbHVlIHR5cGVzIHNhZmUgcGFzcy1ieS1yZWZlcmVuY2Vcbi0gW3hdIEhvdyB0byB1c2UgUGF0dGVybiBNYXRjaGluZyB0byBjcmVhdGUgYWxnb3JpdGhtcyB0aGF0IGV4dGVuZCBleGlzdGluZyB0eXBlc1xuXG4jIyBDb21wdXRlciBTZXR1cDogXG5cbkF0dGVuZGVlcyB3aWxsIG5lZWQgdG8gYnJpbmcgYSBsYXB0b3Agd2l0aCBvbmUgb2YgdGhlIGZvbGxvd2luZyBzZXR1cHM6XG5cbi0gV2luZG93czogTGFwdG9wIHJ1bm5pbmcgVmlzdWFsIFN0dWRpbyAyMDE3LCBvciBWaXN1YWwgU3R1ZGlvIENvZGVcbi0gTWFjOiBMYXB0b3AgcnVubmluZyBWaXN1YWwgU3R1ZGlvIENvZGVcbi0gTGludXg6IExhcHRvcCBydW5uaW5nIFZpc3VhbCBTdHVkaW8gQ29kZVxuXG4jIyBSZWNvbW1lbmRhdGlvbnMgZm9yIEV4ZXJjaXNlc1xuXG4xLiBXZSdyZSBoZXJlIHRvIGxlYXJuLCBub3QgdG8gd2luIGFyZ3VtZW50cy4gU29tZSBleGVyY2lzZXMgd2lsbCBzcGFyayBkZWJhdGUuICpMaXN0ZW4gYW5kIGxlYXJuKi4gKndoYXQqIGFuc3dlciB5b3VyIGdyb3VwIGZpbmRzIGlzIG11Y2ggbGVzcyBpbXBvcnRhbnQgdGhhbiAqd2h5KiB5b3UgY2hvc2UgdGhhdCBhbnN3ZXIuIEEgcmVsYXRlZCBwb2ludCBpcyB0aGF0IHlvdSB3aWxsIGxlYXJuIGZyb20gb3RoZXIgZ3JvdXBzJyBvcGluaW9ucywgYW5kIHRlYWNoIGJ5IGV4cGxhaW5pbmcgeW91ciBncm91cCdzIG9waW5pb25zLlxuMi4gRXZlcnkgcGVyc29uIHNob3VsZCBiZSBoZWFyZC5cbjMuIENoYW5nZSByb2xlcyBvZnRlbiBpbiBwYWlyIHByb2dyYW1taW5nIGV4ZXJjaXNlcy5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3YmZiZGNhOC1lMjUyLTQzNjYtODAxYy0wMjE2Y2NhODRmN2IiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56WTRNamt6TkRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVSTEVuY29kZWRGb3JtQnVnX0xMVk0iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzUyZmFkMzMyODdiNDU5NWZkYTZmOTJkNGRjYTRjYzY5MWM5Mjg5OCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgVVJMRW5jb2RlZEZvcm1CdWdfTExWTVxuXG4jIyBSZXByb2R1Y3Rpb24gU3RlcHNcblxuIyMjIEZhaWxpbmcvTm9uLVdvcmtpbmcgRXhhbXBsZVxuXG4xLiBJbiB0aGUgUmVmaXRMTFZNIHNvbHV0aW9uIGZvbGRlciwgZGVsZXRlIGFsbCBgYmluYCBmb2xkZXJzIGFuZCBgb2JqYCBmb2xkZXJzLiBJIHJlY29tbWVuZCB1c2luZyBbdGhpcyB0b29sIHRvIGNsZWFuIHRoZSBiaW4gJiBvYmogZm9sZGVyc10oaHR0cHM6Ly90d2l0dGVyLmNvbS9UaGVDb2RlVHJhdmVsZXIvc3RhdHVzLzk0MzkyMDMxOTkxOTYzNjQ4MSkuXG5cdCAgLSBEZWxldGUgYFJlZml0TExWTVxcYmluYFxuXHQgIC0gRGVsZXRlIGBSZWZpdExMVk1cXG9iamBcblx0ICAtIERlbGV0ZSBgUmVmaXRMTFZNLmlPU1xcYmluYFxuXHQgIC0gRGVsZXRlIGBSZWZpdExMVk0uaU9TXFxvYmpgICBcblxuMi4gT3BlbiB0aGUgY3VycmVudCBbYFhhbWFyaW4gUHJldmlld2AgY2hhbm5lbF0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTQ3MzMwNTMtOWYxODBiODAtNGI1NC0xMWU5LTk3NjgtOTU5NTc0MmQzNGNjLnBuZykgb2YgVmlzdWFsIFN0dWRpbyBmb3IgTWFjIDIwMTkgUHJldmlldyBhcyBvZiAyMSBNYXJjaCAyMDE5IEAgMTUzMCBVVEMuIFxuICBcdC0gW0Vudmlyb25tZW50IEluZm9ybWF0aW9uIEJlbG93XSgjZW52aXJvbm1lbnQpXG5cbjMuIE9wZW4gUmVmaXRMTFZNUmVwcm8uc2xuIFxuXG40LiBTZXQgdGhlIEJ1aWxkIENvbmZndXJhdGlvbiB0byBSZWxlYXNlTExWTSB8IGlQaG9uZVxuXG41LiBCdWlsZCBEZXBsb3kgYXBwIHRvIGFuIGlPUyBkZXZpY2UgXG4gIC0gTm90ZTogSSBhbSB1c2luZyBhbiBpUGhvbmUgWFMgTWF4IHJ1bm5pbmcgaU9TIDEyLjEuNFxuXG42LiBUYXAgdGhlIGBTdWJtaXQgd2l0aCBSZWZpdGAgQnV0dG9uXG5cbjcuIENvbmZpcm0gYEZhaWxlZGAgUG9wdXAgXG5cbjguIFRhcCB0aGUgYFN1Ym1pdCB3aXRob3V0IFJlZml0YCBCdXR0b25cblxuOS4gQ29uZmlybSBgRmFpbGVkYCBQb3B1cFxuXG5cbiMjIyBTdWNjZXNzZnVsL1dvcmtpbmcgRXhhbXBsZVxuXG4xLiBJbiB0aGUgUmVmaXRMTFZNIHNvbHV0aW9uIGZvbGRlciwgZGVsZXRlIGFsbCBgYmluYCBmb2xkZXJzIGFuZCBgb2JqYCBmb2xkZXJzLiBJIHJlY29tbWVuZCB1c2luZyBbdGhpcyB0b29sIHRvIGNsZWFuIHRoZSBiaW4gJiBvYmogZm9sZGVyc10oaHR0cHM6Ly90d2l0dGVyLmNvbS9UaGVDb2RlVHJhdmVsZXIvc3RhdHVzLzk0MzkyMDMxOTkxOTYzNjQ4MSkuXG5cdCAgLSBEZWxldGUgYFJlZml0TExWTVxcYmluYFxuXHQgIC0gRGVsZXRlIGBSZWZpdExMVk1cXG9iamBcblx0ICAtIERlbGV0ZSBgUmVmaXRMTFZNLmlPU1xcYmluYFxuXHQgIC0gRGVsZXRlIGBSZWZpdExMVk0uaU9TXFxvYmpgICBcblxuXG4yLiBPcGVuIHRoZSBjdXJyZW50IFtgWGFtYXJpbiBQcmV2aWV3YCBjaGFubmVsXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81NDczMzA1My05ZjE4MGI4MC00YjU0LTExZTktOTc2OC05NTk1NzQyZDM0Y2MucG5nKSBvZiBWaXN1YWwgU3R1ZGlvIGZvciBNYWMgMjAxOSBQcmV2aWV3IGFzIG9mIDIxIE1hcmNoIDIwMTkgQCAxNTMwIFVUQy4gXG4gIFx0LSBbRW52aXJvbm1lbnQgSW5mb3JtYXRpb24gQmVsb3ddKCNlbnZpcm9ubWVudClcblxuMy4gT3BlbiBSZWZpdExMVk1SZXByby5zbG4gXG5cbjQuIFNldCB0aGUgQnVpbGQgQ29uZmd1cmF0aW9uIHRvIFJlbGVhc2UgfCBpUGhvbmVcblxuNS4gQnVpbGQgRGVwbG95IGFwcCB0byBhbiBpT1MgZGV2aWNlIFxuICAtIE5vdGU6IEkgYW0gdXNpbmcgYW4gaVBob25lIFhTIE1heCBydW5uaW5nIGlPUyAxMi4xLjRcblxuNi4gVGFwIHRoZSBgU3VibWl0IHdpdGggUmVmaXRgIEJ1dHRvblxuXG43LiBDb25maXJtIGBTdWNjZXNzYCBQb3B1cCBcblxuOC4gVGFwIHRoZSBgU3VibWl0IHdpdGhvdXQgUmVmaXRgIEJ1dHRvblxuXG45LiBDb25maXJtIGBTdWNjZXNzYCBQb3B1cFxuXG4jIyBFbnZpcm9ubWVudFxuXG49PT0gVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlIDIwMTkgUHJldmlldyBmb3IgTWFjID09PVxuXG5WZXJzaW9uIDguMCBQcmV2aWV3ICg4LjAgYnVpbGQgMjkzMSlcbkluc3RhbGxhdGlvbiBVVUlEOiAxYmI0NTBjNC1hYjk5LTQwOTAtYTM5NC0zNzZlNTBlMzk3MGZcblx0R1RLKyAyLjI0LjIzIChSYWxlaWdoIHRoZW1lKVxuXHRYYW1hcmluLk1hYyA1LjYuMC4yIChkMTYtMCAvIDA0MDY4MjkwOSlcblxuXHRQYWNrYWdlIHZlcnNpb246IDUxODAxMDAwM1xuXG49PT0gTW9ubyBGcmFtZXdvcmsgTURLID09PVxuXG5SdW50aW1lOlxuXHRNb25vIDUuMTguMS4zICgyMDE4LTA4L2ZkYjI2YjBhNDQ1KSAoNjQtYml0KVxuXHRQYWNrYWdlIHZlcnNpb246IDUxODAxMDAwM1xuXG49PT0gTnVHZXQgPT09XG5cblZlcnNpb246IDQuOC4yLjU4MzVcblxuPT09IC5ORVQgQ29yZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5SdW50aW1lIFZlcnNpb25zOlxuXHQzLjAuMC1wcmV2aWV3My0yNzUwMy01XG5cdDMuMC4wLXByZXZpZXctMjczMjQtNVxuXHQzLjAuMC1wcmV2aWV3LTI3MTIyLTAxXG5cdDIuMi4wXG5cdDIuMi4wLXByZXZpZXczLTI3MDE0LTAyXG5cdDIuMS45XG5cdDIuMS44XG5cdDIuMS42XG5cdDIuMS4yXG5cdDIuMS4xXG5cdDIuMC42XG5cdDIuMC41XG5cdDEuMS4xMFxuXHQxLjAuMTNcblNESzogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvc2RrLzMuMC4xMDAtcHJldmlldy0wMTAxODQvU2Rrc1xuU0RLIFZlcnNpb25zOlxuXHQzLjAuMTAwLXByZXZpZXctMDEwMTg0XG5cdDMuMC4xMDAtcHJldmlldy0wMTAxNzdcblx0My4wLjEwMC1wcmV2aWV3LTAwOTgxMlxuXHQyLjIuMTAwXG5cdDIuMi4xMDAtcHJldmlldzMtMDA5NDMwXG5cdDIuMS41MDVcblx0Mi4xLjUwNFxuXHQyLjEuNTAwXG5cdDIuMS4zMDJcblx0Mi4xLjMwMVxuXHQyLjEuMTAxXG5cdDIuMS40XG5cdDEuMS4xMVxuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzUuMTguMS9saWIvbW9uby9tc2J1aWxkLzE1LjAvYmluL1Nka3NcblxuPT09IFhhbWFyaW4uUHJvZmlsZXIgPT09XG5cblZlcnNpb246IDEuNi45XG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIFByb2ZpbGVyLmFwcC9Db250ZW50cy9NYWNPUy9YYW1hcmluIFByb2ZpbGVyXG5cbj09PSBVcGRhdGVyID09PVxuXG5WZXJzaW9uOiAxMVxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSAxMC4xICgxNDQ2MC40NilcbkJ1aWxkIDEwQjYxXG5cbj09PSBYYW1hcmluLk1hYyA9PT1cblxuVmVyc2lvbjogNS42LjAuMjUgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDUwZjc1MjczXG5CcmFuY2g6IGQxNi0wXG5CdWlsZCBkYXRlOiAyMDE5LTAzLTA1IDExOjUwOjMzLTA4MDBcblxuPT09IFhhbWFyaW4uaU9TID09PVxuXG5WZXJzaW9uOiAxMi42LjAuMjUgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDUwZjc1MjczXG5CcmFuY2g6IGQxNi0wXG5CdWlsZCBkYXRlOiAyMDE5LTAzLTA1IDExOjUwOjMzLTA4MDBcblxuPT09IFhhbWFyaW4gRGVzaWduZXIgPT09XG5cblZlcnNpb246IDQuMTcuNC40MDdcbkhhc2g6IDI4OTdiNWY4Y1xuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtMFxuQnVpbGQgZGF0ZTogMjAxOS0wMy0xNSAxODoyOToyNCBVVENcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogOS4yLjAuNSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFtaW4vTGlicmFyeS9BbmRyb2lkL3Nka1xuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ2LjAgKEFQSSBsZXZlbCAyMylcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblx0XHQ3LjEgKEFQSSBsZXZlbCAyNSlcblx0XHQ4LjAgKEFQSSBsZXZlbCAyNilcblx0XHQ4LjEgKEFQSSBsZXZlbCAyNylcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjEuMVxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI4LjAuMlxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI4LjAuM1xuXG5CdWlsZCBJbmZvcm1hdGlvbjogXG5Nb25vOiBtb25vL21vbm8vMjAxOC0wOC1yY0A1YWQzNzFkYWIxYlxuSmF2YS5JbnRlcm9wOiB4YW1hcmluL2phdmEuaW50ZXJvcC9kMTYtMEBjOTg3NDgzXG5MaWJaaXBTaGFycDogZ3JlbmRlbGxvL0xpYlppcFNoYXJwL21hc3RlckA0NGRlMzAwXG5MaWJaaXA6IG5paC1hdC9saWJ6aXAvcmVsLTEtNS0xQGI5NWNmM2Zcbk1YRTogeGFtYXJpbi9teGUveGFtYXJpbkBiOWNiYjUzNVxuUHJvR3VhcmQ6IHhhbWFyaW4vcHJvZ3VhcmQvbWFzdGVyQDkwNTgzNmRcblNRTGl0ZTogeGFtYXJpbi9zcWxpdGUvMy4yNi4wQDMyNWU5MWFcblhhbWFyaW4uQW5kcm9pZCBUb29sczogeGFtYXJpbi94YW1hcmluLWFuZHJvaWQtdG9vbHMvZDE2LTBAMGE3ZWRkNlxuXG49PT0gTWljcm9zb2Z0IE1vYmlsZSBPcGVuSkRLID09PVxuXG5KYXZhIFNESzogL1VzZXJzL2JyYW1pbi9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2pkay9taWNyb3NvZnRfZGlzdF9vcGVuamRrXzguMC4yNVxuMS44LjAtMjVcbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBBbmRyb2lkIERldmljZSBNYW5hZ2VyID09PVxuXG5WZXJzaW9uOiAxLjIuMC4xNFxuSGFzaDogODZkZjI2ZlxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtMFxuQnVpbGQgZGF0ZTogMjAxOS0wMy0xNSAyMTo1ODo1OCBVVENcblxuPT09IFhhbWFyaW4gSW5zcGVjdG9yID09PVxuXG5WZXJzaW9uOiAxLjQuM1xuSGFzaDogZGIyNzUyNVxuQnJhbmNoOiAxLjQtcmVsZWFzZVxuQnVpbGQgZGF0ZTogTW9uLCAwOSBKdWwgMjAxOCAyMToyMDoxOCBHTVRcbkNsaWVudCBjb21wYXRpYmlsaXR5OiAxXG5cbj09PSBCdWlsZCBJbmZvcm1hdGlvbiA9PT1cblxuUmVsZWFzZSBJRDogODAwMDAyOTMxXG5HaXQgcmV2aXNpb246IDM2YWNiOTc0ZmQ0NTc2NTQ0Mzk4ZDJlYmEyNjFkNjQxNmIzMDlmYTZcbkJ1aWxkIGRhdGU6IDIwMTktMDMtMTkgMDE6MTk6NDIrMDBcbkJ1aWxkIGJyYW5jaDogbWFzdGVyXG5YYW1hcmluIGV4dGVuc2lvbnM6IDRmYjlkOWZkNTJkOGIwNzFhNjFmNjA2MmQwN2I2MGM1NGUxYzVhZjNcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjE0LjNcbkRhcndpbiAxOC4yLjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE4LjIuMFxuICAgIFRodSBEZWMgMjAgMjA6NDY6NTMgUFNUIDIwMThcbiAgICByb290OnhudS00OTAzLjI0MS4xfjEvUkVMRUFTRV9YODZfNjQgeDg2XzY0XG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyYTUwYzAxOS02NzdhLTRkNDYtODY5NS0yYmU5ODdkYWZlMTEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USXhNVEl6TmpjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYXBpcGVsaW5lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxODAwMzk3YmVkNzJlODdmYjdmYmYyZTVjMmRjYTJhM2VlMmFiZmI4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBcGlwZWxpbmVzXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiA2LjEuNS5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC0tcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2ZTAxYjJhOC04YzVmLTRjZmItYTVkOC04MTE0NWU3NmIyZDciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalUxTlRNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtdWkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjkzZjc5Yzc5MmQ1YTE4MmRmOWYwZDFjOThiODg4N2U5YzE3M2Y2MyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdGFjb3MtdWlcblxuQSBkZW1vIEFuZ3VsYXIgYXBwbGljYXRpb24gZm9yIFNpbW9uYSBhbmQgQnJpYW4ncyBBbmd1bGFyIGFuZCBBenVyZSBXb3Jrc2hvcFxuXG4jIyBTZXR1cCB0byBydW4gY29tcGxldGVkIGFwcFxuXG4tIGBnaXQgY2xvbmUgZ2l0QGdpdGh1Yi5jb206QW5ndWxhci1BenVyZS1Xb3Jrc2hvcC90YWNvcy11aS5naXRgXG4tIGBucG0gaWBcbi0gVXBkYXRlIGBzcmMvZW52aXJvbm1lbnRzL2Vudmlyb25tZW50LnRzYCB3aXRoIHRoZSBwcm9wZXIgVVJMJ3Ncbi0gYG5nIHNlcnZlIC0tc3NsYFxuLSBPcGVuIHlvdXIgYnJvd3NlciB0byBbaHR0cHM6Ly8xMjcuMC4wLjE6NDIwMF0oaHR0cHM6Ly8xMjcuMC4wLjE6NDIwMClcblxuIyMgV29ya3Nob3AgTW9kdWxlc1xuXG4tIFtNb2R1bGUgMDogU2V0dXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9Bbmd1bGFyLUF6dXJlLVdvcmtzaG9wL3dvcmtzaG9wLW1vZHVsZXMvYmxvYi9tYXN0ZXIvMDAtc2V0dXAubWQpXG4tIFtNb2R1bGUgMTogQXp1cmUgU3RvcmFnZSBhbmQgRGV2T3BzXShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzAxLXN0b3JhZ2UtYW5kLWRldm9wcy5tZClcbi0gW01vZHVsZSAyOiBBcHBsaWNhdGlvbiBJbnNpZ2h0cyBpbiBBbmd1bGFyXShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzAyLXVpLW1vbml0b3JpbmcubWQpXG4tIFtNb2R1bGUgMzogQXp1cmUgRnVuY3Rpb25zIChTZXJ2ZXJsZXNzKV0oaHR0cHM6Ly9naXRodWIuY29tL0FuZ3VsYXItQXp1cmUtV29ya3Nob3Avd29ya3Nob3AtbW9kdWxlcy9ibG9iL21hc3Rlci8wMy1henVyZS1mdW5jdGlvbnMubWQpXG4tIFtNb2R1bGUgNDogQXp1cmUgQ29zbW9zREJdKGh0dHBzOi8vZ2l0aHViLmNvbS9Bbmd1bGFyLUF6dXJlLVdvcmtzaG9wL3dvcmtzaG9wLW1vZHVsZXMvYmxvYi9tYXN0ZXIvMDQtYXp1cmUtY29zbW9zZGIubWQpXG4tIFtNb2R1bGUgNTogQXBwbGljYXRpb24gSW5zaWdodHMgaW4gQXp1cmUgRnVuY3Rpb25zXShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzA1LWFwaS1tb25pdG9yaW5nLm1kKVxuLSBbTW9kdWxlIDY6IEF1dGhlbnRpY2F0aW9uIGluIEF6dXJlXShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzA2LWF1dGhlbnRpY2F0aW9uLWluLWF6dXJlLm1kKVxuLSBbTW9kdWxlIDc6IEF6dXJlIFNlY3VyaXR5XShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzA3LWF6dXJlLXNlY3VyaXR5Lm1kKVxuXG5JbiB0aGlzIGxhYiB5b3Ugd2lsbCBsZWFybiB0bzpcblxuKiBbQXp1cmUgQXBwIFNlcnZpY2VdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2FwcC1zZXJ2aWNlLz9XVC5tY19pZD13b3Jrc2hvcC1naXRodWItanMtdGVhbSlcbiAgICAqIENyZWF0ZSBhIEFwcCBTZXJ2aWNlIHVzaW5nIHRoZSBBenVyZSBwb3J0YWxcbiAgICAqIFNldHVwIGEgd2ViIGhvb2sgZm9yIGNvbnRpbnVvdXMgZGVwbG95bWVudCBpbiBDb250YWluZXIgUmVnaXN0cnlcblxuKiBbQXp1cmUgQ29udGFpbmVyIFJlZ2lzdHJ5XShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9jb250YWluZXItcmVnaXN0cnkvP1dULm1jX2lkPXdvcmtzaG9wLWdpdGh1Yi1qcy10ZWFtKVxuICAgICogQ3JlYXRlIGEgbmV3IENvbnRhaW5lciBSZWdpc3RyeSBcbiAgICAqIEJ1aWxkIERvY2tlciBpbWFnZSBhbmQgZGVwbG95IG1hbnVhbGx5IHRvIGNvbnRhaW5lciByZWdpc3RyeVxuICAgIFxuIyMgQXp1cmUgQ29udGFpbmVyIFJlZ2lzdHJ5XG5cbjEuIEluIHRoZSBicm93c2VyLCBuYXZpZ2F0ZSB0byB0aGUgQXp1cmUgcG9ydGFsLCBodHRwczovL3BvcnRhbC5henVyZS5jb20sIGFuZCBjcmVhdGUgYSBuZXcgQ29udGFpbmVyIFJlZ2lzdHJ5IGFjY291bnQuIFxuXG4xLiBJbiBWaXN1YWwgU3R1ZGlvIENvZGUsIGdvIHRvIHRoZSBleHRlbnNpb25zIHBhbmVsIGFuZCBpbnN0YWxsIHRoZSBEb2NrZXIgZXh0ZW5zaW9uLiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIGluc3RhbGwgaXQgZnJvbSB0aGUgW21hcmtldHBsYWNlXShodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXMvP1dULm1jX2lkPXdvcmtzaG9wLWdpdGh1Yi1qcy10ZWFtJml0ZW1OYW1lPVBldGVySmF1c292ZWMudnNjb2RlLWRvY2tlcilcblxuMS4gKipGb3JrKiogb3VyIGFwcCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Bbmd1bGFyLUF6dXJlLVdvcmtzaG9wL3RhY29zLXVpIGFuZCBzd2l0Y2ggdG8gdGhlICowMC1zdGFydCogYnJhbmNoLiBCdWlsZCBmb3IgcHJvZHVjdGlvbiBieSBydW5uaW5nIGBuZyBidWlsZCAtLXByb2RgXG5cbjIuIE9uY2UgeW91IGhhdmUgdGhlIGV4dGVuc2lvbiBpbnN0YWxsZWQgYW5kIHRoZSB0YWNvcyBwcm9qZWN0IGZvcmtlZCBjcmVhdGUgYSBmaWxlIG5hbWVzICpEb2NrZXJmaWxlKiBhbmQgcGFzdGUgaW4gdGhlIGZvbGxvd2luZzpcblxuYGBgXG5GUk9NIG5naW54OnN0YWJsZS1hbHBpbmVcbkxBQkVMIGF1dGhvcj1cIlNpbW9uYSBDb3RpblwiXG5DT1BZIC4vZGlzdC90YWNvcy11aSAvdmFyL3d3d1xuQ09QWSBuZ2lueC5jb25mIC9ldGMvbmdpbngvbmdpbnguY29uZlxuRVhQT1NFIDgwIDQ0M1xuRU5UUllQT0lOVCBbXCJuZ2lueFwiLFwiLWdcIixcImRhZW1vbiBvZmY7XCJdXG5gYGBcbjMuIE5leHQsIGNyZWF0ZSBhICpuZ2lueC5jb25mKiBmaWxlIGFuZCBwYXN0ZSBpbiB0aGUgY29udGVudHMgZnJvbSBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3RhY29zLXVpLS9ibG9iL21hc3Rlci9uZ2lueC5jb25mKSBcblxuNC4gRnJvbSB5b3VyIElERSwgcnVuICBcbmBgYFxuZG9ja2VyIGJ1aWxkIC10IDx5b3VyX2NyPi90YWNvczoxLjAgLlxuZG9ja2VyIGxvZ2luIC0tdXNlcm5hbWUgJERPQ0tFUl9VU0VSIC0tcGFzc3dvcmQgJERPQ0tFUl9QQVNTIDx5b3VyX2NyPlxuZG9ja2VyIHB1c2ggPHlvdXJfY3I+L3RhY29zOjEuMFxuYGBgXG5cbjUuIEluIHRoZSBBenVyZSBQb3J0YWwsIGdvIHRvIHlvdXIgbmV3bHkgY3JlYXRlIGNvbnRhaW5lciByZWdpc3RyeSwgKlJlcG9zaXRvcmllcyogLT4gKnRhY29zKiAtPiAqdGFncyouIENsaWNrIG9uIHRoZSB0aHJlZSBkb3RzIG5leHQgdG8gKjEuMCogYW5kIGNob29zZSBEZXBsb3kgdG8gV2ViIEFwcC4gRnJvbSB0aGVyZSBjcmVhdGUgYSBuZXcgQXBwIFNlcnZpY2UgYWNjb3VudC4gVGhpcyBlbmFibGVzIGNvbnRpbnVvdXMgZGVwbG95bWVudCBieSBjcmVhdGluZyBhIHdlYmhvb2suXG5cbjYuIE5hdmlnYXRlIHRvIHRoZSBuZXcgQXBwU2VydmljZSBhbmQgdmlzaXQgcGFnZSB0byBjaGVjayBkZXBsb3ltZW50LlxuXG43LiBOb3cgYXV0b21hdGUgdGhlIHByb2Nlc3MgYnkgYWRkaW5nIEF6dXJlIERldk9wc1xuXG4jIyBBenVyZSBEZXZvcHNcblxuMS4gSW4gVlMgQ29kZSwgZ28gdG8gdGhlIHJvb3Qgb2YgeW91ciBwcm9qZWN0LCBjcmVhdGUgYSBmaWxlIG5hbWVkICphenVyZS1waXBlbGluZXMueW1sKiBhbmQgcGFzdGUgaW4gdGhlIGNvbmZpZ3VyYXRpb24gYmVsbG93LiAqKipDb21taXQgJiBwdXNoIGNoYW5nZXMqKipcbmBgYHltbFxubmFtZTogdGFjb3NcblxucG9vbDpcbiAgdm1JbWFnZTogJ1VidW50dSAxNi4wNCdcblxudHJpZ2dlcjpcbiAgLSBtYXN0ZXJcblxuc3RlcHM6XG4gIC0gdGFzazogTm9kZVRvb2xAMFxuICAgIGlucHV0czpcbiAgICAgIHZlcnNpb25TcGVjOiAnOC54J1xuICAgIGRpc3BsYXlOYW1lOiAnSW5zdGFsbGluZyBOb2RlLmpzJ1xuXG4gIC0gc2NyaXB0OiB8XG4gICAgICBucG0gaW5zdGFsbFxuICAgICAgbnBtIHJ1biBidWlsZCAtLSAtLXByb2RcbiAgICBkaXNwbGF5TmFtZTogJ1J1bm5pbmcgbnBtIGluc3RhbGwgYW5kIGJ1aWxkJ1xuICAtIHNjcmlwdDogZG9ja2VyIGJ1aWxkIC10ICQoZG9ja2VySWQpLyQoaW1hZ2VOYW1lKSAgLlxuICAtIHNjcmlwdDogZG9ja2VyIGxvZ2luIC11ICQodXNlcikgLXAgJChwc3dkKSBzaWNvdGluLmF6dXJlY3IuaW9cbiAgLSBzY3JpcHQ6IGRvY2tlciBwdXNoICQoZG9ja2VySWQpLyQoaW1hZ2VOYW1lKVxuYGBgXG4jIyMgQnVpbGQgUGlwZWxpbmVcblxuMS4gSW4gdGhlIGJyb3dzZXIsIGdvIHRvIGh0dHA6Ly9kZXYuYXp1cmUuY29tIGFuZCBjbGljayBTaWduIGluIHRvIEF6dXJlIERldk9wcywgdXNlIHlvdXIgTWljcm9zb2Z0IGFjY291bnQgdG8gc2lnbiBpbi4gT24gdGhlIGxhbmRpbmcgcGFnZSBjbGljayAqTmV3IHByb2plY3QqLCBmaWxsIGluIHRoZSBwcm9qZWN0IG5hbWUgd2l0aCB0YWNvcy11aSBhbmQgY2xpY2sgKkNyZWF0ZSpcblxuMS4gSW4gdGhlIG5ldyBwcm9qZWN0LCBnb3QgdG8gKlBpcGVsaW5lcyogLT4gKkJ1aWxkcyogYW5kIGNsaWNrICpOZXcgUGlwZWxpbmUqLiBTZWxlY3QgR2l0aHViIGFzIHNvdXJjZSwgQXV0aG9yaXplIEdpdHViIGFuZCBjaG9vc2UgdGhlIHByb2plY3QgeW91IGZvcmtlZCBlYXJsaWVyLCBicmFuY2ggKjAwLXN0YXJ0Ki4gQ29udGludWUgYW5kIGNvbmZpZ3VyZSB0aGUgYnVpbGQgdG8gdXNlICpDb25maWd1cmF0aW9uIGFzIGNvZGUqIGFuZCBzZWxlY3QgdGhlIHltbCBmaWxlIHlvdSBjcmVhdGVkIGVhcmxpZXIuIFxuXG4yLiBHbyB0byB0aGUgdmFyaWFibGVzIHRhYiBhbmQgY3JlYXRlIG5ldyBvbmVzIGZvciBkb2NrZXJJZCwgdXNlciwgaW1hZ2VOYW1lIGFuZCBwYXNzd29yZC4gXG5cbjMuIFNhdmUgYW5kIHF1ZXVlLiBDbGljayBvbiB0aGUgYnVpbGQgbGluayB0byB2aWV3IHRoZSBpbiBwcm9ncmVzcyBwcm9qZWN0XG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2MjNjMjc5My1lMjhhLTQ0ZjktYjBlMy1lNWZlMmJmMzljZjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ESXpNRE0zTlRFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtc1NpbmdsZXRvblJlcHJvLVBsdWdpbi5CYWRnZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkMDJlMjYyNTgxMWFlYmIwYzU4MTI3NGJiYTMzOTI4OTk0OWNjNGFlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBYYW1hcmluRm9ybXNTaW5nbGV0b25SZXByb1xuWGFtYXJpbi5Gb3JtcyBzYW1wbGUgdG8gcmVwcm9kdWNlIFN5c3RlbS5NaXNzaW5nTWV0aG9kRXhjZXB0aW9uIHdoZW4gdXNpbmcgYSBzaW5nbGV0b24gZm9yIEFwcGxpY2F0aW9uLk1haW5QYWdlXG5cbkxpbmsgdG8gWGFtYXJpbi5Gb3JtcyBJc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3hhbWFyaW4vWGFtYXJpbi5Gb3Jtcy9pc3N1ZXMvNTkxMVxuXG4hW1JlcHJvZHVjdGlvbiBWaWRlb10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTYwODY1NjctNGFkYzEwODAtNWUwZS0xMWU5LTgxY2UtOTM3MTRmMTc1Yzc2LmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3ODdjOTc5Zi1mNTYxLTRhMmMtOTQ3YS03MDczZTc0MTNiY2YiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalUyTWpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjZlOTBiYzQ4MDU4YjJhNTM2YTExMTVlZDc0ZjNkNjIyYjdjZGNiYTMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHRhY29zLWFwaVxuXG5TYW1wbGUgYXBwXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2FwaXMvYnVpbGQvc3RhdHVzL3NpbW9uYWNvLnRhY29zLWFwaSldKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2J1aWxkL2xhdGVzdD9kZWZpbml0aW9uSWQ9OClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NGVlZDA1ZC0zNGU5LTRmZGUtYWFiYy0yNWZmZGVjNGNmZWIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UTXpOREUxTmpJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVzdC1hY3Rpb25zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU4MWY0NDQ4NWJhNjgzNWI1Y2UwMGJlYWQ5NWUzMjJlNjYxMGZmYjkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHRlc3QtYWN0aW9ucyIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyN2FlY2UzYi04YjY3LTQxOTItOTRlYy1hNzJmZDA5MGNmMTUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXhNRGcyTVRrPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJ1dHRvblJlbmRlcmVyU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ0NGUzOTVlMjI4ZmRjZWJlNDdjNWVhNmFlZDlkZDExMTgzYzMyZjIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEJ1dHRvblJlbmRlcmVyU2FtcGxlXG5cbkEgc2FtcGxlIFhhbWFyaW4uRm9ybXMgYXBwIHNob3dpbmcgaG93IHRvIG1ha2UgYSBCdXR0b24gQ3VzdG9tIFJlbmRlcmVyXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYjc2N2EyODktZjc0Zi00ZWM4LTkxZjAtNTQ3NDMxNTgwN2E2Igp9ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalUyTWpRPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJ0YWNvcy1hcGkiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogIjZlOTBiYzQ4MDU4YjJhNTM2YTExMTVlZDc0ZjNkNjIyYjdjZGNiYTMiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIHRhY29zLWFwaVxuXG5TYW1wbGUgYXBwXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2FwaXMvYnVpbGQvc3RhdHVzL3NpbW9uYWNvLnRhY29zLWFwaT9XVC5tY19pZD10YWNvc2FwaS1naXRodWItc2ljb3RpbildKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2J1aWxkL2xhdGVzdD9kZWZpbml0aW9uSWQ9OCZXVC5tY19pZD10YWNvc2FwaS1naXRodWItc2ljb3RpbilcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjNmFhOTEzNC1kMTczLTQ3ZmUtOTI4Mi0yODAwOTI2ZDMwNjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UUXpNekkxTlRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkludm9rZU9uTWFpblRocmVhZEFzeW5jX1JlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjFlMGY5YTQ5NTRlZTM4NTdkN2JkZWE4NzAyNDhjOGUwYTY4ZWVmYzYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEludm9rZU9uTWFpblRocmVhZEFzeW5jX1JlcHJvXG5SZXByb2R1Y3Rpb24gc2FtcGxlIGZvciBYYW1hcmluLkZvcm1zLkludm9rZU9uTWFpblRocmVhZEFzeW5jXG5cbioqVXBkYXRlKipcblxuW1RoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL1hhbWFyaW4uRm9ybXMvaXNzdWVzLzY3MDUpIGhhcyBiZWVuIGZpeGVkIGluIFhhbWFyaW4uRm9ybXMgdjQuMi4wLjYwODE0Ni1wcmUxLlxuXG4jIyBSZXByb2R1Y3Rpb24gU3RlcHMsIGlPU1xuXG4xLiBPcGVuIGBJbnZva2VPbk1haW5UaHJlYWRBc3luY19SZXByby5zbG5gIGluIFZpc3VhbCBTdHVkaW8gb3IgVmlzdWFsIFN0dWRpbyBmb3IgTWFjXG4yLiBCdWlsZC9EZXBsb3kgYEludm9rZU9uTWFpblRocmVhZEFzeW5jX1JlcHJvLmlPU2AgdG8gYW4gaU9TIERldmljZSBvciBTaW11bGF0b3JcbjMuIFRhcCB0aGUgQnV0dG9uIHRpdGxlZCBgTm8gQ3Jhc2hgXG40LiBDb25maXJtIHRoZSBhbmltYXRpb24gY29tcGxldGVzIHN1Y2Nlc3NmdWxseVxuNS4gVGFwIHRoZSBCdXR0b24gdGl0bGVkIGBDcmFzaDFgXG42LiBDb25maXJtIHRoZSBhcHAgY3Jhc2hlcyB3aXRoIGBOdWxsUmVmZXJlbmNlRXhjZXB0aW9uYFxuNy4gQnVpbGQvRGVwbG95IGBJbnZva2VPbk1haW5UaHJlYWRBc3luY19SZXByby5pT1NgIHRvIGFuIGlPUyBEZXZpY2Ugb3IgU2ltdWxhdG9yXG44LiBUYXAgdGhlIEJ1dHRvbiB0aXRsZWQgYENyYXNoMmBcbjkuIENvbmZpcm0gdGhlIGFwcCBjcmFzaGVzIHdpdGggYE51bGxSZWZlcmVuY2VFeGNlcHRpb25gXG5cbiMjIFJlcHJvZHVjdGlvbiBTdGVwcywgQW5kcm9pZFxuXG4xLiBPcGVuIGBJbnZva2VPbk1haW5UaHJlYWRBc3luY19SZXByby5zbG5gIGluIFZpc3VhbCBTdHVkaW8gb3IgVmlzdWFsIFN0dWRpbyBmb3IgTWFjXG4yLiBCdWlsZC9EZXBsb3kgYEludm9rZU9uTWFpblRocmVhZEFzeW5jX1JlcHJvLkFuZHJvaWRgIHRvIGFuIGlPUyBEZXZpY2Ugb3IgU2ltdWxhdG9yXG4zLiBUYXAgdGhlIEJ1dHRvbiB0aXRsZWQgYE5vIENyYXNoYFxuNC4gQ29uZmlybSB0aGUgYW5pbWF0aW9uIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHlcbjUuIFRhcCB0aGUgQnV0dG9uIHRpdGxlZCBgQ3Jhc2gxYFxuNi4gQ29uZmlybSB0aGUgYXBwIGNyYXNoZXMgd2l0aCBgTnVsbFJlZmVyZW5jZUV4Y2VwdGlvbmBcbjcuIEJ1aWxkL0RlcGxveSBgSW52b2tlT25NYWluVGhyZWFkQXN5bmNfUmVwcm8uQW5kcm9pZGAgdG8gYW4gaU9TIERldmljZSBvciBTaW11bGF0b3JcbjguIFRhcCB0aGUgQnV0dG9uIHRpdGxlZCBgQ3Jhc2gyYFxuOS4gQ29uZmlybSB0aGUgYXBwIGNyYXNoZXMgd2l0aCBgTnVsbFJlZmVyZW5jZUV4Y2VwdGlvbmBcblxuXG4hW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjAzNzE1NjctNzQ4OGVhODAtOTlhZS0xMWU5LTgyMjgtYTFkOGRjZWU2YmM5LmdpZilcblxuIyMgRW52aXJvbm1lbnRcblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE5IGZvciBNYWMgKFByZXZpZXcpID09PVxuXG5WZXJzaW9uIDguMiBQcmV2aWV3ICg4LjIgYnVpbGQgODc0KVxuSW5zdGFsbGF0aW9uIFVVSUQ6IGNjOWU3ZjlhLWIzZjItNDA3MS04NGM0LWRkNzgxNTRkOThkZVxuXHRHVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG5cdFhhbWFyaW4uTWFjIDUuMTQuMC44MyAoZDE2LTIgLyBmMDhkNGUzZSlcblxuXHRQYWNrYWdlIHZlcnNpb246IDYwMDAwMDI5NlxuXG49PT0gTW9ubyBGcmFtZXdvcmsgTURLID09PVxuXG5SdW50aW1lOlxuXHRNb25vIDYuMC4wLjI5NiAoMjAxOS0wMi8xZTlmM2JmYmM1YSkgKDY0LWJpdClcblx0UGFja2FnZSB2ZXJzaW9uOiA2MDAwMDAyOTZcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA1LjEuMC42MDEzXG5cbj09PSAuTkVUIENvcmUgPT09XG5cblJ1bnRpbWU6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L2RvdG5ldFxuUnVudGltZSBWZXJzaW9uczpcblx0My4wLjAtcHJldmlldzYtMjc4MDQtMDFcblx0My4wLjAtcHJldmlldzUtMjc2MjYtMTVcblx0My4wLjAtcHJldmlldzMtMjc1MDMtNVxuXHQzLjAuMC1wcmV2aWV3LTI3MzI0LTVcblx0My4wLjAtcHJldmlldy0yNzEyMi0wMVxuXHQyLjIuNFxuXHQyLjIuMFxuXHQyLjIuMC1wcmV2aWV3My0yNzAxNC0wMlxuXHQyLjEuOVxuXHQyLjEuOFxuXHQyLjEuNlxuXHQyLjEuMlxuXHQyLjEuMVxuXHQyLjAuNlxuXHQyLjAuNVxuXHQxLjEuMTBcblx0MS4wLjEzXG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8zLjAuMTAwLXByZXZpZXc2LTAxMjI2NC9TZGtzXG5TREsgVmVyc2lvbnM6XG5cdDMuMC4xMDAtcHJldmlldzYtMDEyMjY0XG5cdDMuMC4xMDAtcHJldmlldzUtMDExNTY4XG5cdDIuMi4yMDNcblx0Mi4xLjUwNVxuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzYuMC4wL2xpYi9tb25vL21zYnVpbGQvQ3VycmVudC9iaW4vU2Rrc1xuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS42LjEwXG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIFByb2ZpbGVyLmFwcC9Db250ZW50cy9NYWNPUy9YYW1hcmluIFByb2ZpbGVyXG5cbj09PSBVcGRhdGVyID09PVxuXG5WZXJzaW9uOiAxMVxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSAxMC4yLjEgKDE0NDkwLjEyMilcbkJ1aWxkIDEwRTEwMDFcblxuPT09IFhhbWFyaW4gRGVzaWduZXIgPT09XG5cblZlcnNpb246IDE2LjIuMC4zMjVcbkhhc2g6IGYxMGNmYmY4M1xuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtMlxuQnVpbGQgZGF0ZTogMjAxOS0wNi0xOSAxOTowMDo0NiBVVENcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogOS40LjAuMzQgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkNvbW1pdDogeGFtYXJpbi1hbmRyb2lkL2QxNi0yLzdjY2UzMDVcbkFuZHJvaWQgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvQW5kcm9pZC9zZGtcblx0U3VwcG9ydGVkIEFuZHJvaWQgdmVyc2lvbnM6XG5cdFx0Ni4wIChBUEkgbGV2ZWwgMjMpXG5cdFx0Ny4wIChBUEkgbGV2ZWwgMjQpXG5cdFx0Ny4xIChBUEkgbGV2ZWwgMjUpXG5cdFx0OC4wIChBUEkgbGV2ZWwgMjYpXG5cdFx0OC4xIChBUEkgbGV2ZWwgMjcpXG5cblNESyBUb29scyBWZXJzaW9uOiAyNi4xLjFcblNESyBQbGF0Zm9ybSBUb29scyBWZXJzaW9uOiAyOC4wLjJcblNESyBCdWlsZCBUb29scyBWZXJzaW9uOiAyOC4wLjNcblxuQnVpbGQgSW5mb3JtYXRpb246IFxuTW9ubzogbW9uby9tb25vLzIwMTktMDJAYzZlZGFhNjJmOTRcbkphdmEuSW50ZXJvcDogeGFtYXJpbi9qYXZhLmludGVyb3AvZDE2LTJAYjJiMjYxMFxuTGliWmlwU2hhcnA6IGdyZW5kZWxsby9MaWJaaXBTaGFycC9kMTYtMkBjYWEwYzc0XG5MaWJaaXA6IG5paC1hdC9saWJ6aXAvcmVsLTEtNS0xQGI5NWNmM2ZcblByb0d1YXJkOiB4YW1hcmluL3Byb2d1YXJkL21hc3RlckA5MDU4MzZkXG5TUUxpdGU6IHhhbWFyaW4vc3FsaXRlLzMuMjcuMUA4MjEyYTJkXG5YYW1hcmluLkFuZHJvaWQgVG9vbHM6IHhhbWFyaW4veGFtYXJpbi1hbmRyb2lkLXRvb2xzL21hc3RlckA0ZjcxN2I2XG5cbj09PSBNaWNyb3NvZnQgTW9iaWxlIE9wZW5KREsgPT09XG5cbkphdmEgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vamRrL21pY3Jvc29mdF9kaXN0X29wZW5qZGtfOC4wLjI1XG4xLjguMC0yNVxuQW5kcm9pZCBEZXNpZ25lciBFUEwgY29kZSBhdmFpbGFibGUgaGVyZTpcbmh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL0FuZHJvaWREZXNpZ25lci5FUExcblxuPT09IEFuZHJvaWQgRGV2aWNlIE1hbmFnZXIgPT09XG5cblZlcnNpb246IDEuMi4wLjU4XG5IYXNoOiBkMDNlM2VhXG5CcmFuY2g6IHJlbW90ZXMvb3JpZ2luL2QxNi0yXG5CdWlsZCBkYXRlOiAyMDE5LTA2LTE5IDE2OjMwOjIyIFVUQ1xuXG49PT0gWGFtYXJpbi5NYWMgPT09XG5cblZlcnNpb246IDUuMTQuMC45MSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogMmYxY2M3YmJcbkJyYW5jaDogZDE2LTJcbkJ1aWxkIGRhdGU6IDIwMTktMDYtMDcgMDI6NDk6MjMtMDQwMFxuXG49PT0gWGFtYXJpbi5pT1MgPT09XG5cblZlcnNpb246IDEyLjE0LjAuOTEgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDJmMWNjN2JiXG5CcmFuY2g6IGQxNi0yXG5CdWlsZCBkYXRlOiAyMDE5LTA2LTA3IDAyOjQ5OjIyLTA0MDBcblxuPT09IFhhbWFyaW4gSW5zcGVjdG9yID09PVxuXG5WZXJzaW9uOiAxLjQuM1xuSGFzaDogZGIyNzUyNVxuQnJhbmNoOiAxLjQtcmVsZWFzZVxuQnVpbGQgZGF0ZTogTW9uLCAwOSBKdWwgMjAxOCAyMToyMDoxOCBHTVRcbkNsaWVudCBjb21wYXRpYmlsaXR5OiAxXG5cbj09PSBCdWlsZCBJbmZvcm1hdGlvbiA9PT1cblxuUmVsZWFzZSBJRDogODAyMDAwODc0XG5HaXQgcmV2aXNpb246IGU1Nzc3MGVmZTBkMmI5MmFkZTFlMWI3NWU1MjczMTYxNGU1Zjk0ODdcbkJ1aWxkIGRhdGU6IDIwMTktMDYtMjUgMTk6NDM6MzIrMDBcbkJ1aWxkIGJyYW5jaDogcmVsZWFzZS04LjItcHJldmlldzJcblhhbWFyaW4gZXh0ZW5zaW9uczogYTc0ZmIzZWI4NzE3ZmJjYjgyNTAwYjNhMTA3Njk0YWQ1MTg1YWE0OFxuXG49PT0gT3BlcmF0aW5nIFN5c3RlbSA9PT1cblxuTWFjIE9TIFggMTAuMTQuNVxuRGFyd2luIDE4LjYuMCBEYXJ3aW4gS2VybmVsIFZlcnNpb24gMTguNi4wXG4gICAgVGh1IEFwciAyNSAyMzoxNjoyNyBQRFQgMjAxOVxuICAgIHJvb3Q6eG51LTQ5MDMuMjYxLjR+Mi9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuPT09IEVuYWJsZWQgdXNlciBpbnN0YWxsZWQgZXh0ZW5zaW9ucyA9PT1cblxuTnVHZXQgUGFja2FnZSBNYW5hZ2VtZW50IEV4dGVuc2lvbnMgMC4xOVxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDc0ZmExN2YtMzAxZS00ZmIzLWI3YWItZWM4NGVmYWE4MTllIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UZzRNelUyT0RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jb2duaXRpdmUtc2VydmljZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzI4MGIwNTU5MjliNDU3N2Q5YTEzNjg3Y2FmMmY4NzZiODU2ZDQwOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ29sbGVjdGlvbiBvZiBBenVyZSBGdW5jdGlvbnMgd3JhcHBlcnMgZm9yIEF6dXJlIENvZ25pdGl2ZSBTZXJ2aWNlcyBBUElcblxuIyMgQ29tcHV0ZXIgVmlzaW9uIEFQSVxuXG5UaGUgW0NvbXB1dGVyIFZpc2lvbiBBUEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2NvZ25pdGl2ZS1zZXJ2aWNlcy9jb21wdXRlci12aXNpb24vP3d0Lm1jX2lkPWdpdGh1Yi1yZWFkbWUtc2ljb3RpbikgcHJvdmlkZXMgc3RhdGUtb2YtdGhlLWFydCBhbGdvcml0aG1zIHRvIHByb2Nlc3MgaW1hZ2VzIGFuZCByZXR1cm4gaW5mb3JtYXRpb24uIEZvciBleGFtcGxlLCBpdCBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgaWYgYW4gaW1hZ2UgY29udGFpbnMgbWF0dXJlIGNvbnRlbnQsIG9yIGl0IGNhbiBiZSB1c2VkIHRvIGZpbmQgYWxsIHRoZSBmYWNlcyBpbiBhbiBpbWFnZS4gSXQgYWxzbyBoYXMgb3RoZXIgZmVhdHVyZXMgbGlrZSBlc3RpbWF0aW5nIGRvbWluYW50IGFuZCBhY2NlbnQgY29sb3JzLCBjYXRlZ29yaXppbmcgdGhlIGNvbnRlbnQgb2YgaW1hZ2VzLCBhbmQgZGVzY3JpYmluZyBhbiBpbWFnZSB3aXRoIGNvbXBsZXRlIEVuZ2xpc2ggc2VudGVuY2VzLiBBZGRpdGlvbmFsbHksIGl0IGNhbiBhbHNvIGludGVsbGlnZW50bHkgZ2VuZXJhdGUgaW1hZ2VzIHRodW1ibmFpbHMgZm9yIGRpc3BsYXlpbmcgbGFyZ2UgaW1hZ2VzIGVmZmVjdGl2ZWx5LlxuXG5UbyBydW4gZnVuY3Rpb25zIGluIHRoaXMgcHJvamVjdCB5b3UgbmVlZCBhIENvbXB1dGVyIFZpc2lvbiBpbnN0YW5jZS5cblxuWW91IGNhbiBjcmVhdGUgb25lIGVpdGhlciB1c2luZyB0aGUgW0F6dXJlIFBvcnRhbF0oaHR0cHM6Ly9ha2EubXMvcG9ydGFsLWdpdGh1Yikgb3IgdXNpbmcgdGhlIFtBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9jb2duaXRpdmVzZXJ2aWNlcz92aWV3PWF6dXJlLWNsaS1sYXRlc3Qmd3QubWNfaWQ9Z2l0aHViLXJlYWRtZS1zaWNvdGluKS5cblxuYGBgXG5heiBjb2duaXRpdmVzZXJ2aWNlcyBhY2NvdW50IGNyZWF0ZSAtbiBzZXJ2ZXJsZXNzLWN2cyAtZyBzZXJ2ZXJsZXNzY29nbml0aXZlc2VydmljZXMgLS1raW5kIFwiQ29tcHV0ZXJWaXNpb25cIiAtLXNrdSBGMCAtbCBXZXN0VVMyIC0teWVzXG5gYGBcblxuUmVuYW1lIGxvY2FsLnNldHRpbmdzLnNhbXBsZS5qc29uIHRvIGxvY2FsLnNldHRpbmdzLmpzb24gYW5kIHJlcGxhY2UgQVBJX1VSTCBhbmQgQVBJX0tFWSB3aXRoIHlvdXIgc2V0dGluZ3MuXG5cbllvdSBjYW4gcmV0cmlldmUgdGhlIEFQSV9LRVkgdmFsdWUgZWl0aGVyIGZyb20gdGhlIFtBenVyZSBQb3J0YWxdKGh0dHBzOi8vYWthLm1zL3BvcnRhbC1naXRodWIpLCBvbiB0aGUgS2V5cyB0YWIgb3IgdXNpbmcgdGhlIFtBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9jb2duaXRpdmVzZXJ2aWNlcz92aWV3PWF6dXJlLWNsaS1sYXRlc3Qmd3QubWNfaWQ9Z2l0aHViLXJlYWRtZS1zaWNvdGluKTpcblxuYGBgXG5heiBjb2duaXRpdmVzZXJ2aWNlcyBhY2NvdW50IGtleXMgbGlzdCAtbiBzZXJ2ZXJsZXNzLWN2cyAtZyBzZXJ2ZXJsZXNzY29nbml0aXZlc2VydmljZXNcbmBgYFxuXG5TYW1lIGZvciB0aGUgQVBJX0VORFBPSU5ULCB5b3UgY2FuIGdldCBpdCBmcm9tIHRoZSBPdmVydmlldyBwYWdlIGluIHRoZSBbQXp1cmUgUG9ydGFsXShodHRwczovL2FrYS5tcy9wb3J0YWwtZ2l0aHViKSBvciB1c2luZyB0aGUgW0F6dXJlIENMSV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvY2xpL2F6dXJlL2NvZ25pdGl2ZXNlcnZpY2VzP3ZpZXc9YXp1cmUtY2xpLWxhdGVzdCZ3dC5tY19pZD1naXRodWItcmVhZG1lLXNpY290aW4pOlxuXG5gYGBcbmF6IGNvZ25pdGl2ZXNlcnZpY2VzIGFjY291bnQgc2hvdyAtbiBzZXJ2ZXJsZXNzLWN2cyAtZyBzZXJ2ZXJsZXNzY29nbml0aXZlc2VydmljZXNcbmBgYFxuXG5JbnN0YWxsIG5wbSBkZXBlbmRlbmNpZXMgYnkgcnVubmluZyBgbnBtIGlgLiBUbyBydW4gdGhlIHByb2plY3QgaW4gVlMgQ29kZSBjbGljayBvbiB0aGUgZGVidWcgaWNvbiBhbmQgdGhlbiBjbGljayBzdGFydCBEZWJ1Z2dpbmcuIFRoaXMgd2lsbCBzdGFydCB0aGUgQXp1cmUgRnVuY3Rpb25zIHJ1bnRpbWUgYW5kIGdlbmVyYXRlIFVSTHMgb2YgdGhpcyBmb3JtIFtodHRwOi8vbG9jYWxob3N0OjcwNzEvYXBpL2FuYWx5emUtaW1hZ2VdKGh0dHA6Ly9sb2NhbGhvc3Q6NzA3MS9hcGkvYW5hbHl6ZS1pbWFnZSlcblxuIyMgVGVzdCBBUElcblxuRGVwbG95ZWQgYXBwbGljYXRpb24gYXQ6XG5cbjEuIFtBbmFseXplIEltYWdlXShodHRwczovL3NlcnZlcmxlc3Njdi5henVyZXdlYnNpdGVzLm5ldC9hcGkvYW5hbHl6ZS1pbWFnZSlcblxuMS4gW0Rlc2NyaWJlIEltYWdlXShodHRwczovL3NlcnZlcmxlc3Njdi5henVyZXdlYnNpdGVzLm5ldC9hcGkvZGVzY3JpYmUtaW1hZ2UpXG5cbjEuIFtGYWNlIERldGVjdF0oaHR0cHM6Ly9zZXJ2ZXJsZXNzY3YuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2ZhY2UtZGV0ZWN0KVxuXG4xLiBbT0NSXShodHRwczovL3NlcnZlcmxlc3Njdi5henVyZXdlYnNpdGVzLm5ldC9hcGkvb2NyKVxuXG4xLiBbVGFnIEltYWdlXShodHRwczovL3NlcnZlcmxlc3Njdi5henVyZXdlYnNpdGVzLm5ldC9hcGkvdGFnLWltYWdlKVxuXG4jIyBNb3JlIHJlc291cmNlc1xuXG4xLiBBUEkgcmVmZXJlbmNlIGRvY3VtZW50YXRpb24gW0NvbXB1dGVyIFZpc2lvbiBBUEldKGh0dHBzOi8vd2VzdHVzLmRldi5jb2duaXRpdmUubWljcm9zb2Z0LmNvbS9kb2NzL3NlcnZpY2VzLzVhZGY5OTE4MTVlMTA2MGU2MzU1YWQ0NC9vcGVyYXRpb25zLzU2ZjkxZjJlNzc4ZGFmMTRhNDk5ZTFmYS8/d3QubWNfaWQ9Z2l0aHViLXJlYWRtZS1zaWNvdGluKVxuXG4xLiBBenVyZSBDTEkgY29tbWFuZHMgZm9yIFtBenVyZSBDb2duaXRpdmUgU2VydmljZXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9jb2duaXRpdmVzZXJ2aWNlcz92aWV3PWF6dXJlLWNsaS1sYXRlc3Qmd3QubWNfaWQ9Z2l0aHViLXJlYWRtZS1zaWNvdGluKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjJmMmFmY2M0LWI5NzAtNGVhNi1hNzIyLTM3ODQ5YzQ1OTczYiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQXlNREUzTXpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm9kZWJpbmFyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYwNjcxMDIwOGM3YTViYTY5N2ZmZjNmYWYwNjBmOTdiZTNlOGJlODkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIG5vZGViaW5hciAgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby5ub2RlYmluYXIpXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19idWlsZC9sYXRlc3Q/ZGVmaW5pdGlvbklkPTEwKSBcblxuSWYgeW91IHdhbnQgdG8gbGVhcm4gbW9yZSBhYm91dCBnZXR0aW5nIHN0YXJ0ZWQgd2l0aCBzZXJ2ZXJsZXNzIHVzaW5nIFZTIENvZGUgYW5kIHdhdGNoIGEgZGVtbyBvZiBBenVyZSBBUEkgTWFuYWdlbWVudCB5b3UgY2FuIHJlZ2lzdGVyIFtoZXJlXShodHRwczovL2luZm8ubWljcm9zb2Z0LmNvbS93dy1vbmRlbWFuZC1idWlsZC1zZXJ2ZXJsZXNzLWFwaS13aXRoLW5vZGVqcy5odG1sKSBhbmQgeW91J2xsIGdldCBhIHJlY29yZGVkIHZlcnNpb24gb2YgdGhlIHdlYmluYXIuICBcblxuIyMgRGVwbG95IHJlc291cmNlc1xuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHBzOi8vYXp1cmVkZXBsb3kubmV0L2RlcGxveWJ1dHRvbi5wbmcpXShodHRwczovL3BvcnRhbC5henVyZS5jb20vI2NyZWF0ZS9NaWNyb3NvZnQuVGVtcGxhdGUvdXJpL2h0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRnNpbW9uYWNvJTJGbm9kZWJpbmFyJTJGbWFzdGVyJTJGYXp1cmVkZXBsb3kuanNvbilcblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBBIHJlY2VudCB2ZXJzaW9uIG9mIE5vZGUgKDgrKVxuXG4xLiBWUyBDb2RlOiBbaGVyZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG93bmxvYWQvP1dULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4pICBcblxuMS4gQXp1cmUgRnVuY3Rpb25zIENMSTogW2hlcmVdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtcnVuLWxvY2FsP1dULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4pICBcblxuMS4gQXp1cmUgRnVuY3Rpb25zIEV4dGVuc2lvbiBmb3IgVlMgQ29kZTogW2hlcmVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcy8/V1QubWNfaWQ9d2ViaW5hci1naXRodWItc2ljb3RpbiZpdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgIFxuXG4xLiBBenVyZSBhY2NvdW50OiBbaHR0cHM6Ly9ha2EubXMvZnJlZV0oaHR0cHM6Ly9ha2EubXMvZnJlZSlcblxuIyMgUnVuIGxvY2FsbHlcblxuMS4gSW5zdGFsbCBhbGwgZGVwZW5kZW5jaWVzIGJ5IHJ1bm5pbmcgYG5wbSBpYFxuXG4xLiBJbiBbVlMgQ29kZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG93bmxvYWQvP1dULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4pLCBnbyB0byB0aGUgW0F6dXJlIEZ1bmN0aW9uc10oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zLz9XVC5tY19pZD13ZWJpbmFyLWdpdGh1Yi1zaWNvdGluJml0ZW1OYW1lPW1zLWF6dXJldG9vbHMudnNjb2RlLWF6dXJlZnVuY3Rpb25zKSBleHRlbnNpb24gYW5kIGNsaWNrIG9uIGBDcmVhdGUgTmV3IFByb2plY3QuLi5gIGljb24uIFRoaXMgd2lsbCBjcmVhdGUgYSBsb2NhbC5zZXR0aW5ncy5qc29uIGZpbGUgZm9yIHVzIGFuZCBjb25maWd1cmUgbG9jYWwgZGVidWdnaW5nLiAgXG5cbjEuIEluIGBsb2NhbC5zZXR0aW5ncy5qc29uYCwgc2V0dXAgeW91ciBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIGNvbm5lY3RpbmcgdG8geW91ciBkYXRhYmFzZTogXG5cbmBgYGpzb25cbntcbiAgXCJJc0VuY3J5cHRlZFwiOiBmYWxzZSxcbiAgXCJWYWx1ZXNcIjoge1xuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiOiBcIlwiLFxuICAgIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCI6IFwibm9kZVwiLFxuICAgIFwidXNlclwiOiBcInlvdXItZGItdXNlclwiLFxuICAgIFwicGFzc3dvcmRcIjogXCJ5b3VyLWRiLXBhc3N3b3JkXCIsXG4gICAgXCJwb3J0XCI6IFwieW91ci1kYi1wb3J0XCJcbiAgfVxufVxuYGBgXG5cbjEuIEluIFZTIENvZGUsIGdvIHRvIHRoZSBEZWJ1Z2dpbmcgcGFuZWwgYW5kIHJ1biBhcHBsaWNhdGlvbiBieSBjbGlraW5nIG9uIHRoZSBgU3RhcnQgZGVidWdnaW5nYCBpY29uIChzbWFsbCBwbGF5IGJ1dHRvbiBvbiB0aGUgbGVmdCBoYW5kIHNpZGUgb2YgdGhlIHRvcCBiYXIpXG5cbi0tLVxuXG48c3BhbiBjbGFzcz1cImVtb2ppLW91dGVyIGVtb2ppLXNpemVyXCI+PHNwYW4gY2xhc3M9XCJlbW9qaS1pbm5lclwiIHN0eWxlPVwiYmFja2dyb3VuZDogdXJsKGNocm9tZS1leHRlbnNpb246Ly9pbW1ocG5jbG9tZGxvaWtrcGNlZm5jbWZnamJrb2ptaC9lbW9qaS1kYXRhL3NoZWV0X2FwcGxlXzMyLnBuZyk7YmFja2dyb3VuZC1wb3NpdGlvbjoxNi4wMzk5NTI5OTY0NzQ3MzUlIDcxLjk3NDE0ODA2MTEwNDU5JTtiYWNrZ3JvdW5kLXNpemU6NTQxOC43NSUgNTQxOC43NSVcIiBkYXRhLWNvZGVwb2ludHM9XCIxZjM4OVwiPjwvc3Bhbj48L3NwYW4+IENvbmdyYXRzISEgWW91IG1hZGUgaXQgLSBidWlsdCB5b3VyIHZlcnkgZmlyc3QgZW5kcG9pbnQgb24gU2VydmVybGVzcyEgPHNwYW4gY2xhc3M9XCJlbW9qaS1vdXRlciBlbW9qaS1zaXplclwiPjxzcGFuIGNsYXNzPVwiZW1vamktaW5uZXJcIiBzdHlsZT1cImJhY2tncm91bmQ6IHVybChjaHJvbWUtZXh0ZW5zaW9uOi8vaW1taHBuY2xvbWRsb2lra3BjZWZuY21mZ2pia29qbWgvZW1vamktZGF0YS9zaGVldF9hcHBsZV8zMi5wbmcpO2JhY2tncm91bmQtcG9zaXRpb246MTYuMDM5OTUyOTk2NDc0NzM1JSA3MS45NzQxNDgwNjExMDQ1OSU7YmFja2dyb3VuZC1zaXplOjU0MTguNzUlIDU0MTguNzUlXCIgZGF0YS1jb2RlcG9pbnRzPVwiMWYzODlcIj48L3NwYW4+PC9zcGFuPlxuXG4tLS1cbkJvbnVzOiBJZiBpbnRlcmVzdGVkIHRvIGxlYXJuIG1vcmUgYWJvdXQgc2VydmVybGVzcyBtYWtlIHN1cmUgdG8gY2hlY2tvdXQgdGhlIGZyZWUgc2VsZiBndWlkZWQgY291cnNlcyBvbiBbTWljcm9zb2Z0IExlYXJuIFNlcnZlcmxlc3MgUGF0aF0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vbGVhcm4vYnJvd3NlLz9yb2xlcz1kZXZlbG9wZXImcHJvZHVjdHM9YXp1cmUtZnVuY3Rpb25zJldULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4pXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzBmZTU3Y2MtNDFhYS00OGI0LTkwMWItY2UwZGY1MWMxMzE0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UWXlNakExTURBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZVhhbWFyaW5HcmFwaFFMIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImFkYTA2ZTY4MDI0NDY0N2ZmYTIxYTYwOTBhNTRmMzI0NTBjN2RhM2UiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBTaW1wbGVYYW1hcmluR3JhcGhRTFxuQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCBidWlsdCBpbiBYYW1hcmluLkZvcm1zIGRlbW9uc3RyYXRpbmcgaG93IHRvIGludGVyYWN0IHdpdGggR2l0SHViJ3MgR3JhcGhRTCBBUEkgZnJvbSBhIFtYYW1hcmluLkZvcm1zXShodHRwczovL3Zpc3VhbHN0dWRpby5taWNyb3NvZnQuY29tL3hhbWFyaW4/V1QubWNfaWQ9c2ltcGxleGFtYXJpbmdyYXBocWwtZ2l0aHViLWJyYW1pbikgYXBwIHVzaW5nIFtHcmFwaFFMLkNsaWVudF0oaHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL0dyYXBoUUwuQ2xpZW50LykuXG5cbiMjIFhhbWFyaW4gKyBHcmFwaFFMIFJlY29yZGluZ1xuXG5UaGlzIGFwcCB3YXMgY3JlYXRlZCB0byBhY2NvbXBhbnkgbXkgdGFsayBvbiBYYW1hcmluICsgR3JhcGhRTC5cblxuVGhlIHNlc3Npb24gd2FzIGRlbGl2ZXJlZCBhdCBbWGFtYXJpbiBEZXZlbG9wZXIgU3VtbWl0IDIwMTldKGh0dHBzOi8vd3d3LmNvZGV0cmF2ZWxlci5pby94YW1kZXZzdW1taXQtZ3JhcGhxbC8pIGFuZCBpdHMgcmVjb3JkaW5nIGlzIGF2YWlsYWJsZSBvbiBZb3VUdWJlOiBodHRwczovL3lvdXR1LmJlL3QxY1FzZW5BbU5vP3Q9MTg1NzVcblxuWyFbWGFtYXJpbiArIEdyYXBoUUwgVmlkZW9dKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzYxMjU2NjY4LTZhOGYxNzgwLWE3MjItMTFlOS05N2FkLTgxODhlYzZlYWI4Zi5wbmcpXShodHRwczovL3lvdXR1LmJlL3QxY1FzZW5BbU5vP3Q9MTg1NzUpXG5cbiMjIERlbW9cblxuIVtBcHAgRGVtb10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjExMjM5OTUtNjk4MDkwODAtYTQ2Yi0xMWU5LTkyYzQtYzVjMDE3NGY0ZTFhLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0ZTM5MzcyOS1kNGYzLTRhYzMtYmM4NC01OTY3ZWI4N2VlZmQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EY3lNRFF3T0RFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNhbmNlbFRleHRUb1NwZWVjaFNhbXBsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkMTZiOTY0NGUyZWIyMDNiOTdiYmE1Y2Q5MzFjNjgwOTc3MmU3M2Q0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBDYW5jZWxUZXh0VG9TcGVlY2hTYW1wbGVcblxuQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCBkZW1vbnN0cmF0aW5nIGhvdyB0byB1c2UgYSBgQ2FuY2VsbGF0aW9uVG9rZW5gIHRvIGNhbmNlbCBgWGFtYXJpbi5Fc3NlbnRpYWxzLlRleHRUb1NwZWVjaC5TcGVha0FzeW5jYFxuXG5BIHZpZGVvIG9mIHRoZSBzYW1wbGUgaXMgYXZhaWxhYmxlIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svQ2FuY2VsVGV4dFRvU3BlZWNoU2FtcGxlL2Jsb2IvbWFzdGVyL0NhbmNlbFRleHRUb1NwZWVjaFNhbXBsZS5tb3ZcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0ODU2MTZhNC02Y2YzLTQ1MTctYWNmNi1iNWMyYjRmYWQ1YWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qZzVOekl3TmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaWduaXRlLXRoZS10b3VyLWZ1bjMwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5MzQ2MjFkOWYzNjMwMWFmOGI0M2RiZGNmZDJkMTlmNjgxMTFhZGMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGlnbml0ZS10aGUtdG91ci1mdW4zMFxuXG5Db2RlIGZvciBJZ25pdGUgVGhlIFRvdXIgc2Vzc2lvblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjA0MDAwYjFkLTJiM2ItNDMzNy1hYWQ0LTE0MGUyZjgxMDkzMyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EUTFOalk1T0RjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogInhhbWFyaW4tMTAxIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRkMDVkYTIyYjg3NmFhYjVkMzYwZGY1ZWI2YjgxZmUxMzhlODkxYjgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHhhbWFyaW4tMTAxXG5cbkRlbW9zIGZvciBYYW1hcmluIDEwMSBzZXJpZXNcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhODQ5MDYwMy05OGNhLTRlOGUtODQ3ZC1iZmY2YmU2Njc3ZDEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXlPVGM0TkRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzFlMjMwMmRkM2M5YmNmMWY2MTI2N2VjMTYxMzQ3YTQ0NGQ4YmY4NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgR3JhcGhRTCBBUElcblxuVGhpcyBpcyBhIEdyYXBoUUwgZW5kcG9pbnQgY2FsbGluZyB0d28gZXhpc3RpbmcgUkVTVCBhcGkgZW5kcG9pbnRzXG5cbllvdSBjYW4gZXhwbG9yZSB0aGUgZW5kcG9pbnQgd2UnbGwgYnVpbGQgYXQgW2h0dHBzOi8vZ3JhcGhxbHBsYXlncm91bmQuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2dyYXBoaXFsXShodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaGlxbClcblxuIyMgU3RlcHNcblxuSWYgeW91IGhhdmVuJ3QgYWxyZWFkeSwgbWFrZSBzdXJlIHRvIGNsb25lIHRoaXMgcmVwb3NpdG9yeS5cblxuMS4g4pqg77iPIE5hdmlnYXRlIHRvIHRoZSBwcm9qZWN0J3MgZm9sZGVyIGFuZCBvcGVuIGl0IGluIGEgKm5ldyBpbnN0YW5jZSogb2YgVlMgQ29kZVxuXG4xLiBJbnN0YWxsIGRlcGVuZGVuY2llc1xuXG5gYGBcbm5wbSBpbnN0YWxsXG5gYGBcblxuMS4gR28gdG8gKkRlYnVnKiBwYW5lbCBpbiBWUyBDb2RlIGFuZCBjbGljayBydW5cblxuMS4gVXNpbmcgW1Bvc3RtYW5dKGh0dHBzOi8vd3d3LmdldHBvc3RtYW4uY29tLykgKG9yIGFueSBSZXN0IGNsaWVudCkgbWFrZSBhIFBPU1QgcmVxdWVzdCB0byB5b3VyIEdyYXBoUUwgZW5kcG9pbnQgcnVubmluZyBpbiB5b3VyIGxvY2FsIFtodHRwOi8vbG9jYWxob3N0OjcwNzEvYXBpL2dyYXBocWxdKGh0dHA6Ly9sb2NhbGhvc3Q6NzA3MS9hcGkvZ3JhcGhxbCkgd2l0aCB0aGlzIGJvZHkgb2YgdHlwZSAqYXBwbGljYXRpb24vanNvbio6XG5cbmBgYGpzb25cbnsgXCJxdWVyeVwiOiBcInt0ZWFtc3tpZCBuYW1lIHBvaW50c319XCJ9XG5gYGBcblxuMS4gVG8gZGVwbG95IHlvdXIgZnVuY3Rpb24gdXNpbmcgVlMgQ29kZSBnbyB0byB0aGUgQXp1cmUgRnVuY3Rpb25zIGV4dGVuc2lvbi4gQ2xpY2sgdGhlIGJsdWUgYXJyb3cgYnV0dG9uIGFuZCBmb2xsb3cgcHJvbXB0IGluc3RydWN0aW9ucyB0byBlaXRoZXIgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9yIGRlcGxveSB0byBhbiBleGlzdGluZyBvbmVcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzODY1M2Y4Ny1iNGE4LTQxM2QtYjc5NS1hN2U4ZjYxYzVlZDYiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQXlNREUzTXpnPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJub2RlYmluYXIiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImYwNjcxMDIwOGM3YTViYTY5N2ZmZjNmYWYwNjBmOTdiZTNlOGJlODkiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIG5vZGViaW5hciAgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby5ub2RlYmluYXI/V1QubWNfaWQ9bm9kZWJpbmFyLWdpdGh1Yi1zaWNvdGluKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3NpY290aW4vc2ljb3Rpbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0xMCZXVC5tY19pZD1ub2RlYmluYXItZ2l0aHViLXNpY290aW4pIFxuXG5JZiB5b3Ugd2FudCB0byBsZWFybiBtb3JlIGFib3V0IGdldHRpbmcgc3RhcnRlZCB3aXRoIHNlcnZlcmxlc3MgdXNpbmcgVlMgQ29kZSBhbmQgd2F0Y2ggYSBkZW1vIG9mIEF6dXJlIEFQSSBNYW5hZ2VtZW50IHlvdSBjYW4gcmVnaXN0ZXIgW2hlcmVdKGh0dHBzOi8vaW5mby5taWNyb3NvZnQuY29tL2RlbWFuZC1idWlsZC1zZXJ2ZXJsZXNzLWFwaS13aXRoLW5vZGVqcy5odG1sP1dULm1jX2lkPW5vZGViaW5hci1naXRodWItc2ljb3RpbikgYW5kIHlvdSdsbCBnZXQgYSByZWNvcmRlZCB2ZXJzaW9uIG9mIHRoZSB3ZWJpbmFyLiAgXG5cbiMjIERlcGxveSByZXNvdXJjZXNcblxuWyFbRGVwbG95IHRvIEF6dXJlXShodHRwczovL2F6dXJlZGVwbG95Lm5ldC9kZXBsb3lidXR0b24ucG5nKV0oaHR0cHM6Ly9wb3J0YWwuYXp1cmUuY29tLz9XVC5tY19pZD1ub2RlYmluYXItZ2l0aHViLXNpY290aW4jY3JlYXRlL01pY3Jvc29mdC5UZW1wbGF0ZS91cmkvaHR0cHMlM0ElMkYlMkZyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tJTJGc2ltb25hY28lMkZub2RlYmluYXIlMkZtYXN0ZXIlMkZhenVyZWRlcGxveS5qc29uKVxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEEgcmVjZW50IHZlcnNpb24gb2YgTm9kZSAoOCspXG5cbjEuIFZTIENvZGU6IFtoZXJlXShodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb3dubG9hZC8/V1QubWNfaWQ9d2ViaW5hci1naXRodWItc2ljb3RpbikgIFxuXG4xLiBBenVyZSBGdW5jdGlvbnMgQ0xJOiBbaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2Z1bmN0aW9ucy1ydW4tbG9jYWw/V1QubWNfaWQ9d2ViaW5hci1naXRodWItc2ljb3RpbikgIFxuXG4xLiBBenVyZSBGdW5jdGlvbnMgRXh0ZW5zaW9uIGZvciBWUyBDb2RlOiBbaGVyZV0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zLz9XVC5tY19pZD13ZWJpbmFyLWdpdGh1Yi1zaWNvdGluJml0ZW1OYW1lPW1zLWF6dXJldG9vbHMudnNjb2RlLWF6dXJlZnVuY3Rpb25zKSAgXG5cbjEuIEF6dXJlIGFjY291bnQ6IFtodHRwczovL2FrYS5tcy9mcmVlXShodHRwczovL2FrYS5tcy9mcmVlKVxuXG4jIyBSdW4gbG9jYWxseVxuXG4xLiBJbnN0YWxsIGFsbCBkZXBlbmRlbmNpZXMgYnkgcnVubmluZyBgbnBtIGlgXG5cbjEuIEluIFtWUyBDb2RlXShodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb3dubG9hZC8/V1QubWNfaWQ9d2ViaW5hci1naXRodWItc2ljb3RpbiksIGdvIHRvIHRoZSBbQXp1cmUgRnVuY3Rpb25zXShodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXMvP1dULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4maXRlbU5hbWU9bXMtYXp1cmV0b29scy52c2NvZGUtYXp1cmVmdW5jdGlvbnMpIGV4dGVuc2lvbiBhbmQgY2xpY2sgb24gYENyZWF0ZSBOZXcgUHJvamVjdC4uLmAgaWNvbi4gVGhpcyB3aWxsIGNyZWF0ZSBhIGxvY2FsLnNldHRpbmdzLmpzb24gZmlsZSBmb3IgdXMgYW5kIGNvbmZpZ3VyZSBsb2NhbCBkZWJ1Z2dpbmcuICBcblxuMS4gSW4gYGxvY2FsLnNldHRpbmdzLmpzb25gLCBzZXR1cCB5b3VyIGVudmlyb25tZW50IHZhcmlhYmxlcyBmb3IgY29ubmVjdGluZyB0byB5b3VyIGRhdGFiYXNlOiBcblxuYGBganNvblxue1xuICBcIklzRW5jcnlwdGVkXCI6IGZhbHNlLFxuICBcIlZhbHVlc1wiOiB7XG4gICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCI6IFwiXCIsXG4gICAgXCJGVU5DVElPTlNfV09SS0VSX1JVTlRJTUVcIjogXCJub2RlXCIsXG4gICAgXCJ1c2VyXCI6IFwieW91ci1kYi11c2VyXCIsXG4gICAgXCJwYXNzd29yZFwiOiBcInlvdXItZGItcGFzc3dvcmRcIixcbiAgICBcInBvcnRcIjogXCJ5b3VyLWRiLXBvcnRcIlxuICB9XG59XG5gYGBcblxuMS4gSW4gVlMgQ29kZSwgZ28gdG8gdGhlIERlYnVnZ2luZyBwYW5lbCBhbmQgcnVuIGFwcGxpY2F0aW9uIGJ5IGNsaWtpbmcgb24gdGhlIGBTdGFydCBkZWJ1Z2dpbmdgIGljb24gKHNtYWxsIHBsYXkgYnV0dG9uIG9uIHRoZSBsZWZ0IGhhbmQgc2lkZSBvZiB0aGUgdG9wIGJhcilcblxuLS0tXG5cbjxzcGFuIGNsYXNzPVwiZW1vamktb3V0ZXIgZW1vamktc2l6ZXJcIj48c3BhbiBjbGFzcz1cImVtb2ppLWlubmVyXCIgc3R5bGU9XCJiYWNrZ3JvdW5kOiB1cmwoY2hyb21lLWV4dGVuc2lvbjovL2ltbWhwbmNsb21kbG9pa2twY2VmbmNtZmdqYmtvam1oL2Vtb2ppLWRhdGEvc2hlZXRfYXBwbGVfMzIucG5nKTtiYWNrZ3JvdW5kLXBvc2l0aW9uOjE2LjAzOTk1Mjk5NjQ3NDczNSUgNzEuOTc0MTQ4MDYxMTA0NTklO2JhY2tncm91bmQtc2l6ZTo1NDE4Ljc1JSA1NDE4Ljc1JVwiIGRhdGEtY29kZXBvaW50cz1cIjFmMzg5XCI+PC9zcGFuPjwvc3Bhbj4gQ29uZ3JhdHMhISBZb3UgbWFkZSBpdCAtIGJ1aWx0IHlvdXIgdmVyeSBmaXJzdCBlbmRwb2ludCBvbiBTZXJ2ZXJsZXNzISA8c3BhbiBjbGFzcz1cImVtb2ppLW91dGVyIGVtb2ppLXNpemVyXCI+PHNwYW4gY2xhc3M9XCJlbW9qaS1pbm5lclwiIHN0eWxlPVwiYmFja2dyb3VuZDogdXJsKGNocm9tZS1leHRlbnNpb246Ly9pbW1ocG5jbG9tZGxvaWtrcGNlZm5jbWZnamJrb2ptaC9lbW9qaS1kYXRhL3NoZWV0X2FwcGxlXzMyLnBuZyk7YmFja2dyb3VuZC1wb3NpdGlvbjoxNi4wMzk5NTI5OTY0NzQ3MzUlIDcxLjk3NDE0ODA2MTEwNDU5JTtiYWNrZ3JvdW5kLXNpemU6NTQxOC43NSUgNTQxOC43NSVcIiBkYXRhLWNvZGVwb2ludHM9XCIxZjM4OVwiPjwvc3Bhbj48L3NwYW4+XG5cbi0tLVxuQm9udXM6IElmIGludGVyZXN0ZWQgdG8gbGVhcm4gbW9yZSBhYm91dCBzZXJ2ZXJsZXNzIG1ha2Ugc3VyZSB0byBjaGVja291dCB0aGUgZnJlZSBzZWxmIGd1aWRlZCBjb3Vyc2VzIG9uIFtNaWNyb3NvZnQgTGVhcm4gU2VydmVybGVzcyBQYXRoXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9sZWFybi9icm93c2UvP3JvbGVzPWRldmVsb3BlciZwcm9kdWN0cz1henVyZS1mdW5jdGlvbnMmV1QubWNfaWQ9d2ViaW5hci1naXRodWItc2ljb3RpbilcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5MmIyMzhlNC03YjY0LTRjZmEtYTQ4ZS1lMjQ0ZmNmMWI4NDQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EZ3hOemN4T1RFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkpzb25QYXJzZVRleHRSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5MTFiNzk2YjI0MDMzNDZkZjY3N2I0N2ZiZDBhNDk4NTQ0OTk1NGQ0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBKc29uIFBhcnNlIFRleHQgUmVwcm9cblxuQSByZXByb2R1Y3Rpb24gc2FtcGxlIGRlbW9uc3RyYXRpbmcgYSByZWdyZXNzaW9uIGluIFZpc3VhbCBTdHVkaW8gZm9yIE1hYyB2OC4zIFByZXZpZXcgNC5cblxuSXNzdWUgcmVwb3J0ZWQgdG8gdGhlIFhhbWFyaW4uQW5kcm9pZCB0ZWFtOiBodHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi94YW1hcmluLWFuZHJvaWQvaXNzdWVzLzM2MjZcblxufCBWUyBmb3IgTWFjIHY4LjIuNiAoYnVpbGQgMjgpIHwgVlMgZm9yIE1hYyB2OC4zIChidWlsZCAxNjMwKXxcbnwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58ICFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy82NDgzNjE2MS1iODRhYzM4MC1kNTlkLTExZTktOTBlZS00NThhYjVlMmE0ZmUucG5nKSB8ICFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy82NDgzNTMzMi03ZjVkMWY4MC1kNTlhLTExZTktOThjMy0yOThlYmMxZDg5YWEucG5nKSB8IFxuXG4jIyBSZXByb2R1Y3Rpb24gU3RlcHNcblxuMS4gSW5zdGFsbCB0aGUgVlMgZm9yIE1hYyBQcmV2aWV3IEJ1aWxkIGF2YWlsYWJsZSBvbiAxMyBTZXB0ZW1iZXIgMDMwMCBVVEMgKFtFbnZpcm9ubWVudF0oI2Vudmlyb25tZW50KSBpbmZvcm1hdGlvbiwgYmVsb3cpXG4yLiBJbiBWaXN1YWwgU3R1ZGlvIGZvciBNYWMsIE9wZW4gSnNvblBhcnNlVGV4dFJlcHJvLnNsblxuMy4gU2V0IHRoZSBCdWlsZCBDb25maWdyYXRpb24gdG8gREVCVUdcbjQuIEJ1aWxkL0RlcGxveSB0aGUgSnNvblBhcnNlVGV4dFJlcHJvLkFuZHJvaWQgcHJvamVjdCB0byBhbiBBbmRyb2lkIEVtdWxhdG9yIG9yIFBoeXNpY2FsIERldmljZVxuNS4gVmVyaWZ5IGRpc3BsYXkgc2hvd3MgdGhlIGZvbGxvd2luZyBFeGNlcHRpb246IGBOZXd0b25zb2Z0Lkpzb24uSnNvblJlYWRlckV4Y2VwdGlvbmBcblxuIyMgV29yayBBcm91bmRcblxuMS4gSW5zdGFsbCB0aGUgVlMgZm9yIE1hYyBTdGFibGUgQnVpbGQgYXZhaWxhYmxlIG9uIDEzIFNlcHRlbWJlciAwMzAwIFVUQywgVlMgZm9yIE1hYyB2OC4yLjYgKGJ1aWxkIDI4KVxuMi4gSW4gVmlzdWFsIFN0dWRpbyBmb3IgTWFjLCBPcGVuIEpzb25QYXJzZVRleHRSZXByby5zbG5cbjMuIFNldCB0aGUgQnVpbGQgQ29uZmlncmF0aW9uIHRvIERFQlVHXG40LiBCdWlsZC9EZXBsb3kgdGhlIEpzb25QYXJzZVRleHRSZXByby5BbmRyb2lkIHByb2plY3QgdG8gYW4gQW5kcm9pZCBFbXVsYXRvciBvciBQaHlzaWNhbCBEZXZpY2VcbjUuIFZlcmlmeSB0aGUgZGlzcGxheSBzaG93cyBgU3VjY2Vzc2BcblxuIyMgRW52aXJvbm1lbnRcblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE5IGZvciBNYWMgKFByZXZpZXcpID09PVxuXG5WZXJzaW9uIDguMyBQcmV2aWV3ICg4LjMgYnVpbGQgMTYzMClcbkluc3RhbGxhdGlvbiBVVUlEOiA2ZTUxNDJiNC1lOGJlLTRkMWMtYjc1ZS00NzQ0YjBkOGMzZGVcblx0R1RLKyAyLjI0LjIzIChSYWxlaWdoIHRoZW1lKVxuXHRYYW1hcmluLk1hYyA1LjE2LjEuMjQgKGQxNi0zIC8gMDg4MDlmNWIpXG5cblx0UGFja2FnZSB2ZXJzaW9uOiA2MDQwMDAxOTBcblxuPT09IE1vbm8gRnJhbWV3b3JrIE1ESyA9PT1cblxuUnVudGltZTpcblx0TW9ubyA2LjQuMC4xOTAgKDIwMTktMDYvNmI0Yjk5ZTU3MWIpICg2NC1iaXQpXG5cdFBhY2thZ2UgdmVyc2lvbjogNjA0MDAwMTkwXG5cbj09PSBOdUdldCA9PT1cblxuVmVyc2lvbjogNS4zLjAuNjE5MlxuXG49PT0gLk5FVCBDb3JlID09PVxuXG5SdW50aW1lOiAvdXNyL2xvY2FsL3NoYXJlL2RvdG5ldC9kb3RuZXRcblJ1bnRpbWUgVmVyc2lvbnM6XG5cdDMuMC4wLXByZXZpZXc5LTE5NDIzLTA5XG5cdDMuMC4wLXByZXZpZXc2LTI3ODA0LTAxXG5cdDIuMi41XG5cdDIuMS45XG5cdDIuMS4yXG5cdDIuMS4xXG5cdDIuMC41XG5cdDIuMC4wXG5cdDEuMS4xXG5cdDEuMC40XG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8zLjAuMTAwLXByZXZpZXc5LTAxNDAwNC9TZGtzXG5TREsgVmVyc2lvbnM6XG5cdDMuMC4xMDAtcHJldmlldzktMDE0MDA0XG5cdDMuMC4xMDAtcHJldmlldzYtMDEyMjY0XG5cdDIuMi4xMDdcblx0Mi4xLjUwNVxuXHQyLjEuMzAyXG5cdDIuMS4zMDFcblx0Mi4xLjRcblx0Mi4wLjBcblx0MS4wLjFcbk1TQnVpbGQgU0RLczogL0xpYnJhcnkvRnJhbWV3b3Jrcy9Nb25vLmZyYW1ld29yay9WZXJzaW9ucy82LjQuMC9saWIvbW9uby9tc2J1aWxkL0N1cnJlbnQvYmluL1Nka3NcblxuPT09IFhhbWFyaW4uUHJvZmlsZXIgPT09XG5cblZlcnNpb246IDEuNi4xMS4xNlxuTG9jYXRpb246IC9BcHBsaWNhdGlvbnMvWGFtYXJpbiBQcm9maWxlci5hcHAvQ29udGVudHMvTWFjT1MvWGFtYXJpbiBQcm9maWxlclxuXG49PT0gVXBkYXRlciA9PT1cblxuVmVyc2lvbjogMTFcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogMTAuMC4wLjQwIChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5Db21taXQ6IHhhbWFyaW4tYW5kcm9pZC9kMTYtMy8wODBlYWFjXG5BbmRyb2lkIFNESzogL1VzZXJzL2JyYW5kb25tL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vYW5kcm9pZC1zZGstbWFjb3N4XG5cdFN1cHBvcnRlZCBBbmRyb2lkIHZlcnNpb25zOlxuXHRcdE5vbmUgaW5zdGFsbGVkXG5cblNESyBUb29scyBWZXJzaW9uOiAyNi4xLjFcblNESyBQbGF0Zm9ybSBUb29scyBWZXJzaW9uOiAyOC4wLjJcblNESyBCdWlsZCBUb29scyBWZXJzaW9uOiAyOC4wLjNcblxuQnVpbGQgSW5mb3JtYXRpb246IFxuTW9ubzogbW9uby9tb25vLzIwMTktMDZANjQzNDE1M2Q4YjdcbkphdmEuSW50ZXJvcDogeGFtYXJpbi9qYXZhLmludGVyb3AvZDE2LTNANTgzNmY1OFxuTGliWmlwU2hhcnA6IGdyZW5kZWxsby9MaWJaaXBTaGFycC9kMTYtM0A3MWY0YTk0XG5MaWJaaXA6IG5paC1hdC9saWJ6aXAvcmVsLTEtNS0xQGI5NWNmM2ZcblByb0d1YXJkOiB4YW1hcmluL3Byb2d1YXJkL21hc3RlckA5MDU4MzZkXG5TUUxpdGU6IHhhbWFyaW4vc3FsaXRlLzMuMjcuMUA4MjEyYTJkXG5YYW1hcmluLkFuZHJvaWQgVG9vbHM6IHhhbWFyaW4veGFtYXJpbi1hbmRyb2lkLXRvb2xzL2QxNi0zQGNiNDEzMzNcblxuPT09IE1pY3Jvc29mdCBNb2JpbGUgT3BlbkpESyA9PT1cblxuSmF2YSBTREs6IC9Vc2Vycy9icmFuZG9ubS9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2pkay9taWNyb3NvZnRfZGlzdF9vcGVuamRrXzEuOC4wLjI1XG4xLjguMC0yNVxuQW5kcm9pZCBEZXNpZ25lciBFUEwgY29kZSBhdmFpbGFibGUgaGVyZTpcbmh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL0FuZHJvaWREZXNpZ25lci5FUExcblxuPT09IEFuZHJvaWQgU0RLIE1hbmFnZXIgPT09XG5cblZlcnNpb246IDEuNC4wLjY0XG5IYXNoOiBmNzBjZmQyXG5CcmFuY2g6IHJlbW90ZXMvb3JpZ2luL2QxNi0zXG5CdWlsZCBkYXRlOiAyMDE5LTA5LTAyIDE3OjMyOjAwIFVUQ1xuXG49PT0gQW5kcm9pZCBEZXZpY2UgTWFuYWdlciA9PT1cblxuVmVyc2lvbjogMS4yLjAuMTEyXG5IYXNoOiA3OTFlNjhlXG5CcmFuY2g6IHJlbW90ZXMvb3JpZ2luL2QxNi0zXG5CdWlsZCBkYXRlOiAyMDE5LTA5LTAyIDE3OjMyOjI2IFVUQ1xuXG49PT0gWGFtYXJpbiBEZXNpZ25lciA9PT1cblxuVmVyc2lvbjogMTYuMy4wLjE3OFxuSGFzaDogNzI1Yzg3ZDU3XG5CcmFuY2g6IHJlbW90ZXMvb3JpZ2luL2QxNi0zXG5CdWlsZCBkYXRlOiAyMDE5LTA4LTI5IDIyOjU3OjUwIFVUQ1xuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSAxMS4wICgxNDkzNSlcbkJ1aWxkIDExQTQxOWNcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5WZXJzaW9uOiA1LjE2LjEuMjQgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDA4ODA5ZjViXG5CcmFuY2g6IGQxNi0zXG5CdWlsZCBkYXRlOiAyMDE5LTA5LTA2IDA4OjQyOjQxLTA0MDBcblxuPT09IFhhbWFyaW4uaU9TID09PVxuXG5WZXJzaW9uOiAxMi4xNi4xLjI0IChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5IYXNoOiAwODgwOWY1YlxuQnJhbmNoOiBkMTYtM1xuQnVpbGQgZGF0ZTogMjAxOS0wOS0wNiAwODo0Mjo0Mi0wNDAwXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS40LjNcbkhhc2g6IGRiMjc1MjVcbkJyYW5jaDogMS40LXJlbGVhc2VcbkJ1aWxkIGRhdGU6IE1vbiwgMDkgSnVsIDIwMTggMjE6MjA6MTggR01UXG5DbGllbnQgY29tcGF0aWJpbGl0eTogMVxuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDgwMzAwMTYzMFxuR2l0IHJldmlzaW9uOiA0NTYxNDM3ODlkOTQ4ODUwZWYyNTE4Yzc0MDFiY2QwNjM3ZDg4ZTk5XG5CdWlsZCBkYXRlOiAyMDE5LTA5LTExIDIxOjI0OjI0KzAwXG5CdWlsZCBicmFuY2g6IHJlbGVhc2UtOC4zLXByZXZpZXc0XG5YYW1hcmluIGV4dGVuc2lvbnM6IDUyYzM5NTc1NWQxNmQxYzcwNzdkMzU2ODU3NGExOWFmOWEyM2I0MjNcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjE1LjBcbkRhcndpbiAxOS4wLjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE5LjAuMFxuICAgIFN1biBBdWcgMTggMjM6Mzc6MzEgUERUIDIwMTlcbiAgICByb290OnhudS02MTUzLjAuMTY2fjE3L1JFTEVBU0VfWDg2XzY0IHg4Nl82NFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOTU1NTNjOGYtZWU0Ni00MGQ5LTlkZjItOWQ4ZjNiNTZmNmFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1URXhORFl3TVRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlPU0xhcmdlVGl0bGVSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MDk2MTE4MzZkMTAwZTRiNzk0MzYzNjA5YTJjZjIxNDVkODZkY2FkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBpT1NMYXJnZVRpdGxlUmVwcm9cbiBBIHJlcHJvZHVjdGlvbiBkZW1vbnN0cmF0aW5nIHRoZSBpbmNvcnJlY3QgQmFyQmFja2dyb3VuZENvbG9yIHdoZW4gdXNpbmcgYE9uPGlPUz4oKS5TZXRQcmVmZXJzTGFyZ2VUaXRsZXModHJ1ZSlgXG4gXG4gIVtTYW1wbGUgR0lGXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy82NTcxMTIwNi00NDllYzEwMC1lMDQ5LTExZTktOWVhOC03ZWVjZWRmZjdkNjIuZ2lmKVxuIFxuIyMgRW52aXJvbm1lbnQgXG5cblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE5IGZvciBNYWMgPT09XG5cblZlcnNpb24gOC4zIChidWlsZCAxODA1KVxuSW5zdGFsbGF0aW9uIFVVSUQ6IDNhNDRiYjdlLWYxNjItNDQ3Mi04MjVhLWM4ZjhkMWQ2ZmQzMFxuXHRHVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG5cdFhhbWFyaW4uTWFjIDUuMTYuMS4yNCAoZDE2LTMgLyAwODgwOWY1YilcblxuXHRQYWNrYWdlIHZlcnNpb246IDYwNDAwMDE5OFxuXG49PT0gTW9ubyBGcmFtZXdvcmsgTURLID09PVxuXG5SdW50aW1lOlxuXHRNb25vIDYuNC4wLjE5OCAoMjAxOS0wNi9mZTY0YTQ3NjVlNikgKDY0LWJpdClcblx0UGFja2FnZSB2ZXJzaW9uOiA2MDQwMDAxOThcblxuPT09IFhhbWFyaW4gRGVzaWduZXIgPT09XG5cblZlcnNpb246IDE2LjMuMC4yMzBcbkhhc2g6IGJiZTUxODY3MFxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtMy14Y29kZTExXG5CdWlsZCBkYXRlOiAyMDE5LTA5LTE3IDE4OjM5OjMwIFVUQ1xuXG49PT0gTnVHZXQgPT09XG5cblZlcnNpb246IDUuMy4wLjYxOTJcblxuPT09IC5ORVQgQ29yZSBTREsgPT09XG5cblNESzogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvc2RrLzMuMC4xMDAvU2Rrc1xuU0RLIFZlcnNpb25zOlxuXHQzLjAuMTAwXG5cdDMuMC4xMDAtcmMxLTAxNDE5MFxuXHQzLjAuMTAwLXByZXZpZXc5LTAxNDAwNFxuXHQzLjAuMTAwLXByZXZpZXc4LTAxMzY1NlxuXHQzLjAuMTAwLXByZXZpZXc3LTAxMjgyMVxuXHQzLjAuMTAwLXByZXZpZXc2LTAxMjI2NFxuXHQyLjIuNDAyXG5cdDIuMS43MDFcblx0Mi4xLjcwMFxuXHQxLjEuMTRcbk1TQnVpbGQgU0RLczogL0xpYnJhcnkvRnJhbWV3b3Jrcy9Nb25vLmZyYW1ld29yay9WZXJzaW9ucy82LjQuMC9saWIvbW9uby9tc2J1aWxkL0N1cnJlbnQvYmluL1Nka3NcblxuPT09IC5ORVQgQ29yZSBSdW50aW1lID09PVxuXG5SdW50aW1lOiAvdXNyL2xvY2FsL3NoYXJlL2RvdG5ldC9kb3RuZXRcblJ1bnRpbWUgVmVyc2lvbnM6XG5cdDMuMC4wXG5cdDMuMC4wLXJjMS0xOTQ1Ni0yMFxuXHQzLjAuMC1wcmV2aWV3OS0xOTQyMy0wOVxuXHQzLjAuMC1wcmV2aWV3Ny0yNzkxMi0xNFxuXHQzLjAuMC1wcmV2aWV3Ni0yNzgwNC0wMVxuXHQyLjIuN1xuXHQyLjEuMTNcblx0Mi4xLjEyXG5cdDIuMS4xMVxuXHQxLjEuMTNcblx0MS4wLjE2XG5cbj09PSBYYW1hcmluLlByb2ZpbGVyID09PVxuXG5WZXJzaW9uOiAxLjYuMTEuMTZcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IFVwZGF0ZXIgPT09XG5cblZlcnNpb246IDExXG5cbj09PSBBcHBsZSBEZXZlbG9wZXIgVG9vbHMgPT09XG5cblhjb2RlIDExLjAgKDE0OTM2KVxuQnVpbGQgMTFBNDIwYVxuXG49PT0gWGFtYXJpbi5NYWMgPT09XG5cblhhbWFyaW4uTWFjIG5vdCBpbnN0YWxsZWQuIENhbid0IGZpbmQgL0xpYnJhcnkvRnJhbWV3b3Jrcy9YYW1hcmluLk1hYy5mcmFtZXdvcmsvVmVyc2lvbnMvQ3VycmVudC9WZXJzaW9uLlxuXG49PT0gWGFtYXJpbi5pT1MgPT09XG5cblZlcnNpb246IDEzLjIuMC40MiAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogNWU4YTIwOGJcbkJyYW5jaDogZDE2LTNcbkJ1aWxkIGRhdGU6IDIwMTktMDktMTcgMTQ6MTk6MzAtMDQwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiAxMC4wLjAuNDMgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkNvbW1pdDogeGFtYXJpbi1hbmRyb2lkL2QxNi0zLzhhZjFjYThcbkFuZHJvaWQgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vYW5kcm9pZC1zZGstbWFjb3N4XG5cdFN1cHBvcnRlZCBBbmRyb2lkIHZlcnNpb25zOlxuXHRcdE5vbmUgaW5zdGFsbGVkXG5cblNESyBUb29scyBWZXJzaW9uOiAyNi4xLjFcblNESyBQbGF0Zm9ybSBUb29scyBWZXJzaW9uOiAyOS4wLjNcblNESyBCdWlsZCBUb29scyBWZXJzaW9uOiAyOC4wLjNcblxuQnVpbGQgSW5mb3JtYXRpb246IFxuTW9ubzogbW9uby9tb25vLzIwMTktMDZAN2FmNjRkMWViZTlcbkphdmEuSW50ZXJvcDogeGFtYXJpbi9qYXZhLmludGVyb3AvZDE2LTNANTgzNmY1OFxuTGliWmlwU2hhcnA6IGdyZW5kZWxsby9MaWJaaXBTaGFycC9kMTYtM0A3MWY0YTk0XG5MaWJaaXA6IG5paC1hdC9saWJ6aXAvcmVsLTEtNS0xQGI5NWNmM2ZcblByb0d1YXJkOiB4YW1hcmluL3Byb2d1YXJkL21hc3RlckA5MDU4MzZkXG5TUUxpdGU6IHhhbWFyaW4vc3FsaXRlLzMuMjcuMUA4MjEyYTJkXG5YYW1hcmluLkFuZHJvaWQgVG9vbHM6IHhhbWFyaW4veGFtYXJpbi1hbmRyb2lkLXRvb2xzL2QxNi0zQGNiNDEzMzNcblxuPT09IE1pY3Jvc29mdCBNb2JpbGUgT3BlbkpESyA9PT1cblxuSmF2YSBTREs6IC9Vc2Vycy9icmFtaW4vTGlicmFyeS9EZXZlbG9wZXIvWGFtYXJpbi9qZGsvbWljcm9zb2Z0X2Rpc3Rfb3Blbmpka18xLjguMC4yNVxuMS44LjAtMjVcbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBBbmRyb2lkIFNESyBNYW5hZ2VyID09PVxuXG5WZXJzaW9uOiAxLjQuMC42NVxuSGFzaDogYzMzYjEwN1xuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtM1xuQnVpbGQgZGF0ZTogMjAxOS0wOS0xOSAyMDo0Mjo0NCBVVENcblxuPT09IEFuZHJvaWQgRGV2aWNlIE1hbmFnZXIgPT09XG5cblZlcnNpb246IDEuMi4wLjExNVxuSGFzaDogNzI0ZWE2OVxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtM1xuQnVpbGQgZGF0ZTogMjAxOS0wOS0xOSAyMDo0MzowNiBVVENcblxuPT09IFhhbWFyaW4gSW5zcGVjdG9yID09PVxuXG5WZXJzaW9uOiAxLjQuM1xuSGFzaDogZGIyNzUyNVxuQnJhbmNoOiAxLjQtcmVsZWFzZVxuQnVpbGQgZGF0ZTogTW9uLCAwOSBKdWwgMjAxOCAyMToyMDoxOCBHTVRcbkNsaWVudCBjb21wYXRpYmlsaXR5OiAxXG5cbj09PSBCdWlsZCBJbmZvcm1hdGlvbiA9PT1cblxuUmVsZWFzZSBJRDogODAzMDAxODA1XG5HaXQgcmV2aXNpb246IGRmNTA1MTFjY2IwOGQ0ZDg0YTUzOTM5ZjFkN2ZjMGI0MGNiYjBlZTFcbkJ1aWxkIGRhdGU6IDIwMTktMDktMjAgMTY6MTA6NTUrMDBcbkJ1aWxkIGJyYW5jaDogcmVsZWFzZS04LjNcblhhbWFyaW4gZXh0ZW5zaW9uczogZGE4ZDQ0OGNkNjVmMmNjODdjNWU2ZGM3ZTJjMmNhN2I5NmQyMGM3MlxuXG49PT0gT3BlcmF0aW5nIFN5c3RlbSA9PT1cblxuTWFjIE9TIFggMTAuMTQuNlxuRGFyd2luIDE4LjcuMCBEYXJ3aW4gS2VybmVsIFZlcnNpb24gMTguNy4wXG4gICAgVHVlIEF1ZyAyMCAxNjo1NzoxNCBQRFQgMjAxOVxuICAgIHJvb3Q6eG51LTQ5MDMuMjcxLjJ+Mi9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjBjNGI1NzQ0LWZiOGQtNGMyYS1iNjEwLTE1NGYzZWI0MTE3NiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXpNRGcwTVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTY1MjYwNTAwODkyODhhNWEwNTgxODAxNzQzNjc4YWJmOWVmYzNkNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIlRoaXMgcHJvamVjdCB3YXMgYm9vdHN0cmFwcGVkIHdpdGggW0NyZWF0ZSBSZWFjdCBBcHBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9jcmVhdGUtcmVhY3QtYXBwKS5cblxuIyMgQXZhaWxhYmxlIFNjcmlwdHNcblxuSW4gdGhlIHByb2plY3QgZGlyZWN0b3J5LCB5b3UgY2FuIHJ1bjpcblxuIyMjIGBucG0gc3RhcnRgXG5cblJ1bnMgdGhlIGFwcCBpbiB0aGUgZGV2ZWxvcG1lbnQgbW9kZS48YnI+XG5PcGVuIFtodHRwOi8vbG9jYWxob3N0OjMwMDBdKGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCkgdG8gdmlldyBpdCBpbiB0aGUgYnJvd3Nlci5cblxuVGhlIHBhZ2Ugd2lsbCByZWxvYWQgaWYgeW91IG1ha2UgZWRpdHMuPGJyPlxuWW91IHdpbGwgYWxzbyBzZWUgYW55IGxpbnQgZXJyb3JzIGluIHRoZSBjb25zb2xlLlxuXG4jIyMgYG5wbSB0ZXN0YFxuXG5MYXVuY2hlcyB0aGUgdGVzdCBydW5uZXIgaW4gdGhlIGludGVyYWN0aXZlIHdhdGNoIG1vZGUuPGJyPlxuU2VlIHRoZSBzZWN0aW9uIGFib3V0IFtydW5uaW5nIHRlc3RzXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvcnVubmluZy10ZXN0cykgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiMjIyBgbnBtIHJ1biBidWlsZGBcblxuQnVpbGRzIHRoZSBhcHAgZm9yIHByb2R1Y3Rpb24gdG8gdGhlIGBidWlsZGAgZm9sZGVyLjxicj5cbkl0IGNvcnJlY3RseSBidW5kbGVzIFJlYWN0IGluIHByb2R1Y3Rpb24gbW9kZSBhbmQgb3B0aW1pemVzIHRoZSBidWlsZCBmb3IgdGhlIGJlc3QgcGVyZm9ybWFuY2UuXG5cblRoZSBidWlsZCBpcyBtaW5pZmllZCBhbmQgdGhlIGZpbGVuYW1lcyBpbmNsdWRlIHRoZSBoYXNoZXMuPGJyPlxuWW91ciBhcHAgaXMgcmVhZHkgdG8gYmUgZGVwbG95ZWQhXG5cblNlZSB0aGUgc2VjdGlvbiBhYm91dCBbZGVwbG95bWVudF0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vY3JlYXRlLXJlYWN0LWFwcC9kb2NzL2RlcGxveW1lbnQpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG4jIyMgYG5wbSBydW4gZWplY3RgXG5cbioqTm90ZTogdGhpcyBpcyBhIG9uZS13YXkgb3BlcmF0aW9uLiBPbmNlIHlvdSBgZWplY3RgLCB5b3UgY2Fu4oCZdCBnbyBiYWNrISoqXG5cbklmIHlvdSBhcmVu4oCZdCBzYXRpc2ZpZWQgd2l0aCB0aGUgYnVpbGQgdG9vbCBhbmQgY29uZmlndXJhdGlvbiBjaG9pY2VzLCB5b3UgY2FuIGBlamVjdGAgYXQgYW55IHRpbWUuIFRoaXMgY29tbWFuZCB3aWxsIHJlbW92ZSB0aGUgc2luZ2xlIGJ1aWxkIGRlcGVuZGVuY3kgZnJvbSB5b3VyIHByb2plY3QuXG5cbkluc3RlYWQsIGl0IHdpbGwgY29weSBhbGwgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZXMgYW5kIHRoZSB0cmFuc2l0aXZlIGRlcGVuZGVuY2llcyAoV2VicGFjaywgQmFiZWwsIEVTTGludCwgZXRjKSByaWdodCBpbnRvIHlvdXIgcHJvamVjdCBzbyB5b3UgaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVtLiBBbGwgb2YgdGhlIGNvbW1hbmRzIGV4Y2VwdCBgZWplY3RgIHdpbGwgc3RpbGwgd29yaywgYnV0IHRoZXkgd2lsbCBwb2ludCB0byB0aGUgY29waWVkIHNjcmlwdHMgc28geW91IGNhbiB0d2VhayB0aGVtLiBBdCB0aGlzIHBvaW50IHlvdeKAmXJlIG9uIHlvdXIgb3duLlxuXG5Zb3UgZG9u4oCZdCBoYXZlIHRvIGV2ZXIgdXNlIGBlamVjdGAuIFRoZSBjdXJhdGVkIGZlYXR1cmUgc2V0IGlzIHN1aXRhYmxlIGZvciBzbWFsbCBhbmQgbWlkZGxlIGRlcGxveW1lbnRzLCBhbmQgeW91IHNob3VsZG7igJl0IGZlZWwgb2JsaWdhdGVkIHRvIHVzZSB0aGlzIGZlYXR1cmUuIEhvd2V2ZXIgd2UgdW5kZXJzdGFuZCB0aGF0IHRoaXMgdG9vbCB3b3VsZG7igJl0IGJlIHVzZWZ1bCBpZiB5b3UgY291bGRu4oCZdCBjdXN0b21pemUgaXQgd2hlbiB5b3UgYXJlIHJlYWR5IGZvciBpdC5cblxuIyMgTGVhcm4gTW9yZVxuXG5Zb3UgY2FuIGxlYXJuIG1vcmUgaW4gdGhlIFtDcmVhdGUgUmVhY3QgQXBwIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2NyZWF0ZS1yZWFjdC1hcHAvZG9jcy9nZXR0aW5nLXN0YXJ0ZWQpLlxuXG5UbyBsZWFybiBSZWFjdCwgY2hlY2sgb3V0IHRoZSBbUmVhY3QgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9yZWFjdGpzLm9yZy8pLlxuXG4jIyMgQ29kZSBTcGxpdHRpbmdcblxuVGhpcyBzZWN0aW9uIGhhcyBtb3ZlZCBoZXJlOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvY29kZS1zcGxpdHRpbmdcblxuIyMjIEFuYWx5emluZyB0aGUgQnVuZGxlIFNpemVcblxuVGhpcyBzZWN0aW9uIGhhcyBtb3ZlZCBoZXJlOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvYW5hbHl6aW5nLXRoZS1idW5kbGUtc2l6ZVxuXG4jIyMgTWFraW5nIGEgUHJvZ3Jlc3NpdmUgV2ViIEFwcFxuXG5UaGlzIHNlY3Rpb24gaGFzIG1vdmVkIGhlcmU6IGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2NyZWF0ZS1yZWFjdC1hcHAvZG9jcy9tYWtpbmctYS1wcm9ncmVzc2l2ZS13ZWItYXBwXG5cbiMjIyBBZHZhbmNlZCBDb25maWd1cmF0aW9uXG5cblRoaXMgc2VjdGlvbiBoYXMgbW92ZWQgaGVyZTogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vY3JlYXRlLXJlYWN0LWFwcC9kb2NzL2FkdmFuY2VkLWNvbmZpZ3VyYXRpb25cblxuIyMjIERlcGxveW1lbnRcblxuVGhpcyBzZWN0aW9uIGhhcyBtb3ZlZCBoZXJlOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvZGVwbG95bWVudFxuXG4jIyMgYG5wbSBydW4gYnVpbGRgIGZhaWxzIHRvIG1pbmlmeVxuXG5UaGlzIHNlY3Rpb24gaGFzIG1vdmVkIGhlcmU6IGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2NyZWF0ZS1yZWFjdC1hcHAvZG9jcy90cm91Ymxlc2hvb3RpbmcjbnBtLXJ1bi1idWlsZC1mYWlscy10by1taW5pZnlcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5ZGVhYjk1Ny05ODI5LTRmYWEtYjNjZi1hNmZiYjE0ZWQ2OWYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1URTBNREU1TkRVPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlPUzEzU2ltdWxhdG9yRW50cnlSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNzZlYWQyNzE5OTQxNWVhMGJjZGY0MGM2YjM0MmY2NmIxNGYwNGY2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBpT1MgMTMgU2ltdWxhdG9yIEVudHJ5IFJlcHJvXG5cblJlcHJvIHNhbXBsZSBkZW1vbnN0cmF0aW5nIGEgY3Jhc2ggd2hlbiBhbiBFZGl0b3Igb3IgRW50cnkgaXMgdGFwcGVkIG9uIGFuIGlQaG9uZSAxMSBTaW11bGF0b3IgcnVubmluZyBpT1MgMTMuMC5cblxuTm90ZTogVGhpcyBzYW1wbGUgcnVucyBmaW5lIG9uIGEgcGh5c2ljYWwgZGV2aWNlIHJ1bm5pbmcgaU9TIDEzLlxuXG4jIyBTdGFja3RyYWNjZVxuXG5gYGBcblN5c3RlbS5OdWxsUmVmZXJlbmNlRXhjZXB0aW9uOiBPYmplY3QgcmVmZXJlbmNlIG5vdCBzZXQgdG8gYW4gaW5zdGFuY2Ugb2YgYW4gb2JqZWN0XG4gIGF0IFhhbWFyaW4uRm9ybXMuUGxhdGZvcm0uaU9TLlBhZ2VSZW5kZXJlci5HZXRBY2Nlc3NpYmlsaXR5RWxlbWVudHMgKCkgWzB4MDAwOWNdIGluIGQ6XFxhXFwxXFxzXFxYYW1hcmluLkZvcm1zLlBsYXRmb3JtLmlPU1xcUmVuZGVyZXJzXFxQYWdlUmVuZGVyZXIuY3M6NzFcbiAgYXQgWGFtYXJpbi5Gb3Jtcy5QbGF0Zm9ybS5pT1MuUGFnZUNvbnRhaW5lci5nZXRfQWNjZXNzaWJpbGl0eUVsZW1lbnRzICgpIFsweDAwMDA4XSBpbiBkOlxcYVxcMVxcc1xcWGFtYXJpbi5Gb3Jtcy5QbGF0Zm9ybS5pT1NcXFJlbmRlcmVyc1xcUGFnZUNvbnRhaW5lci5jczozM1xuICBhdCBYYW1hcmluLkZvcm1zLlBsYXRmb3JtLmlPUy5QYWdlQ29udGFpbmVyLkFjY2Vzc2liaWxpdHlFbGVtZW50Q291bnQgKCkgWzB4MDAwMDBdIGluIGQ6XFxhXFwxXFxzXFxYYW1hcmluLkZvcm1zLlBsYXRmb3JtLmlPU1xcUmVuZGVyZXJzXFxQYWdlQ29udGFpbmVyLmNzOjY1XG4gIGF0IGF0ICh3cmFwcGVyIG1hbmFnZWQtdG8tbmF0aXZlKSBVSUtpdC5VSUFwcGxpY2F0aW9uLlVJQXBwbGljYXRpb25NYWluKGludCxzdHJpbmdbXSxpbnRwdHIsaW50cHRyKVxuICBhdCBVSUtpdC5VSUFwcGxpY2F0aW9uLk1haW4gKFN5c3RlbS5TdHJpbmdbXSBhcmdzLCBTeXN0ZW0uSW50UHRyIHByaW5jaXBhbCwgU3lzdGVtLkludFB0ciBkZWxlZ2F0ZSkgWzB4MDAwMDVdIGluIC9MaWJyYXJ5L0ZyYW1ld29ya3MvWGFtYXJpbi5pT1MuZnJhbWV3b3JrL1ZlcnNpb25zLzEzLjIuMC40Mi9zcmMvWGFtYXJpbi5pT1MvVUlLaXQvVUlBcHBsaWNhdGlvbi5jczo4NlxuICBhdCBVSUtpdC5VSUFwcGxpY2F0aW9uLk1haW4gKFN5c3RlbS5TdHJpbmdbXSBhcmdzLCBTeXN0ZW0uU3RyaW5nIHByaW5jaXBhbENsYXNzTmFtZSwgU3lzdGVtLlN0cmluZyBkZWxlZ2F0ZUNsYXNzTmFtZSkgWzB4MDAwMGVdIGluIC9MaWJyYXJ5L0ZyYW1ld29ya3MvWGFtYXJpbi5pT1MuZnJhbWV3b3JrL1ZlcnNpb25zLzEzLjIuMC40Mi9zcmMvWGFtYXJpbi5pT1MvVUlLaXQvVUlBcHBsaWNhdGlvbi5jczo2NVxuICBhdCBpT1MxM1NpbXVsYXRvckVudHJ5UmVwcm8uaU9TLkFwcGxpY2F0aW9uLk1haW4gKFN5c3RlbS5TdHJpbmdbXSBhcmdzKSBbMHgwMDAwMF0gaW4gL1VzZXJzL2JyYW1pbi9Qcm9qZWN0cy9pT1MxM1NpbXVsYXRvckVudHJ5UmVwcm8vaU9TMTNTaW11bGF0b3JFbnRyeVJlcHJvLmlPUy9NYWluLmNzOjdcbmBgYFxuXG4jIyBEZW1vXG5cbiFbRGVtbyBnaWZdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzY1ODAyODU4LWJiYWY4NDgwLWUxMzEtMTFlOS04MjliLTI0MDVjYmE5MmEyYi5naWYpXG5cbiMjIEVudmlyb25tZW50XG5cbj09PSBWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UgMjAxOSBmb3IgTWFjID09PVxuXG5WZXJzaW9uIDguMyAoYnVpbGQgMTgwNSlcbkluc3RhbGxhdGlvbiBVVUlEOiA3NjE3YjdkNC0xZjBhLTQ5MTAtOGEzOC1lMjhmOTFkMTA5OGVcblx0R1RLKyAyLjI0LjIzIChSYWxlaWdoIHRoZW1lKVxuXHRYYW1hcmluLk1hYyA1LjE2LjEuMjQgKGQxNi0zIC8gMDg4MDlmNWIpXG5cblx0UGFja2FnZSB2ZXJzaW9uOiA2MDQwMDAxOThcblxuPT09IE1vbm8gRnJhbWV3b3JrIE1ESyA9PT1cblxuUnVudGltZTpcblx0TW9ubyA2LjQuMC4xOTggKDIwMTktMDYvZmU2NGE0NzY1ZTYpICg2NC1iaXQpXG5cdFBhY2thZ2UgdmVyc2lvbjogNjA0MDAwMTk4XG5cbj09PSBYYW1hcmluIERlc2lnbmVyID09PVxuXG5WZXJzaW9uOiAxNi4zLjAuMjMwXG5IYXNoOiBiYmU1MTg2NzBcbkJyYW5jaDogcmVtb3Rlcy9vcmlnaW4vZDE2LTMteGNvZGUxMVxuQnVpbGQgZGF0ZTogMjAxOS0wOS0xNyAxODozOTozMCBVVENcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA1LjMuMC42MTkyXG5cbj09PSAuTkVUIENvcmUgU0RLID09PVxuXG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8zLjAuMTAwL1Nka3NcblNESyBWZXJzaW9uczpcblx0My4wLjEwMFxuXHQzLjAuMTAwLXJjMS0wMTQxOTBcblx0My4wLjEwMC1wcmV2aWV3OS0wMTQwMDRcblx0My4wLjEwMC1wcmV2aWV3OC0wMTM2NTZcblx0My4wLjEwMC1wcmV2aWV3Ny0wMTI4MjFcblx0My4wLjEwMC1wcmV2aWV3Ni0wMTIyNjRcblx0Mi4yLjQwMlxuXHQyLjEuNzAxXG5cdDIuMS43MDBcblx0MS4xLjE0XG5NU0J1aWxkIFNES3M6IC9MaWJyYXJ5L0ZyYW1ld29ya3MvTW9uby5mcmFtZXdvcmsvVmVyc2lvbnMvNi40LjAvbGliL21vbm8vbXNidWlsZC9DdXJyZW50L2Jpbi9TZGtzXG5cbj09PSAuTkVUIENvcmUgUnVudGltZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5SdW50aW1lIFZlcnNpb25zOlxuXHQzLjAuMFxuXHQzLjAuMC1yYzEtMTk0NTYtMjBcblx0My4wLjAtcHJldmlldzktMTk0MjMtMDlcblx0My4wLjAtcHJldmlldzctMjc5MTItMTRcblx0My4wLjAtcHJldmlldzYtMjc4MDQtMDFcblx0Mi4yLjdcblx0Mi4xLjEzXG5cdDIuMS4xMlxuXHQyLjEuMTFcblx0MS4xLjEzXG5cdDEuMC4xNlxuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS42LjExLjE2XG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIFByb2ZpbGVyLmFwcC9Db250ZW50cy9NYWNPUy9YYW1hcmluIFByb2ZpbGVyXG5cbj09PSBVcGRhdGVyID09PVxuXG5WZXJzaW9uOiAxMVxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSAxMS4wICgxNDkzNilcbkJ1aWxkIDExQTQyMGFcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5YYW1hcmluLk1hYyBub3QgaW5zdGFsbGVkLiBDYW4ndCBmaW5kIC9MaWJyYXJ5L0ZyYW1ld29ya3MvWGFtYXJpbi5NYWMuZnJhbWV3b3JrL1ZlcnNpb25zL0N1cnJlbnQvVmVyc2lvbi5cblxuPT09IFhhbWFyaW4uaU9TID09PVxuXG5WZXJzaW9uOiAxMy4yLjAuNDIgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDVlOGEyMDhiXG5CcmFuY2g6IGQxNi0zXG5CdWlsZCBkYXRlOiAyMDE5LTA5LTE3IDE0OjE5OjMwLTA0MDBcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogMTAuMC4wLjQzIChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5Db21taXQ6IHhhbWFyaW4tYW5kcm9pZC9kMTYtMy84YWYxY2E4XG5BbmRyb2lkIFNESzogL1VzZXJzL2JyYW1pbi9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHROb25lIGluc3RhbGxlZFxuXG5TREsgVG9vbHMgVmVyc2lvbjogMjYuMS4xXG5TREsgUGxhdGZvcm0gVG9vbHMgVmVyc2lvbjogMjkuMC4zXG5TREsgQnVpbGQgVG9vbHMgVmVyc2lvbjogMjguMC4zXG5cbkJ1aWxkIEluZm9ybWF0aW9uOiBcbk1vbm86IG1vbm8vbW9uby8yMDE5LTA2QDdhZjY0ZDFlYmU5XG5KYXZhLkludGVyb3A6IHhhbWFyaW4vamF2YS5pbnRlcm9wL2QxNi0zQDU4MzZmNThcbkxpYlppcFNoYXJwOiBncmVuZGVsbG8vTGliWmlwU2hhcnAvZDE2LTNANzFmNGE5NFxuTGliWmlwOiBuaWgtYXQvbGliemlwL3JlbC0xLTUtMUBiOTVjZjNmXG5Qcm9HdWFyZDogeGFtYXJpbi9wcm9ndWFyZC9tYXN0ZXJAOTA1ODM2ZFxuU1FMaXRlOiB4YW1hcmluL3NxbGl0ZS8zLjI3LjFAODIxMmEyZFxuWGFtYXJpbi5BbmRyb2lkIFRvb2xzOiB4YW1hcmluL3hhbWFyaW4tYW5kcm9pZC10b29scy9kMTYtM0BjYjQxMzMzXG5cbj09PSBNaWNyb3NvZnQgTW9iaWxlIE9wZW5KREsgPT09XG5cbkphdmEgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vamRrL21pY3Jvc29mdF9kaXN0X29wZW5qZGtfMS44LjAuMjVcbjEuOC4wLTI1XG5BbmRyb2lkIERlc2lnbmVyIEVQTCBjb2RlIGF2YWlsYWJsZSBoZXJlOlxuaHR0cHM6Ly9naXRodWIuY29tL3hhbWFyaW4vQW5kcm9pZERlc2lnbmVyLkVQTFxuXG49PT0gQW5kcm9pZCBTREsgTWFuYWdlciA9PT1cblxuVmVyc2lvbjogMS40LjAuNjVcbkhhc2g6IGMzM2IxMDdcbkJyYW5jaDogcmVtb3Rlcy9vcmlnaW4vZDE2LTNcbkJ1aWxkIGRhdGU6IDIwMTktMDktMTkgMjA6NDI6NDQgVVRDXG5cbj09PSBBbmRyb2lkIERldmljZSBNYW5hZ2VyID09PVxuXG5WZXJzaW9uOiAxLjIuMC4xMTVcbkhhc2g6IDcyNGVhNjlcbkJyYW5jaDogcmVtb3Rlcy9vcmlnaW4vZDE2LTNcbkJ1aWxkIGRhdGU6IDIwMTktMDktMTkgMjA6NDM6MDYgVVRDXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS40LjNcbkhhc2g6IGRiMjc1MjVcbkJyYW5jaDogMS40LXJlbGVhc2VcbkJ1aWxkIGRhdGU6IE1vbiwgMDkgSnVsIDIwMTggMjE6MjA6MTggR01UXG5DbGllbnQgY29tcGF0aWJpbGl0eTogMVxuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDgwMzAwMTgwNVxuR2l0IHJldmlzaW9uOiBkZjUwNTExY2NiMDhkNGQ4NGE1MzkzOWYxZDdmYzBiNDBjYmIwZWUxXG5CdWlsZCBkYXRlOiAyMDE5LTA5LTIwIDE2OjEwOjU1KzAwXG5CdWlsZCBicmFuY2g6IHJlbGVhc2UtOC4zXG5YYW1hcmluIGV4dGVuc2lvbnM6IGRhOGQ0NDhjZDY1ZjJjYzg3YzVlNmRjN2UyYzJjYTdiOTZkMjBjNzJcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjE0LjZcbkRhcndpbiAxOC43LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE4LjcuMFxuICAgIFR1ZSBBdWcgMjAgMTY6NTc6MTQgUERUIDIwMTlcbiAgICByb290OnhudS00OTAzLjI3MS4yfjIvUkVMRUFTRV9YODZfNjQgeDg2XzY0XG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkN2NkNjQ0Ny0yY2RjLTQxMTctYjQ3OS03NDJiYjk2MmE4YTgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXpNRFV5TURJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYmI2MDJmN2FlYWI4YTVlMjY3ZDcyMzNiMzMwYTI0ODVlZDM3YjliYiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgR3JhcGhpUUwgaXMgYW4gaW4tYnJvd3NlciBJREUgZm9yIGV4cGxvcmluZyBHcmFwaFFMXG5cbiMjIFN0ZXBzOlxuXG4xLiBSZXBsYWNlIHRoZSBVUkwgaW4gZ3JhcGhRTEZldGNoZXIgZnVuY3Rpb24gd2l0aCB5b3VyIG93biBHcmFwaFFMIGVuZHBvaW50IFVSTCBbaHR0cHM6Ly88eW91cl9mdW5jdGlvbl91cmw+L2FwaS9ncmFwaHFsXShodHRwczovLzx5b3VyX2Z1bmN0aW9uX3VybD4vYXBpL2dyYXBocWwpXG5cbjEuIEluIHRoZSBbQXp1cmUgUG9ydGFsXShodHRwczovL2FrYS5tcy9wb3J0YWwtbmNldTE4KSBuYXZpZ2F0ZSB0byBmdW5jdGlvbnMsIGNsaWNrIG9uIHRoZSBncmFwaHFsIGZ1bmN0aW9uLiBGcm9tIHRoZXJlLCBjbGljayBvbiB0aGUgKlBsYXRmb3JtIGZlYXR1cmVzKiB0YWIgLT4gQVBJIC0+IENPUlMgYW5kIGFkZCB5b3VyIHVybCBhcyBhbGxvd2VkIG9yaWdpblxuXG4xLiBSdW4gbG9jYWxseSAtIHVzZSBhIGxvY2FsIGh0dHAgc2VydmVyIChpLmUuIGh0dHAtc2VydmVyKS4gSWYgeW91IGRvbid0IGhhdmUgb25lIGluc3RhbGxlZDpcblxuYGBgXG5ucG0gaSAtZyBodHRwLXNlcnZlclxuYGBgXG5cbjEuIElmIHlvdSB3YW50IHRvIGNvbm5lY3QgdG8geW91ciBmdW5jdGlvbiBydW5uaW5nIGxvY2FsbHksIGdvIHRvIHlvdXIgZnVuY3Rpb24ncyBsb2NhbC5zZXR0aW5ncy5qc29uIGZpbGUgYW5kIGNoYW5nZSBpdCB0byBpbmNsdWRlIENPUlMgc2V0dGluZ3M6XG5cbmBgYGpzb25cbiAgICB7XG4gICAgICAgIFwiSXNFbmNyeXB0ZWRcIjogZmFsc2UsXG4gICAgICAgIFwiVmFsdWVzXCI6IHtcbiAgICAgICAgICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJGVU5DVElPTlNfV09SS0VSX1JVTlRJTUVcIjogXCJub2RlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFwiSG9zdFwiOiB7XG4gICAgICAgICAgICBcIkNPUlNcIjpcIipcIlxuICAgICAgICB9XG4gICAgfVxuYGBgXG5cbiMjIyBFeHRyYSBzdGVwc1xuXG4xLiBEZXBsb3kgdGhpcyBhcyBhIHN0YXRpYyB3ZWJzaXRlIGluIHRoZSBjbG91ZC4gWW91IGNhbiB1c2UgQXp1cmUgQmxvYiBTdG9yYWdlIGZvbGxvd2luZyBbc3RlcHMgaGVyZV0oaHR0cHM6Ly9ha2EubXMvc3RhdGljLW5jZXUxOClcblxuMS4gSW4geW91ciBmdW5jdGlvbiBhcHAgY29uZmlndXJlIHByb3hpZXMgdG8gcmVkaXJlY3QgdHJhZmZpYyB0byB5b3VyIEdyYXBoaVFMIGFwcFxuXG5gYGBqc29uXG57XG4gIFwiJHNjaGVtYVwiOiBcImh0dHA6Ly9qc29uLnNjaGVtYXN0b3JlLm9yZy9wcm94aWVzXCIsXG4gIFwicHJveGllc1wiOiB7XG4gICAgXCJncmFwaGlxbFwiOiB7XG4gICAgICBcIm1hdGNoQ29uZGl0aW9uXCI6IHtcbiAgICAgICAgXCJtZXRob2RzXCI6IFtcIkdFVFwiXSxcbiAgICAgICAgXCJyb3V0ZVwiOiBcIi9hcGkvZ3JhcGhpcWxcIlxuICAgICAgfSxcbiAgICAgIFwiYmFja2VuZFVyaVwiOiBcInlvdXJfdXJsX2hlcmVcIlxuICAgIH1cbiAgfVxufVxuYGBgXG5cbjEuIERlcGxveSB5b3VyIEdyYXBoUUwgYXBpIGZ1bmN0aW9uIGFwcCB3aXRoIHRoZSBuZXcgcHJveHkgY29uZmlndXJlZFxuXG4xLiBUZXN0IEdyYXBoaVFMIGJ5IG5hdmlnYXRpbmcgdG8geW91ciBmdW5jdGlvbiBbaHR0cHM6Ly88eW91cl9mdW5jdGlvbl91cmw+L2FwaS9ncmFwaGlxbF0oaHR0cHM6Ly88eW91cl9mdW5jdGlvbl91cmw+L2FwaS9ncmFwaGlxbClcblxuLS0tXG5cbuKaoSBDb25ncmF0cyEhIFlvdSBoYXZlIG5vdyBjb21wbGV0ZWQgYWxsIHN0ZXBzISEg4pqhXG5cbiMjIyBNb3JlIHJlc291Y2VzXG5cbjEuIFRvIGxlYXJuIG1vcmUgYWJvdXQgR3JhcGhpUUwgZ28gdG8gW0dyYXBoaVFMXShodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaGlxbClcblxuMS4gVG8gbGVhcm4gbW9yZSBhYm91dCBwcm94aWVzIGdvIHRvIFtBenVyZSBQcm94aWVzXShodHRwczovL2FrYS5tcy9wcm94aWVzLW5jZXUxOClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhMjgwZjY2Yi1lMTk5LTQyYTgtYTNjZC05ZDhjMmViNmNmMjAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56RTJOVFEzT1RZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtY291cnNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjFjMGEyMDRjOWJjYTUwMzE4Mjg2NjM3ZTM3NzBhYmZiODlkMDE2MzIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICI8aDEgYWxpZ249XCJjZW50ZXJcIj5nYXRzYnktY291cnNlLXN0YXJ0ZXI8L2gxPiA8YnI+XG48cCBhbGlnbj1cImNlbnRlclwiPlxuICAgIDxpbWcgYWx0PVwicHJvamVjdCBsb2dvXCIgc3JjPVwiaHR0cHM6Ly9icmhvbHRpbWFnZXMuYmxvYi5jb3JlLndpbmRvd3MubmV0L2ltYWdlcy93b21hbi10ZWFjaGVyLnBuZ1wiIHdpZHRoPVwiMTUwXCI+XG48L3A+XG5cbjxwIGFsaWduPVwiY2VudGVyXCI+XG4gIEEgR2F0c2J5IHN0YXJ0ZXIgdG8gZ2V0IHlvdSBzdGFydGVkIGNyZWF0aW5nIGVkdWNhdGlvbmFsIG1hdGVyaWFscyB1c2luZyBNYXJrZG93blxuPC9wPlxuXG4jIyBZb3UgY2FuIHNlZSB0aGUgbGl2ZSB2ZXJzaW9uIG9mIHRoZSBjb3Vyc2UgW2hlcmVdKGh0dHBzOi8vamFtc3RhY2sxLno2LndlYi5jb3JlLndpbmRvd3MubmV0LylcblxuIyMgR2V0IFN0YXJ0ZWRcblxuMS4gYG5wbSBpbnN0YWxsIC0tZ2xvYmFsIGdhdHNieS1jbGlgIC0gbWFrZSBzdXJlIHlvdSdyZSBvbiBHYXRzYnkgdjIrXG4gICAtIFNlZSBbZG9jcyBoZXJlXShodHRwczovL25leHQuZ2F0c2J5anMub3JnL2RvY3MvKSBpZiB5b3UgbmVlZCBoZWxwXG4xLiBgZ2F0c2J5IG5ldyBjb3Vyc2Utd2Vic2l0ZSBodHRwczovL2dpdGh1Yi5jb20vYnRob2x0L2dhdHNieS1jb3Vyc2Utc3RhcnRlcmBcbjEuIGBjZCBjb3Vyc2Utd2Vic2l0ZWBcbjEuIGBucG0gcnVuIGRldmBcbjEuIE9wZW4gaHR0cDovL2xvY2FsaG9zdDo4MDAwIGluIHlvdXIgYnJvd3NlclxuXG4jIyBMZXNzb25zXG5cblRoZSBjcnV4IG9mIHRoaXMgc2l0ZSBpcyBhcmUgdGhlIGxlc3NvbnMuIFByb3ZpZGVkIGFyZSB0d28gZXhhbXBsZXMuIEVhY2ggbGVzc29uIG5lZWRzIGEgW2Zyb250bWF0dHRlcl0oaHR0cHM6Ly9naXRodWIuY29tL2dhdHNieWpzL2dhdHNieS9ibG9iL21hc3Rlci9kb2NzL2RvY3MvYWRkaW5nLW1hcmtkb3duLXBhZ2VzLm1kI25vdGUtb24tY3JlYXRpbmctbWFya2Rvd24tZmlsZXMpIGBwYXRoYCwgYG9yZGVyYCwgYW5kIGB0aXRsZWAuIEdlbmVyYWxseSB5b3Ugc2hvdWxkIG1ha2UgdGhlIGBwYXRoYCBhbmQgdGhlIGZpbGUgbmFtZSBtYXRjaCBmb3IgZWFzZSBvZiBmaW5kaW5nIGl0LlxuXG4tIGBwYXRoYCAtIG5lZWRzIGEgbGVhZGluZyBzbGFzaC4gVGhpcyB3aWxsIGJlIHNsdWcgb2YgdGhlIGxlc3NvblxuLSBgdGl0bGVgIC0gd2lsbCBiZSB0aGUgdGl0bGUgZGlzcGxheWVkIG9uIHRoZSBUYWJsZSBvZiBDb250ZW50cyBhbmQgb24gdGhlIHBhZ2UgaXRzZWxmXG4tIGBvcmRlcmAgLSB0aGUgb3JkZXIgb2Ygd2hpY2ggdGhlIGl0ZW0gc2hvdWxkIGFwcGVhciBpbiB0aGUgdGFibGUgb2YgY29udGVudHMuIFRoZSBmaXJzdCBpdGVtIHNob3VsZCBiZSBvZiBvcmRlciBgMGAuIFRoZSBzZWNvbmQgc2hvdWxkIGJlIGAxYCwgZXRjLiBNdXN0IGJlIG51bWJlcmVkIHNlcXVlbnRpYWxseSwgaS5lLiBkb24ndCBza2lwIG51bWJlcnMuXG5cbiMjIENvbmZpZ1xuXG5JbnNpZGUgb2YgYGdhdHNieS1jb25maWcuanNgIGJlIHN1cmUgdG8gZmlsbCBvdXQgdGhlIGBzaXRlTWV0YWRhdGFgIGZpZWxkcywgaW5jbHVkaW5nIGB0aXRsZWAsIGBzdWJ0aXRsZWAsIGBkZXNjcmlwdGlvbmAsIGFuZCBga2V5d29yZHNgLlxuXG4jIyBBenVyZSBQaXBlbGluZXNcblxuQXp1cmUgaGFzIGEgZnJlZS1mb3Itb3Blbi1zb3VyY2UgY29udGludW91cyBpbnRlZ3JhdGlvbiBwbGF0Zm9ybSBjYWxsZWQgW0F6dXJlIFBpcGVsaW5lc10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2VuLXVzL3NlcnZpY2VzL2Rldm9wcy9waXBlbGluZXMvP1dULm1jX2lkPWdhdHNieS1naXRodWItYnJob2x0KS4gVGhpcyBwcm9qZWN0IGlzIGFscmVhZHkgc2V0IHVwIGZvciBpdCB3aXRoIHRoZSBgYXp1cmUtcGlwZWxpbmVzLnltbGAuIEp1c3QgYWRkIHRoZSBwcm9qZWN0IHRvIFBpcGVsaW5lcyBhbmQgaXQnbGwgaW1tZWRpYXRlbHkgY29ycmVjdGx5IGJ1aWxkIHRoZSBwcm9qZWN0LiBGcm9tIHRoZXJlIHlvdSdsbCBoYXZlIGEgYnVpbGQgYXJ0aWZhY3QgdGhhdCB5b3UgY2FuIHVzZSB0byBkZXBsb3kgdG8gW0F6dXJlIFN0YXRpYyBTaXRlc10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2VuLXVzL2Jsb2cvYXp1cmUtc3RvcmFnZS1zdGF0aWMtd2ViLWhvc3RpbmctcHVibGljLXByZXZpZXcvP1dULm1jX2lkPWdhdHNieS1naXRodWItYnJob2x0KSBvciBbR2l0SHViIFBhZ2VzXShodHRwczovL3BhZ2VzLmdpdGh1Yi5jb20vKS5cblxuIyMgR2l0SHViIFBhZ2VzXG5cbklmIHlvdSBkbyB3YW50IHRvIGRlcGxveSB0byBHaXRIdWIgcGFnZXMsIG1ha2Ugc3VyZSB5b3UgYWRkIHRoZSBuYW1lIG9mIHRoZSByZXBvIHRvIHRoZSBgcGF0aFByZWZpeGAgcHJvcGVydHkgaW4gYGdhdHNieS1jb25maWcuanNgIHNvIHRoYXQgaXQgd2lsbCBjb3JyZWN0bHkgbWFrZSBhbGwgdGhlIGxpbmtzLlxuXG4jIyBFeGFtcGxlIFNpdGVzXG5cbi0gW0NvbXBsZXRlIEludHJvIHRvIFdlYiBEZXYgdjJdKGh0dHBzOi8vYnRob2x0LmdpdGh1Yi5pby9pbnRyby10by13ZWItZGV2LXYyLylcbi0gW0NvbXBsZXRlIEludHJvIHRvIFJlYWN0IHY0XShodHRwczovL2J0aG9sdC5naXRodWIuaW8vY29tcGxldGUtaW50cm8tdG8tcmVhY3QtdjQvKVxuLSBbRm91ciBTZW1lc3RlcnMgb2YgQ29tcHV0ZXIgU2NpZW5jZSBpbiBGaXZlIEhvdXJzIFBhcnQgSUldKGh0dHBzOi8vYnRob2x0LmdpdGh1Yi5pby9mb3VyLXNlbWVzdGVycy1vZi1jcy1wYXJ0LXR3by8pXG5cbiMjIExpY2Vuc2VcblxuVGhlICoqY29kZSoqIGlzIHRoaXMgcmVwbyBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlLlxuXG5JIGluY2x1ZGUgdGhlIENDLUJZLU5DLTQuMCBsaWNlbnNlIGZvciB0aGUgY29udGVudDsgdGhpcyBpcyB3aGF0IEkgcmVjb21tZW5kIHlvdSBsaWNlbnNlIHlvdXIgKipjb250ZW50KiogdW5kZXI6IGFueW9uZSBjYW4gdXNlIGFuZCBzaGFyZSB0aGUgY29udGVudCBidXQgdGhleSBjYW5ub3Qgc2VsbCBpdDsgb25seSB5b3UgY2FuLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImVjMjI0YTM4LTU2NDQtNGQzZC1hMGQxLWY2MTY1ODQwY2Q4MSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UTTBOVEV6TnpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1hc3RlckRldGFpbFRhYmJlZFNlYXJjaEJhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiY2RiMTE0ZDA5ZDJjZTQ5ZWYyNzQ2MzljYmU3Y2MxZmY2MjE3ZTAxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBNYXN0ZXJEZXRhaWxUYWJiZWRTZWFyY2hCYXJcblRoaXMgaXMgYSBzYW1wbGUgYXBwIGRlbW9uc3RyYXRpbmcgaG93IHRvIGFkZCBhIFNlYXJjaEJhciB0byBhIE5hdmlnYXRpb25QYWdlIGluc2lkZSBvZiBhIFRhYmJlZFBhZ2UgaW5zaWRlIG9mIGEgTWFzdGVyRGV0YWlsUGFnZS5cblxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZnJlcmVuY2UgdGhpcyBibG9nIHBvc3QsIFwiQWRkaW5nIGEgU2VhcmNoIEJhciB0byBYYW1hcmluLkZvcm1zLk5hdmlnYXRpb25QYWdlXCI6IGh0dHBzOi8vY29kZXRyYXZlbGVyLmlvLzIwMTkvMTAvMDUvYWRkaW5nLWEtc2VhcmNoLWJhci10by14YW1hcmluLWZvcm1zLW5hdmlnYXRpb25wYWdlL1xuXG5pT1MgfCBBbmRyb2lkXG4tLS0tfC0tLS0tLS1cbiFbaU9TIFNjcmVlbnNob3RdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzY2MzM3MDIwLWVkN2JkNDgwLWU5MDMtMTFlOS05ODkxLWZhN2ViZjBmMTA3My5wbmcpIHwgIVtBbmRyb2lkIFNjcmVlbnNob3RdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzY2MzM2OTAyLWExYzkyYjAwLWU5MDMtMTFlOS04OTFiLWFjY2E1OGI0OTBlMS5wbmcpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZTk3YWVlZjMtOGE5OS00NGE1LWIxM2ItZGQ5NDBjZmNkODBjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56TTNNVGN4TVRZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidHdlZXR2ZXJzZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwNWViN2IyNzMzMTg4MmY5YzY1NjM0OWY1ODM1ZWY5MmQ2ZWIwMjAwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBUd2VldHZlcnNlIHwgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby50d2VldHZlcnNlP2JyYW5jaE5hbWU9bWFzdGVyKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3NpY290aW4vc2ljb3Rpbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0yMCZicmFuY2hOYW1lPW1hc3RlcilcblxuIyMgRGVwbG95IHJlc291cmNlc1xuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHBzOi8vYXp1cmVkZXBsb3kubmV0L2RlcGxveWJ1dHRvbi5wbmcpXShodHRwczovL3BvcnRhbC5henVyZS5jb20vI2NyZWF0ZS9NaWNyb3NvZnQuVGVtcGxhdGUvdXJpL2h0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRnNpbW9uYWNvJTJGdHdlZXR2ZXJzZSUyRm1hc3RlciUyRmF6dXJlZGVwbG95Lmpzb24pXG5cbiMjIFByZXJlcXVpc2l0ZXNcblxuMS4gQSByZWNlbnQgdmVyc2lvbiBvZiBOb2RlICg4KylcblxuMS4gVlMgQ29kZTogW2hlcmVdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2Rvd25sb2FkLz9XVC5tY19pZD10d2VldHZlcnNlLWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBBenVyZSBGdW5jdGlvbnMgQ0xJOiBbaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2Z1bmN0aW9ucy1ydW4tbG9jYWw/V1QubWNfaWQ9dHdlZXR2ZXJzZS1naXRodWItc2ljb3RpbikgIFxuXG4xLiBBenVyZSBGdW5jdGlvbnMgRXh0ZW5zaW9uIGZvciBWUyBDb2RlOiBbaGVyZV0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zLz9XVC5tY19pZD10d2VldHZlcnNlLWdpdGh1Yi1zaWNvdGluJml0ZW1OYW1lPW1zLWF6dXJldG9vbHMudnNjb2RlLWF6dXJlZnVuY3Rpb25zKSAgXG5cbjEuIEF6dXJlIGFjY291bnQ6IFtoZXJlXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZW4tdXMvZnJlZS8/d3QubWNfaWQ9dHdlZXR2ZXJzZS1naXRodWItc2ljb3RpbilcblxuIyMgSG93IHRvIHJ1biB0aGlzXG5cbjEuIENsb25lIHRoaXMgcmVwb3NpdG9yeSBhbmQgY2QgaW50byAqdHdlZXR2ZXJzZSpcblxuMS4gQ3JlYXRlICpsb2NhbC5zZXR0aW5ncy5qc29uKiBmaWxlIGFuZCBhZGQ6XG5cbmBgYGpzb25cbntcbiAgXCJJc0VuY3J5cHRlZFwiOiBmYWxzZSxcbiAgXCJWYWx1ZXNcIjoge1xuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiOiBcIlwiLFxuICAgIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCI6IFwibm9kZVwiLFxuICAgIFwiQkVBUkVSX1RPS0VOXCI6XCJZT1VSLVRXSVRURVItVE9LRU4tSEVSRVwiLFxuICAgIFwiVEVYVF9BTkFMWVRJQ1NfQVBJX0tFWVwiOlwiWU9VUi1BUElfS0VZLUhFUkVcIixcbiAgICBcIlNMQUNLX0FQSV9VUkxcIjpcIllPVVItVVJMLUhFUkVcIixcbiAgfVxufVxuYGBgXG5cbjEuIFJ1biBgYGBucG0gaWBgYCBhbmQgYGBgbnBtIHN0YXJ0YGBgXG5cblxu8J+Zi/Cfj7wgSGFwcHkgY29kaW5nISDwn5mL8J+PvCIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhOTI2Mzc4MC0xZTE0LTRmODMtOWQ3Ny05ODg0MDcyNzU5MTUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ETXhOekUzTnpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3JhcGhsZXNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgyOGJlN2RiZDZlOWEwZDZkMGRiNDczZjAxY2JmODNiYTlkMTZjNTkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEdyYXBobGVzc1xuXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2FwaXMvYnVpbGQvc3RhdHVzL3NpbW9uYWNvLmdyYXBobGVzcz9icmFuY2hOYW1lPW1hc3RlcildKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2J1aWxkL2xhdGVzdD9kZWZpbml0aW9uSWQ9MjcmYnJhbmNoTmFtZT1tYXN0ZXIpXG5cbiMjIFByZXJlcXVpc2l0ZXNcblxuMS4gQSByZWNlbnQgdmVyc2lvbiBvZiBbTm9kZV0oaHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkKSAoOCspXG5cbjEuIFtBenVyZSBGdW5jdGlvbnMgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1mdW5jdGlvbnMvZnVuY3Rpb25zLXJ1bi1sb2NhbD9XVC5tY19pZD1ncmFwaHFsZXNzLWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBbRnJlZSBBenVyZSBBY2NvdW50XShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZW4tdXMvZnJlZS8/d3QubWNfaWQ9Z3JhcGhsZXNzLWdpdGh1Yi1zaWNvdGluKVxuXG5cbiMjIFNldHVwIEF6dXJlIFBpcGVsaW5lc1xuXG4xLiBDcmVhdGUgU2VydmljZSBDb25uZWN0aW9uIFxuMS4gU2V0IHZhcmlhYmxlczogUGFyYW1ldGVycy5Db25uZWN0ZWRTZXJ2aWNlTmFtZSAiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiY2NkNzhhMzUtNWE1ZC00OWRkLWE0YjUtM2U0YjBlYWMzZjU0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTROekkyT1RVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibGlua3ktbGluayIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwYTY4YWE1YTRmZGE5MzMzZWJhMjAzNTQ4M2NmZTY0NGIyMDEwNDAxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyMgVGhlIFVSTGlzdCBQcm9qZWN0XG5cbiMjIyBPdmVydmlld1xuVGhpcyBpcyBhIHJlZmVyZW5jZSBhcHBsaWNhdGlvbiBjb21wb3NlZCBvZiBhIFNQQSBmcm9udGVuZCBhbmQgU2VydmVybGVzcyBiYWNrZW5kIHdpdGggdGhlIGdvYWwgb2YgZXhwbG9yaW5nIGhvdyB0byBjcmVhdGUgYSBncmVlbmZpZWxkLCBjbG91ZCBmaXJzdCBhcHBsb2NhdGlvbi4gV2hlbiBkZXBsb3llZCwgaXQgd2lsbCBhbGxvdyB5b3UgdG8gc2F2ZSBncm91cHMgb2YgbGlua3MgYW5kIHNoYXJlIHRoZW0gd2l0aCB0aGUgd29ybGQhXG5cbiMjIyBSdW5uaW5nIExvY2FsbHlcblRPRE8hXG5cbiMjIyBEZXBsb3lpbmcgdG8gQXp1cmVcblRPRE8hXG5cbiMjIyBCdWlsdCB3aXRoXG4qKkZyb250ZW5kKipcbiogVnVlLmpzXG4qIFR5cGVTY3JpcHRcblxuKipCYWNrZW5kKipcbiogQXp1cmUgRnVuY3Rpb25zXG4qIEF6dXJlIENvc21vcyBEQlxuKiBBcHBsaWNhdGlvbiBJbnNpZ2h0c1xuKiBBcHAgU2VydmljZSBBdXRoZW50aWNhdGlvblxuKiAuTkVUIENvcmUgLyBDI1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjdkZjg4ZjI4LTE1Y2QtNDRjZC1hYTM0LWU2Yzk2NDdlYzI1OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56azRNekE0TXpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVkZGl0aWZpZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODcyNWU0MmRhNmVjZDM3Y2QwNzUyYTQ2OGZlODJlNmUyYjEzM2Q1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgUmVkZGl0aWZpZXIgfCBbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2FwaXMvYnVpbGQvc3RhdHVzL3NpbW9uYWNvLnJlZGRpdGlmaWVyP2JyYW5jaE5hbWU9bWFzdGVyKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3NpY290aW4vc2ljb3Rpbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0yNiZicmFuY2hOYW1lPW1hc3RlcilcblxuIyMgRGVwbG95IHJlc291cmNlc1xuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHBzOi8vYXp1cmVkZXBsb3kubmV0L2RlcGxveWJ1dHRvbi5wbmcpXShodHRwczovL3BvcnRhbC5henVyZS5jb20vI2NyZWF0ZS9NaWNyb3NvZnQuVGVtcGxhdGUvdXJpL2h0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRnNpbW9uYWNvJTJGcmVkZGl0aWZpZXIlMkZtYXN0ZXIlMkZhenVyZWRlcGxveS5qc29uKVxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEEgcmVjZW50IHZlcnNpb24gb2YgTm9kZSAoOCspXG5cbjEuIFZTIENvZGU6IFtoZXJlXShodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb3dubG9hZC8/V1QubWNfaWQ9cmVkZGl0Zmllci1naXRodWItc2ljb3RpbilcblxuMS4gQXp1cmUgRnVuY3Rpb25zIENMSTogW2hlcmVdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtcnVuLWxvY2FsP1dULm1jX2lkPXJlZGRpdGZpZXItZ2l0aHViLXNpY290aW4pICBcblxuMS4gQXp1cmUgRnVuY3Rpb25zIEV4dGVuc2lvbiBmb3IgVlMgQ29kZTogW2hlcmVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcy8/V1QubWNfaWQ9cmVkZGl0Zmllci1naXRodWItc2ljb3RpbiZpdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgIFxuXG4xLiBBenVyZSBhY2NvdW50OiBbaGVyZV0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2VuLXVzL2ZyZWUvP3d0Lm1jX2lkPXJlZGRpdGZpZXItZ2l0aHViLXNpY290aW4pXG5cbiMjIEhvdyB0byBydW4gdGhpc1xuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnkgYW5kIGNkIGludG8gKnNlcnZlcmxlc3MqXG5cbjEuIENyZWF0ZSAqbG9jYWwuc2V0dGluZ3MuanNvbiogZmlsZSBhbmQgYWRkOlxuXG5gYGBqc29uXG57XG4gIFwiSXNFbmNyeXB0ZWRcIjogZmFsc2UsXG4gIFwiVmFsdWVzXCI6IHtcbiAgICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIjogXCJcIixcbiAgICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiOiBcIm5vZGVcIixcbiAgICBcIlJFRERJVF9LRVlcIjogXCJZT1VSLVRPS0VOLUhFUkVcIixcbiAgfVxufVxuYGBgXG5cbj4gUmV0cmlldmUgeW91ciBSZWRkaXQgYWNjZXNzIHRva2VuIGJ5IGZvbGxvd2luZyBzdGVwcyBpbiB0aGUgKkdldCBSZWRkaXQgQXV0aG9yaXNhdGlvbiB0b2tlbiogc2VjdGlvbi5cblxuMS4gUnVuIGBgYG5wbSBpYGBgIGFuZCBgYGBucG0gc3RhcnRgYGBcblxuMS4gVG8gdGVzdCB5b3VyIGZ1bmN0aW9uLCBtYWtlIGEgUE9TVCByZXF1ZXN0IHRvIHlvdXIgZnVuY3Rpb24ncyBVUkwgW2h0dHA6Ly9sb2NhbGhvc3Q6NzA3MS9hcGkvc3VibWl0LWxpbmtdKGh0dHA6Ly9sb2NhbGhvc3Q6NzA3MS9hcGkvc3VibWl0LWxpbmspIHdpdGggYSBib2R5IHRoYXQgbG9va3MgbGlrZSB0aGlzOlxuXG5gYGBqc29uXG57XG4gICAgXCJ0aXRsZVwiOlwiVXNlIHRoaXMgKmNoZWNrbGlzdCogdG8gcmV2aWV3IHlvdXIgYXBwbGljYXRpb24gYXJjaGl0ZWN0dXJlIGZyb20gYSAqcmVzaWxpZW5jeSogc3RhbmRwb2ludDsgQXBwbGljYXRpb24gRGVzaWduLCBEYXRhIE1hbmFnZW1lbnQsIFNlY3VyaXR5LCBUZXN0aW5nICYgRGVwbG95bWVudFwiLFxuICAgIFwidXJsXCI6XCJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9hcmNoaXRlY3R1cmUvY2hlY2tsaXN0L3Jlc2lsaWVuY3lcIixcbiAgICBcInNyXCI6XCIvci9BWlVSRS9cIlxufVxuYGBgXG5cbiMjIEdldCBSZWRkaXQgQXV0aG9yaXNhdGlvbiB0b2tlblxuXG5CZWZvcmUgcmVxdWVzdGluZyBhbiBhdXRob3JpemF0aW9uIHRva2VkIHlvdSBuZWVkIHRvIGNyZWF0ZSBhbiBhcHBsaWNhdGlvbi4gSWYgeW91IGhhdmVuJ3QgZG9uZSB0aGF0IGFscmVhZHksIG1ha2Ugc3VyZSB0byBmb2xsb3cgc3RlcHMgaW4gdGhpcyBbcXVpY2sgc3RhcnQgZXhhbXBsZV0oaHR0cHM6Ly9naXRodWIuY29tL3JlZGRpdC1hcmNoaXZlL3JlZGRpdC93aWtpL09BdXRoMi1RdWljay1TdGFydC1FeGFtcGxlKS5cblxuTWFrZSByZXF1ZXN0IHRvIFtodHRwczovL3d3dy5yZWRkaXQuY29tL2FwaS92MS9hY2Nlc3NfdG9rZW5dKGh0dHBzOi8vd3d3LnJlZGRpdC5jb20vYXBpL3YxL2FjY2Vzc190b2tlbilcblxuQXV0aG9yaXphdGlvbjogQmFzaWMgQXV0aFxuVXNlcm5hbWU6IDx5b3VyX2FwcF9pZD5cblBhc3N3b3JkOiA8eW91cl9hcHBfc2VjcmV0PlxuXG5Gb3JtIERhdGE6XG5ncmFudF90eXBlOiBwYXNzd29yZFxudXNlcm5hbWU6IDx5b3VyX3JlZGRpdF91c2VybmFtZT5cbnBhc3N3b3JkOiA8eW91cl9yZWRkaXRfcGFzc3dvcmQ+XG5cbklmIGFsbCBnb2VzIHdlbGwsIHlvdSBzaG91bGQgZ2V0IGEgcmVzcG9uc2UgdGhhdCBsb29rcyBzaW1pbGFyIHRvIHRoaXM6XG5cbmBgYGpzb25cbntcbiAgICBcImFjY2Vzc190b2tlblwiOiBcIjEyMjQ1Njg0ODYtUkN3emRLTVA0emRTdDZBU2V0WnBZYTgwcXI0XCIsXG4gICAgXCJ0b2tlbl90eXBlXCI6IFwiYmVhcmVyXCIsXG4gICAgXCJleHBpcmVzX2luXCI6IDM2MDAsXG4gICAgXCJzY29wZVwiOiBcIipcIlxufVxuYGBgXG5cbvCfmYvwn4+8IEhhcHB5IGNvZGluZyEg8J+Zi/Cfj7xcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhMWMzNWE1ZC0yYmFmLTQ1ODItOGUxYS03ZjRmMTE3YmU4YzkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UZ3hOamMyTURFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRvdE5ldEdyYXBoUUwiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjBhMzcyYzU3ODUzYWRlZTlkODZiMmY5NDdiMGFhM2UzOWFiZjQ2MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEdyYXBoUUwgaW4gLk5FVFxuXG5JZiB5b3UncmUgbmV3IHRvIEdyYXBoUUwsIGNoZWNrIG91dCB0aGVzZSB2aWRlb3MgZmVhdHVyZWQgaW4gdGhlIFtMZWFybiBNb3JlXSgjbGVhcm4tbW9yZSkgc2VjdGlvbiwgYmVsb3dcbi0gW0xlYXJuaW5nIEdyYXBoUUwgU2VyaWVzXSgjbGVhcm5pbmctZ3JhcGhxbC1zZXJpZXMpXG4tIFtYYW1hcmluICsgR3JhcGhRTF0oI3hhbWFyaW4tLWdyYXBocWwpXG4tIE9uIC5ORVQgU2hvdywgQ2hhbm5lbCA5XG4gIC0gW0ludHJvZHVjdGlvbiB0byBHcmFwaFFMXShodHRwczovL2NoYW5uZWw5Lm1zZG4uY29tL1Nob3dzL09uLU5FVC9JbnRyb2R1Y3Rpb24tdG8tR3JhcGhRTD9XVC5tY19pZD1kb3RuZXRncmFwaHFsLWdpdGh1Yi1icmFtaW4pXG4gIC0gW0NyZWF0aW5nIGEgR3JhcGhRTCBCYWNrZW5kIGluIEMjXShodHRwczovL2NoYW5uZWw5Lm1zZG4uY29tL1Nob3dzL09uLU5FVC9DcmVhdGluZy1hLUdyYXBoUUwtQmFja2VuZD9XVC5tY19pZD1kb3RuZXRncmFwaHFsLWdpdGh1Yi1icmFtaW4pXG4gIC0gW0NvbnN1bWluZyBHcmFwaFFMIGluIEMjXShodHRwczovL2NoYW5uZWw5Lm1zZG4uY29tL1Nob3dzL09uLU5FVC9Db25zdW1pbmctYS1HcmFwaFFMLWluLUM/V1QubWNfaWQ9ZG90bmV0Z3JhcGhxbC1naXRodWItYnJhbWluKVxuXG5UbyBydW4gdGhpcyBzYW1wbGUsIGZvbGxvdyB0aGUgW0dldHRpbmcgU3RhcnRlZCBJbnN0cnVjdGlvbnMsIGJlbG93XSgjZ2V0dGluZy1zdGFydGVkKS5cblxuVGhpcyBhcHAgd2FzIGZlYXR1cmVkIGF0IFtHcmFwaFFMIFN1bW1pdCAyMDE5XShodHRwczovL2NvZGV0cmF2ZWxlci5pby9HcmFwaFFMU3VtbWl0LURvdE5ldCkuIFxuXG48YSBocmVmPVwiaHR0cHM6Ly93d3cuYnV5bWVhY29mZmVlLmNvbS9ibWlubmlja1wiIHRhcmdldD1cIl9ibGFua1wiPjxpbWcgc3JjPVwiaHR0cHM6Ly9jZG4uYnV5bWVhY29mZmVlLmNvbS9idXR0b25zL2RlZmF1bHQtb3JhbmdlLnBuZ1wiIGFsdD1cIkJ1eSBNZSBBIENvZmZlZVwiIHN0eWxlPVwiaGVpZ2h0OiA1MXB4ICFpbXBvcnRhbnQ7d2lkdGg6IDIxN3B4ICFpbXBvcnRhbnQ7XCIgPjwvYT5cblxuXG4jIyMgR3JhcGhRTCBCYWNrZW5kXG5UaGUgR3JhcGhRTCBiYWNrZW5kIGlzIGNyZWF0ZWQgaW4gQyMgdXNpbmcgdGhlIFtHcmFwaFFMIE51R2V0IFBhY2thZ2VdKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9HcmFwaFFMLykuXG5cbnwgR3JhcGhpUUwgfFxufCAtLS0tLS0tLSB8XG58ICFbR3JhcGhpUUxdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzY3OTE0NzQzLTNhOGY0NzAwLWZiNGUtMTFlOS05MzZkLTMyMGRmZGQ1ZDg3NC5wbmcpIHxcblxuIyMjIE1vYmlsZVxuVGhlIG1vYmlsZSBhcHAgaXMgY3JlYXRlZCBpbiBDIyB1c2luZyBbWGFtYXJpbl0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi9jcm9zcy1wbGF0Zm9ybS8/V1QubWNfaWQ9ZG90bmV0Z3JhcGhxbC1naXRodWItYnJhbWluKSBhbmQgdGhlIFtHcmFwaFFMLkNsaWVudCBOdUdldCBQYWNrYWdlXShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvR3JhcGhRTC5DbGllbnQvKS5cblxufCBYYW1hcmluLmlPUyB8IFhhbWFyaW4uQW5kcm9pZCB8XG58IC0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tIHxcbnwgPGltZyBzcmM9XCJodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy82NzkxNDA1Ni00NGIwNDYwMC1mYjRjLTExZTktOThlZS05ZDdlY2IxYmJjNjUucG5nXCIgaGVpZ2h0PVwiNjAwXCI+IHwgPGltZyBzcmM9XCJodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy82NzkxNTA0MC0xNjgwMzU4MC1mYjRmLTExZTktODBjMi1hZTkxYTI1ZjRlN2IucG5nXCIgaGVpZ2h0PVwiNTUwXCI+IHwgXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG5UaGlzIGFwcCByZXF1aXJlcyB1cyB0byBydW4gdGhlIEdyYXBoUUwgQVBJIHVzaW5nIHRoZSB0ZXJtaW5hbCB3aGlsZSB1c2luZyBWaXN1YWwgU3R1ZGlvIHRvIGJ1aWxkL2RlcGxveSB0aGUgWGFtYXJpbi5pT1MgYW5kL29yIFhhbWFyaW4uQW5kcm9pZCBhcHAuXG5cbiMjIyAxLiBSdW4gdGhlIEdyYXBoUUwgQVBJXG5cbjEuIE9wZW4gdGhlICoqdGVybWluYWwqKlxuMi4gSW4gdGhlICoqdGVybWluYWwqKiwgY2xvbmUgdGhpcyBzb2x1dGlvbiBieSBlbnRlcmluZyB0aGUgZm9sbG93aW5nIGNvbW1hbmQ6XG4gICAgLSAqKk5vdGU6KiogSWYgeW91IGhhdmUgYWxyZWFkeSBkb3dubG9hZGVkIHRoZSBzb2x1dGlvbiwgc2tpcCB0aGlzIHN0ZXBcblxuYGBgYmFzaFxuZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svZG90bmV0Z3JhcGhxbC5naXRcbmBgYFxuXG4zLiBJbiB0aGUgKip0ZXJtaW5hbCoqLCBuYXZpZ2F0ZSB0byB0aGUgYERvdE5ldEdyYXBoUUwuQVBJYCBmb2xkZXIgYnkgZW50ZXJpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kOlxuXG4tIE9uIFdpbmRvd3NcblxuYGBgYmFzaFxuY2QgW3BhdGggdG8gRG90TmV0R3JhcGhRTCBmb2xkZXJdXFxTb3VyY2VcXERvdE5ldEdyYXBoUUwuQVBJXFxcbmBgYFxuLSBPbiBtYWNPU1xuYGBgYmFzaFxuY2QgW3BhdGggdG8gRG90TmV0R3JhcGhRTCBmb2xkZXJdL1NvdXJjZS9Eb3ROZXRHcmFwaFFMLkFQSS9cbmBgYFxuXG40LiBJbiB0aGUgKip0ZXJtaW5hbCoqLCBydW4gYERvdE5ldEdyYXBoUUwuQVBJLmNzcHJvamAgYnkgZW50ZXJpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kOlxuXG5gYGBiYXNoXG5kb3RuZXQgcnVuXG5gYGBcblxuNS4gT3BlbiBhIHdlYiBicm93c2VyXG42LiBJbiB0aGUgd2ViIGJyb3dzZXIsIG5hdmdpYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQwMDBgXG43LiBDb25maXJtIEdyYXBoaVFMXG5cbiMjIyAyLiBSdW4gdGhlIFhhbWFyaW4uQW5kcm9pZCBBcHBcblxuMS4gSW4gKipWaXN1YWwgU3R1ZGlvKiosIG9wZW4gYERvdE5ldEdyYXBoUUwvU291cmNlL0RvdE5ldEdyYXBoUUwuc2xuYFxuMi4gSW4gKipWaXN1YWwgU3R1ZGlvKiosIGluIHRoZSAqKlNvbHV0aW9uIEV4cGxvcmVyKiosIHJpZ2h0LWNsaWNrIG9uICoqRG90TmV0R3JhcGhRTC5BbmRyb2lkKipcbjMuIEluIHRoZSByaWdodC1jbGljayBtZW51LCBzZWxlY3QgKipTZXQgYXMgU3RhcnR1cCBQcm9qZWN0KipcbjQuIEluICoqVmlzdWFsIFN0dWRpbyoqLCBidWlsZC9kZXBsb3kgKipEb3ROZXRHcmFwaFFMLkFuZHJvaWQqKiB0byBhbiBBbmRyb2lkIGRldmljZVxuNi4gQ29uZmlybSB0aGUgbGlzdCBvZiBkb2dzIGZyb20gdGhlIEdyYXBoUUwgQVBJIGFwcGVhcnNcblxuIyBMZWFybiBNb3JlXG5cbkxlYXJuIG1vcmUgYWJvdXQgWGFtYXJpbiArIEdyYXBoUUxcblxuIyMgRG9jc1xuXG4jIyMgWGFtYXJpbiBSZXNvdXJjZXNcblxuLSBbR2V0dGluZyBTdGFydGVkIHdpdGggWGFtYXJpbl0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi9jcm9zcy1wbGF0Zm9ybS8/V1QubWNfaWQ9ZG90bmV0Z3JhcGhxbC1naXRodWItYnJhbWluKVxuLSBbR2V0dGluZyBTdGFydGVkIHdpdGggWGFtYXJpbi5Gb3Jtc10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi94YW1hcmluLWZvcm1zP1dULm1jX2lkPWRvdG5ldGdyYXBocWwtZ2l0aHViLWJyYW1pbilcbi0gW0luc3RhbGwgVmlzdWFsIFN0dWRpbyAoUEMpICsgWGFtYXJpbl0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi9nZXQtc3RhcnRlZC9pbnN0YWxsYXRpb24vd2luZG93cz9XVC5tY19pZD1kb3RuZXRncmFwaHFsLWdpdGh1Yi1icmFtaW4pXG4tIFtJbnN0YWxsIFZpc3VhbCBTdHVkaW8gZm9yIE1hYyArIFhhbWFyaW5dKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3Zpc3VhbHN0dWRpby9tYWMvaW5zdGFsbGF0aW9uP3ZpZXc9dnNtYWMtMjAxOSZXVC5tY19pZD1kb3RuZXRncmFwaHFsLWdpdGh1Yi1icmFtaW4pXG4tIFtNaWNyb3NvZnQgTGVhcm46IEJ1aWxkIE1vYmlsZSBBcHBzIFdpdGggWGFtYXJpbi5Gb3Jtc10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vbGVhcm4vcGF0aHMvYnVpbGQtbW9iaWxlLWFwcHMtd2l0aC14YW1hcmluLWZvcm1zP1dULm1jX2lkPWRvdG5ldGdyYXBocWwtZ2l0aHViLWJyYW1pbilcbi0gWGFtYXJpbiBTb3VyY2UgQ29kZVxuICAgIC0gW1hhbWFyaW4uaU9TXShodHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi94YW1hcmluLW1hY2lvcylcbiAgICAtIFtYYW1hcmluLkFuZHJvaWRdKGh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL3hhbWFyaW4tYW5kcm9pZClcbiAgICAtIFtYYW1hcmluLkZvcm1zXShodHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9YYW1hcmluLkZvcm1zKVxuICAgIC0gW01vbm9dKGh0dHBzOi8vZ2l0aHViLmNvbS9tb25vL21vbm8pXG4gICAgXG4jIyMgR3JhcGhRTCBSZXNvdXJjZXNcblxuLSBbR3JhcGhRTC5vcmddKGh0dHBzOi8vZ3JhcGhxbC5vcmcvKVxuLSBbVXNpbmcgUG9zdG1hbiB3aXRoIEdyYXBoUUwgQVBJXShodHRwczovL3d3dy5jb2RldHJhdmVsZXIuaW8vMjAxOS8wMS8xMi9ob3ctdG8tdXNlLXBvc3RtYW4td2l0aC1hLWdyYXBocWwtYXBpLylcbi0gW0dyYXBoUUwgZm9yIC5ORVRdKGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsLWRvdG5ldC9ncmFwaHFsLWRvdG5ldClcbi0gW0dyYXBoUUwgdnMgUkVTVF0oaHR0cHM6Ly9waGlsc3R1cmdlb24udWsvYXBpLzIwMTcvMDEvMjQvZ3JhcGhxbC12cy1yZXN0LW92ZXJ2aWV3Lylcbi0gW0dyYXBoUUwgdnMgT0RhdGFdKGh0dHBzOi8vamVmZmhhbmRsZXkuY29tLzIwMTgtMDktMTMvZ3JhcGhxbC1pcy1ub3Qtb2RhdGEpXG4tIFtBd2Vzb21lIEdyYXBoUUxdKGh0dHBzOi8vZ2l0aHViLmNvbS9jaGVudHN1bGluL2F3ZXNvbWUtZ3JhcGhxbClcblxuIyMgVmlkZW8gUmVjb3JkaW5nc1xuXG4jIyMgQ29uc3VtaW5nIEdyYXBoUUwgaW4gQyNcblxuVGhpcyBzZXNzaW9uIG9uIEdyYXBoUUwgKyBDIyB3YXMgZGVsaXZlcmVkIGF0IFtHcmFwaFFMIFN1bW1pdCAyMDE5XShodHRwczovL2NvZGV0cmF2ZWxlci5pby9HcmFwaFFMU3VtbWl0LURvdE5ldCkuICBJdCBkZW1vbnN0cmF0ZXMgaG93IHRvIGNyZWF0ZSBhIEdyYXBoUUwgQmFja2VuZCBpbiBDIyBhbmQgY29ubmVjdCBpdCB0byBhIGNsaWVudC1zaWRlIG1vYmlsZSBhcHAgd3JpdHRlbiBpbiBDIyB1c2luZyBYYW1hcmluLlxuXG5bIVtDb25zdW1pbmcgR3JhcGhRTCBpbiBDI10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjg0MTg5MjgtMTc2ODI3MDAtMDE0ZS0xMWVhLTlhYTYtNzQ5MjU0Y2I1MGZlLnBuZyldKGh0dHBzOi8veW91dHUuYmUvdDFjUXNlbkFtTm8/dD0xODU3NSlcblxuIyMjIFhhbWFyaW4gKyBHcmFwaFFMXG5cblRoZSBzZXNzaW9uIG9uIFhhbWFyaW4gKyBHcmFwaFFMIHdhcyBkZWxpdmVyZWQgYXQgW1hhbWFyaW4gRGV2ZWxvcGVyIFN1bW1pdCAyMDE5XShodHRwczovL3d3dy5jb2RldHJhdmVsZXIuaW8veGFtZGV2c3VtbWl0LWdyYXBocWwvKS4gSXQgZGVtb25zdHJhdGVzIGhvdyB0byBjcmVhdGUgYSBYYW1hcmluIGFwcCBpbiBDIyBhbmQgY29ubmVjdCBpdCB0byBhbiBleGlzdGluZyBHcmFwaFFMIEJhY2tlbmQuXG5cblshW1hhbWFyaW4gKyBHcmFwaFFMIFZpZGVvXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy82MTI1NjY2OC02YThmMTc4MC1hNzIyLTExZTktOTdhZC04MTg4ZWM2ZWFiOGYucG5nKV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbS9FdmVudHMvWGFtYXJpbi9YYW1hcmluLURldmVsb3Blci1TdW1taXQtMjAxOS9YYW1hcmluR3JhcGhRTD9XVC5tY19pZD1kb3RuZXRncmFwaHFsLWdpdGh1Yi1icmFtaW4pXG5cbiMjIyBMZWFybmluZyBHcmFwaFFMIFNlcmllc1xuXG5UaGlzIHNwZWNpYWwgc2VyaWVzIHRlYWNoZXMgdGhlIGJhc2ljcyBvZiBHcmFwaFFMLCBob3cgdG8gaW50ZXJhY3Qgd2l0aCBhbiBleGlzdGluZyBHcmFwaFFMIGVuZHBvaW50LCBob3cgdG8gY3JlYXRlIHlvdXIgZmlyc3QgR3JhcGhRTCBTZXJ2ZXIsIGFuZCBob3cgdG8gZGVwbG95IHlvdXIgR3JhcGhRTCBTZXJ2ZXIgdG8gdGhlIGNsb3VkIHVzaW5nIEF6dXJlISBcblxuWyFbTGVhcm5pbmcgR3JhcGhRTCBTZXJpZXNdKGh0dHBzOi8vc2VjLmNoOS5tcy9jaDkvMTY3Yy9kNjJiZmMwMC05NWFlLTQyYTEtYWIyMy1hZjliOTYwMjE2N2MvSW50cm90b0dyYXBoUUxfNTEyLmpwZyldKGh0dHBzOi8vY2hhbm5lbDkubXNkbi5jb20vU2VyaWVzL0dyYXBoUUw/V1QubWNfaWQ9ZG90bmV0Z3JhcGhxbC1naXRodWItYnJhbWluKVxuXG4jIyMgT24gLk5FVCBTaG93XG5cbkluIHRoaXMgc2VyaWVzLCB3ZSBjb3ZlciBob3cgdG8gY3JlYXRlIGFuIGVuZC10by1lbmQgc29vbHV0aW9uLCBjcmVhdGluZyBHcmFwaFFMIEJhY2tlbmQgaW4gQyMgYW5kIGNvbm5lY3RpbmcgdG8gaXQgZnJvbSBhIEMjIGNsaWVudC5cblxuLSBbSW50cm9kdWN0aW9uIHRvIEdyYXBoUUxdKGh0dHBzOi8vY2hhbm5lbDkubXNkbi5jb20vU2hvd3MvT24tTkVUL0ludHJvZHVjdGlvbi10by1HcmFwaFFMP1dULm1jX2lkPWRvdG5ldGdyYXBocWwtZ2l0aHViLWJyYW1pbilcbi0gW0NyZWF0aW5nIGEgR3JhcGhRTCBCYWNrZW5kIGluIEMjXShodHRwczovL2NoYW5uZWw5Lm1zZG4uY29tL1Nob3dzL09uLU5FVC9DcmVhdGluZy1hLUdyYXBoUUwtQmFja2VuZD9XVC5tY19pZD1kb3RuZXRncmFwaHFsLWdpdGh1Yi1icmFtaW4pXG4tIFtDb25zdW1pbmcgR3JhcGhRTCBpbiBDI10oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbS9TaG93cy9Pbi1ORVQvQ29uc3VtaW5nLUdyYXBoUUwtaW4tQz9XVC5tY19pZD1kb3RuZXRncmFwaHFsLWdpdGh1Yi1icmFtaW4pXG5cblshW09uIC5ORVQgU2hvd10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNzY3OTcwMjMtZGYyMmM2MDAtNjc4OS0xMWVhLTg1OTUtOTlmOTBkZjQ5OWE5LnBuZyldKGh0dHBzOi8vY2hhbm5lbDkubXNkbi5jb20vU2hvd3MvT24tTkVUL0ludHJvZHVjdGlvbi10by1HcmFwaFFMP1dULm1jX2lkPWRvdG5ldGdyYXBocWwtZ2l0aHViLWJyYW1pbilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDI2ZjgxZS0zYjk2LTRiYmItYTAzMy1lN2MwNGUzODUxOGEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56WTNNelV4TXpNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwYjZhZDQ3YmU1ZmQ0ODAzMzExYWUyMjEwZWY0NmQ2OGE3NjAxZGQ5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiWyFbXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL01hZGUlMjBXaXRoLUdpdGh1YiUyMFNwcmF5LWxpZ2h0Z3JleS5zdmc/c3R5bGU9Zm9yLXRoZS1iYWRnZSZsb2dvPWdpdGh1YildKGh0dHBzOi8vZ2l0aHViLmNvbS9Bbm5paGlsL2dpdGh1Yi1zcHJheSMxNTE5KSAgXG5bIVtdKGh0dHBzOi8vaS5pbWd1ci5jb20vMkRyVG4wWi5naWYpXShodHRwczovL2dpdGh1Yi5jb20vQW5uaWhpbC9naXRodWItc3ByYXkpIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjIwNTZkZWNkLTRjMjgtNGQyZS1iYzhlLTE4ZTQ4OWY5NmVmMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EQTVOamcyTkRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jYW4tZG8tdGhhdCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4ZjJmZDBlNWE0OTZmNDgyOGIyYWQ2MTIyM2VjMGQzNzFmODQ3YmNmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBTZXJ2ZXJsZXNzIGNhbiBkbyB0aGF0PyFcblxuKipBYnN0cmFjdDoqKiBBcyBhIGZyb250ZW5kIGRldmVsb3BlciB5b3UgbWlnaHQgdGhpbmsgLSB3aHkgd291bGQgSSBldmVuIGNhcmUgYWJvdXQgc2VydmVycz8gT3IgbGFjayB0aGVyZW9mIVxuXG5JbiB0aGlzIHNlc3Npb24gd2UnbGwgZXhwbG9yZSBob3cgZW1wb3dlcmluZyBzZXJ2ZXJsZXNzIGlzIGZvciB0aGUgSmF2YXNjcmlwdCBkZXZlbG9wZXIgYW5kIGhvdyBtdWNoIHdlIGNhbiBhbHJlYWR5IGFjaGlldmUgYnkgbm90IHJlaW52ZW50aW5nIHRoZSB3aGVlbC4gV2UnbGwgYWxzbyBzcHJpbmtsaW5nIGEgYml0IG9mIHNlcnZlcmxlc3MgbWFnaWMgYW5kIGxlYXJuIGhvdyB3ZSBjYW4gdXNlIGl0IG9uY2Ugd2UgYWRkIGl0IHRvIG91ciB0b29sYm94LlxuXG4jIyBSdW5uaW5nIGxvY2FsbHlcblxuYGBgXG5kb2NrZXIgcnVuIC1pdCAtdiA8eW91cl9wYXRoX2hlcmU+Oi9yZXBvIC1wIDkwMDA6OTAwMCBnaXRwaXRjaC9kZXNrdG9wOnByb1xuYGBgXG5cbiMjIFB1c2ggdG8gY2xvdWRcblxuYGBgXG5kb2NrZXIgYnVpbGQgLS1ybSAtZiBcIkRvY2tlcmZpbGVcIiAtdCBzaWNvdGluLmF6dXJlY3IuaW8vdG91cnByZXo6MS4wIC5cbmRvY2tlciBwdXNoIHNpY290aW4uYXp1cmVjci5pby90b3VycHJlejoxLjBcbmBgYCIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlZWNlMGFlZi1lYjYxLTQwNWYtYjdjMy04ZGU5NDQwYWQ1NTMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qRTBOelEwTXpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFwcENlbnRlckF1dGhEYXRhU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMzMTYzMGE1NTE0MTUzZmI3OGNiNTZkYzZkMjMxYWZmNjI1YzA0NzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFwcCBDZW50ZXIgQXV0aCAmIERhdGEgU2FtcGxlXG5BIHNhbXBsZSBhcHAgZGVtb25zdHJhdGluZyBBcHAgQ2VudGVyIEF1dGggYW5kIEFwcCBDZW50ZXIgRGF0YSwgYnVpbHQgZm9yIGlPUyBhbmQgQW5kcm9pZCB1c2luZyBYYW1hcmluLkZvcm1zLlxuXG5KdXN0IGFib3V0IGV2ZXJ5IG1vYmlsZSBhcHAgdG9kYXkgdXNlcyBhIHJlbW90ZSBiYWNrZW5kIHRvIHN0b3JlIGRhdGEuIEJ1dCBjcmVhdGluZyBhIGJhY2tlbmQgaXMgaGFyZCAtIGl0IHJlcXVpcmVzIGV4dGVuc2l2ZSBEYXRhYmFzZSwgQVBJLCBOZXR3b3JraW5nLCBTZWN1cml0eSwgQXV0aGVudGljYXRpb24gYW5kIFNlcnZlciBrbm93bGVkZ2UuIEx1Y2tpbHksIEFwcCBDZW50ZXIgRGF0YSBtYWtlcyBpdCBlYXN5IHRvIGNyZWF0ZSBhIG1vYmlsZSBiYWNrZW5kIHdpdGggYSBmZXcgY2xpY2tzIGFuZCBhIGNvdXBsZSBsaW5lcyBvZiBjb2RlLlxuXG5odHRwczovL2NvZGV0cmF2ZWxlci5pby91cGRhdGUtZGF0YS9cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2NWU1ODY0Ni05MjdiLTRmOTAtYTU2Mi0xMTUyNDg2NTE5ZDgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UQTFOVGN3TkRVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2VibWwiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjUyMjliNWY2MDExNDcwYzgzNTRjMTI0NGY4ZDkxNjNkNTVhNDQwNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgV2VibWwgYmxhXG5cblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDguMC4xLlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLS1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM0ODhhZjhmLTA1NjEtNDJiMS04NDAxLTVmZjRkNjQ5NGRmZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16VTVORFV4T0RRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVJTW9kYWxQcmVzZW50YXRpb25TdHlsZUZvcm1TaGVldE9uQXBwZWFyaW5nUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMmNmOWE1OTlkZTA4YTMyMzkzZjcxYzQxNTE3ZjYzYWFmMzI5MTkyMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgVUlNb2RhbFByZXNlbnRhdGlvblN0eWxlRm9ybVNoZWV0T25BcHBlYXJpbmdSZXByb1xuXG5BIFhhbWFyaW4uRm9ybXMgc2FtcGxlIHJlcHJvZHVjaW5nIGEgYnVnIHdoZXJlIGBPbkFwcGVhcmluZ2AgZG9lcyBub3QgZmlyZSB3aXRoIGEgYFVJTW9kYWxQcmVzZW50YXRpb25TdHlsZS5Gb3JtU2hlZXRgIFBhZ2UgaXMgZGlzbWlzc2VkXG5cbiMjIFJlcHJvZHVjdGlvbiBTdGVwc1xuXG4xLiBEb3dubG9hZC9DbG9uZSB0aGlzIHJlcG9cbjIuIEluIFZpc3VhbCBTdHVkaW8sIG9wZW4gYE9uQXBwZWFyaW5nUmVwcm8uc2xuYFxuMy4gQnVpbGQvZGVwbG95IGBPbkFwcGVhcmluZ1JlcHJvLmlPU2AgdG8gYW4gaU9TIFNpbXVsYXRvciBvciBEZXZpY2VcbjQuIE9uIHRoZSBpT1MgYXBwLCBjb25maXJtIHRoZSBmb2xsb3dpbmcgYWxlcnQgYXBwZWFyczogYE9uQXBwZWFyaW5nIEZpcmVkYFxuNS4gT24gdGhlIGlPUyBhcHAsIGRpc21pc3MgdGhlIGFsZXJ0XG42LiBPbiB0aGUgaU9TIGFwcCwgY2xpY2sgdGhlIGBQdXNoIFBhZ2VgIEJ1dHRvbiB0byBwdXNoIGEgbmV3IGBDb250ZW50UGFnZWAgdmlhIGBOYXZpZ2F0aW9uLlB1c2hBc3luY2BcbjcuIE9uIHRoZSBpT1MgYXBwLCBjbGljayB0aGUgYEJhY2tgIGJ1dHRvblxuOC4gT24gdGhlIGlPUyBhcHAsIGNvbmZpcm0gdGhlIGZvbGxvd2luZyBhbGVydCBhcHBlYXJzOiBgT25BcHBlYXJpbmcgRmlyZWRgXG45LiBPbiB0aGUgaU9TIGFwcCwgZGlzbWlzcyB0aGUgYWxlcnRcbjEwLiBPbiB0aGUgaU9TIGFwcCwgY2xpY2sgdGhlIGBQdXNoIE1vZGFsIEZ1bGwgU2NyZWVuIFNoZWV0IFBhZ2VgIEJ1dHRvbiB0byBwdXNoIGEgbmV3IGBDb250ZW50UGFnZWAgdXNpbmcgYFVJTW9kYWxQcmVzZW50YXRpb25TdHlsZS5GdWxsU2NyZWVuYCB2aWEgYE5hdmlnYXRpb24uUHVzaE1vZGFsQXN5bmNgXG4xMS4gT24gdGhlIGlPUyBhcHAsIGNsaWNrIHRoZSBgQmFja2AgYnV0dG9uXG4xMi4gT24gdGhlIGlPUyBhcHAsIGNvbmZpcm0gdGhlIGZvbGxvd2luZyBhbGVydCBhcHBlYXJzOiBgT25BcHBlYXJpbmcgRmlyZWRgXG4xMy4gT24gdGhlIGlPUyBhcHAsIGRpc21pc3MgdGhlIGFsZXJ0XG4xNC4gT24gdGhlIGlPUyBhcHAsIGNsaWNrIHRoZSBgUHVzaCBNb2RhbCBGb3JtIFNoZWV0IFBhZ2VgIEJ1dHRvbiB0byBwdXNoIGEgbmV3IGBDb250ZW50UGFnZWAgdXNpbmcgYFVJTW9kYWxQcmVzZW50YXRpb25TdHlsZS5Gb3JtU2hlZXRgIHZpYSBgTmF2aWdhdGlvbi5QdXNoTW9kYWxBc3luY2BcbjE1LiBPbiB0aGUgaU9TIGFwcCwgY2xpY2sgdGhlIGBCYWNrYCBidXR0b25cbjE2LiBPbiB0aGUgaU9TIGFwcCwgY29uZmlybSB0aGUgZm9sbG93aW5nIGFsZXJ0ICpkb2VzIG5vdCogYXBwZWFyOiBgT25BcHBlYXJpbmcgRmlyZWRgXG5cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy83MzA0NjY2MS01OTM3N2M4MC0zZWI2LTExZWEtOTE2YS00OTQ0Njk5NjlkODUuZ2lmKVxuXG4jIyBFbnZpcm9ubWVudFxuXG49PT0gVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlIDIwMTkgZm9yIE1hYyA9PT1cblxuVmVyc2lvbiA4LjQuMiAoYnVpbGQgNTkpXG5JbnN0YWxsYXRpb24gVVVJRDogYTJiNmQxNzQtZTBlZS00MzhhLTllOWQtZWVjOGI4ZGQ0N2RhXG5cdEdUSysgMi4yNC4yMyAoUmFsZWlnaCB0aGVtZSlcblx0WGFtYXJpbi5NYWMgNS4xNi4xLjI1IChpc3N1ZS03NDQxLWQxNi0zLXZzbWFjIC8gODgxMTcyZTczKVxuXG5cdFBhY2thZ2UgdmVyc2lvbjogNjA2MDAwMTU1XG5cbj09PSBNb25vIEZyYW1ld29yayBNREsgPT09XG5cblJ1bnRpbWU6XG5cdE1vbm8gNi42LjAuMTU1ICgyMDE5LTA4LzI5NmE5YWZkYjI0KSAoNjQtYml0KVxuXHRQYWNrYWdlIHZlcnNpb246IDYwNjAwMDE1NVxuXG49PT0gUm9zbHluIChMYW5ndWFnZSBTZXJ2aWNlKSA9PT1cblxuMy40LjAtYmV0YTQtMTk1NjItMDUrZmY5MzBkZWM0NTY1ZTJiYzQyNGFkM2JmM2UyMmVjYjIwNTQyYzg3ZFxuXG49PT0gTnVHZXQgPT09XG5cblZlcnNpb246IDUuMy4wLjYxOTJcblxuPT09IC5ORVQgQ29yZSBTREsgPT09XG5cblNESzogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvc2RrLzMuMS4xMDEvU2Rrc1xuU0RLIFZlcnNpb25zOlxuXHQzLjEuMTAxXG5cdDMuMS4xMDBcblx0My4wLjEwMVxuXHQyLjEuODAzXG5NU0J1aWxkIFNES3M6IC9MaWJyYXJ5L0ZyYW1ld29ya3MvTW9uby5mcmFtZXdvcmsvVmVyc2lvbnMvNi42LjAvbGliL21vbm8vbXNidWlsZC9DdXJyZW50L2Jpbi9TZGtzXG5cbj09PSAuTkVUIENvcmUgUnVudGltZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5SdW50aW1lIFZlcnNpb25zOlxuXHQzLjEuMVxuXHQzLjEuMFxuXHQzLjAuMVxuXHQyLjEuMTVcblx0Mi4xLjE0XG5cbj09PSBYYW1hcmluLlByb2ZpbGVyID09PVxuXG5WZXJzaW9uOiAxLjYuMTMuMTFcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IFVwZGF0ZXIgPT09XG5cblZlcnNpb246IDExXG5cbj09PSBBcHBsZSBEZXZlbG9wZXIgVG9vbHMgPT09XG5cblhjb2RlIDExLjMuMSAoMTU3MTUpXG5CdWlsZCAxMUM1MDRcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5YYW1hcmluLk1hYyBub3QgaW5zdGFsbGVkLiBDYW4ndCBmaW5kIC9MaWJyYXJ5L0ZyYW1ld29ya3MvWGFtYXJpbi5NYWMuZnJhbWV3b3JrL1ZlcnNpb25zL0N1cnJlbnQvVmVyc2lvbi5cblxuPT09IFhhbWFyaW4uaU9TID09PVxuXG5WZXJzaW9uOiAxMy4xMC4wLjE3IChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5IYXNoOiA1ZjgwMmVmNTNcbkJyYW5jaDogeGNvZGUxMS4zXG5CdWlsZCBkYXRlOiAyMDIwLTAxLTA3IDExOjUzOjA2LTA1MDBcblxuPT09IFhhbWFyaW4gRGVzaWduZXIgPT09XG5cblZlcnNpb246IDE2LjQuMC40Nzhcbkhhc2g6IDk1ZjBhYjM2M1xuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtNFxuQnVpbGQgZGF0ZTogMjAyMC0wMS0wOCAyMzo1OTo0NiBVVENcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogMTAuMS4zLjcgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkNvbW1pdDogeGFtYXJpbi1hbmRyb2lkL2QxNi00L2Q2NmFlZDBcbkFuZHJvaWQgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vYW5kcm9pZC1zZGstbWFjb3N4XG5cdFN1cHBvcnRlZCBBbmRyb2lkIHZlcnNpb25zOlxuXHRcdDcuMCAoQVBJIGxldmVsIDI0KVxuXG5TREsgVG9vbHMgVmVyc2lvbjogMjYuMS4xXG5TREsgUGxhdGZvcm0gVG9vbHMgVmVyc2lvbjogMjkuMC41XG5TREsgQnVpbGQgVG9vbHMgVmVyc2lvbjogMjkuMC4yXG5cbkJ1aWxkIEluZm9ybWF0aW9uOiBcbk1vbm86IGZkOWYzNzlcbkphdmEuSW50ZXJvcDogeGFtYXJpbi9qYXZhLmludGVyb3AvZDE2LTRAYzRlNTY5ZlxuUHJvR3VhcmQ6IHhhbWFyaW4vcHJvZ3VhcmQvbWFzdGVyQDkwNTgzNmRcblNRTGl0ZTogeGFtYXJpbi9zcWxpdGUvMy4yOC4wQDQ2MjA0YzRcblhhbWFyaW4uQW5kcm9pZCBUb29sczogeGFtYXJpbi94YW1hcmluLWFuZHJvaWQtdG9vbHMvbWFzdGVyQDlmNGVkNGJcblxuPT09IE1pY3Jvc29mdCBNb2JpbGUgT3BlbkpESyA9PT1cblxuSmF2YSBTREs6IC9Vc2Vycy9icmFtaW4vTGlicmFyeS9EZXZlbG9wZXIvWGFtYXJpbi9qZGsvbWljcm9zb2Z0X2Rpc3Rfb3Blbmpka18xLjguMC4yNVxuMS44LjAtMjVcbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBBbmRyb2lkIFNESyBNYW5hZ2VyID09PVxuXG5WZXJzaW9uOiAxNi40LjAuOVxuSGFzaDogM2Y3MjU2ZlxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtNFxuQnVpbGQgZGF0ZTogMjAyMC0wMS0xNCAyMjoxOTowNCBVVENcblxuPT09IEFuZHJvaWQgRGV2aWNlIE1hbmFnZXIgPT09XG5cblZlcnNpb246IDE2LjQuMC4zMFxuSGFzaDogZjkxNzJlMlxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtNFxuQnVpbGQgZGF0ZTogMjAyMC0wMS0xNCAyMjoxOToyNCBVVENcblxuPT09IFhhbWFyaW4gSW5zcGVjdG9yID09PVxuXG5WZXJzaW9uOiAxLjQuM1xuSGFzaDogZGIyNzUyNVxuQnJhbmNoOiAxLjQtcmVsZWFzZVxuQnVpbGQgZGF0ZTogTW9uLCAwOSBKdWwgMjAxOCAyMToyMDoxOCBHTVRcbkNsaWVudCBjb21wYXRpYmlsaXR5OiAxXG5cbj09PSBCdWlsZCBJbmZvcm1hdGlvbiA9PT1cblxuUmVsZWFzZSBJRDogODA0MDIwMDU5XG5HaXQgcmV2aXNpb246IGViNmZjZGQ4M2EyMjc2NzhlNDg3YWE3MzNkZjNjODc0NWY1NGZhZmNcbkJ1aWxkIGRhdGU6IDIwMjAtMDEtMTcgMTI6MTI6MDIrMDBcbkJ1aWxkIGJyYW5jaDogcmVsZWFzZS04LjRcblhhbWFyaW4gZXh0ZW5zaW9uczogZWMzMmM5MDk3OGM5NGYwM2Q3MmY1MDdiMDFmNWFlZTcwOTUyY2U4N1xuXG49PT0gT3BlcmF0aW5nIFN5c3RlbSA9PT1cblxuTWFjIE9TIFggMTAuMTUuMlxuRGFyd2luIDE5LjIuMCBEYXJ3aW4gS2VybmVsIFZlcnNpb24gMTkuMi4wXG4gICAgU2F0IE5vdiAgOSAwMzo0NzowNCBQU1QgMjAxOVxuICAgIHJvb3Q6eG51LTYxNTMuNjEuMX4yMC9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImFhNWNiMjRlLWIwODYtNGI2Ni04OTk3LWU4ODA5NjJiOWU2YiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EUXhNelkxTlRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VuZC1lbWFpbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMGI3OTgyNDk5ZWI5YzIxOWU3YTNjNmRhODExMDIxYzNhYmM1NWRlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjkyZjYwZDg3LWNlN2YtNDQxMy1hYmIxLTc1NmQwZmVmNWRkNyIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56TTNNVGN4TVRZPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJ0d2VldHZlcnNlIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwNWViN2IyNzMzMTg4MmY5YzY1NjM0OWY1ODM1ZWY5MmQ2ZWIwMjAwIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBUd2VldHZlcnNlIHwgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby50d2VldHZlcnNlP2JyYW5jaE5hbWU9bWFzdGVyJldULm1jX2lkPXR3ZWV0dmVyc2UtZ2l0aHViLXNpY290aW4pXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19idWlsZC9sYXRlc3Q/ZGVmaW5pdGlvbklkPTIwJmJyYW5jaE5hbWU9bWFzdGVyJldULm1jX2lkPXR3ZWV0dmVyc2UtZ2l0aHViLXNpY290aW4pXG5cbiMjIERlcGxveSByZXNvdXJjZXNcblxuWyFbRGVwbG95IHRvIEF6dXJlXShodHRwczovL2F6dXJlZGVwbG95Lm5ldC9kZXBsb3lidXR0b24ucG5nKV0oaHR0cHM6Ly9wb3J0YWwuYXp1cmUuY29tLz9XVC5tY19pZD10d2VldHZlcnNlLWdpdGh1Yi1zaWNvdGluI2NyZWF0ZS9NaWNyb3NvZnQuVGVtcGxhdGUvdXJpL2h0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRnNpbW9uYWNvJTJGdHdlZXR2ZXJzZSUyRm1hc3RlciUyRmF6dXJlZGVwbG95Lmpzb24pXG5cbiMjIFByZXJlcXVpc2l0ZXNcblxuMS4gQSByZWNlbnQgdmVyc2lvbiBvZiBOb2RlICg4KylcblxuMS4gVlMgQ29kZTogW2hlcmVdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2Rvd25sb2FkLz9XVC5tY19pZD10d2VldHZlcnNlLWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBBenVyZSBGdW5jdGlvbnMgQ0xJOiBbaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2Z1bmN0aW9ucy1ydW4tbG9jYWw/V1QubWNfaWQ9dHdlZXR2ZXJzZS1naXRodWItc2ljb3RpbikgIFxuXG4xLiBBenVyZSBGdW5jdGlvbnMgRXh0ZW5zaW9uIGZvciBWUyBDb2RlOiBbaGVyZV0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zLz9XVC5tY19pZD10d2VldHZlcnNlLWdpdGh1Yi1zaWNvdGluJml0ZW1OYW1lPW1zLWF6dXJldG9vbHMudnNjb2RlLWF6dXJlZnVuY3Rpb25zKSAgXG5cbjEuIEF6dXJlIGFjY291bnQ6IFtoZXJlXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZW4tdXMvZnJlZS8/d3QubWNfaWQ9dHdlZXR2ZXJzZS1naXRodWItc2ljb3RpbilcblxuIyMgSG93IHRvIHJ1biB0aGlzXG5cbjEuIENsb25lIHRoaXMgcmVwb3NpdG9yeSBhbmQgY2QgaW50byAqdHdlZXR2ZXJzZSpcblxuMS4gQ3JlYXRlICpsb2NhbC5zZXR0aW5ncy5qc29uKiBmaWxlIGFuZCBhZGQ6XG5cbmBgYGpzb25cbntcbiAgXCJJc0VuY3J5cHRlZFwiOiBmYWxzZSxcbiAgXCJWYWx1ZXNcIjoge1xuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiOiBcIlwiLFxuICAgIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCI6IFwibm9kZVwiLFxuICAgIFwiQkVBUkVSX1RPS0VOXCI6XCJZT1VSLVRXSVRURVItVE9LRU4tSEVSRVwiLFxuICAgIFwiVEVYVF9BTkFMWVRJQ1NfQVBJX0tFWVwiOlwiWU9VUi1BUElfS0VZLUhFUkVcIixcbiAgICBcIlNMQUNLX0FQSV9VUkxcIjpcIllPVVItVVJMLUhFUkVcIixcbiAgfVxufVxuYGBgXG5cbjEuIFJ1biBgYGBucG0gaWBgYCBhbmQgYGBgbnBtIHN0YXJ0YGBgXG5cblxu8J+Zi/Cfj7wgSGFwcHkgY29kaW5nISDwn5mL8J+PvCIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwNzI4Zjk3NS04YmEwLTQzMjItYmQzOS03YWE2MzQxZTY2YjMiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ETXhOekUzTnpFPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJncmFwaGxlc3MiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogIjgyOGJlN2RiZDZlOWEwZDZkMGRiNDczZjAxY2JmODNiYTlkMTZjNTkiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIEdyYXBobGVzc1xuXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2FwaXMvYnVpbGQvc3RhdHVzL3NpbW9uYWNvLmdyYXBobGVzcz9icmFuY2hOYW1lPW1hc3RlciZXVC5tY19pZD1ncmFwaGxlc3MtZ2l0aHViLXNpY290aW4pXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19idWlsZC9sYXRlc3Q/ZGVmaW5pdGlvbklkPTI3JmJyYW5jaE5hbWU9bWFzdGVyJldULm1jX2lkPWdyYXBobGVzcy1naXRodWItc2ljb3RpbilcblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBBIHJlY2VudCB2ZXJzaW9uIG9mIFtOb2RlXShodHRwczovL25vZGVqcy5vcmcvZW4vZG93bmxvYWQpICg4KylcblxuMS4gW0F6dXJlIEZ1bmN0aW9ucyBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtcnVuLWxvY2FsP1dULm1jX2lkPWdyYXBocWxlc3MtZ2l0aHViLXNpY290aW4pXG5cbjEuIFtGcmVlIEF6dXJlIEFjY291bnRdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9lbi11cy9mcmVlLz93dC5tY19pZD1ncmFwaGxlc3MtZ2l0aHViLXNpY290aW4pXG5cblxuIyMgU2V0dXAgQXp1cmUgUGlwZWxpbmVzXG5cbjEuIENyZWF0ZSBTZXJ2aWNlIENvbm5lY3Rpb24gXG4xLiBTZXQgdmFyaWFibGVzOiBQYXJhbWV0ZXJzLkNvbm5lY3RlZFNlcnZpY2VOYW1lICIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkMmM4OGRjYy04NjEwLTQ0NjItYjc2Yy1hZWVhN2Y4NDMyZDIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qYzNNREUxTlRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiMjVkYXlzb2ZzZXJ2ZXJsZXNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjAzNTBiYjJjYzUyYzRmMjVmNzM4ZjY4OGU2NjAzODk0NWJmN2M3YzMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIDI1ZGF5c29mc2VydmVybGVzc1xuXG4xLiBJbiB0aGUgQXp1cmUgUG9ydGFsOlxuQ3JlYXRlIGEgZnVuY3Rpb24gYXBwIHdoaWNoIHlvdSB3aWxsIHVzZSBpbiB0aGUgbmV4dCBzdGVwc1xuVW5kZXIgdGhlIGFzc29jaWF0ZWQgc3RvcmFnZSBhY2NvdW50IGZvciB0aGUgZnVuY3Rpb24gY3JlYXRlIGEgY29udGFpbmVyIG5hbWVkIGBqb2tlc2BcblxuMS4gQ2xvbmUgcmVwb1xuYGBgYmFzaFxuZ2l0IGNsb25lIGdpdEBnaXRodWIuY29tOnNpbW9uYWNvLzI1ZGF5c29mc2VydmVybGVzcy5naXRcbmNkIDI1ZGF5c29mc2VydmVybGVzc1xubnB4IGZ1bmMgYXp1cmUgZnVuY3Rpb25hcHAgcHVibGlzaCA8eW91ci1mdW5jdGlvbi1uYW1lPiAtLXB5dGhvblxuYGBgXG5cbjEuIFRyYWluIHRoZSBtb2RlbCB0aGF0IHlvdSB3aWxsIHVwbG9hZCB0byB0aGUgY3JlYXRlZCBzdG9yYWdlIGNvbnRhaW5lclxuYGBgYmFzaFxucHl0aG9uMy43IC1tIHZlbnYgLnZlbnZcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbnBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQgICMgaW5zaWRlIHRoZSAyNWRheXNvZnNlcnZlcmxlc3MgZm9sZGVyXG5weXRob24gY3JlYXRlX21vZGVsLnB5ICAgICAgICAjIHRyYWlucyB0aGUgbW9kZWwgZm9yIHRoYXQgeW91IHdpbGwgdXNlIGZvciB5b3VyIEFQSVxuYGBgXG5cbjEuIEdvIHRvIHRoZSBzdG9yYWdlIHNlY3Rpb24gaW4gdGhlIGF6dXJlIHBvcnRhbCBhbmQgdXBsb2FkIHRoZSByZXN1bHRpbmcgYHRleHRnZW5ybm5fd2VpZ2h0cy5oZGY1YFxuXG4xLiBUaGlzIHNob3VsZCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiB0byBleGVjdXRlLiBJZiBldmVyeXRoaW5nIGhhcyB3b3JrZWQgdGhlbiB5b3Ugc2hvdWxkIHNlZSBubyBlcnJvcnMgaW4gdGhlIExpdmUgTWV0cmljcyBzdHJlYW0uXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMjUwMTQ4ZDktYTBmMC00OTNlLWIzYTYtNWRiOTUwZTU2ZGNlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16ZzNNREl3TkRJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctZ29vZHJlYWRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgwOTJlYzQ0OWVlOTQwMTU1OGIwMzBjODRlOTQ2ZmNkNmViNzZmZjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIE5nR29vZHJlYWRzXG4jIEhlbGxvIGV2ZXJ5b25lLCB3ZWxjb21lIHRvIHRoZSB3b3Jrc2hvcFxuXG4jIFlvdSBjYW4gZmluZCB0aGUgd29ya3Nob3AgY29udGVudCBbaGVyZV0oaHR0cHM6Ly90cnVzdGluZy13aWxlcy1hZDhlZjcubmV0bGlmeS5jb20vKVxuXG5XZSB3aWxsIGJ1aWxkIGEgYm9va3N0b3JlIG1hbmFnZW1lbnQgYmFzaWMgVUkuXG5XZSB3aWxsIHVzZSBhIHByZXNldCBkYXRhYmFzZSBvZiBib29rcyB3aXRoIH4xMGsgYm9va3MgdG8gaGF2ZSBhIGZlZWxpbmcgb2YgYSBtb3JlIHJlYWxpc3RpYyBhcHAuXG5cbldoYXQgd2Ugd2FudCB0byBkbyBpcyBkaXNwbGF5IHRoZSBkYXRhLCBzZWFyY2ggdGhlIGRhdGEgYW5kIGFkZCBiYXNpYyBDUlVEIG9wZXJhdGlvbnMgb24gaXQuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlZDE3NWRiOC03ZTU0LTQxOTEtYWYxNy0zMDg4NmJlMzFlM2EiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5URXdOamMwTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYXp1cmUtc3RhcnR1cHMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTdjOTVlMThiZmI0NTU1OWU2YzM0MjZmZDJkYWFkMjU2NWIzNWViMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQXdlc29tZSByZXNvdXJjZXMgZm9yIHN0YXJ0dXBzXG5cbiMjIOKYge+4jyBGcmVlIENsb3VkIFNlcnZpY2VzXG5cbkF6dXJlIEZyZWUgU2VydmljZXMg4oCTIFttYWluIHBhZ2VdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9mcmVlP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKSAmIFtGQVFdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9mcmVlL2ZyZWUtYWNjb3VudC1mYXEvP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKS4gRmV3IG5vdGFibGUgc2VydmljZXM6XG5cbjEuIENvZ25pdGl2ZSBBUElzIGZvciBidWlsZGluZyBpbnRlbGxpZ2VudCBhcHBsaWNhdGlvbnMgd2l0aCBbQXp1cmUgQ29nbml0aXZlIFNlcnZpY2VzXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vc2VydmljZXMvY29nbml0aXZlLXNlcnZpY2VzLz9XVC5tY19pZD1wYXJ0bmVycy1naXRodWItc2ljb3RpbilcblxuMS4gR2xvYmFsbHkgZGlzdHJpYnV0ZWQsIG11bHRpLW1vZGVsIGRhdGFiYXNlIHdpdGggW0F6dXJlIENvc21vcyBEQl0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL3VwZGF0ZXMvYXp1cmUtY29zbW9zLWRiLWZyZWUtdGllci1pcy1ub3ctYXZhaWxhYmxlLz9XVC5tY19pZD1wYXJ0bmVycy1naXRodWItc2ljb3RpbilcblxuMS4gU2VydmVybGVzcyBGdW5jdGlvbnMgd2l0aCBbQXp1cmUgRnVuY3Rpb25zXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1mdW5jdGlvbnMvP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBDb250aW51b3VzIEludGVncmF0aW9uIGFuZCBDb250aW5vdXMgRGVsaXZlcnkgKENJQ0QpIHdpdGggW0F6dXJlIERldk9wc10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL3NlcnZpY2VzL2Rldm9wcy8/V1QubWNfaWQ9cGFydG5lcnMtZ2l0aHViLXNpY290aW4pXG5cbjEuIChDb250YWluZXJzKSBbQXp1cmUgS3ViZXJuZXRlcyBTZXJ2aWNlXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vc2VydmljZXMva3ViZXJuZXRlcy1zZXJ2aWNlLz9XVC5tY19pZD1wYXJ0bmVycy1naXRodWItc2ljb3RpbilcblxuIyMg8J+nsCBGcmVlIFRvb2xzXG5cbjEuIE9ubGluZSBjb2xsYWJvcmF0aW9uIHdpdGggW1ZTIENvZGUgTGl2ZSBTaGFyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vdmlzdWFsc3R1ZGlvL2xpdmVzaGFyZS9xdWlja3N0YXJ0L2Jyb3dzZXItam9pbj9XVC5tY19pZD1wYXJ0bmVycy1naXRodWItc2ljb3RpbilcblxuMS4gQXV0b21hdGVkIFdvcmtmbG93cyB3aXRoIFtHaXRodWIgQWN0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL2ZlYXR1cmVzL2FjdGlvbnMpXG5cbjEuIFBhY2thZ2UgUmVnaXN0cnkgd2l0aCBbR2l0aHViIFBhY2thZ2VzXShodHRwczovL2dpdGh1Yi5jb20vZmVhdHVyZXMvcGFja2FnZXMpXG5cbiMjIPCfk5ogTGVhcm5pbmdcblxuMS4gW0Rlc2lnbmluZyBEaXN0cmlidXRlZCBTeXN0ZW1zXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vcmVzb3VyY2VzL2Rlc2lnbmluZy1kaXN0cmlidXRlZC1zeXN0ZW1zP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKSBieSBCcmVuZGFuIEJ1cm5zLCBjb2ZvdW5kZXIgb2YgdGhlIEt1YmVybmV0ZXMgcHJvamVjdFxuXG4xLiBbQXp1cmUgU2VydmVybGVzcyBDb29rYm9va10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL3Jlc291cmNlcy9henVyZS1zZXJ2ZXJsZXNzLWNvbXB1dGluZy1jb29rYm9vay8/V1QubWNfaWQ9cGFydG5lcnMtZ2l0aHViLXNpY290aW4pXG5cbjEuIFtQbHVyYWxzaWdodCBjb3Vyc2VzIG9uIEF6dXJlXShodHRwczovL3d3dy5wbHVyYWxzaWdodC5jb20vcGFydG5lcnMvbWljcm9zb2Z0L2F6dXJlKVxuXG4xLiBbTWljcm9zb2Z0IExlYXJuXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9sZWFybi9icm93c2UvP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjg2ODc5YjhhLTcyODMtNGZiOC1iNWUzLTY1OTBjNGRlNTllMSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5USTBNekUzTURnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZHVyYWJsZWRheXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMWEyYTk0OTA2OTkwMjFhYTY2ZjY1YjFhOTc3MDVlNGVjODc2Y2M4MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIjxoMSBhbGlnbj1cImNlbnRlclwiPldlbGNvbWUgdG8gRHVyYWJsZSBEYXlzIPCfkYs8L2gxPlxuPHA+XG4gIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vZHVyYWJsZWRheXMvYmxvYi9tYXN0ZXIvTElDRU5TRVwiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgIDxpbWcgYWx0PVwiTGljZW5zZTogTUlUXCIgc3JjPVwiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9MaWNlbnNlLU1JVC15ZWxsb3cuc3ZnXCIgLz5cbiAgPC9hPlxuICA8YSBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9zaW1vbmFfY290aW5cIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICA8aW1nIGFsdD1cIlR3aXR0ZXI6IHNpbW9uYV9jb3RpblwiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vdHdpdHRlci9mb2xsb3cvc2ltb25hX2NvdGluLnN2Zz9zdHlsZT1zb2NpYWxcIiAvPlxuICA8L2E+XG48L3A+XG5cbj4gMzAgRGF5cyBvZiBEdXJhYmxlIGNoYWxsZW5nZVxuXG5UbyBsZWFybiBtb3JlIGFib3V0IER1cmFibGUgRnVuY3Rpb25zIGNoZWNrb3V0IHRoaXMgW292ZXJ2aWV3XShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1mdW5jdGlvbnMvZHVyYWJsZS8/V1QubWNfaWQ9ZHVyYWJsZWRheXMtZ2l0aHViLXNpY290aW4pXG5cbjEuIFNjaGVkdWxlciBBUEkgaW1wbGVtZW50ZWQgdXNpbmcgRHVyYWJsZSBGdW5jdGlvbnMgW1RpbWVyc10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2R1cmFibGUvZHVyYWJsZS1mdW5jdGlvbnMtdGltZXJzP3RhYnM9amF2YXNjcmlwdCZXVC5tY19pZD1kdXJhYmxlZGF5cy1naXRodWItc2ljb3RpbilcblxuMS4gSW1wbGVtZW50IFthdXRvbWF0aWMgcmV0cnkgb24gZmFpbHVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2R1cmFibGUvZHVyYWJsZS1mdW5jdGlvbnMtZXJyb3ItaGFuZGxpbmc/dGFicz1qYXZhc2NyaXB0I2F1dG9tYXRpYy1yZXRyeS1vbi1mYWlsdXJlJldULm1jX2lkPWR1cmFibGVkYXlzLWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBTdGF0dXMgQVBJIGltcGxlbWVudGVkIHVzaW5nIFtIVFRQIHRyaWdnZXJdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtYmluZGluZ3MtaHR0cC13ZWJob29rP1dULm1jX2lkPWR1cmFibGVkYXlzLWdpdGh1Yi1zaWNvdGluKSBhbmQgW1RhYmxlIFN0b3JhZ2VdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtYmluZGluZ3Mtc3RvcmFnZS10YWJsZT90YWJzPWphdmFzY3JpcHQmV1QubWNfaWQ9ZHVyYWJsZWRheXMtZ2l0aHViLXNpY290aW4jaW5wdXQpXG5cbiMjIEF1dGhvclxuXG7wn5GkICoqU2ltb25hIENvdGluKipcblxuLSBUd2l0dGVyOiBbQHNpbW9uYV9jb3Rpbl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9zaW1vbmFfY290aW4pXG4tIEdpdGh1YjogW0BzaW1vbmFjb10oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvKVxuXG4jIyDwn6SdIENvbnRyaWJ1dGluZ1xuXG5Db250cmlidXRpb25zLCBpc3N1ZXMgYW5kIGZlYXR1cmUgcmVxdWVzdHMgYXJlIHdlbGNvbWUhPGJyIC8+RmVlbCBmcmVlIHRvIGNoZWNrIFtpc3N1ZXMgcGFnZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL2R1cmFibGVkYXlzL2lzc3VlcykuXG5cbiMjIFNob3cgeW91ciBzdXBwb3J0XG5cbkdpdmUgYSDirZDvuI8gaWYgdGhpcyBwcm9qZWN0IGhlbHBlZCB5b3UhXG5cbiMjIPCfk50gTGljZW5zZVxuXG5Db3B5cmlnaHQgwqkgMjAyMCBbU2ltb25hIENvdGluXShodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28pLjxiciAvPlxuVGhpcyBwcm9qZWN0IGlzIFtNSVRdKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9kdXJhYmxlZGF5cy9ibG9iL21hc3Rlci9MSUNFTlNFKSBsaWNlbnNlZC5cblxuLS0tXG5cbl9UaGlzIFJFQURNRSB3YXMgZ2VuZXJhdGVkIHdpdGgg4p2k77iPIGJ5IFtyZWFkbWUtbWQtZ2VuZXJhdG9yXShodHRwczovL2dpdGh1Yi5jb20va2VmcmFuYWJnL3JlYWRtZS1tZC1nZW5lcmF0b3IpX1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY3MGU4YTAyLTY2MWQtNGZjYy1iMjBkLTE1YTNmMjk3MjkyMiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qRTROalF5TXpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZUNTaGFycE1hcmt1cCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0NmIwYjZhMjg0Y2MwNDZmZTJjODcwZThiYmUxNzAzOWUwZWM1ZjM1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBTaW1wbGUgQyMgTWFya3VwXG4gQSBYYW1hcmluLkZvcm1zIGFwcCBkZW1vbnN0cmF0aW5nIFtDIyBNYXJrdXAgRXh0ZW5zaW9uc10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi94YW1hcmluLWZvcm1zL3VzZXItaW50ZXJmYWNlL2NzaGFycC1tYXJrdXAvP1dULm1jX2lkPVNpbXBsZUNTaGFycE1hcmt1cC1naXRodWItYnJhbWluKSwgYSBuZXcgd2F5IHRvIGNyZWF0ZSBmbHVlbnQgWGFtYXJpbi5Gb3JtcyBVSXMgaW4gQyMuXG4gXG5UaGlzIHNhbXBsZSB3YXMgY3JlYXRlZCBsaXZlIGR1cmluZyB0aGUgW0NvbG9nbmUgWGFtYXJpbiBVc2VyIEdyb3VwIG9uIDA2IE1heSAyMDIwXShodHRwczovL2NvZGV0cmF2ZWxlci5pby9jb2xvZ25lLWNzaGFycC11aS8pOlxuXG48cCBhbGlnbj1cImNlbnRlclwiPlxuICA8YSBocmVmPVwiaHR0cHM6Ly90ZWNobmljYWx2aWRlb3NzdG9yYWdlLmJsb2IuY29yZS53aW5kb3dzLm5ldC9hc3NldC1lODc4YTVlNi1jYjQ1LTQ4YjItYjQ0NC1jNGU5ZTJmYjdiYTkvQ3JlYXRpbmclMjBVSXMlMjBpbiUyMENTaGFycC5tcDQ/c3Y9MjAxNy0wNC0xNyZzcj1jJnNpPTMxOGU3NTI0LTY3MDItNDM0My05ZWUyLWQ5MmVkNjI4OTEwYyZzaWc9TTdHWE43S3UxUGZndVJZNWtUdkY4T2hpUDRFRkYyUWw0b0lwN2lheW51byUzRCZzdD0yMDIwLTA1LTA3VDIwJTNBMTElM0E1N1omc2U9MjEyMC0wNS0wN1QyMCUzQTExJTNBNTdaXCI+XG4gICAgPGltZyBzcmM9XCJodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy84MTIyNTc2OS1hMTJlNmIwMC04ZjllLTExZWEtODkxMy1kYjQzYzM5ZGRmMTIucG5nXCIgaGVpZ2h0PVwiMjUwXCIvPiBcbiA8L2E+XG48L3A+XG4gXG58IFhhbWFyaW4uRm9ybXMgQyMgVUkgfCBEZW1vIHxcbnwgLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0gfFxufCAhW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvODEyMjI3NDYtYTUwYmJlODAtOGY5OS0xMWVhLTk1MDEtY2M3OTQ0MjFmOWM4LnBuZykgfCAhW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvODEyMjMwNjUtMzg0NGY0MDAtOGY5YS0xMWVhLTk5NDctZGIzMzliYTdlODZkLmdpZikgfFxuXG4jIyMgQyMgTWFya3VwIFNhbXBsZSBBcHBzXG5cbi0gW0dpdFRyZW5kc10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9HaXRUcmVuZHMpIC0gQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCB0byBtb25pdG9yIHRoZSB2aWV3cyBhbmQgY2xvbmVzIG9mIHlvdXIgR2l0SHViIHJlcG9zLiBBdmFpbGFibGUgb24gdGhlIGlPUyBBcHAgU3RvcmUgJiBHb29nbGUgUGxheSBTdG9yZS5cbi0gW1hhbUNvbnZlcnRlcl0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9YYW1Db252ZXJ0ZXIpIC0gQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCBjcmVhdGVkIGluIFhhbWFyaW4uRm9ybXMgdXNpbmcgXG5cbiMjIyBMZWFybiBNb3JlXG5cbi0gW0MjIE1hcmt1cCBFeHRlbnNpb25zXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS94YW1hcmluL3hhbWFyaW4tZm9ybXMvdXNlci1pbnRlcmZhY2UvY3NoYXJwLW1hcmt1cC8/V1QubWNfaWQ9U2ltcGxlQ1NoYXJwTWFya3VwLWdpdGh1Yi1icmFtaW4pXG4tIFtNb2JpbGUgQmxhem9yIEJpbmRpbmdzXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9tb2JpbGUtYmxhem9yLWJpbmRpbmdzLz9XVC5tY19pZD1TaW1wbGVDU2hhcnBNYXJrdXAtZ2l0aHViLWJyYW1pbilcbi0gW0NvbWV0XShodHRwczovL2dpdGh1Yi5jb20vQ2xhbmNleS9Db21ldClcbi0gW09yaWdpbmFsIENTaGFycEZvck1hcmt1cCBieSBWaW5jZW50IEhvb2dlbmRvb3JuXShodHRwczovL2dpdGh1Yi5jb20vVmluY2VudEgtTmV0L0NTaGFycEZvck1hcmt1cClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlOWNmZjJhNy0zMzllLTRlZDgtOWRkZS1lZTc5NDViMjExZjIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UUTJNekExTVRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2NoZWR1bGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI1NDI1NGUxNDBhNjUxNGIwZWJjYWE4ZWVjMGU3YTE4ZDc3ODBjZjkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFNjaGVkdWxlclxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gOC4zLjIxLlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLS1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImUzZmU4NzU2LTU0YTktNDA5OC04NzRjLTVmZjE3Mjk2ZWJkYiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qSTVNRGMxTnpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdFN0YXR1cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyMTA3ODA2YTY4ZjA3ZGVjZjgwNTYxNzI0ZTJiODM5YTUzMjkxMGY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBHaXRTdGF0dXNcbkFuIGlPUyBhbmQgQW5kcm9pZCBhcHAgdG8gcmV0cmlldmUgdGhlIGN1cnJlbnQgR2l0SHViIEFQSSBSYXRlIExpbWl0IHN0YXR1c1xuXG5HaXRIdWIgQVBJcyBoYXZlIGEgcmF0ZS1saW1pdCBvZiA1MDAwIHJlcXVlc3RzIHBlciB1c2VyIHBlciBob3VyLiBUaGlzIGFwcCBjYW4gYmUgdXNlZCB0byB1bmRlcnN0YW5kIHVzZXJzJyBjdXJyZW50IEdpdEh1YiBBUEkgUmF0ZSBMaW1pdCBzdGF0dXMuXG5cbk1vcmUgSW5mb3JtYXRpb24gb24gR2l0SHViIEFQSSBSYXRlIExpbWl0aW5nOiBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzLyNyYXRlLWxpbWl0aW5nXG5cbjxpbWcgc3JjPVwiaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvODE1ODI4MDUtNGUyMTMzMDAtOTM2NS0xMWVhLTlmYTctZGFhMDUzYTFmZjdkLmpwZWdcIiBoZWlnaHQ9XCI2MDBcIiAvPlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjgyZDEwN2Y1LTIwYmUtNGNkMi05MDAzLTUzNDQ0YzgyM2I1NyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qYzJOekV6TkRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkV4cGFuZGVyU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4OWMxODYzYTI0NGJmYWIwNzE2NDRmODFjOTQxZmQxNzAzN2NmYWQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEV4cGFuZGVyU2FtcGxlXG5BIGRlbW9uc3RyYXRpb24gb2YgWGFtYXJpbi5Gb3Jtcy5FeHBhbmRlclxuXG4hW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvODMxODIwNjEtOWQ0M2MzODAtYTBkYS0xMWVhLTlmMDAtOWVjMWI4MjMwMDFkLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwNjEyYmUyNy0wZTNiLTRjODUtOTU5My01OGE0M2NkNjBiZTkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qazBOVFk0TlRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldlYkF1dGhlbnRpY2F0b3JSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkOTRiOGMxOGU0MjUwY2I2ZjJkNjVlMTE2Zjk1ZjQ1NmIxOWMzNGViIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBXZWJBdXRoZW50aWNhdG9yUmVwcm9cblxuT24gQW5kcm9pZCwgd2hlbiBgWGFtYXJpbi5Fc3NlbnRpYWxzLldlYkF1dGhlbnRpY2F0b3IuQXV0aGVudGljYXRlQXN5bmNgIHJldHVybnMgZnJvbSBhIHN1Y2Nlc3NmdWwgYXV0aGVudGljYXRpb24sIGl0IGFsd2F5cyB0aHJvd3MgYFN5c3RlbS5UaHJlYWRpbmcuVGFza3MuVGFza0NhbmNlbGVkRXhjZXB0aW9uYDpcblxuKipOb3RlOioqIFRoaXMgYEV4Y2VwdGlvbmAgZG9lcyBub3QgaGFwcGVuIG9uIGlPU1xuXG5gYGBiYXNoXG5bbW9uby1ydF0gW0VSUk9SXSBGQVRBTCBVTkhBTkRMRUQgRVhDRVBUSU9OOiBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzLlRhc2tDYW5jZWxlZEV4Y2VwdGlvbjogQSB0YXNrIHdhcyBjYW5jZWxlZC5cblttb25vLXJ0XSAgIGF0ICh3cmFwcGVyIGR5bmFtaWMtbWV0aG9kKSBBbmRyb2lkLlJ1bnRpbWUuRHluYW1pY01ldGhvZE5hbWVDb3VudGVyLjEoaW50cHRyLGludHB0cilcblttb25vLXJ0XSAgIGF0ICh3cmFwcGVyIG5hdGl2ZS10by1tYW5hZ2VkKSBBbmRyb2lkLlJ1bnRpbWUuRHluYW1pY01ldGhvZE5hbWVDb3VudGVyLjEoaW50cHRyLGludHB0cilcbmBgYFxuXG4jIyBSZXByb2R1Y2l0b24gU3RlcHNcblxuMS4gRG93bmxvYWQvQ2xvbmUgdGhpcyByZXBvXG4yLiBJbiBWaXN1YWwgU3R1ZGlvLCBvcGVuIGBXZWJBdXRoZW50aWNhdG9yUmVwcm8uc2xuYFxuMy4gSW4gVmlzdWFsIFN0dWRpbywgc2V0IHRoZSBzdGFydHVwIHByb2plY3QgdG8gV2ViQXV0aGVudGljYXRvci5BbmRyb2lkXG40LiBJbiBWaXN1YWwgU3R1ZGlvLCBidWlsZC9kZXBsb3kgV2ViQXV0aGVudGljYXRvci5BbmRyb2lkIHRvIGFuIEFuZHJvaWQgRGV2aWNlL0VtdWxhdG9yIFxuNS4gT24gdGhlIEFuZHJvaWQgZGV2aWNlLCBjbGljayBgQ29ubmVjdCB0byBHaXRIdWJgXG42LiBPbiB0aGUgQW5kcm9pZCBkZXZpY2UsIGNvbm5lY3QgdXNpbmcgeW91ciBHaXRIdWIgdXNlcm5hbWUvcGFzc3dvcmRcbjcuIENvbmZpcm0gV2ViQXV0aGVudGljYXRvci5BbmRyb2lkIGNyYXNoZXMgd2l0aCBgU3lzdGVtLlRocmVhZGluZy5UYXNrcy5UYXNrQ2FuY2VsZWRFeGNlcHRpb25gXG5cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy84MzgwNzM0Mi1jN2FiZjg4MC1hNjY3LTExZWEtOWFjNS05NjJhYmI2ZWYwNWQuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU3OTAwNDJiLWZmNzEtNDU0OS04Mjc4LTA0ZTVkOWM1MTRlMiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56WTNOVEEwTXpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3Qm91bmRzRXhjZXB0aW9uUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODM1OGI0YTlhMjI5ZTU4MTczMzUxNzdkZjUxYzk3MjcxMjUwMWY4NCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ29sbGVjdGlvblZpZXdCb3VuZHNFeGNlcHRpb25SZXByb1xuXG5SZXByb2R1Y3Rpb24gU2FtcGxlIGZvciBYYW1hcmluLkZvcm1zLkNvbGxlY3Rpb25WaWV3IGBOU1JhbmdlRXhjZXB0aW9uYDpcblxuYGBgYmFzaFxuT2JqZWN0aXZlLUMgZXhjZXB0aW9uIHRocm93bi4gIE5hbWU6IE5TUmFuZ2VFeGNlcHRpb24gUmVhc29uOiAqKiogLVtfX05TQXJyYXlNIG9iamVjdEF0SW5kZXg6XTogaW5kZXggMCBiZXlvbmQgYm91bmRzIGZvciBlbXB0eSBhcnJheVxuYGBgXG5cbiMjIyBSZXByb2R1Y3Rpb24gU3RlcHNcblxuMS4gRG93bmxvYWQgLyBjbG9uZSB0aGlzIHJlcG9cbjIuIEluIFZpc3VhbCBTdHVkaW8sIG9wZW4gYENvbGxlY3Rpb25WaWV3Qm91bmRzRXhjZXB0aW9uUmVwcm8uc2xuYFxuMy4gSW4gVmlzdWFsIFN0dWRpbywgYnVsZC9kZXBsb3kgYENvbGxlY3Rpb25WaWV3Qm91bmRzRXhjZXB0aW9uUmVwcm8uaU9TYCB0byBhbiBpT1MgU2ltdWxhdG9yIG9yIERldmljZSBcbjQuIENvbmZpcm0gYE5TUmFuZ2VFeGNlcHRpb25gIGlzIHRocm93biBvbiBsYXVuY2hcblxuIyMgV29yayBBcm91bmRzXG5cbiMjIyMgT3B0aW9uICMxLiBEb3duZ3JhZGUgWGFtYXJpbi5Gb3Jtc1xuXG5Eb3duZ3JhZGUgdG8gWGFtYXJpbi5Gb3JtcyB2NC43LjAuOTM3LXByZTRcblxuIyMjIyBPcHRpb24gIzIuIFJlbW92ZSBDb2xsZWN0aW9uVmlldy5Gb290ZXJcblxuU2V0IGBDb2xsZWN0aW9uVmlldy5Gb290ZXIgPSBudWxsYFxuXG4xLiBJbiBgQ29sbGVjdGlvblZpZXdQYWdlLmNzYCwgY2hhbmdlIGBGb290ZXIgPSBuZXcgQm94VmlldyB7IEJhY2tncm91bmRDb2xvciA9IENvbG9yLlJlZCwgSGVpZ2h0UmVxdWVzdCA9IDUzIH1gIHRvIGBGb290ZXIgPSBudWxsYFxuXG5odHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL0NvbGxlY3Rpb25WaWV3Qm91bmRzRXhjZXB0aW9uUmVwcm8vYmxvYi84YTY2MzZkN2FmNTdmMjg5MTEzZTgwMGNmYTBkMDE2MGNhZDc4ZDZkL1NyYy9Db2xsZWN0aW9uVmlld0JvdW5kc0V4Y2VwdGlvblJlcHJvL0NvbGxlY3Rpb25WaWV3UGFnZS5jcyNMMTdcblxuIyMjIyBPcHRpb24gIzMuIFJlcGxhY2UgYElFbnVtZXJhYmxlPGludD5gIHdpdGggYE9ic2VydmFibGVDb2xsZWN0aW9uPGludD5gXG5cbjEuIEluIGBDb2xsZWN0aW9uVmlld01vZGVsLmNzYCwgcmVtb3ZlIGBwdWJsaWMgSUVudW1lcmFibGU8aW50PiBTY29yZUNvbGxlY3Rpb25MaXN0YFxuMi4gSW4gYENvbGxlY3Rpb25WaWV3TW9kZWwuY3NgLCByZW1vdmUgYElFbnVtZXJhYmxlPGludD4/IF9zY29yZUNvbGxlY3Rpb25MaXN0O2BcbjMuIEluIGBDb2xsZWN0aW9uVmlld01vZGVsLmNzYCwgYWRkIGBwdWJsaWMgT2JzZXJ2YWJsZUNvbGxlY3Rpb248aW50PiBTY29yZUNvbGxlY3Rpb25MaXN0IHsgZ2V0OyB9ID0gbmV3IE9ic2VydmFibGVDb2xsZWN0aW9uPGludD4oKWBcbjQuIEluIGBDb2xsZWN0aW9uVmlld01vZGVsLmNzYCwgaW4gYEV4ZWN1dGVSZWZyZXNoQ29tbWFuZGAgcmVmYWN0b3IgbG9naWMgZm9yIGBPYnNlcnZhYmxlQ29sbGVjdGlvbmAgOiBcblxuUmVwbGFjZSB0aGlzIGNvZGU6XG5cbmBgYGNzaGFycFxudm9pZCBFeGVjdXRlUmVmcmVzaENvbW1hbmQoKVxue1xuICAgIFNjb3JlQ29sbGVjdGlvbkxpc3QgPSBFbnVtZXJhYmxlLlJhbmdlKDAsIDEwMCkuVG9MaXN0KCk7XG4gICAgSXNSZWZyZXNoaW5nID0gZmFsc2U7XG59XG5gYGBcblxud2l0aCB0aGlzIGNvZGU6XG5cbmBgYGNzaGFycFxudm9pZCBFeGVjdXRlUmVmcmVzaENvbW1hbmQoKVxue1xuICAgIGZvcmVhY2ggKHZhciBudW1iZXIgaW4gRW51bWVyYWJsZS5SYW5nZSgwLCAxMDApKVxuICAgICAgICBTY29yZUNvbGxlY3Rpb25MaXN0LkFkZChudW1iZXIpO1xuXG4gICAgSXNSZWZyZXNoaW5nID0gZmFsc2U7XG59XG5gYGBcblxuIyMjIFNjcmVlbnNob3RzXG5cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy84NjUwMTE2NS0zZjQ2NzM4MC1iZDRiLTExZWEtOWNhNi01MDZhMTYyY2FjNDcuZ2lmKVxuXG4jIyMgRW52aXJvbm1lbnRcblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE5IGZvciBNYWMgKFByZXZpZXcpID09PVxuXG5WZXJzaW9uIDguNyBQcmV2aWV3ICg4LjcgYnVpbGQgMTgwMilcbkluc3RhbGxhdGlvbiBVVUlEOiBlYzAxMjc0Ni03YmNjLTQ3YmMtYmJhOS1lOWI1YWRlNGJkYzdcblx0R1RLKyAyLjI0LjIzIChSYWxlaWdoIHRoZW1lKVxuXHRYYW1hcmluLk1hYyA2LjE4LjAuMjMgKGQxNi02IC8gMDg4YzczNjM4KVxuXG5cdFBhY2thZ2UgdmVyc2lvbjogNjEyMDAwMDc0XG5cbj09PSBNb25vIEZyYW1ld29yayBNREsgPT09XG5cblJ1bnRpbWU6XG5cdE1vbm8gNi4xMi4wLjc0ICgyMDIwLTAyL2U5ZDNhZjUwOGU0KSAoNjQtYml0KVxuXHRQYWNrYWdlIHZlcnNpb246IDYxMjAwMDA3NFxuXG49PT0gUm9zbHluIChMYW5ndWFnZSBTZXJ2aWNlKSA9PT1cblxuMy43LjAtMy4yMDMxMi4zK2VjNDg0MTI2MzU5MGY1NDU2ZTMyNzI4ZDk4MDk3ZTk3YzE2MDVlMjJcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA1LjcuMC42NjUzXG5cbj09PSAuTkVUIENvcmUgU0RLID09PVxuXG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay81LjAuMTAwLXByZXZpZXcuNi4yMDMxOC4xNS9TZGtzXG5TREsgVmVyc2lvbnM6XG5cdDUuMC4xMDAtcHJldmlldy42LjIwMzE4LjE1XG5cdDMuMS4zMDFcblx0My4xLjMwMFxuXHQzLjEuMjAyXG5cdDMuMS4yMDBcblx0My4xLjEwMlxuXHQzLjAuMTAxXG5cdDIuMS44MDNcbk1TQnVpbGQgU0RLczogL0xpYnJhcnkvRnJhbWV3b3Jrcy9Nb25vLmZyYW1ld29yay9WZXJzaW9ucy82LjEyLjAvbGliL21vbm8vbXNidWlsZC9DdXJyZW50L2Jpbi9TZGtzXG5cbj09PSAuTkVUIENvcmUgUnVudGltZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5SdW50aW1lIFZlcnNpb25zOlxuXHQ1LjAuMC1wcmV2aWV3LjYuMjAzMDUuNlxuXHQ1LjAuMC1wcmV2aWV3LjEuMjAxMjAuNVxuXHQzLjEuNVxuXHQzLjEuNFxuXHQzLjEuMlxuXHQzLjEuMVxuXHQzLjEuMFxuXHQzLjAuM1xuXHQzLjAuMVxuXHQyLjEuMTlcblx0Mi4xLjE4XG5cdDIuMS4xN1xuXHQyLjEuMTZcblx0Mi4xLjE1XG5cdDIuMS4xNFxuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS42LjEzLjExXG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIFByb2ZpbGVyLmFwcC9Db250ZW50cy9NYWNPUy9YYW1hcmluIFByb2ZpbGVyXG5cbj09PSBVcGRhdGVyID09PVxuXG5WZXJzaW9uOiAxMVxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSAxMS41ICgxNjEzOSlcbkJ1aWxkIDExRTYwOGNcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5WZXJzaW9uOiA2LjIwLjEuMTggKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDhmZmEzZDg4OFxuQnJhbmNoOiBkMTYtN1xuQnVpbGQgZGF0ZTogMjAyMC0wNi0wNiAxMzozNDowNy0wNDAwXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTMuMjAuMS4xOCAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogOGZmYTNkODg4XG5CcmFuY2g6IGQxNi03XG5CdWlsZCBkYXRlOiAyMDIwLTA2LTA2IDEzOjM0OjA4LTA0MDBcblxuPT09IFhhbWFyaW4gRGVzaWduZXIgPT09XG5cblZlcnNpb246IDE2LjcuMC40NTlcbkhhc2g6IDY1ZDlkZDNhYVxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtN1xuQnVpbGQgZGF0ZTogMjAyMC0wNi0xMCAwMzo0ODozNCBVVENcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogMTAuNC4wLjAgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkNvbW1pdDogeGFtYXJpbi1hbmRyb2lkL2QxNi03L2RlNzAyODZcbkFuZHJvaWQgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vYW5kcm9pZC1zZGstbWFjb3N4XG5cdFN1cHBvcnRlZCBBbmRyb2lkIHZlcnNpb25zOlxuXHRcdDcuMCAoQVBJIGxldmVsIDI0KVxuXHRcdDguMCAoQVBJIGxldmVsIDI2KVxuXHRcdDguMSAoQVBJIGxldmVsIDI3KVxuXG5TREsgVG9vbHMgVmVyc2lvbjogMjYuMS4xXG5TREsgUGxhdGZvcm0gVG9vbHMgVmVyc2lvbjogMzAuMC4yXG5TREsgQnVpbGQgVG9vbHMgVmVyc2lvbjogMjkuMC4yXG5cbkJ1aWxkIEluZm9ybWF0aW9uOiBcbk1vbm86IDg3ZWY1NTVcbkphdmEuSW50ZXJvcDogeGFtYXJpbi9qYXZhLmludGVyb3AvZDE2LTdANzZkMWFjN1xuUHJvR3VhcmQ6IEd1YXJkc3F1YXJlL3Byb2d1YXJkL3Byb2d1YXJkNi4yLjJAZWJlOTAwMFxuU1FMaXRlOiB4YW1hcmluL3NxbGl0ZS8zLjMyLjFAMWEzMjc2YlxuWGFtYXJpbi5BbmRyb2lkIFRvb2xzOiB4YW1hcmluL3hhbWFyaW4tYW5kcm9pZC10b29scy9kMTYtN0AwMTcwNzhmXG5cbj09PSBNaWNyb3NvZnQgT3BlbkpESyBmb3IgTW9iaWxlID09PVxuXG5KYXZhIFNESzogL1VzZXJzL2JyYW1pbi9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2pkay9taWNyb3NvZnRfZGlzdF9vcGVuamRrXzEuOC4wLjI1XG4xLjguMC0yNVxuQW5kcm9pZCBEZXNpZ25lciBFUEwgY29kZSBhdmFpbGFibGUgaGVyZTpcbmh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL0FuZHJvaWREZXNpZ25lci5FUExcblxuPT09IEFuZHJvaWQgU0RLIE1hbmFnZXIgPT09XG5cblZlcnNpb246IDE2LjcuMC44XG5IYXNoOiA2ZTIwZTk4XG5CcmFuY2g6IHJlbW90ZXMvb3JpZ2luL2QxNi03XG5CdWlsZCBkYXRlOiAyMDIwLTA2LTExIDE5OjIzOjM0IFVUQ1xuXG49PT0gQW5kcm9pZCBEZXZpY2UgTWFuYWdlciA9PT1cblxuVmVyc2lvbjogMTYuNy4wLjEyXG5IYXNoOiA1MWI3MDU5XG5CcmFuY2g6IHJlbW90ZXMvb3JpZ2luL2QxNi03XG5CdWlsZCBkYXRlOiAyMDIwLTA2LTExIDE5OjIzOjU4IFVUQ1xuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDgwNzAwMTgwMlxuR2l0IHJldmlzaW9uOiAyMTI5ZjMwMDI0ODFjMjYzYjYyN2VhODJhNmYyNTM0OWVlNTk0N2NiXG5CdWlsZCBkYXRlOiAyMDIwLTA2LTIyIDA2OjE1OjQ0LTA0XG5CdWlsZCBicmFuY2g6IHJlbGVhc2UtOC43XG5YYW1hcmluIGV4dGVuc2lvbnM6IDIxMjlmMzAwMjQ4MWMyNjNiNjI3ZWE4MmE2ZjI1MzQ5ZWU1OTQ3Y2JcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjE1LjVcbkRhcndpbiAxOS41LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE5LjUuMFxuICAgIFR1ZSBNYXkgMjYgMjA6NDE6NDQgUERUIDIwMjBcbiAgICByb290OnhudS02MTUzLjEyMS4yfjIvUkVMRUFTRV9YODZfNjQgeDg2XzY0XG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwMDI4Y2U0MS1mZjU5LTQ1NWYtOTcxZi0zYzJmNjE1MzJiOWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9ETXpNVFV4TXpFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YlJlYWRtZVdlYlRyZW5kcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZTA1NWU5NzY5YzI3Y2ZhNWFiZDg5Yjk4NDg5NDA5ZGUzNGZmYzQ0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiMgR2l0SHViIFJlYWRtZSArIFdlYlRyZW5kc1xuXG5UbyBiZXN0IHVuZGVyc3RhbmQgd2hpY2ggdG9waWNzIGFyZSBwb3B1bGFyIGFuZCB3aGljaCBzdWJqZWN0cyBhcmUgdHJlbmRpbmcgaW4gb3VyIGRldmVsb3BlciBjb21tdW5pdGllcywgd2UgY2FuIGxldmVyYWdlIFtXZWIgVHJlbmRzXShodHRwczovL3d3dy53ZWJ0cmVuZHMuY29tKS5cblxuVGhpcyBpcyBhbiBhdXRvbWF0ZWQgdG9vbCBjcmVhdGVkIHVzaW5nIFtBenVyZSBGdW5jdGlvbnNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy8/V1QubWNfaWQ9Z2l0aHVicmVhZG1ld2VidHJlbmRzLWdpdGh1Yi1icmFtaW4pIHRoYXQgZG91YmxlIGNoZWNrcyBlYWNoIFJlYWRtZSB0byBlbnN1cmUgZXZlcnkgcmVwb3NpdG9yeSBpcyBsZXZlcmFnaW5nIFtXZWIgVHJlbmRzXShodHRwczovL3d3dy53ZWJ0cmVuZHMuY29tKS5cblxuW1dlYiBUcmVuZHNdKGh0dHBzOi8vd3d3LndlYnRyZW5kcy5jb20pIGRvZXMgbm90IGNvbGxlY3QgYW55IFBlcnNvbmFsbHkgSWRlbnRpZmlhYmxlIEluZm9ybWF0aW9uIGFuZCBjYW5ub3QgYmUgdHJhY2VkIGJhY2sgdG8gYW55IGluZGl2aWR1YWwgdXNlci5cblxuIyMgQXJjaGl0ZWN0dXJlXG5cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy84OTk1OTQzNS00MGRjNDQ4MC1kYmYxLTExZWEtOGMzMC1hNDgxMWZlODE5ZTkucG5nKVxuXG4jIyBGQVEgXG5cbkhvdyBkbyBJIG9wdC1pbiB0byB0aGUgdG9vbD8gKFByZXJlcXVpc2l0ZTogT25seSBNaWNyb3NvZnQgZW1wbG95ZWVzIGFyZSBhYmxlIHRvIG9wdC1pbilcbi0gQWRkIGEgYHltbGAgZmlsZSB0byB0aGUgW0Nsb3VkIERldmVsb3BlciBBZHZvY2F0ZXMgR2l0SHViIHJlcG9zaXRvcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnREb2NzL2Nsb3VkLWRldmVsb3Blci1hZHZvY2F0ZXMvdHJlZS9saXZlL2Fkdm9jYXRlcykgXG4tIFRoaXMgYWxzbyBhZGRzIHlvdSB0byB0aGUgW0Nsb3VkIEFkdmFjYXRlcyBXZWJwYWdlXShodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2Fkdm9jYXRlcy8/V1QubWNfaWQ9Z2l0aHVicmVhZG1ld2VidHJlbmRzLWdpdGh1Yi1icmFtaW4pXG5cbkhvdyBkbyBJIG9wdC1vdXQgZnJvbSB0aGUgdG9vbD8gXG4tIFJlbW92ZSB5b3VyIGB5bWxgIGZpbGUgZnJvbSB0aGUgW0Nsb3VkIERldmVsb3BlciBBZHZvY2F0ZXMgR2l0SHViIHJlcG9zaXRvcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnREb2NzL2Nsb3VkLWRldmVsb3Blci1hZHZvY2F0ZXMvdHJlZS9saXZlL2Fkdm9jYXRlcykgXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjE4OTkxNjYtZjJkZi00MjhmLWI2ODAtZmQwOTI0MTgxYjcwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UUTJOVFl5T1RrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYWR2YW5jZWQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYWUwNDkyMjIzZGJhOWMzY2JkODFlNDMzMWZmZmExNzM0NGRiM2MwOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgZ29vZHJlYWRzLXYyIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQzOGVjNmFkLTU0MTgtNDI2OC04MjRmLTA2MTgzYzcyZjY2NSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UZzNPRFExTmpBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic3Bpcml0ZG9nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRjMDRiYTQ4ZWU5ZDhjZjFhMDNiZDE0YjgyYzg4MjRlNGJkYjg0MWIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICI8aDEgYWxpZ249XCJjZW50ZXJcIj5XZWxjb21lIHRvIFNwaXJpdCBEb2cg8J+RizwvaDE+XG5cbjxpbWcgYWx0PVwiTGljZW5zZTogTUlUXCIgc3JjPVwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbW9uYWNvL3NwaXJpdGRvZy9tYXN0ZXIvYXNzZXRzL3BhcmtzJTI2cmVjLnBuZz90b2tlbj1BQU1BSUVBVUoyUzJLQlBCVTJBVVhPSzZWVjZIUVwiIC8+XG48cD5cbiAgPGEgaHJlZj1cIiNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICA8aW1nIGFsdD1cIkxpY2Vuc2U6IE1JVFwiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvTGljZW5zZS1NSVQteWVsbG93LnN2Z1wiIC8+XG4gIDwvYT5cbiAgPGEgaHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vc2ltb25hX2NvdGluXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgPGltZyBhbHQ9XCJUd2l0dGVyOiBzaW1vbmFfY290aW5cIiBzcmM9XCJodHRwczovL2ltZy5zaGllbGRzLmlvL3R3aXR0ZXIvZm9sbG93L3NpbW9uYV9jb3Rpbi5zdmc/c3R5bGU9c29jaWFsXCIgLz5cbiAgPC9hPlxuPC9wPlxuXG4jIyBBdXRob3Jcblxu8J+RpCAqKlNpbW9uYSBDb3RpbioqXG5cbi0gV2Vic2l0ZTogaHR0cHM6Ly90d2l0dGVyLmNvbS9zaW1vbmFfY290aW5cbi0gVHdpdHRlcjogW0BzaW1vbmFfY290aW5dKGh0dHBzOi8vdHdpdHRlci5jb20vc2ltb25hX2NvdGluKVxuLSBHaXRodWI6IFtAc2ltb25hY29dKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjbylcblxuIyMgU2hvdyB5b3VyIHN1cHBvcnRcblxuR2l2ZSBhIOKtkO+4jyBpZiB0aGlzIHByb2plY3QgaGVscGVkIHlvdSFcblxuLS0tXG5cbl9UaGlzIFJFQURNRSB3YXMgZ2VuZXJhdGVkIHdpdGgg4p2k77iPIGJ5IFtyZWFkbWUtbWQtZ2VuZXJhdG9yXShodHRwczovL2dpdGh1Yi5jb20va2VmcmFuYWJnL3JlYWRtZS1tZC1nZW5lcmF0b3IpX1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYzMzYwMTczLTlhYmYtNGUyMi05YmMxLTNjNTFhMWY0ZjhmYyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTNNek0wTmpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYWR2YW5jZWQtY291cnNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQwODM0NTIyYzE5MWQxMDYxNTQzMGEzOTJjMDM1NGQzNjViZmM4Y2QiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGdvb2RyZWFkcy12MiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkMTM5YTNhMC0wMGE3LTRmZmItYWI5My1jNDQ5OTQ1MTJlMzkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTFPVEUzTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzLXY0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0MjNmMjQzNzQ0NzM2OGJmMTU1NTI3ZmVlOWZhMDEyY2ZjZjkzMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGdvb2RyZWFkcy12MiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJiYThhNjVlYi1lY2MwLTRmY2QtYjFlNy04ZjhiMTkxZmIyMDkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56RXdNVFk0TURFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVkaXJlY3RzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjc5YWUyZTNkYjUxYjIxODEyNGFiMmY5NDA5MzQ4M2ZiMmU5MzIwN2IiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHJlZGlyZWN0c1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjdmMjg3NTliLTBkMDktNDZiYy1iNmU4LTg1NjhiYjU4MjVlZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTNOekk0TnpjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3RhZHZhbmNlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxMWRkMDgyNjVhNmFlYjczZjI3MzFiYzNhNDQxNWE4OGI5ODU4MjY3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBnb29kcmVhZHMtdjIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMWI2NDdmOWEtZTAxZS00ZjY3LTgyYmUtNGYyYzI1ZTk4NTlhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UUXpORGt3TUE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXp6IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjc0OGMzNjE1YWYzMDUwOTMyMDhkNGJiOTlmNTNiN2MwM2NkNDliMmQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UWTJNRGt6TVE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXoiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FhY2ZhZWM3ZTUyNTllYjk0ZjI2ZjMyYTg4ODlhNmJjOWNhZGFlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UUXpORGt3TUE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXp6IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjc0OGMzNjE1YWYzMDUwOTMyMDhkNGJiOTlmNTNiN2MwM2NkNDliMmQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDNlMTE0NzctMjZlYS00NTRjLWFlMWUtMGY4NjJkODc2M2I1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UWTJNRGt6TVE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXoiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FhY2ZhZWM3ZTUyNTllYjk0ZjI2ZjMyYTg4ODlhNmJjOWNhZGFlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWXpNemd3T0RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVzdC1jaXJjbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzgxNmEyMmIzMDM0NzY1ZjEwZWY1NjdhNGE3ZWEyMjE5MjgxMThmOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkM2UxMTQ3Ny0yNmVhLTQ1NGMtYWUxZS0wZjg2MmQ4NzYzYjUiCn0=ewogICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiODkwMDNjYmUtZTlkNi00OGJhLTllMDEtN2ViMjZkMDU4ZDFlIgp9ewogICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4OTAwM2NiZS1lOWQ2LTQ4YmEtOWUwMS03ZWIyNmQwNThkMWUiCn0=ewogICJGdWxsTmFtZSI6ICJTaGF5bmUgQm95ZXIiLAogICJVc2VyTmFtZSI6ICJzcGJveWVyIiwKICAiTWljcm9zb2Z0QWxpYXMiOiAic2hib3llciIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4OTAwM2NiZS1lOWQ2LTQ4YmEtOWUwMS03ZWIyNmQwNThkMWUiCn0=ewogICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiODkwMDNjYmUtZTlkNi00OGJhLTllMDEtN2ViMjZkMDU4ZDFlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5qTTVPVGswT1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZhY2VPZmYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTBjODNkNWMwOWFhYmVhNDRjOGQ5ZjdmZDFiMTIyMThiYzQ0ZDQ5ZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UWXhNek13Tnc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZVVJVGVzdEFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiYjVmMTRhYjE5ZTM0ZjNhMDNiNjhlZTNiMGRiZGIyNmI2ODZlMGQ3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UY3dOVFEyTWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldlYlZpZXdVSVRlc3RBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Y1MzhjOWZhYmY5ZDdiYTEzZjAzODQ2ODcxZGNkODJkZDgyYjQ5YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1EVTBNekEwTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNlY3VyaXR5U2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhZTEyMmU3ZmYxMjFmOGZkYmNkMzQyZmE1MGY3MmYzNjY2YmIzMDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1qQTVNVGc1TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkVudHJ5VUlUZXN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNkOWUwMGNkNzlkMmQ3Zjc5ZDhhM2YwMDc3NzMzMzJhNzExMjk2ZmMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1qSTBOelUwTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkludmVzdG1lbnREYXRhU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU4ZWU2MWQwYTQwMGI5MDIxMzY5MTNmMThmYzgyYTUzZWJlMjg2NWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EWXlOekUxTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJpbmFyeVNlYXJjaFRyZWUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTM1ZDBkZTNhZmU0NjlkZjU1Y2JiZDc3YWY0NjdiM2MxOGZlYWVmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qWXdORFEyT0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFuZHJvaWRDaGVja0JveFNhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZWI2Y2NkOWM5Mzg0MDI4ZGQzZDUwYmQ4YzI3NTQ4ZWNhZTdjNmY3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM016UXpOekUxTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhjb2RlX1hhbWFyaW5VSVRlc3RfU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY5ZjI4ZGMzM2NkNDI1ZTkwMzFjOGY5ZTJkMjg0ZDkyM2RhYTBmMWEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1qRTRNemN6IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJDb2RlQ2FtcGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjQ4YTM4Nzk2MDgzMDZhNzhmYTU0ZGVkZWU2ZWZlYzE2MDQ1OWEyNDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05qRTFNamN5TlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVJVGVzdFNhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNGNjMzJlNTE2MGQzNWQ3Y2EwYWQ5NTk2MWZjOTZhYjA1ZmZhZTMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU16TTNORFExIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJraXMtcmVxdWlyZWpzLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODhjMTYyZTI3Y2U0M2E5OTQzZjM5NmViNzk5M2ZhNmM4ZjNlMjBjOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM056TTBNakk1TUE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNhdmVJbWFnZVRvRGF0YWJhc2VTYW1wbGVBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYWQ3MTY0NWIxNjI5YzRmODZkMGUyZGU4MWJlYTUxODM2NWM0NWY0YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5URXpNakE0IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJqczRuZXRkZXYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjcyNzUzNzkwN2IyMGFhYTFlZGZkZDg4OTRiMGIxOTYzMDNhZmIyYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM056WTBOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlYWxtU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM0Y2U5NzQwOGNjNzc3YjFjNGIyN2QyMzI5NzhmMThkMzFlZThkYTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09UY3lOVEUwIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJIb3RUb3dlbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlZTM3ZjBmNDhlMmY5MGQ0NDU5YWY1MTk3ZjUwZmZhZTcyZjFmOTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09ETXdNelk1T0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlYWN0TmF0aXZlU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4NTZjNDQ1YjBjNWY5YjUxZGMxOTZmMzcxM2VjOTA1MmI5MDdiZWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qVTBPVGMxIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJQbHVyYWxzaWdodFNwYUp1bXBTdGFydEZpbmFsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjhlNTJlYmVlODQ0ZDk0YzUwNGU0MzVmODU3OGQ4ZmM4MTU5NmRlYjMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UVTRNRGszIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJ0ZWxla2luZXNpcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4NDc3MDQ5MWM5MGUzN2FkODVjNzE1NzJjM2M5MGFjYmJlZTlmN2I5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09URTFNVFF5T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlBvd2VyQklTYW1wbGVBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTFhZDQyZTIyNWYyMDJmOTA4NjA3ZTFkN2ZlMTNjNWY0ZjEwMWFkOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTVPVEU1Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2xpbXBzZS50b2FzdHIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjU0NzQ1NGE0NjA1MjE5ODUwMTZmYmRjMjNhMDA0NzcxMWYxZDc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09UY3pPRGd4TXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkVudHJ5Q3VzdG9tUmV0dXJuUGx1Z2luIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYyYWUyZWU4ZDViN2RiM2MwOGVhOWY1YzYyMTYyMzFkMjkwZTM1YTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTBPVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidG9hc3RyLWJvd2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE2OWFhOGUzMDIxY2JmMWM2NGVhZWRlYzNiNDE4YzA0MzEzYWY5NWEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1ERXhOamszTlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk9uU2lnaHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzgzOTgwZmZhY2Y3YjVlM2NlN2VjNjg1ZjYxYWE2OGJlOWRlMTU5YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5qTTVPVGswT1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZhY2VPZmYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTBjODNkNWMwOWFhYmVhNDRjOGQ5ZjdmZDFiMTIyMThiYzQ0ZDQ5ZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICJ8Q0kgVG9vbCAgICAgICAgICB8QnVpbGQgU3RhdHVzfFxufC0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLXxcbnwgQXBwIENlbnRlciwgaU9TIHwgIFshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzLzA3ZWI5YmZkLWM4MTgtNDg2OS04ODcwLTkwYTZkYjg2NzJkNC9icmFuY2hlcy9tYWluL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpIHxcbnwgQXBwIENlbnRlciwgQW5kcm9pZCB8IFshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzLzk1MTUzYzNhLThjZDMtNGQwOC05YjYxLTFiYzlhZDZhMWJiNC9icmFuY2hlcy9tYWluL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpIHxcbnwgQXBwIENlbnRlciwgVVdQIHwgWyFbQnVpbGQgc3RhdHVzXShodHRwczovL2J1aWxkLmFwcGNlbnRlci5tcy92MC4xL2FwcHMvYThjMTI0ZTItODE2MC00NzE1LThjNzItMmQ2ZmM1MTRkMTk4L2JyYW5jaGVzL21haW4vYmFkZ2UpXShodHRwczovL2FwcGNlbnRlci5tcykgfFxuXG4jIEZhY2VPZmZcbkZhY2VPZmYgcGl0cyB0d28gcGxheWVycyBhZ2FpbnN0IGVhY2hvdGhlciB0byBzZWUgd2hvIGNhbiByZWZsZWN0IGFuIGVtb3Rpb24gYmVzdCEgXG5cblRoZSBhcHAgcHJvdmlkZXMgYSByYW5kb20gZW1vdGlvbiB0aGF0IGJvdGggcGxheWVycyB3aWxsIHBvcnRyYXkuIEl0IHRoZW4gdXNlcyB0aGUgZmFjaWFsIHJlY29nbml0aW9uIHRlY2hub2xvZ3kgdG8gZGV0ZXJtaW5lIHdobyBleGhpYml0ZWQgdGhlIGVtb3Rpb24gYmVzdCFcblxuIyMgQWJvdXRcblRoaXMgaXMgYW4gQW5kcm9pZCwgaU9TIGFuZCBVV1AgYXBwIGNyZWF0ZWQgdXNpbmcgW1hhbWFyaW4uRm9ybXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4veGFtYXJpbi1mb3Jtcz9XVC5tY19pZD1mYWNlb2ZmLWdpdGh1Yi1icmFtaW4pLiBUaGUgZmFjaWFsIHJlY29nbml0aW9uIHVzZXMgW01pY3Jvc29mdCdzIENvZ2luaXRpdmUgU2VydmljZXMgRmFjZSBBUEldKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9zZXJ2aWNlcy9jb2duaXRpdmUtc2VydmljZXMvZmFjZT9XVC5tY19pZD1mYWNlb2ZmLWdpdGh1Yi1icmFtaW4pLiBcblxuIyMgVG9Eb1xuVG8gdXNlIE1pY3Jvc29mdCdzIENvZ2luaXRpdmUgU2VydmljZXMgRmFjZSBBUEkgZnJvbSB0aGlzIGFwcCwgc2lnbiB1cCBmb3IgYSBbZnJlZSBBUEkgS2V5XShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZnJlZS9haS8/dXRtX3NvdXJjZT1jaGFubmVsOSZ1dG1fbWVkaXVtPWRlc2NyaXB0aW9ubGlua3MmdXRtX2NhbXBhaWduPWZyZWVhY2NvdW50JldULm1jX2lkPWZhY2VvZmYtZ2l0aHViLWJyYW1pbikgYW5kIGluc2VydCBpdCB0byB0aGUgY29kZSBbaGVyZV0oLi9Tb3VyY2UvRmFjZU9mZi9Db25zdGFudHMvQ29nbml0aXZlU2VydmljZXNDb25zdGFudHMuY3MjTDcpLiBBZnRlciBhZGRpbmcgeW91ciBBUEkgS2V5LCByZW1vdmUgdGhlIGRpYWdub3N0aWMgZGlyZWN0aXZlIFtsb2NhdGVkIGhlcmVdKC4vU291cmNlL0ZhY2VPZmYvQ29uc3RhbnRzL0NvZ25pdGl2ZVNlcnZpY2VzQ29uc3RhbnRzLmNzI0w1KS5cblxuIyMjIEF1dGhvclxuQnJhbmRvbiBNaW5uaWNrXG5cblhhbWFyaW4gQ3VzdG9tZXIgU3VjY2VzcyBFbmdpbmVlclxuXG5cbiFbRmFjZU9mZiBEZW1vXShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1ZpZGVvcy9ibG9iL21hc3Rlci9GYWNlT2ZmL0ZhY2VPZmZfR2lmRGVtby5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiY2U1NDIzNGUtZmYwMC00ODNmLWI4YzQtYThjY2IzOGU0Y2ZiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1URXdPRFkyTlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZvcm1zUHVzaE5vdGlmaWNhdGlvblNhbXBsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmMGM0OTVjN2Q4YzQ2ZTFmZGI0N2Q1NGM0ZjQ0ZTJhYjM4MTE3Njc5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek9ESTJNekkxIiwKICAgICJvd25lciI6ICJzaW1vbmFjbyIsCiAgICAibmFtZSI6ICJXaW5DYWxlbmRhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZDI4YjhlNTIyYmNmMTJhMTRmMWZmNWJmNDkzMjlmZWY3ZDRlODkyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qQTROVFUwT0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW4uRm9ybXMtTmFOLWlzLW5vdC1hLXZhbGlkLXZhbHVlLWZvci13aWR0aC1yZXByb2R1Y3Rpb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNWY0ZmZlZTg5ZTUxMjQ1NGMwYjQyMjE5MmQ1ZGE3ZWQzYmE4YTJiZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRPVFkzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiSG90VG93ZWwtQW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMThlZTkxN2ZmNTk2NTgwY2M1YmU5OTdmNjIyNTMxNWFmNjZmNmIwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UY3dOVFEyTWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldlYlZpZXdVSVRlc3RBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Y1MzhjOWZhYmY5ZDdiYTEzZjAzODQ2ODcxZGNkODJkZDgyYjQ5YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgV2ViVmlld1VJVGVzdEFwcFxuVGhpcyBhcHAgZGVtb25zdHJhdGVzIGhvdyB0byB3cml0ZSBVSVRlc3RzIGZvciBhbiBhcHAgdGhhdCB1c2VzIGEgV2ViVmlldy5cblxuVGhpcyBhcHAgaXMgYSB3ZWJ2aWV3IHRoYXQgbG9hZHMgeGFtYXJpbi5jb21cblxuVGhlIFVJVGVzdCBQcm9qZWN0IGluY2x1ZGVzIGEgc2FtcGxlIFVJVGVzdCB0byBpbnRlcmFjdCB3aXRoIHRoZSBXZWJWaWV3XG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjVhNTY5NzUtYjA0OS00OWRlLWFkZWEtZWZlMjI5Y2ViMzQ3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UWXhNek13Tnc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZVVJVGVzdEFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiYjVmMTRhYjE5ZTM0ZjNhMDNiNjhlZTNiMGRiZGIyNmI2ODZlMGQ3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBTaW1wbGVVSVRlc3RBcHBcblRoaXMgcmVwbyBoYXMgbW92ZWQ6XG5odHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1VJVGVzdFNhbXBsZUFwcFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjZmNWZjZGQ1LWJhYjItNDIzZS04NmU3LTI0ODg5NTg2ZjFkMSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qQTVOek01T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbU1lZGlhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI3MGMxZDFhMjJhZDI2OTQyYzcyOTRlOTAyNGFkNjZjMjM0N2FiZWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UQTFOakF6Tmc9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaGFja3p1cmljaCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjJhMzllNmM0OWVjMDAzOGMxZGNhMWY1Mzk2ZmY0Y2NjMThkODMwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1EVTBNekEwTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNlY3VyaXR5U2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhZTEyMmU3ZmYxMjFmOGZkYmNkMzQyZmE1MGY3MmYzNjY2YmIzMDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyMjIFNlY3VyaXR5IFNhbXBsZSBBcHBcblRoaXMgYXBwIGlzIGEgWGFtYXJpbi5Gb3JtcyBhcHAgdGhhdCB1c2VzIE1WVk0gYW5kIHRoZSBmb2xsb3dpbmcgWGFtYXJpbi5Gb3JtcyBjb250cm9sczogU2xpZGVyLCBUYWJsZVZpZXcsIExpc3RWaWV3LCBDYXJvdXNlbCBQYWdlLCBOYXZpZ2F0aW9uIFBhZ2UuXG5cbiBUbyBzYXZlIHRoZSBzZXR0aW5ncyBvZiB0aGUgYXBwLCBpdCB1c2VzIFtYYW1hcmluLkVzc2VudGlhbHMuUHJlZmVyZW5jZXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4vZXNzZW50aWFscy9wcmVmZXJlbmNlcz9XVC5tY19pZD1zZWN1cml0eXNhbXBsZWFwcC1naXRodWItYnJhbWluKS4gVGhlIFtnZXR0ZXIvc2V0dGVyIG9mIGVhY2ggcHJvcGVydHldKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svU2VjdXJpdHlTYW1wbGVBcHAvYmxvYi9tYXN0ZXIvU2VjdXJpdHlTYW1wbGVBcHAvTW9kZWxzL0xhbmVNb2RlbC5jcykgZm9yIGBMYW5lTW9kZWxgIHJldHJpZXZlcy9zYXZlcyB0aGUgcHJvcGVydHkgdmFsdWUgZnJvbS90byBwZXJzaXN0ZW50IHN0b3JhZ2UuXG5cbiFbU2FtcGxlIEdpZl0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTcyMDI0MTYtZDIyNjJiMDAtNmY1OS0xMWU5LTlhY2YtN2I4ZGY5ZmI2ZWY0LmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmOGQ5YTdjZC1mMDhkLTRkODEtOTdlNS1iOTc4ZTJlNWVkNmEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1qSTBOelUwTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkludmVzdG1lbnREYXRhU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU4ZWU2MWQwYTQwMGI5MDIxMzY5MTNmMThmYzgyYTUzZWJlMjg2NWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBJbnZlc3RtZW50RGF0YVNhbXBsZUFwcFxuXG48YSBocmVmPVwiaHR0cHM6Ly93d3cuYnV5bWVhY29mZmVlLmNvbS9ibWlubmlja1wiIHRhcmdldD1cIl9ibGFua1wiPjxpbWcgc3JjPVwiaHR0cHM6Ly9jZG4uYnV5bWVhY29mZmVlLmNvbS9idXR0b25zL2RlZmF1bHQtb3JhbmdlLnBuZ1wiIGFsdD1cIkJ1eSBNZSBBIENvZmZlZVwiICA+PC9hPlxuXG5UaGlzIHNhbXBsZSBhcHAgZGVtb25zdHJhdGVzIHRoZSBmb2xsb3dpbmcgbmV3IGZlYXR1cmVzIGluIFhhbWFyaW4uRm9ybXM6XG4tIFtYYW1hcmluLkZvcm1zLlN3aXBlVmlld10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi94YW1hcmluLWZvcm1zL3VzZXItaW50ZXJmYWNlL3N3aXBldmlldz9XVC5tY19pZD1pbnZlc3RtZW50ZGF0YXNhbXBsZWFwcC1naXRodWItYnJhbWluKVxuLSBbWGFtYXJpbi5Gb3Jtcy5SZWZyZXNoVmlld10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi94YW1hcmluLWZvcm1zL3VzZXItaW50ZXJmYWNlL3JlZnJlc2h2aWV3P1dULm1jX2lkPWludmVzdG1lbnRkYXRhc2FtcGxlYXBwLWdpdGh1Yi1icmFtaW4pXG4tIFtYYW1hcmluLkZvcm1zLkNvbGxlY3Rpb25WaWV3XShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS94YW1hcmluL3hhbWFyaW4tZm9ybXMvdXNlci1pbnRlcmZhY2UvY29sbGVjdGlvbnZpZXc/V1QubWNfaWQ9aW52ZXN0bWVudGRhdGFzYW1wbGVhcHAtZ2l0aHViLWJyYW1pbilcbi0gW1hhbWFyaW4uRm9ybXMuUGxhdGZvcm1Db25maWd1cmF0aW9uLmlPU1NwZWNpZmljLlVJTW9kYWxQcmVzZW50YXRpb25TdHlsZS5Gb3JtU2hlZXRdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4veGFtYXJpbi1mb3Jtcy9wbGF0Zm9ybS9pb3MvcGFnZS1wcmVzZW50YXRpb24tc3R5bGU/V1QubWNfaWQ9aW52ZXN0bWVudGRhdGFzYW1wbGVhcHAtZ2l0aHViLWJyYW1pbilcblxufCBDb2xsZWN0aW9uVmlldyArIFJlZnJlc2hWaWV3IChpT1MpIHwgVUlNb2RhbFByZXNlbnRhdGlvblN0eWxlIEZvcm1TaGVldCB8IENvbGxlY3Rpb25WaWV3ICsgUmVmcmVzaFZpZXcgKEFuZHJvaWQpIHwgU3dpcGVWaWV3IChBbmRyb2lkKSB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLSB8XG58ICFbQ29sbGVjdGlvblZpZXcgKyBSZWZyZXNoVmlldyBEZW1vLCBpT1NdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzcwMzUxODAyLTk1ZDNlOTgwLTE4MWUtMTFlYS05ZjM0LTM1N2E2ODdiNWZlMi5naWYpIHwgIVtpT1MgTW9kYWwgUGFnZSBEZW1vXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy83MDM1MTgwMy05NWQzZTk4MC0xODFlLTExZWEtODQzNS1lYzRkNWEzZWM3ZmIuZ2lmKSB8ICFbQ29sbGVjdGlvblZpZXcgKyBSZWZyZXNoVmlldyBEZW1vLCBBbmRyb2lkXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy83MDM1MTgwNS05NjZjODAwMC0xODFlLTExZWEtOWVhMC04Y2FkZmUwZmQ5YTguZ2lmKSB8ICFbU3dpcGVWaWV3IEFuZHJvaWRdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzcwMzUxODA0LTk2NmM4MDAwLTE4MWUtMTFlYS05OTBmLTYyM2EwMWEyZWJkYS5naWYpIHxcblxuIyMgVUkgRGVzaWduXG5cblRoaXMgc2FtcGxlIGFwcCB3YXMgbWFkZSB0byBkZW1vbnN0cmF0ZSBob3cgdG8gcG9ydCBhIERlc2t0b3AgQXBwIHRvIGEgTW9iaWxlIEFwcC4gVGhpcyBwcm9qZWN0IGhhZCBhbiBleGlzdGluZyBEZXNrdG9wIGFwcGxpY2F0aW9uLiBUaGV5IHByb3ZpZGVkIHVzIGEgbW9jayB1cCBvZiB0aGVpciBtb2JpbGUgYXBwIChzZWUgYmVsb3cpIHdoaWNoIGRpZCBub3QgZm9sbG93IFtpT1MgVUkgYmVzdC1wcmFjdGljZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2lvcy9kb2N1bWVudGF0aW9uL1VzZXJFeHBlcmllbmNlL0NvbmNlcHR1YWwvTW9iaWxlSElHLykuIFdlIGNyZWF0ZWQgYSBzYW1wbGUgYXBwIHRvIGRlbW9uc3RyYXRlIGhvdyB0byBhZGhlcmUgdG8gbW9iaWxlIFVJIHdoaWxlIHN0aWxsIG1haW50YWluaW5nIGEgd29ya2Zsb3cgZmFtaWxpYXIgdG8gdGhlaXIgZGVza3RvcCBhcHAuXG5cblRoaXMgYXBwIHV0aWxpemVzIGEgU1FMaXRlIGRhdGFic2UsIE1WVk0sIGFsb25nIHdpdGggdGhlc2UgWGFtYXJpbi5Gb3JtcyBjb250cm9sczogQ2Fyb3VzZWwgUGFnZSwgU2VhcmNoIEJhciwgUGlja2VyLCBHcmlkLCBTdGFja0xheW91dCwgTmF2aWdhdGlvbiBQYWdlLCBMaXN0VmlldywgVmlld0NlbGwuIEl0IGFsc28gc2hvd3MgaG93IHRvIHR3ZWFrIHRoZSBVSSB0byBiZXN0IGFwcGVhciBvbiBsYXJnZXIgdGFibGV0IHNjcmVlbnMuIEl0IGFsc28gaW5jbHVkZXMgYSBTaGFrZSBMaXN0ZW5lciwgYW5kIHdpbGwgZGlzcGxheSBhIHBvcC11cCB3aGVuZXZlciB0aGUgdXNlciBzaGFrZXMgdGhlIGRldmljZS5cblxuIyMjIE9yaWdpbmFsIERlc2t0b3AgQXBwIE1vY2t1cFxuVGhlIGN1c3RvbWVyIHByb3ZpZGVkIHVzIHRoaXMgd2lyZWZyYW1lIGFzIHRoZSBpbml0aWFsIGRlc2lnbiBmb3IgdGhlaXIgbW9iaWxlIGFwcGxpY2F0aW9uLiBUaGVpciBnb2FsIHdhcyB0byByZXBsaWNhdGUgdGhlaXIgZXhpc3RpbmcgZGVza3RvcCBhcHAgLlxuIVtPcmlnaW5hbCBBcHAgTW9ja3VwXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81NzcxNTYxMi0wMjQxOGUwMC03NjJjLTExZTktOWM0NS1kMzJjODhjM2FhNTYucG5nKVxuXG4jIyMgU2FtcGxlIEFwcCBvbiBpUGhvbmVcblRoaXMgaXMgdGhlIHNhbXBsZSBhcHAgd2UgcHJvdmlkZWQgYXMgaXQgYXBwZWFycyBvbiBhIHBob25lXG4hW2lQaG9uZSBTYW1wbGUgQXBwXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81NzcxNTYxMS0wMjQxOGUwMC03NjJjLTExZTktOTNjYy0xOTRhYWExNDBmZmMuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjA1Y2YxMTA0LTRjNDYtNDAyZS05ZDIzLTNiMTdmNTQ5ZDE0MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzVPRGM1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhci1OdUdldCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhYTVlZDY1NTQyNWE0OGJiOTE5MDk4OTc3ZDc1MjAwZjY1ZjVjZjQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qZ3pOamd4TXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVSTEVuY29kZWRGb3JtQnVnIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI5OTVkMmQwNWNjZDhlNjdhMzFhMjczOTVkYTZkOTJmOTZkNzBkODkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9UY3lORGMxTVE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZGV2aXQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWMxNjEyYjNlYjJkMzM3MzlhZTIxMThiNzcyNzI4OGFmNGZiMDE4MCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EZzVNams0TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci5icmVlemUuc3RvcmFnZXdpcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMjliY2JiMzMxZjBkMjk4ZDI2MDdiODM3NmIxNzllYWMwYWY2N2E5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9EVTFNVFF4T0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbU1hcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjYWQ0NzNmZWY5YWIyYTk1ODE0MWQ0Zjc5NjgyYWY5OWZkYWNlNGMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk1qQTVNVGc1TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkVudHJ5VUlUZXN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNkOWUwMGNkNzlkMmQ3Zjc5ZDhhM2YwMDc3NzMzMzJhNzExMjk2ZmMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBFbnRyeVVJVGVzdFxuXG5UaGlzIGFwcCBzaG93cyBob3cgdG8gaW1wbGVtZW50IFtYYW1hcmluLlVJVGVzdF0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXBwY2VudGVyL3Rlc3QtY2xvdWQvdWl0ZXN0P1dULm1jX2lkPWVudHJ5dWl0ZXN0LWdpdGh1Yi1icmFtaW4pIGluIGEgW1hhbWFyaW4uRm9ybXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3hhbWFyaW4veGFtYXJpbi1mb3Jtcz9XVC5tY19pZD1lbnRyeXVpdGVzdC1naXRodWItYnJhbWluKSBwcm9qZWN0LlxuXG5XZSd2ZSBhZGRlZCBhbiBbQXV0b21hdGlvbklkXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9kb3RuZXQvYXBpL3hhbWFyaW4uZm9ybXMuZWxlbWVudC5hdXRvbWF0aW9uaWQ/dmlldz14YW1hcmluLWZvcm1zJldULm1jX2lkPWVudHJ5dWl0ZXN0LWdpdGh1Yi1icmFtaW4pIHRvIGVhY2ggY29udHJvbCB0byBzaG93IGhvdyB0aGUgVUkgdGVzdCBjYW4gaW50ZXJhY3Qgd2l0aCBjb250cm9scyB1c2luZyB0aGVpciBbQXV0b21hdGlvbklkXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9kb3RuZXQvYXBpL3hhbWFyaW4uZm9ybXMuZWxlbWVudC5hdXRvbWF0aW9uaWQ/dmlldz14YW1hcmluLWZvcm1zJldULm1jX2lkPWVudHJ5dWl0ZXN0LWdpdGh1Yi1icmFtaW4pLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM2YThkMWRhLTY4NTQtNGEyMi04NmM3LTM4MzhiMTdjMGI0ZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qWXdORFEyT0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFuZHJvaWRDaGVja0JveFNhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZWI2Y2NkOWM5Mzg0MDI4ZGQzZDUwYmQ4YzI3NTQ4ZWNhZTdjNmY3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmRyb2lkQ2hlY2tCb3hTYW1wbGVBcHBcblRoaXMgaXMgYSBzaW1wbGUgYXBwIHRvIGRlbW9uc3RyYXRlIGhvdyB0byBpbnRlcmFjdCB3aXRoIGFuIEFuZHJvaWQgQ2hlY2tCb3ggZnJvbSBhIFVJVGVzdC5cblxuVG8gaW50ZXJhY3Qgd2l0aCBhbiBBbmRyb2lkIENoZWNrQm94IGZyb20gYSBVSVRlc3QsIHlvdSBtdXN0IHVzZSB0aGUgW0ludm9rZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZG90bmV0L2FwaS94YW1hcmluLnVpdGVzdC5xdWVyaWVzLmFwcHF1ZXJ5Lmludm9rZT92aWV3PXhhbWFyaW4tdWl0ZXN0LXNkayZXVC5tY19pZD1hbmRyb2lkY2hlY2tib3hzYW1wbGVhcHAtZ2l0aHViLWJyYW1pbiNYYW1hcmluX1VJVGVzdF9RdWVyaWVzX0FwcFF1ZXJ5X0ludm9rZV9TeXN0ZW1fU3RyaW5nXykgbWV0aG9kIHRvIGFjY2VzcyB0aGUgbWV0aG9kcyBpbiB0aGUgW25hdGl2ZSBKYXZhIEFuZHJvaWQgQVBJXShodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC93aWRnZXQvQ2hlY2tCb3guaHRtbCkuIEluIG91ciBgSW52b2tlYCBzdGF0ZW1lbnRzLCB3ZSBjYW4gdGFrZSBhZHZhbnRhZ2Ugb2YgYHBlcmZvcm1DbGljaygpYCB0byB0b2dnbGUgdGhlIENoZWNrQm94LCBgc2V0Q2hlY2tlZChib29sZWFuIGNoZWNrZWQpYCB0byBzZXQgdGhlIHZhbHVlIG9mIHRoZSBDaGVja0JveCwgYW5kIGBpc0NoZWNrZWQoKWAgdG8gcmV0dXJuIGEgYm9vbCB0aGF0IGlzIGB0cnVlYCB3aGVuIHRoZSBDaGVja0JveCBpcyBjaGVja2VkIGFuZCBgZmFsc2VgIHdoZW4gaXQgaXMgdW5jaGVja2VkLlxuXG5JbiB0aGUgVUlUZXN0IHByb2plY3QsIEkgY3JlYXRlZCBhIFtUb2dnbGVDaGVja0JveF0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9BbmRyb2lkQ2hlY2tCb3hTYW1wbGVBcHAvYmxvYi9tYXN0ZXIvQ2hlY2tCb3hTYW1wbGVBcHAuVUlUZXN0L1Rlc3RzLmNzI0wxMjgpIG1ldGhvZCB0byB0b2dnbGUgYW4gaW5kaXZpZHVhbCBDaGVja0JveCwgYSBbSXNDaGVja0JveENoZWNrZWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svQW5kcm9pZENoZWNrQm94U2FtcGxlQXBwL2Jsb2IvbWFzdGVyL0NoZWNrQm94U2FtcGxlQXBwLlVJVGVzdC9UZXN0cy5jcyNMMTM0KSBtZXRob2QgdG8gcmV0dXJuIHRoZSBDaGVja0JveCBjdXJyZW50IHN0YXR1cywgYW5kIGEgW1NldENoZWNrQm94XShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL0FuZHJvaWRDaGVja0JveFNhbXBsZUFwcC9ibG9iL21hc3Rlci9DaGVja0JveFNhbXBsZUFwcC5VSVRlc3QvVGVzdHMuY3MjTDEzOSkgbWV0aG9kIHRvIHNldCB0aGUgQ2hlY2tCb3ggc3RhdHVzLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjMyZDJhZjdlLTdmNTItNDNhNy1hNzZiLThmYTQ2MDE4YjY3NyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EWXlOekUxTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJpbmFyeVNlYXJjaFRyZWUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTM1ZDBkZTNhZmU0NjlkZjU1Y2JiZDc3YWY0NjdiM2MxOGZlYWVmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQmluYXJ5U2VhcmNoVHJlZVxuIFRoaXMgcmVwbyBjb250YWlucyB0aGUgQmluYXJ5IFNlYXJjaCBUcmVlIGRhdGEgc3RydWN0dXJlLiBJdCBhbGxvd3MgZm9yIGZhc3QgbG9va3VwIGFuZCBhZGRpdGlvbiBvZiBpdGVtcywgYW5kIGNhbiBiZSB1c2VkIHRvIGltcGxlbWVudCBlaXRoZXIgZHluYW1pYyBzZXRzIG9mIGl0ZW1zLCBvciBsb29rdXAgdGFibGVzIHRoYXQgYWxsb3cgZmluZGluZyBhbiBpdGVtIGJ5IGl0cyBrZXkgKGUuZy4sIGZpbmRpbmcgdGhlIHBob25lIG51bWJlciBvZiBhIHBlcnNvbiBieSBuYW1lKS5cbiBcbiAgQmluYXJ5IHNlYXJjaCB0cmVlIGlzIGEgcm9vdGVkIGJpbmFyeSB0cmVlLCB3aG9zZSBpbnRlcm5hbCBub2RlcyBlYWNoIHN0b3JlIGEgdmFsdWUgYW5kIGVhY2ggaGF2ZSB0d28gZGlzdGluZ3Vpc2hlZCBzdWItdHJlZXMsIGRlbm90ZWQgTGVmdCBhbmQgUmlnaHQuIFRoZSB0cmVlIGFkZGl0aW9uYWxseSBzYXRpc2ZpZXMgdGhlIGJpbmFyeSBzZWFyY2ggdHJlZSBwcm9wZXJ0eSwgd2hpY2ggc3RhdGVzIHRoYXQgdGhlIHZhbHVlIGluIGVhY2ggbm9kZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBhbGwgdmFsdWVzIHN0b3JlZCBpbiB0aGUgbGVmdCBzdWItdHJlZSwgYW5kIHNtYWxsZXIgdGhhbiBhbGwgdmFsdWVzIGluIHRoZSByaWdodCBzdWItdHJlZS4gKFRoZSBsZWF2ZXMgKGZpbmFsIG5vZGVzKSBvZiB0aGUgdHJlZSBjb250YWluIG5vIHZhbHVlIGFuZCBoYXZlIG5vIHN0cnVjdHVyZSB0byBkaXN0aW5ndWlzaCB0aGVtIGZyb20gb25lIGFub3RoZXIuIExlYXZlcyBhcmUgcmVwcmVzZW50ZWQgYnkgbnVsbC4pXG5cbnx8IEF2ZXJhZ2UgfCBXb3JzdCBDYXNlfFxufC0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLXxcbnxTcGFjZXxcdM6YKG4pfE8obil8XG58U2VhcmNofM6YKGxvZyBuKXxPKG4pfFxufEluc2VydHzOmChsb2cgbil8TyhuKXxcbnxEZWxldGV8zpgobG9nIG4pfE8obl4yKXxcblxuIyMjIEV4YW1wbGVcblxuYGBgXG4gc3RhdGljIFJhbmRvbSByYW5kb20gPSBuZXcgUmFuZG9tKChpbnQpRGF0ZVRpbWUuTm93LlRpY2tzKTtcbiBwcml2YXRlIHZvaWQgc3RyaW5nVGVzdChpbnQgdG90YWxWYWx1ZXMpXG4ge1xuICAgICB2YXIgdHJlZSA9IG5ldyBCaW5hcnlOb2RlVHJlZTxzdHJpbmc+KCk7XG4gICAgIFxuICAgICB2YXIgc3RyaW5nQXJyYXkgPSBuZXcgc3RyaW5nW3RvdGFsVmFsdWVzXTtcblxuICAgICB2YXIgcm5kID0gbmV3IFJhbmRvbSgpO1xuXG4gICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdG90YWxWYWx1ZXM7IGkrKylcbiAgICAge1xuICAgICAgICAgc3RyaW5nQXJyYXlbaV0gPSBSYW5kb21TdHJpbmcocm5kLk5leHQoMSwxNSkpO1xuXG4gICAgICAgICBEZWJ1Zy5Xcml0ZUxpbmUoc3RyaW5nQXJyYXlbaV0pO1xuXG4gICAgICAgICB0cmVlLkluc2VydChzdHJpbmdBcnJheVtpXSk7XG4gICAgIH1cblxuICAgICBEZWJ1Zy5Xcml0ZUxpbmUoXCJUcmVlIFRvU3RyaW5nKCk6XCIpO1xuICAgICBEZWJ1Zy5Xcml0ZUxpbmUodHJlZS5Ub1N0cmluZygpKTtcblxuICAgICBmb3IgKGludCBpID0gMDsgaSA8IHRvdGFsVmFsdWVzOyBpKyspXG4gICAgIHtcbiAgICAgICAgIGlmIChpID4gdG90YWxWYWx1ZXMgfHwgaSA8IDApXG4gICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIHZhciBpbmRleFRvUmVtb3ZlID0gdG90YWxWYWx1ZXMgLSBpIC0gMTtcbiAgICAgICAgIERlYnVnLldyaXRlTGluZShcIlwiKTtcbiAgICAgICAgIERlYnVnLldyaXRlTGluZSgkXCJSZW1vdmUge3N0cmluZ0FycmF5W2luZGV4VG9SZW1vdmVdfVwiKTtcblxuICAgICAgICAgdHJlZS5SZW1vdmUoc3RyaW5nQXJyYXlbaW5kZXhUb1JlbW92ZV0pO1xuXG4gICAgICAgICBEZWJ1Zy5Xcml0ZUxpbmUoXCJUcmVlIFRvU3RyaW5nKCk6XCIpO1xuICAgICAgICAgRGVidWcuV3JpdGVMaW5lKHRyZWUuVG9TdHJpbmcoKSk7XG4gICAgIH1cbiB9XG5cbiBwcml2YXRlIHN0YXRpYyB2b2lkIGludFRlc3QoaW50IHRvdGFsVmFsdWVzKVxuIHtcbiAgICAgdmFyIHRyZWUgPSBuZXcgQmluYXJ5Tm9kZVRyZWU8aW50PigpO1xuXG4gICAgIGludCByYW5kb21OdW1iZXI7XG4gICAgIHZhciBpbnRBcnJheSA9IG5ldyBpbnRbdG90YWxWYWx1ZXNdO1xuXG4gICAgIHZhciBybmQgPSBuZXcgUmFuZG9tKCk7XG4gICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdG90YWxWYWx1ZXM7IGkrKylcbiAgICAge1xuICAgICAgICAgcmFuZG9tTnVtYmVyID0gcm5kLk5leHQoMSwgMTAwKTtcblxuICAgICAgICAgaW50QXJyYXlbaV0gPSByYW5kb21OdW1iZXI7XG5cbiAgICAgICAgIERlYnVnLldyaXRlTGluZShpbnRBcnJheVtpXSk7XG5cbiAgICAgICAgIHRyZWUuSW5zZXJ0KGludEFycmF5W2ldKTtcbiAgICAgfVxuICAgICBEZWJ1Zy5Xcml0ZUxpbmUoXCJUcmVlIFRvU3RyaW5nKCk6XCIpO1xuICAgICBEZWJ1Zy5Xcml0ZUxpbmUodHJlZS5Ub1N0cmluZygpKTtcblxuICAgICBmb3IgKGludCBpID0gMDsgaSA8IHRvdGFsVmFsdWVzOyBpKyspXG4gICAgIHtcbiAgICAgICAgIGlmIChpID4gdG90YWxWYWx1ZXMgfHwgaSA8IDApXG4gICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIHZhciBpbmRleFRvUmVtb3ZlID0gdG90YWxWYWx1ZXMgLSBpIC0gMTtcbiAgICAgICAgIERlYnVnLldyaXRlTGluZShcIlwiKTtcbiAgICAgICAgIERlYnVnLldyaXRlTGluZSgkXCJSZW1vdmUge2ludEFycmF5W2luZGV4VG9SZW1vdmVdfVwiKTtcblxuICAgICAgICAgdHJlZS5SZW1vdmUoaW50QXJyYXlbaW5kZXhUb1JlbW92ZV0pO1xuXG4gICAgICAgICBEZWJ1Zy5Xcml0ZUxpbmUoXCJUcmVlIFRvU3RyaW5nKCk6XCIpO1xuICAgICAgICAgRGVidWcuV3JpdGVMaW5lKHRyZWUuVG9TdHJpbmcoKSk7XG4gICAgIH1cbiB9XG5cbiBwcml2YXRlIHN0YXRpYyBzdHJpbmcgUmFuZG9tU3RyaW5nKGludCBzaXplKVxuIHtcbiAgICAgU3RyaW5nQnVpbGRlciBidWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoKTtcbiAgICAgY2hhciBjaDtcbiAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBzaXplOyBpKyspXG4gICAgIHtcbiAgICAgICAgIGNoID0gQ29udmVydC5Ub0NoYXIoQ29udmVydC5Ub0ludDMyKE1hdGguRmxvb3IoMjYgKiByYW5kb20uTmV4dERvdWJsZSgpICsgNjUpKSk7XG4gICAgICAgICBidWlsZGVyLkFwcGVuZChjaCk7XG4gICAgIH1cblxuICAgICByZXR1cm4gYnVpbGRlci5Ub1N0cmluZygpO1xuIH1cbiBgYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2NWI5MjE4ZC1jYzZiLTQxZWYtYmU0Zi03OGIzOTAxNzcxMTQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01UY3hORFF6T1E9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmdIZXJvZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjg1MTMzZjJiODJlZDQxZGY0NTYxZDQ2MWY2NWJmMWZlY2I4NWRmZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTRPVGszTWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbUNvbnZlcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4M2I2NzNkZTFmZWVjMGY0YTUyNzczYzU4ODkxNjM2ZTBiMGVjZTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM016UXpOekUxTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhjb2RlX1hhbWFyaW5VSVRlc3RfU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY5ZjI4ZGMzM2NkNDI1ZTkwMzFjOGY5ZTJkMjg0ZDkyM2RhYTBmMWEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICJbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vd3d3LmJpdHJpc2UuaW8vYXBwL2RiZmZiZmU0MWE5NjVlYWQuc3ZnP3Rva2VuPXJMSnlkNGQxenBuLUFLU0Y2djdra2cpXShodHRwczovL3d3dy5iaXRyaXNlLmlvL2FwcC9kYmZmYmZlNDFhOTY1ZWFkKVxuIyBYY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcFxuVGhpcyBzYW1wbGUgYXBwIGRlbW9uc3RyYXRlcyBob3cgdG8gY3JlYXRlIFhhbWFyaW4uVUlUZXN0IGZvciBhbiBpT1MgYXBwIGJ1aWx0IGluIFhjb2RlLlxuXG5UaGlzIHJlcG8gY29udGFpbnMgYW4gW2lPUyBhcHAgbWFkZSB1c2luZyBYY29kZV0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9YY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcC90cmVlL21hc3Rlci9YY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcC54Y29kZXByb2opLCBhbmQgYSBbWGFtYXJpbi5VSVRlc3QgbWFkZSB1c2luZyBYYW1hcmluIFN0dWRpb10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9YY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcC90cmVlL21hc3Rlci9YY29kZV9YYW1hcmluVUlUZXN0X1NhbXBsZUFwcC5VSVRlc3RzKS5cblxuVG8gcnVuIGEgVUlUZXN0IGFnYWluc3QgYW4gaU9TIGFwcCwgeW91IHdpbGwgbmVlZCB0byBlbWJlZCB0aGUgQ2FsYWJhc2ggTGlicmFyeSBieSBmb2xsb3dpbmcgW3RoaXMgdHV0b3JpYWxdKGh0dHBzOi8vZ2l0aHViLmNvbS9jYWxhYmFzaC9jYWxhYmFzaC1pb3MpLlxuXG4jIyBTZXR1cFxuXG5UbyBiZWdpbiB1c2luZyB0aGlzIGFwcCwgeW91IHdpbGwgbmVlZCB0byBpbnN0YWxsIGl0cyBDb2NvYVBvZHMgYnkgZm9sbG93aW5nIHRoZXNlIHN0ZXBzOlxuXG4qIEVuc3VyZSB0aGF0IENvY29hUG9kcyBpcyBpbnN0YWxsZWQgb24geW91ciBidWlsZCBtYWNoaW5lXG4gICogT3BlbiBUZXJtaW5hbFxuICAqIEluc3RhbGwgQ29jb2FQb2RzXG4gICAgKiBJbiB0aGUgdGVybWluYWwsIGVudGVyIGBzdWRvIGdlbSBpbnN0YWxsIGNvY29hcG9kc2BcbiAgKiBFbnN1cmUgeW91IGhhdmUgaW5zdGFsbGVkIENvY29hUG9kcyB2MS4wIG9yIGdyZWF0ZXJcbiAgICAqIEluIHRoZSB0ZXJtaW5hbCwgZW50ZXIgYHBvZCBlbnZgXG4gIFxuKiBJbnN0YWxsIHRoZSBDb2NvYVBvZHMgZm9yIHRoaXMgcHJvamVjdFxuICAqIEluIHRoZSBUZXJtaW5hbCwgbmF2aWdhdGUgdG8gdGhlIHByb2plY3QgZGlyZWN0b3J5IFxuICAgICogZS5nLiBjZCB+L1Byb2plY3RzL1hjb2RlX1hhbWFyaW5VSVRlc3RfU2FtcGxlQXBwXG4gICogVGhlbiwgaW5zdGFsbCB0aGUgQ29jb2FQb2RzIGZvciB0aGlzIHByb2plY3QgXG4gICAgKiBJbiB0aGUgdGVybWluYWwsIGVudGVyIGBwb2QgaW5zdGFsbGBcblxuRm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gb24gQ29jb2FQb2RzLCB2aXNpdCBodHRwczovL2NvY29hcG9kcy5vcmcuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjc0NTViNTAtMDllNy00YTBkLTk2ZGEtYTIwMTIxZDNkYmIxIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qa3pOekE0T0E9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3N0YXJ0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NzlkYWU5YzEzYzJiMWMxZTMyYjk2NzU5MmFmNWIxZDliOWUyMWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5Ua3hNREEyT1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2MtbW9uZ28tZGF0YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzNDIyM2ZjZDAxNjE0OGJlMGEyMGFjMDhmZWNjMmI2MzIzZWVkOWZhIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1qRTRNemN6IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJDb2RlQ2FtcGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjQ4YTM4Nzk2MDgzMDZhNzhmYTU0ZGVkZWU2ZWZlYzE2MDQ1OWEyNDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICJDb2RlQ2FtcGVyXG49PT09PT09PT09IgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiN2IxOWU1ZjktYjgyYy00NzFjLWEyMTQtYjc3MjY3ZDg2MWE5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTJPREl6TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctZGVtb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Q0YzY1MDQzYWJiZjVmMDY2YWRmZmMzYWNmMzdmOWY1OGI0NDJhMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UUXlPVFl5TkE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctYXoiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDY3Y2Q5N2RkNTA1NWM2Njg5MjJjZmVhMGQwNmRkMjJlYzYzNTc4MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1ETXhOVGszTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbVNwZWFrIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBlZmVmN2RjYWU0NmU2MmMxMjIxYzBkNDkyMWMxMjU2ODExZTIzYTkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UUTJNelEyTWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2hlZXJ6LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNDgxODMzYzM0MDRjZDRlYmE3M2EwYjQxMDc4M2Y5OTQxYTZmNGZiZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1EWTVOVFUxTlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldpZ2dsZUFuaW1hdGlvbnMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDI5NWFhMzkzNWVjZjc2YWQ3ZjEyOTUxZWI3NDI2MjRhYzUzMmY1MCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UUXpORGt3TUE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXp6IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjc0OGMzNjE1YWYzMDUwOTMyMDhkNGJiOTlmNTNiN2MwM2NkNDliMmQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1Ea3dPVE16TXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkV4cGFuZGFibGVMaXN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNhMTc1MDA5MWU0MjM1N2Q3MTY2ZDkwOTg5YzYxZDRiMTBhODJiNTciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UWTJNRGt6TVE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXoiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FhY2ZhZWM3ZTUyNTllYjk0ZjI2ZjMyYTg4ODlhNmJjOWNhZGFlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9ETXhOVEE0TXc9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtcGVyZiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NTI0NGVhOWQ0YjU1MmU4NDNiMmNmZTE4NTlmZThhZmZmMjI4ZjQ3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFUwTlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ3VscC1wYXR0ZXJucyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlYTZmNGY3Mzk1Yzk4MjY0M2Q3NDg5NzMwODMxMzQ1MjY1NzFlMWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1qSXlOekE1TVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvc21vc0RiU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjZmYjY1MGVlNGFjNzIzNmQ2OTE3MjM2ZjE1ZjQwMWZlYzBlYzA1NDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTNOVEE0TlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY2RhLWxvY2FsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZjkzMDEzMzU2MjM4MTcwYjJlY2I5MTE3OTBhZGViMTM1ZjFmMGU2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qUTFNelE0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10ZXN0aW5nLXF1aWNrLXN0YXJ0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM5ZmZhMzc1NDdjNGUyYjUwMjFhMzY5NjA4Mjg1MTA2NTdjMDk5MTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16VTJOVGN4TVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkltcHJvdmVYYW1hcmluQnVpbGRUaW1lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlNTg0NTFhZmMyMmFmODkwOTQ5ZGI4ZDE4NTI0ZWE4NmRiMjVjYWIzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTROakU0TVRJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicG9ydG8tdGVjaC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI0Y2RjZWQxOGYzZmViMzNmZDBhNDI4YTUxODNmY2RhZmRiYTM0NzUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16VTNOamMwTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3RHJhd2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMxMTQ3Y2E0MjIyYzNjYzM1MzY0NDQ3OWUwZjlkZTIwOTc2OTA3ZTAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56QXhORGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2VuZXJhdG9yLWhvdHRvd2VsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI2ZDUzNzYzMDFiNGJmYTEyNjExZjI5ZDY3NTU2MzdhMjQ5MzA3NDgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5EUTVOamd3TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNob3BwZWRQaWNrZXJSZXByb2R1Y3Rpb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjkyZThiMGM3N2NhODRmYWQ4OWMxOTE1YzgzNTM0YjI0ZDg2NWNmOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU16TTNORFExIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJraXMtcmVxdWlyZWpzLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODhjMTYyZTI3Y2U0M2E5OTQzZjM5NmViNzk5M2ZhNmM4ZjNlMjBjOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogImtpcy1yZXF1aXJlanMtZGVtb1xuPT09PT09PT09PT09PT09PT09XG5cbktlZXAgSXQgU2ltcGxlIFJlcXVpcmVKUyBEZW1vLiAgU2hvd3Mgc2ltcGxlIGRlbW8gb2YgaG93IHRvIHVzZSByZXF1aXJlLmpzLlxuXG4jI092ZXJ2aWV3XG5UaGlzIGRlbW8gY29udGFpbnMgMiBzZXBhcmF0ZSBodG1sIGZpbGVzLCBlYWNoIHdpdGggdGhlaXIgb3duIHNjcmlwdHMgZm9sZGVyLiBPbmUgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgaG93IHRvIHdyaXRlIHRoZSBjb2RlIHdpdGhvdXQgcmVxdWlyZS5qcy4gVGhlIG90aGVyIHNob3dzIGhvdyB0byBhZGQgcmVxdWlyZS5qcy4gVGhlIHB1cnBvc2UgaXMgdG8gZXhwbGFpbiBob3cgdG8gdXNlIHJlcXVpcmUuanMgZm9yIGRlcGVuZGVuY3kgcmVzb2x1dGlvbi4gXG5cblxuIyNXaXRob3V0IFJlcXVpcmVKU1xuVGhlIGZpcnN0IGV4YW1wbGUgKGluZGV4MS5odG1sKSBoYXMgMyBKYXZhU2NyaXB0IGZpbGVzIHVzaW5nIHRoZSBSZXZlYWxpbmcgTW9kdWxlIFBhdHRlcm4gKE1vZHVsZSBQYXR0ZXJuIHdvcmtzIGZpbmUgdG9vKS4gVGhlIGRlcGVuZGVuY2llcyBhcmUgYXMgZm9sbG93czpcblxuLSBtYWluLmpzIGRlcGVuZHMgb24gYWxlcnRlci5qc1xuLSBhbGVydGVyLmpzIGRlcGVuZHMgb24gZGFhdGFzZXJ2aWNlLmpzXG5cbkxvYWQgb3JkZXIgaXMgaW1wb3J0YW50IGhlcmUsIGFuZCBjYW4gZWFzaWx5IGJlIGJyb2tlbi5cblxuIyNXaXRoIFJlcXVpcmVKU1xuVGhlIHNlY29uZCBleGFtcGxlIChpbmRleDIuaHRtbCkgdXNlcyByZXF1aXJlLmpzIHRvIGxvYWQgdGhlIHNjcmlwdHMuIEl0IHNvbHZlcyB0aGUgcHJvYmxlbSBhbmQgaGFzIHRoZXNlIHJvbGVzOlxuXG4tIHN0YXJ0cyB3aXRoIGEga2lja29mZiBzY3JpcHQgKG1haW4uanMpXG4tIGxvYWRzIHRoZXJlc3Qgb2YgdGhlIHNjcmlwdHMgYXMgdGhleSBhcmUgbmVlZGVkICh3aGVuIGRlcGVuZGVuY2llcyBjYWxsIG9uIHRoZW0pXG5cbiMjV2l0aCBSZXF1aXJlSlMgYW5kIDNyZCBQYXJ0eSBEZXBlbmRlbmNpZXNcblRoZSB0aGlyZCBleGFtcGxlIChpbmRleDMuaHRtbCkgdXNlcyByZXF1aXJlLmpzIHRvIGxvYWQgdGhlIHNjcmlwdHMgd2hpbGUganF1ZXJ5IGlzIGFsc28gaW50cm9kdWNlZCBhcyBhIGRlcGVuZGVuY3kuIFxuXG5cbiMjTW9yZVxuUmVsYXRlZCB0b3BpY3M6IERlcGVuZGVuY3kgSW5qZWN0aW9uIChESSksIFJldmVhbGluZyBNb2R1bGUgUGF0dGVybiwgTW9kdWxlIFBhdHRlcm4sIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhlY3V0aW9uIChJSUZFKSwgYW5kIFNlcnZpY2UgTG9jYXRvciBQYXR0ZXJuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZmU4YjkyOWMtM2I0Ny00ZDQ5LTljMDEtN2E4YmZlZWQ0MzdmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9ETXdPVFkyTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYmFyZGpzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZmZjY0ZTJiY2YxYjkzMTkyNWE2N2JiOTgzYjlmNThmYTU1NGZmMzUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVXlOak16TWpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZmF2LXRhbGtzLWV2ZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjRkZGMzZjcwNTk5N2U1MDMyZGY1YWIyYzdlZjJjYTEzZDg4ZmNkOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM056WTBOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlYWxtU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM0Y2U5NzQwOGNjNzc3YjFjNGIyN2QyMzI5NzhmMThkMzFlZThkYTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFJlYWxtU2FtcGxlQXBwXG5BbiBpT1MgYW4gQW5kcm9pZCBhcHAgY3JlYXRlZCBpbiBYYW1hcmluLkZvcm1zIHVzaW5nIFJlYWxtLmlvIGZvciBsb2NhbCBkYXRhIHN0b3JhZ2VcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxZDU0NDYwYy0xZjg3LTRmM2QtOTRmMi1lOWJhMTdlYjNiOGEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVTBNekl3TURrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY2ktZGVtbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjOTdlNjM0M2JjMzRmYWNhNjMwNzRiNTczZDQ1MzY0MjkxMjZiYmQ4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM056TTBNakk1TUE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNhdmVJbWFnZVRvRGF0YWJhc2VTYW1wbGVBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYWQ3MTY0NWIxNjI5YzRmODZkMGUyZGU4MWJlYTUxODM2NWM0NWY0YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFNhdmVJbWFnZVRvRGF0YWJhc2VTYW1wbGVBcHBcblxufENJIFRvb2wgICAgICAgICAgICAgICAgICAgIHxCdWlsZCBTdGF0dXN8XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLXxcbnwgQXBwIENlbnRlciwgaU9TICAgICAgICAgICB8IFshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzL2JlODRiYTY2LWMzMTEtNGMzMy1iM2NiLTJlYjc5OGYyOTgwZi9icmFuY2hlcy9tYXN0ZXIvYmFkZ2UpXShodHRwczovL2FwcGNlbnRlci5tcykgfFxufCBBcHAgQ2VudGVyLCBBbmRyb2lkICAgICAgIHwgWyFbQnVpbGQgc3RhdHVzXShodHRwczovL2J1aWxkLmFwcGNlbnRlci5tcy92MC4xL2FwcHMvNTU2Y2Y0ZDktMDhkMi00ZTY5LThiYTktZDJlZDY4YWE2ZDIwL2JyYW5jaGVzL21hc3Rlci9iYWRnZSldKGh0dHBzOi8vYXBwY2VudGVyLm1zKSAgfFxuXG5UaGlzIHNhbXBsZSBhcHAgZGVtb25zdHJhdGVzIGhvdyB0byBkb3dubG9hZCBhbiBpbWFnZSBmcm9tIGEgdXJsIGFuZCBzYXZlIGl0IHRvIGEgbG9jYWwgU1FMaXRlIGRhdGFiYXNlLlxuXG5bYERvd25sb2FkSW1hZ2VBc3luYygpYF0oLi9TYXZlSW1hZ2VUb0RhdGFiYXNlU2FtcGxlQXBwL1ZpZXdNb2RlbC9Mb2FkSW1hZ2VWaWV3TW9kZWwuY3MjTDE2Mikgc2hvd3MgaG93IHRvIGRvd25sb2FkIHRoZSBpbWFnZSBhcyBhIGBieXRlW11gIGZyb20gYSBVUkwgdXNpbmcgYEh0dHBDbGllbnRgLlxuXG5UaGUgW2RhdGFiYXNlIG1vZGVsXShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1NhdmVJbWFnZVRvRGF0YWJhc2VTYW1wbGVBcHAvYmxvYi9tYXN0ZXIvU2F2ZUltYWdlVG9EYXRhYmFzZVNhbXBsZUFwcC9Nb2RlbC9Eb3dubG9hZGVkSW1hZ2VNb2RlbC5jcykgc3RvcmVzIHRoZSBpbWFnZSBhcyBhIGBieXRlW11gLiBXaGVuIHRoZSBpbWFnZSBpcyByZXRyaWV2ZWQgZnJvbSB0aGUgZGF0YWJhc2UsIGl0IGlzIGNvbnZlcnRlZCBmcm9tIGEgYGJ5dGVbXWAgdG8gYSBYYW1hcmluLkZvcm1zLkltYWdlU291cmNlLlxuXG4hW1VJIERlbW9dKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVmlkZW9zL2Jsb2IvbWFzdGVyL1NhdmVJbWFnZVRvRGF0YWJhc2VTYW1wbGVBcHAvRGVtby5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMDRiOGMzZDUtOWE1OC00NzBiLWFhZGMtNDM3NzQ0MmNmM2NjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05qRTFNamN5TlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVJVGVzdFNhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNGNjMzJlNTE2MGQzNWQ3Y2EwYWQ5NTk2MWZjOTZhYjA1ZmZhZTMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIjxhIGhyZWY9XCJodHRwczovL3d3dy5idXltZWFjb2ZmZWUuY29tL2JtaW5uaWNrXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGltZyBzcmM9XCJodHRwczovL2Nkbi5idXltZWFjb2ZmZWUuY29tL2J1dHRvbnMvZGVmYXVsdC1vcmFuZ2UucG5nXCIgYWx0PVwiQnV5IE1lIEEgQ29mZmVlXCIgc3R5bGU9XCJoZWlnaHQ6IDUxcHggIWltcG9ydGFudDt3aWR0aDogMjE3cHggIWltcG9ydGFudDtcIiA+PC9hPlxuXG58Q0kgVG9vbCAgICAgICAgICAgICAgICAgICAgfEJ1aWxkIFN0YXR1c3xcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tfFxufCBBcHAgQ2VudGVyLCBpT1MgICAgICAgICAgIHwgIFshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzLzAxODRiZjQ4LWYxMDItNDAwYy1hZWQwLTYyOWZkZWIzODY5Ni9icmFuY2hlcy9tYWluL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpfFxufCBBcHAgQ2VudGVyLCBBbmRyb2lkICAgICAgIHwgWyFbQnVpbGQgc3RhdHVzXShodHRwczovL2J1aWxkLmFwcGNlbnRlci5tcy92MC4xL2FwcHMvODY0ZGY5NTgtYmNjYS00MDFkLThmOTMtYWUxNTljZDVhOWQzL2JyYW5jaGVzL21haW4vYmFkZ2UpXShodHRwczovL2FwcGNlbnRlci5tcykgfFxuXG4jIFNhbXBsZSBBcHAgRGVtb25zdHJhdGluZyBVSVRlc3RzXG5UaGlzIGFwcCBzaG93cyBob3cgdG8gaW1wbGVtZW50IFVJVGVzdHMgaW50byBhIFhhbWFyaW4uRm9ybXMgcHJvamVjdC5cblxuVGhlIFVJVGVzdHMgZm9sbG93IHRoZSByZWNvbW1lbmRlZCBwcmFjdGljZSBvZiBQYWdlIE9iamVjdCBBcmNoaXRlY3R1cmUuIEluIHRoZSBYYW1hcmluLkZvcm1zIHZpZXdzLCB3ZSd2ZSBhZGRlZCBhbiBgQXV0b21hdGlvbklkYCB0byBlYWNoIGNvbnRyb2wgdG8gc2hvdyBob3cgVUlUZXN0IGludGVyYWN0IHdpdGggY29udHJvbHMgY3Jvc3MtcGxhdGZvcm0sIHVzaW5nIHRoZWlyIEF1dG9tYXRpb25JZC4gXG5cbkl0IGRlbW9uc3RyYXRlcyBob3cgdG8gdXRpbGl6ZSBbQmFja2Rvb3JzIGluIFVJVGVzdF0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXBwY2VudGVyL3Rlc3QtY2xvdWQvdWl0ZXN0L3dvcmtpbmctd2l0aC1iYWNrZG9vcnM/V1QubWNfaWQ9dWl0ZXN0c2FtcGxlYXBwLWdpdGh1Yi1icmFtaW4pIHRvIGJ5cGFzcyBhIGxvZ2luIHNjcmVlbiwgaW1wcm92aW5nIHRoZSBzcGVlZCBvZiB0aGUgdGVzdHMuIFxuXG5JdCBhbHNvIGRlbW9uc3RyYXRlcyBob3cgdG8gdXRpbGl6ZSBbQXBwIExpbmtzXShodHRwczovL2RldmJsb2dzLm1pY3Jvc29mdC5jb20veGFtYXJpbi9kZWVwLWxpbmstY29udGVudC13aXRoLXhhbWFyaW4tZm9ybXMtdXJsLW5hdmlnYXRpb24/V1QubWNfaWQ9dWl0ZXN0c2FtcGxlYXBwLWdpdGh1Yi1icmFtaW4pIGluIFVJVGVzdGluZyB0byBuYXZpZ2F0ZSBxdWlja2x5IHRvIHRoZSBwYWdlIHVuZGVyIHRlc3QuIEFwcCBMaW5rcyBpcyBbaW5pdGlhbGl6ZWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVUlUZXN0U2FtcGxlQXBwL2Jsb2IvbWFzdGVyL1NyYy9VSVRlc3RTYW1wbGVBcHAvQXBwLmNzI0w1MykgYW5kIFtleGVjdXRlZF0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9VSVRlc3RTYW1wbGVBcHAvYmxvYi9tYXN0ZXIvU3JjL1VJVGVzdFNhbXBsZUFwcC9BcHAuY3MjTDQ1KSBpbiB0aGUgc291cmNlIGNvZGUgZm9yIHRoZSBhcHAgaW4gW0FwcC5jc10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9VSVRlc3RTYW1wbGVBcHAvYmxvYi9tYXN0ZXIvU3JjL1VJVGVzdFNhbXBsZUFwcC9BcHAuY3MpLiBUaGUgVUlUZXN0IGBTZWxlY3RJdGVtT25MaXN0Vmlld2AgdXNlcyBhIGJhY2tkb29yIG1ldGhvZCB0byBbZXhlY3V0ZSB0aGUgQXBwIExpbmtzXShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1VJVGVzdFNhbXBsZUFwcC9ibG9iL21hc3Rlci9TcmMvVUlUZXN0U2FtcGxlQXBwLlVJVGVzdHMvVGVzdHMvVGVzdHNBZnRlckxvZ2luU2NyZWVuLmNzI0w1OCkgYW5kIG5hdmlnYXRlIGRpcmVjdGx5IHRvIHRoZSBMaXN0UGFnZS5cblxuVGhlIGxvZ2luIHBhZ2UgbGV2ZXJhZ2VzIHRoZSBbUmV1c2FibGUgTG9naW4gUGFnZV0oaHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWwtd2F0c29uL0Zvcm1zLUV4cGVuc2VzL3RyZWUvbWFzdGVyL015TG9naW5VSSkgY3JlYXRlZCBieSBbTWljaGFlbCBXYXRzb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9taWNoYWVsLXdhdHNvbikuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiM2I3ZjBjZjgtZjE2OS00ZTg2LTgwNjUtMzQ4YWQzMzJkM2EyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5Ea3hOemt6TlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZvcm1zSWxsZWdhbEFyZ3VtZW50UmVwcm9kdWN0aW9uIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjkwNDFlMzIzZDg2N2YxNmIyZTg2Mjc4NDYxNzM2MTc3N2JmOGY2ZjEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVTJORFEzT0RZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jb3Ntb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDljMzlmYjI5NDNkYWU1ZmY5ZWE3ZjI3YjMwYjQ1ZTZjYjk1MDg0NSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EWTFNemMyTmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY2lyY2xlY2kiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMGIxZmY4M2UwYjRiMjVkNzEzNmVkOGIzNjRlYzU3ZjE2NWI0ZTMwMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UWTVNamMyTXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbnRleHRBY3Rpb25PbkFwcGVhcmluZ1JlcHJvZHVjdGlvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlZTdjODc3MGRiZTQ4MTA2NjQ3NWY4ODhhYTJmYjY2M2U2NDAzZTU2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek16TXpPREl6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVGltZXNoZWV0cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZGFhM2Q5MDg5ZmU5MmQzYzQ2ZWQ5ZTM1MTdjNzU2ZDI3M2E1MWEyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EZ3hOelUzTURFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZGVwbG95LWFuZ3VsYXItY2xvdWQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODMyZmIyNTZiNWVmNzMzMWRhNmJkNWNlYzE0NzUzZWJlMjIxYzliYyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UazRPRGc1TkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVJVGVzdGluZ1dlYlZpZXdzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdlODUxZTA5YTc3ZThjYjliYWYzMDc2OTUzMTU1OTExZWE1ZDQ1OGMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtYW5ndWxhci10eXBlc2NyaXB0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ea3hNalUyTmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ2VuZXJhdGUtc2FzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0MmRhOTllZDM0ZjFkNzI3MWRhMjM1NDA4MzNkYzg0MTlhNDZjNTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5EUXhPVEk1T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXNwbmV0NS13b3Jrc2hvcC0yMDE1IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI0MjgzZmNiNWM5Y2I0ZjY4ZDMyOTcxYmQ3MzM2Y2Y0YzZiNzMxN2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5qQTBNamcyTVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtcy1Nb2JpbGVDZW50ZXJQdXNoLUFwcExpbmtzLVJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY5NDg0ZjlkMzBiMTI1MTI1Yjk3YmNkMzkxMDFhN2U2NzgxNmM1NzciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ea3hNall5TnprPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxvYi11cGxvYWRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNDI4MjYyYTJjYjQxM2U5NWMxMzc5ZTA4OTEwMmZiZjgwZTRmOTVlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERXdOelF4T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiRVM2LU1vZHVsZXMtU3RhcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2N2Y4ZmViOThiOTQ2NDg4MmI5NTA5NjVmZjQ2YzJhYTRhZjYyNWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9ETTFNVEl5T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbUxpc3QiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTQyYzUzYzg1YmM4NTVlNDgzNDk5OTVlZjZkZTE2MmE4MTNlOTFkYiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERTRNVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzYxZmY0ZTBkOTg2YTQ1OWM4NDE0YWVlYTZhZTBhNTcyMTE1Mzc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQTRNREk1TnpNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxvYi10cmlnZ2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjkzOGRmNzcwNjc4NDU4YjNkZjdhNTk3NzVmY2Q4OTRiNmQ4OGM5MzQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UY3dOakEwTmc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbUNhbSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiN2Y0NDUzMjlkOGU1N2IzN2Q1NDlhZWZmNWRmYzkwZWZlNzM1YzU4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1URTROVEE1TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtZWxlY3Ryb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTFkYjVmZGIyODcwOTYyNzEzMDM4ZjRhZTc1YzQwYWJlNTI2OWVmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQTRNemN5TVRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1sb25kb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTY1MDc4ZGMwOGQ3Y2VmMmU0Y2JiZTIyNmQwYWMxMTgzNWY0MTU4NiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERXlNVFl4TXpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdyaWRUb1JlbGF0aXZlTGF5b3V0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYyZmFmNGFjNjk2ZjMwMjFhZDk2YWMxZDc3NDIyMDRlNTQ1ODMwNjAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1UY3pOakV6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10b3VyLW9mLWhlcm9lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNjU5Njc3MTBlOGIxYjg3YzBlNmE0ZjE5ZWVhMmI1ZjU0ZTdjNTBlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVNek0yTnpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm91bmFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjZjcwZWRlMDFjOWZlZGYwNDE5MGNkMDEwYTBjY2FlODIzZDI4ODM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERXlNelEyT1RjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkF6dXJlTWVkaWFTZXJ2aWNlc1NhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmMTFjMzEwZGEwMjgyNzNkNDYwZmI0MmJhODdkOGZhNTEwOTMzNmMzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UVTRNRGszIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJ0ZWxla2luZXNpcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4NDc3MDQ5MWM5MGUzN2FkODVjNzE1NzJjM2M5MGFjYmJlZTlmN2I5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyB0ZWxla2luZXNpc1xuKip0ZWxla2luZXNpcy5qcyoqIGlzIGEgSmF2YVNjcmlwdCBsaWJyYXJ5IHRoYXQgaGVscHMgeW91IHdyaXRlIGNvZGUgYnkganVzdCB0aGlua2luZyBpdCEgV29ya3MgZ3JlYXQgd2l0aCB2YW5pbGxhLmpzXG5cbiMjIyBUaGlzIGlzIGFuIEFwcmlsIEZvb2xzIERheSBqb2tlIC4uLiBsZWF2ZSB5b3VyIHNpZ2hzIGF0IHRoZSBkb29yLiBJdCBmdWxseSBlbnRlcnRhaW5lZCBteSBjaGlsZHJlbiA6KVxuXG5cbkZvciBtb3JlIHNlZSAoaHR0cDovL3d3dy5qb2hucGFwYS5uZXQvYmVzdC1qYXZhc2NyaXB0LWxpYnJhcnktZXZlci8pXG5cbj4gXCJUaGlua1wiIGNvZGUgYW5kIGl0IHdyaXRlcyBpdHNlbGYhXG5cbiMjIEN1cnJlbnQgVmVyc2lvblxuMS4wLjAtcHJlXG5cbiMjIFF1aWNrIHN0YXJ0XG5cbiMjIyAzIEVhc3kgU3RlcHNcbjEuIExpbmsgdG8gdGVsZWtpbmVzaXMuanMgYDxzY3JpcHQgc3JjPVwidGVsZWtpbmVzaXMuanNcIj48L3NjcmlwdD5gXG5cbjIuIFRoaW5rIGFib3V0IHlvdXIgY29kZVxuXG4zLiBXYXRjaCBpdCB3cml0ZSBpdHNlbGYhXG5cbiMjIEF1dGhvclxuKipKb2huIFBhcGEqKlxuXG4rIGh0dHA6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGFcblxuIyMgQ29weXJpZ2h0XG5Db3B5cmlnaHQgwqkgMjAxMyBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vSm9obl9QYXBhKS5cblxuIyMgTGljZW5zZSBcbnRvYXN0ciBpcyB1bmRlciBNSVQgbGljZW5zZSAtIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQ2MTAyYmE1LTQ1ZjItNGNhZS1hZTgxLTU5NjY1YWJiYjExOCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EUTNPRFl3TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibGl0ZS1zZXJ2ZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmJjNmIwYzYzYzdhODJjMDFiN2IxMTM1NzljMzE0MDBjNDE1ZmE3NSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTFNRFEwTVRBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlZpZXdDZWxsT25EaXNhcHBlYXJpbmciLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjA3ODhhMTgyNjE4Mjk2NTE5MDM1MDBkNDE0ZGFhZmNkMjkzMTcwMyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UVTBNRGM1TnpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHJvcGVydHktc3VnZ2VzdGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRhMGFkNWJjN2Y2MGJmZDc0MDk3Y2U4NjgzOWU4NzY0NWI0NjM0ODkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EZzFOakkwTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVHlwZVNjcmlwdERlbW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ4YTc2N2NmMjNkN2ViMDQ4ZDA0NDdmYjk3MTczYjczODc0ZWMwZGUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ua3lORFF3T1RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmdyeC1zY2hlbWF0aWNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImExOWFiYjFhYmZmM2ExYzk2M2Y4ZmMwNDI4YTViM2FlYTQ3ZmUyODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTFOemc1TnpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3NzZiYTkwMjdjNThlNGQ5NWVjNmNkMjYxZjBiOTc1ZDRjODFiOTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09URTFNVFF5T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlBvd2VyQklTYW1wbGVBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTFhZDQyZTIyNWYyMDJmOTA4NjA3ZTFkN2ZlMTNjNWY0ZjEwMWFkOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFBvd2VyQklTYW1wbGVBcHBcblxuQSBzYW1wbGUgYXBwIGRlbW9uc3RyYXRpbmcgaG93IHRvIGludGVyYWN0IHdpdGggYSBQb3dlckJJIGJhY2tlbmQgZm9ybSBhIFhhbWFyaW4uRm9ybXMgYXBwXG5cbiMjIFRvIERvXG5cblRvIHVzZSB0aGlzIHNhbXBsZSwgeW91IHdpbGwgbmVlZCB0byBjcmVhdGUgYSBuYXRpdmUgYXBwIHJlZ2lzdHJhdGlvbiBmb3IgeW91ciBBenVyZSBBRCBpbnN0YW5jZS5cblxuQmVsb3cgYXJlIHRoZSBzY3JlZW5zaG90cyBmb3IgdGhlIE5hdGl2ZSBBcHAgUmVnaXN0cmF0aW9uIHRoYXQgaXMgYmVpbmcgdXNlZCBmb3IgdGhpcyBzYW1wbGUuIEl0IGlzIHdoZXJlIHlvdSdsbCBmaW5kIHRoZSBgQXBwbGljYXRpb25JZGAgYW5kIGBSZWRpcmVjdFVybGAgZm9yIHlvdXIgTmF0aXZlIEFwcCBSZWdpc3RyYXRpb24uXG5cbkZvciB0aGUgY29tcGxldGUgd2Fsa3Rocm91Z2ggb24gaG93IHRvIGVtYmVkIFBvd2VyQkkgaW50byB5b3VyIGFwcCwgZm9sbG93IHRoZXNlIHN0ZXBzOiBbXCJUdXRvcmlhbDogRW1iZWQgYSBQb3dlciBCSSByZXBvcnQsIGRhc2hib2FyZCwgb3IgdGlsZSBpbnRvIGFuIGFwcGxpY2F0aW9uIGZvciB5b3VyIGN1c3RvbWVyc1wiXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9wb3dlci1iaS9kZXZlbG9wZXIvZW1iZWQtc2FtcGxlLWZvci1jdXN0b21lcnM/V1QubWNfaWQ9cG93ZXJiaXNhbXBsZWFwcC1naXRodWItYnJhbWluKS5cblxuIyMjIEF6dXJlIEFEIEFwcCBSZWdpc3RyYXRpb25cblxuSW4gQXp1cmUgQUQsIGNyZWF0ZSBmb2xsb3cgdGhlIEFwcCBSZWdpc3RyYXRpb24gcHJvY2VzcyB0byBjcmVhdGUgYSAqKk5hdGl2ZSoqIEFwcGxpY2F0aW9uIFR5cGVcblxuIVtBcHAgUmVnaXN0cmF0aW9uXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81MTc5MDEzNi00MTM4ZmEwMC0yMTg5LTExZTktODEyYS1iNmNjZDFkMGM5ODEucG5nKVxuXG4jIyMgQXp1cmUgQUQgQXBwLCBBUEkgUGVybWlzc2lvbnNcblxuSW4gdGhlIE5hdGl2ZSBBcHBsaWNhdGlvbiBjcmVhdGVkIGluIEF6dXJlIEFELCBzZWxlY3QgKipBUEkgcGVybWlzc2lvbnMqKiBhbmQgYWRkIHBlcm1pc3Npb25zIGZvciBQb3dlciBCSSBTZXJ2aWNlc1xuXG4hW0FQSSBQZXJtaXNzaW9uc10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTg1OTgzNDEtYzQwMWJjODAtODIzMC0xMWU5LThhOTEtZTgxNThiODAxODE2LnBuZylcblxuIyMjIEFwcGxpY2F0aW9uSURcblxuVGhpcyBpcyB0aGUgdmFsdWUgeW91J2xsIHVzZSBmb3IgW2BBenVyZUNvbnN0YW50cy5BcHBsaWNhdGlvbklkYF0oL1Bvd2VyQklTYW1wbGVBcHAvQ29uc3RhbnRzL0F6dXJlQ29uc3RhbnRzLmNzKVxuXG4hW0FwcGxpY2F0aW9uSWRdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzUxNzkwMTM1LTQwYTA2MzgwLTIxODktMTFlOS04MGQzLWE0OTc0YjFkNmQ0NS5wbmcpXG5cbiMjIyBSZWRpcmVjdCBVUkxcblxuVGhpcyBpcyB0aGUgdmFsdWUgeW91J2xsIHVzZSBmb3IgW2BBenVyZUNvbnN0YW50cy5SZWRpcmVjdFVSTGBdKC9Qb3dlckJJU2FtcGxlQXBwL0NvbnN0YW50cy9BenVyZUNvbnN0YW50cy5jcylcblxuIVtSZWRpcmVjdFVybF0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTE3OTAxMzctNDEzOGZhMDAtMjE4OS0xMWU5LTljMGMtNWU2ODVmMWE5NzcxLnBuZylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0ZDc1MGM3OC1jMjlhLTRlYzMtODM5Ny1hOTE0MmZhMjFkMjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVNREU1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXIxLXNuaXBwZXRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY2ZDYyMzY0NTM0ZGRiNmZjZDNkZmVhOWQxOTQ0ZGQ1MGRmMmY0ZDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ua3lOelV5T0RRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidG9kbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmZWNiYWY3YTIxNDc5YWQwOTc4MmQ4YTQ1MjdmOTNlNjE5MDZiZjg1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTVNRFkyTlRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkF6dXJlQmxvYlN0b3JhZ2VTYW1wbGVBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTRiNjBjM2EyMzZjOTVhMDM3MDZlZjVhNDA1MGJlZTgwYzM3MTBmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVPRGd6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXItc25pcHBldHMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDk4OTk1N2ZmOWFlOWUxZjYyOTA0NDI0YWU3YmQ3MGM4MmY3ZTQwMyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXhPVGM0TnpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNWQyNWVjMTc3MDNlNWZmNGFiNmM5MzYxMzc5MzVjZWIzN2RjY2ZmNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ESTFNREkwTmpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkZhY2lhbFJlY29nbml0aW9uTG9naW4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTZkMjIxYjZmMWY0ZGIyYzQzMDIwZGZjZTdkMGE0NjU2NTNhZWQ4NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qTXhPVFk0TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUmVhZGluZ0J1ZGRpZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjljMGQwMzQ2OTYyMTBiNjJjMzM3NDM2OWM2ODFmMDIzOTY5NGJlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXpNREl5TkRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtc2VydmVybGVzcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNGM1YzU1ZTZiMjlhZGVkNTU3YTA4MDNkYjRhYjhkZjNhMmEzOGUyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETXdOalkyT1RBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJhcmNvZGVSZWFkZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjc2ZTAzNTM1MDkzYzg3NTE4MWFjYjVlZGFkNzNmY2FkNjllZjlhYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9UTXdPRGM1Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci0yLWZpcnN0LWxvb2stbGF1bmNoZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTYzNzVhY2U4N2UwN2M5ZWFlNTBkMjNkMzFhMWZlZDI1MDVmZDk0ZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qVTBPVGMxIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJQbHVyYWxzaWdodFNwYUp1bXBTdGFydEZpbmFsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjhlNTJlYmVlODQ0ZDk0YzUwNGU0MzVmODU3OGQ4ZmM4MTU5NmRlYjMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICJTUEEgSnVtcFN0YXJ0XG49PT09PT09PT09PT1cblxuU291cmNlIGNvZGUgZm9yIHRoZSBTUEEgSnVtcFN0YXJ0IFBsdXJhbHNpZ2h0IGNvdXJzZSBhdCBodHRwOi8vanBhcGEubWUvc3BhanNwc1xuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzYWJhNDcyMi05YjlkLTRiZmEtYmNhMy1iZWM3ODBjMGRhYWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTVPVEU1Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2xpbXBzZS50b2FzdHIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjU0NzQ1NGE0NjA1MjE5ODUwMTZmYmRjMjNhMDA0NzcxMWYxZDc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIkdsaW1wc2UuVG9hc3RyIFBsdWdpblxuPT09PT09PT09PT09XG5cblNvdXJjZSBjb2RlIGZvciB0aGUgR2xpbXBzZS5Ub2FzdHIgcGx1Z2luIGZvciBpbnRlZ3JhdGluZyB0b2FzdHIgZGlhZ25vc3RpY3MgaW50byBHbGltcHNlXG5cbiMjIEN1cnJlbnQgVmVyc2lvblxuMC4yLjBcblxuIyMgRGVtb1xuRGVtbyBjYW4gYmUgZm91bmQgW2hlcmVdKGh0dHA6Ly9Db2RlU2V2ZW4uZ2l0aHViLmNvbS90b2FzdHIpXG5cbiMjIFVzYWdlXG5MaW5rIHRvIGpxdWVyeSwgdG9hc3RyLmNzcywgdG9hc3RyLmpzLCBnbGltcHNlLmpzIGFuZCBnbGltcHNlLnRvYXN0ci5qc1xuXG5cdDxzY3JpcHQgc3JjPVwianF1ZXJ5LmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwidG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwiZ2xpbXBzZS5qc1wiPjwvc2NyaXB0PlxuXHQ8c2NyaXB0IHNyYz1cImdsaW1wc2UudG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cblVzZSB0b2FzdHIgXG5cblx0JChmdW5jdGlvbigpeyBcblx0XHR0b2FzdHIuaW5mbygndGVzdGluZycpOyBcblx0fSkoKTtcblxuQ2xpY2sgdGhlIEcgaWNvbiBpbiB0aGUgYm90dG9tIHJpZ2h0IG9mIHlvdXIgYnJvd3NlciBhbmQgZW5qb3khXG5cbiFbXShodHRwOi8vam9obnBhcGEubmV0L3dwLWNvbnRlbnQvaW1hZ2VzL2dsaW1wc2UudG9hc3RyLnBuZylcblxuXG4jIyBEZXBlbmRlbmNpZXNcblJlcXVpcmVzICBbdG9hc3RyXShodHRwOi8vanBhcGEubWUvYzd0b2FzdHIpIDEuMy4xK1xuXG4jI1Jlc291cmNlc1xuLSBbZ2xpbXBzZSBwcm90b2NvbHNdKGh0dHA6Ly9nZXRnbGltcHNlLmNvbS9Qcm90b2NvbClcbi0gW2dsaW1wc2UgY2xpZW50IHNhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9HbGltcHNlL0dsaW1wc2UvYmxvYi9tYXN0ZXIvc291cmNlL0dsaW1wc2UuSmF2YVNjcmlwdC90ZXN0X2NsaWVudC5odG1sI0wxMDEtTDEyMSlcblxuIyMgQXV0aG9yXG4qKkpvaG4gUGFwYSoqXG5cblR3aXR0ZXI6IFtAam9obl9wYXBhXShodHRwOi8vdHdpdHRlci5jb20vSm9obl9QYXBhKVxuXG4jIyBDb3B5cmlnaHRcbkNvcHlyaWdodCDCqSAyMDEzIFtKb2huIFBhcGFdKGh0dHA6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGEpLlxuXG4jIyBMaWNlbnNlIFxuZ2xpbXBzZS50b2FzdHIgaXMgdW5kZXIgW01JVCBsaWNlbnNlXShodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocCkiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwN2ExMzA3My0zYWI2LTQxODYtYTAxNy0yYjE4YmVjNGMzODMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXpOVFkzT1RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGJwLXNlcnZlcmxlc3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2JlYzJiNmQxNTg1YTQ2ODk4ZTUwZWY0MGVlYmYxZjJlYTljZWNiMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9Ua3dNelEzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c3RvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNzM5MjcxMTExNDU1Mzc0ZmY3ZGUxYjI1NzgxMmQ5Njk1Mjk0MTc2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTFPVFl3TlRBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlZpZGVvcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiMzczNTQ4ZmU1YjBiM2MxY2U0MmQxZTJjNTc4ZjhhODkzMGYyMjMyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qRXpNVFk1T1RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2ViYXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY1MzdjY2EyNmRiM2ExNjQ2ZmU2ODFlYjE2NTgyNzllNTRiNGU2YzYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU1ESXlNRFE1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWV4YW1wbGVzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5ZjRiZjJmYzQ1NDgzODI0OGY4OWU4ODY0MmE3MjA3NTRjMTVjYTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1ERXhOamszTlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk9uU2lnaHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzgzOTgwZmZhY2Y3YjVlM2NlN2VjNjg1ZjYxYWE2OGJlOWRlMTU5YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgT25TaWdodFxuVGhpcyBpcyBhbiBpT1MsIEFuZHJvaWQsIGFuZCBVV1AgYXBwIGNyZWF0ZWQgdXNpbmcgWGFtYXJpbi5Gb3Jtcy5cblxuT25TaWdodCB3YXMgY3JlYXRlZCB0byBoZWxwIGZpZWxkIHRlY2huaWNpYW4gaW5zcGVjdCBjcm9wcy4gSXQgYWxsb3dzIHRoZSB0ZWNobmljaWFuIHRvIHRha2Ugbm90ZXMgYW5kIHBob3RvcyBkdXJpbmcgdGhlaXIgZmllbGQgaW5zcGVjdGlvbi5cblxuVGhpcyBhcHAgdXRpbGl6ZXMgYW4gTVZWTSBBcmNoaXRlY3R1cmUgYW5kIGluY29ycG9yYXRlcyBhIGxvY2FsIFNRTGl0ZSBEYXRhYmFzZS4gSXQgYWxzbyB1c2VzIHRoZSBDb21wdXRlciBWaXNpb24gQVBJIGhvc3RlZCBieSBNaWNyb3NvZnQgQ29nbml0aXZlIFNlcnZpY2VzIHRvIGVuc3VyZSB0aGUgcGhvdG8gaXMgYSB2YWxpZCBwaG90byBvZiBwbGFudHMuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTUwZWU2YzctYjI0Ni00NGM2LTkyODktZGQ2NWViZjQ0ZGQ2Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5EWTNOekkyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmcyLWtlc3RyZWwtYXBwc2VydmVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU0OTM4NDE4NzA0NTk3YjA2MGFlNjI2OTdlNTk1YzI0YTk2NjliMWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTJNekV6T0RjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxhMiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNTFiMzg2ODZiN2YyMjIyZWE0OTJmZDc2NWY3MTZmNTYwNWE1OGFlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVXdPRFEyTmpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1vYmlsZUF6dXJlRGV2RGF5cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NzA5YTliMWFlZmQ5YTE1NjIyOTE0NzUyZTEzMDNjNTZkNDYxMzQ0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9EQTNNVEF4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhcjItZm9yY2UiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTRkM2U4N2M4ZWZhOWUxNjcyYWY3NmQ3MDM2NTBkZmI0ODgxMzNiYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIlBsdXJhbHNpZ2h0LUNDLUFuZ3VsYXItQnJlZXplLUV4dHJhXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5TdXBwb3J0aW5nIGZpbGVzIGZvciB0aGUgUGx1cmFsc2lnaHQgXCJTUEEgd2l0aCBBbmd1bGFyIGFuZCBCcmVlemVcIiBjb3Vyc2UgYnkgSm9obiBQYXBhLiBcblxuVGhlIGZpbGVzIGluY2x1ZGVkIGluIHRoaXMgcmVwb3NpdG9yeSBhcmUgaW50ZW5kZWQgdG8gaGVscCBzdHJlYW1saW5lIHRoZSBsZWFybmluZyBwcm9jZXNzIG9mIHRoZSBQbHVyYWxzaWdodCBjb3Vyc2UgU1BBIHdpdGggQW5ndWxhciBhbmQgQnJlZXplLiBEdXJpbmcgdGhlIGNvdXJzZSB5b3Ugd2lsbCBjcmVhdGUgdGhlIFdlYiBwcm9qZWN0IGZyb20gc2NyYXRjaFxuYW5kIGNyZWF0ZSB0aGUgYXBwIGxvZ2ljIHVzaW5nIEphdmFTY3JpcHQuIFRoZSBjb3Vyc2Ugd2lsbCBhc2sgeW91IHRvIGFkZCBzdXBwb3J0aW5nIGZpbGVzIChmb3VuZCBoZXJlKSB0byBqdW1wLXN0YXJ0IHRoZSBwcm9jZXNzIGFuZCBrZWVwIHlvdSBmb2N1c2VkIG9uIHRoZSBjb3JlIG1hdGVyaWFsIG9mIEFuZ3VsYXIgYW5kIEJyZWV6ZS5cblxuPiBUaXA6IElmIHlvdSBhcmUgdGFraW5nIG15IGNvdXJzZSBhbmQgeW91IGVuY291bnRlciBhbiBlcnJvciB3aGVuIGJ1aWxkaW5nIHRoZSBwcm9qZWN0IGFmdGVyIGluc3RhbGxpbmcgSG90VG93ZWwuQW5ndWxhci5CcmVlemUgcmVsYXRlZCB0byBkbGwgdmVyc2lvbnMsIHlvdSBtYXkgd2FudCB0byB0cnkgdGhlIGxhdGVzdCBwYWNrYWdlIHZlcnNpb25zLiBSdW4gdGhlc2UgdXBkYXRlcyB1c2luZyB0aGUgTnVHZXQgUGFja2FnZSBNYW5hZ2VyXG5cbmBgYFxuVXBkYXRlLVBhY2thZ2UgQnJlZXplLlNlcnZlci5Db250ZXh0UHJvdmlkZXIuRUY2XG5cblVwZGF0ZS1QYWNrYWdlIEJyZWV6ZS5TZXJ2ZXIuV2ViQXBpMlxuXG5VcGRhdGUtUGFja2FnZSBCcmVlemUuQ2xpZW50XG5cblVwZGF0ZS1QYWNrYWdlIE5ld3RvbnNvZnQuSnNvblxuYGBgXG5cbiMjIFNjcmF0Y2hcbiAtIERhdGEgbGF5ZXIgd3JpdHRlbiBpbiBDIyBhbmQgLk5FVFxuIC0gTW9kZWwgbGlicmFyeSB3cml0dGVuIGluIEMjIGFuZCAuTkVUXG4gLSBDb250ZW50IGZvbGRlciB3aXRoIGFzc2V0cyBpbmNsdWRpbmcgQ1NTIGFuZCBJbWFnZXNcbiBcbiMjIExpdG11cyBUZXN0XG4gLSBUaGlzIGlzIGp1c3QgdG8gaGVscCBmb2xrcyBhbG9uZ1xuIC0gQ29udGFpbnMgYSBydW5uaW5nIHNvbHV0aW9uIGFmdGVyIHVzaW5nIHRoZSBjb250ZW50cyBpbiB0aGUgc2NyYXRjaCBmb2xkZXIgYW5kIHJ1bm5pbmcgdGhlIDIgTnVHZXQgY29tbWFuZHMgYmVsb3c6XG5cbiBgYGBcbiAgaW5zdGFsbC1wYWNrYWdlIEVudGl0eUZyYW1ld29yay5TcWxTZXJ2ZXJDb21wYWN0XG4gIGluc3RhbGwtcGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyLkJyZWV6ZVxuIGBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NDgwOWMyNy05MGNlLTQ1OTktYTFmNy1hZjliZmQ2MGUxZTciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUXhNRFEyTlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm9kZS1xcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkN2E2NmZjZDhmZmM4YzkwMmVhN2ZkNGE0ZTAzNjE5ZmJlNDM3NzhlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQXdNRFUzT0RnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhBTTMyMC1XaWxsaXMtT25zaXRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU1MTA4Yjg3NzcwODNlZTdlYTYwMzU4OGExNjU0MzBhNmIzMDE5YzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EUXpNalUwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLXBsYXkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjU1MDY4NWQ2MWQ3Y2VjZDY5MjRkYTA5ZTE0ZTM3ZjI1ODgyNWNhZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5UazFOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3RhcndhcnMtaW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI3ZWJjZjEwMDdmZTZjOTJmNzRmNGI3N2VmYmZmMjhkMGJiMGQzMzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTRNRE0yTmpJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGhyZWUtdnVlLXBhdHRlcm4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiY2YwMDU5NWQ2ZmMzOTAxYzgxZDE0MmUyMDQ3NDU5OWI4MTE4NzBlZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1URXpNamczTWpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdlb2xvY2F0b3JTYW1wbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZmM4ZTQxOWMyMzJhNmQ4NzFlNDBjMjg5MTgxMzI1NTQ0M2U0MjNjNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qY3lNall6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhcldvcmtzaG9wTGFicyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0M2ZlYTVjMDM4NWU4NjQwZjliMWE1ZTE0ZjU1NGQzOTNmY2NhZjgxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWXpPVEUzTlRnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctbWF0ZXJpYWwtc3RhcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiZDJjZTNhZTM3MjNiMGMwYWI5NGZkYzg1YjgwYWU2NGM5Y2IwM2YxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVPRFV3TlRFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJlcGVhdFRhYnNSZXByb2R1Y3Rpb25TYW1wbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTA5YjY5NjhlOTExOWNjY2I5YmJmYzAwM2M0MWEzODBkMWYzMWEwNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWXpPVEl4TmpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZG9wcGVsZ2FuZ2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgzYjgyOThmMTU1MWZjNzNmZWIwODlhOTIxNDJiMjUyYzA1MGViYjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01EWTFOakExTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWhvc3RlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1Yzc5MzZhY2MzOWI1MGFiMTFjNGY2YmE5ZjcyYjQ1ZDIwOWE2NTE0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UWXpNVEU1TkRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWxBdHRhY2hlZFByb3BlcnR5UmVwcm9kdWN0aW9uIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjlkMjE0OTBiMzdmNGJiYjI1YjEyYTQyZDk1NDVhNWVkMWVhZDg0ODMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UY3hOVEV4TXpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkhlYWx0aENsaW5pYyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhNTYxNjY2Yzg1YTU4MDIxOWI1MDVhMmRhNzM4ZmZiMDAyM2RhN2Q5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTVOak0wTVRnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVucyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkYzc5ZDZhODE3NmFlYTAyOTczMzM2MjJhN2UzZmVlODNmZjNhYTRmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UUTFOall3Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY29kZS13aXRoLXVzLWFuZ3VsYXItcXVpY2tzdGFydCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxMWUwOWQ2MDVkY2Y0ZTU5OGFmNTg0ZTc3NGFkOWRjNDc0NGU2MDVmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qYzJNVEV5TXpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHJvcGVydHktc3VnZ2VzdGVyLXVpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY0ZTM1YjYxY2ZhNzhmZDQxZDk0OTkwNTc0Yzc5Mjc4YTlmYWZmYmMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UZzJOREUyTlRFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFzeW5jQXdhaXRCZXN0UHJhY3RpY2VzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImExMDY4MTkyMDQ5YzMyYTBlYzJhYWZhYmEzMjk5YTVjNWM2ZmZmN2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek9ESTJNekkxIiwKICAgICJvd25lciI6ICJzaW1vbmFjbyIsCiAgICAibmFtZSI6ICJXaW5DYWxlbmRhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZDI4YjhlNTIyYmNmMTJhMTRmMWZmNWJmNDkzMjlmZWY3ZDRlODkyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiaW5pdGlhbCBjb21taXRcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmYzcyNjEwMi1kNWY4LTRkZWMtODNjYy0xYTAwYmQyZDRhODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZ3pOams1TVRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2Vla2x5LXJlYWRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImRiZDJhMjkxMjFmZmVhZjcyZmE3M2ZkODY3MTQ1YTYxZGViZWYxYTQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qQTROVFUwT0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW4uRm9ybXMtTmFOLWlzLW5vdC1hLXZhbGlkLXZhbHVlLWZvci13aWR0aC1yZXByb2R1Y3Rpb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNWY0ZmZlZTg5ZTUxMjQ1NGMwYjQyMjE5MmQ1ZGE3ZWQzYmE4YTJiZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgWGFtYXJpbi5Gb3Jtcy1OYU4taXMtbm90LWEtdmFsaWQtdmFsdWUtZm9yLXdpZHRoLXJlcHJvZHVjdGlvblxuQSBYYW1hcmluLkZvcm1zIHNvbHV0aW9uIHRvIHJlcHJvZHVjZSBTeXN0ZW0uQXJndW1lbnRFeGNlcHRpb246IE5hTiBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3Igd2lkdGhcblxuUmVwcm9kdWN0aW9uIENvZGUgU25pcHBldCB0byBpbmR1Y2UgYFN5c3RlbS5Bcmd1bWVudEV4Y2VwdGlvbjogTmFOIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciB3aWR0aGBcblxuIyNSZXByb2R1Y3Rpb24gU3RlcHNcbiAxLiBEb3dubG9hZCBhbmQgb3BlbiBgTmFOUmVwcm9kdWN0aW9uLnNsbmAgaW4gWGFtYXJpbiBTdHVkaW9cbiAyLiBJbiB0aGUgU29sdXRpb24gRXhwbG9yZXIsIFJpZ2h0LWNsaWNrIG9uIGBOYU5SZXByb2R1Y3Rpb24uaU9TYCBhbmQgc2VsZWN0IGBTZXQgQXMgU3RhcnR1cCBQcm9qZWN0YFxuIDMuIEJ1aWxkLCBEZXBsb3ksIGFuZCBSdW4gdGhlIGFwcCBvbiBhbiBpT1MgMTAuMiBTaW11bGF0b3JcblxuIyNFcnJvclxuPlN5c3RlbS5Bcmd1bWVudEV4Y2VwdGlvbjogTmFOIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciB3aWR0aFxuXG4+WGFtYXJpbi5Gb3Jtcy5TaXplLlNpemUoZG91YmxlIHdpZHRoLCBkb3VibGUgaGVpZ2h0KSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuR2V0U2l6ZVJlcXVlc3QoZG91YmxlIHdpZHRoQ29uc3RyYWludCwgZG91YmxlIGhlaWdodENvbnN0cmFpbnQpIFhhbWFyaW4uRm9ybXMuVmlzdWFsRWxlbWVudC5NZWFzdXJlKGRvdWJsZSB3aWR0aENvbnN0cmFpbnQsIGRvdWJsZSBoZWlnaHRDb25zdHJhaW50LCBNZWFzdXJlRmxhZ3MgZmxhZ3MpIFhhbWFyaW4uRm9ybXMuU3RhY2tMYXlvdXQuQ29tcHJlc3NIb3Jpem9udGFsTGF5b3V0KFN0YWNrTGF5b3V0LkxheW91dEluZm9ybWF0aW9uIGxheW91dCwgZG91YmxlIHdpZHRoQ29uc3RyYWludCwgZG91YmxlIGhlaWdodENvbnN0cmFpbnQpIFhhbWFyaW4uRm9ybXMuU3RhY2tMYXlvdXQuQ29tcHJlc3NOYWl2ZUxheW91dChTdGFja0xheW91dC5MYXlvdXRJbmZvcm1hdGlvbiBsYXlvdXQsIFN0YWNrT3JpZW50YXRpb24gb3JpZW50YXRpb24sIGRvdWJsZSB3aWR0aENvbnN0cmFpbnQsIGRvdWJsZSBoZWlnaHRDb25zdHJhaW50KSBYYW1hcmluLkZvcm1zLlN0YWNrTGF5b3V0LkNhbGN1bGF0ZUxheW91dChTdGFja0xheW91dC5MYXlvdXRJbmZvcm1hdGlvbiBsYXlvdXQsIGRvdWJsZSB4LCBkb3VibGUgeSwgZG91YmxlIHdpZHRoQ29uc3RyYWludCwgZG91YmxlIGhlaWdodENvbnN0cmFpbnQsIGJvb2wgcHJvY2Vzc0V4cGFuZGVycykgWGFtYXJpbi5Gb3Jtcy5TdGFja0xheW91dC5MYXlvdXRDaGlsZHJlbihkb3VibGUgeCwgZG91YmxlIHksIGRvdWJsZSB3aWR0aCwgZG91YmxlIGhlaWdodCkgWGFtYXJpbi5Gb3Jtcy5MYXlvdXQuVXBkYXRlQ2hpbGRyZW5MYXlvdXQoKSBYYW1hcmluLkZvcm1zLkxheW91dC5PblNpemVBbGxvY2F0ZWQoZG91YmxlIHdpZHRoLCBkb3VibGUgaGVpZ2h0KSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuU2l6ZUFsbG9jYXRlZChkb3VibGUgd2lkdGgsIGRvdWJsZSBoZWlnaHQpIFhhbWFyaW4uRm9ybXMuVmlzdWFsRWxlbWVudC5TZXRTaXplKGRvdWJsZSB3aWR0aCwgZG91YmxlIGhlaWdodCkgWGFtYXJpbi5Gb3Jtcy5WaXN1YWxFbGVtZW50LnNldF9Cb3VuZHMoUmVjdGFuZ2xlIHZhbHVlKSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuTGF5b3V0KFJlY3RhbmdsZSBib3VuZHMpIFhhbWFyaW4uRm9ybXMuTGF5b3V0LkxheW91dENoaWxkSW50b0JvdW5kaW5nUmVnaW9uKFZpc3VhbEVsZW1lbnQgY2hpbGQsIFJlY3RhbmdsZSByZWdpb24pIFhhbWFyaW4uRm9ybXMuR3JpZC5MYXlvdXRDaGlsZHJlbihkb3VibGUgeCwgZG91YmxlIHksIGRvdWJsZSB3aWR0aCwgZG91YmxlIGhlaWdodCkgWGFtYXJpbi5Gb3Jtcy5MYXlvdXQuVXBkYXRlQ2hpbGRyZW5MYXlvdXQoKSBYYW1hcmluLkZvcm1zLkxheW91dC5PblNpemVBbGxvY2F0ZWQoZG91YmxlIHdpZHRoLCBkb3VibGUgaGVpZ2h0KSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuU2l6ZUFsbG9jYXRlZChkb3VibGUgd2lkdGgsIGRvdWJsZSBoZWlnaHQpIFhhbWFyaW4uRm9ybXMuVmlzdWFsRWxlbWVudC5TZXRTaXplKGRvdWJsZSB3aWR0aCwgZG91YmxlIGhlaWdodCkgWGFtYXJpbi5Gb3Jtcy5WaXN1YWxFbGVtZW50LnNldF9Cb3VuZHMoUmVjdGFuZ2xlIHZhbHVlKSBYYW1hcmluLkZvcm1zLlZpc3VhbEVsZW1lbnQuTGF5b3V0KFJlY3RhbmdsZSBib3VuZHMpIFhhbWFyaW4uRm9ybXMuTGF5b3V0LkxheW91dENoaWxkSW50b0JvdW5kaW5nUmVnaW9uKFZpc3VhbEVsZW1lbnQgY2hpbGQsIFJlY3RhbmdsZSByZWdpb24pIFhhbWFyaW4uRm9ybXMuUGxhdGZvcm0uaU9TLlZpZXdDZWxsUmVuZGVyZXIuVmlld1RhYmxlQ2VsbC5MYXlvdXRTdWJ2aWV3cygpIFhhbWFyaW4uRm9ybXMuUGxhdGZvcm0uaU9TLkNlbGxUYWJsZVZpZXdDZWxsLkdldE5hdGl2ZUNlbGwoVUlUYWJsZVZpZXcgdGFibGVWaWV3LCBDZWxsIGNlbGwsIGJvb2wgcmVjeWNsZUNlbGxzLCBzdHJpbmcgdGVtcGxhdGVJZCkgWGFtYXJpbi5Gb3Jtcy5QbGF0Zm9ybS5pT1MuTGlzdFZpZXdSZW5kZXJlci5MaXN0Vmlld0RhdGFTb3VyY2UuR2V0Q2VsbChVSVRhYmxlVmlldyB0YWJsZVZpZXcsIE5TSW5kZXhQYXRoIGluZGV4UGF0aCkgVUlLaXQuVUlBcHBsaWNhdGlvbi5VSUFwcGxpY2F0aW9uTWFpbihpbnQsIHN0cmluZ1tdLCBpbnRwdHIsIGludHB0cikod3JhcHBlciBtYW5hZ2VkLXRvLW5hdGl2ZSkgVUlLaXQuVUlBcHBsaWNhdGlvbi5NYWluKHN0cmluZ1tdIGFyZ3MsIEludFB0ciBwcmluY2lwYWwsIEludFB0ciBkZWxlZ2F0ZSlVSUFwcGxpY2F0aW9uLmNzOjc5IFVJS2l0LlVJQXBwbGljYXRpb24uTWFpbihzdHJpbmdbXSBhcmdzLCBzdHJpbmcgcHJpbmNpcGFsQ2xhc3NOYW1lLCBzdHJpbmcgZGVsZWdhdGVDbGFzc05hbWUpVUlBcHBsaWNhdGlvbi5jczo2MyBNb25kYXlQdW5kYXlBcHAuaU9TLkFwcGxpY2F0aW9uLk1haW4oc3RyaW5nW10gYXJncylNYWluLmNzOjE3XG5cbiMjRW52aXJvbm1lbnRcblxuPT09IFhhbWFyaW4gU3R1ZGlvIEVudGVycHJpc2UgPT09XG5cblZlcnNpb24gNi4xLjUgKGJ1aWxkIDApXG5JbnN0YWxsYXRpb24gVVVJRDogM2FjOThhNjEtNjdhNy00MTFmLWIxMjQtMTk4MzNlYzlhNTE5XG5SdW50aW1lOlxuIC0gTW9ubyA0LjYuMiAobW9uby00LjYuMC1icmFuY2gvYWM5ZTIyMikgKDY0LWJpdClcbiAtIEdUSysgMi4yNC4yMyAoUmFsZWlnaCB0aGVtZSlcbiAtIFBhY2thZ2UgdmVyc2lvbjogNDA2MDIwMDE2XG5cbj09PSBOdUdldCA9PT1cblxuVmVyc2lvbjogMy40LjMuMFxuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS4wLjFcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IEFwcGxlIERldmVsb3BlciBUb29scyA9PT1cblxuWGNvZGUgOC4yLjEgKDExNzY2LjEpXG5CdWlsZCA4QzEwMDJcblxuPT09IFhhbWFyaW4uaU9TID09PVxuXG5WZXJzaW9uOiAxMC4zLjEuOCAoWGFtYXJpbiBFbnRlcnByaXNlKVxuSGFzaDogN2JlYWVmNFxuQnJhbmNoOiBjeWNsZTgteGlcbkJ1aWxkIGRhdGU6IDIwMTYtMTItMjAgMDI6NTg6MTQtMDUwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiA3LjAuMi40MiAoWGFtYXJpbiBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFuZG9ubS9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ0LjEgKEFQSSBsZXZlbCAxNilcblx0XHQ2LjAgKEFQSSBsZXZlbCAyMylcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblxuU0RLIFRvb2xzIFZlcnNpb246IDI1LjIuM1xuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI1LjAuMVxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI0LjAuM1xuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTAyXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEwMi1iMTQpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEwMi1iMTQsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluIEFuZHJvaWQgUGxheWVyID09PVxuXG5WZXJzaW9uOiAwLjYuNVxuTG9jYXRpb246IC9BcHBsaWNhdGlvbnMvWGFtYXJpbiBBbmRyb2lkIFBsYXllci5hcHBcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5WZXJzaW9uOiAyLjEwLjAuMTIwIChYYW1hcmluIEVudGVycHJpc2UpXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS4wLjAuMFxuSGFzaDogMWYzMDY3ZFxuQnJhbmNoOiBtYXN0ZXJcbkJ1aWxkIGRhdGU6IDExLzE1LzIwMTYgMToxMzo1OSBQTVxuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDYwMTA1MDAwMFxuR2l0IHJldmlzaW9uOiA3NDk0NzE4ZTEyN2FmOWVhZWM0NWEzYmQ2MjgyZDNkYTkyNzQ4OGJkXG5CdWlsZCBkYXRlOiAyMDE3LTAxLTE3IDEwOjMxOjAxLTA1XG5YYW1hcmluIGFkZGluczogYzkyZDA2MjZkMzQ3YWFhMDI4Mzk2ODllYWFjMjk2MWQyNGM5ZjQ0NlxuQnVpbGQgbGFuZTogbW9ub2RldmVsb3AtbGlvbi1jeWNsZThcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjEyLjNcbkRhcndpbiBodHRwczovL2JyYW5kb25tLW1hYy5ndWVzdC5jb3JwLm1pY3Jvc29mdC5jb206ODAvP1dULm1jX2lkPXhhbWFyaW4uZm9ybXNuYW5pc25vdGF2YWxpZHZhbHVlZm9yd2lkdGhyZXByb2R1Y3Rpb24tZ2l0aHViLWJyYW1pbiAxNi40LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE2LjQuMFxuICAgIFRodSBEZWMgMjIgMjI6NTM6MjEgUFNUIDIwMTZcbiAgICByb290OnhudS0zNzg5LjQxLjN+My9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuPT09IEVuYWJsZWQgdXNlciBpbnN0YWxsZWQgYWRkaW5zID09PVxuXG5YYW1hcmluIEluc3BlY3RvciAxLjAuMC4wXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5MTU0OGM5ZS1lZTYxLTQ3MDgtYjRmZi03Yzg0MDIwYmM5Y2MiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXdNemM1TVRZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkN1c3RvbVN0ZXBwZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYmVkNTVkMzhjZjg5YWRhOTczNDExZmFhZjMwZjUzMzFmNzEyOTZjZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzJNekl4T1RjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZG9wcGVsZ2FuZ2VyLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1YmJmNmJmMjMyZGU5ZGUyNjdhYzM1MmU2OGNhY2QyODA2ODFlMWFjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQTFOVEkwTVRRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkhhY2tlck5ld3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzQ1NjM1YWVhN2JhMzJlMTM1ZWQwYmJjODZhMjBjNTIzMjBiNTFiNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UazVNVGt4TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLWZhdm9yaXRlLW1vdmllcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzNjJlYzEyNTM2YmRhMWMyZGY4ZjU5NWY0MWRjYThlMGY1OGVjNDhhIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRPVFkzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiSG90VG93ZWwtQW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMThlZTkxN2ZmNTk2NTgwY2M1YmU5OTdmNjIyNTMxNWFmNjZmNmIwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBIb3QgVG93ZWwgQW5ndWxhciBTUEEgVGVtcGxhdGUgI1xuXG4+IEhvdCBUb3dlbDogQmVjYXVzZSB5b3UgZG9uJ3Qgd2FudCB0byBnbyB0byB0aGUgU1BBIHdpdGhvdXQgb25lIVxuXG5XYW50IHRvIGJ1aWxkIGEgU1BBIGJ1dCBjYW4ndCBkZWNpZGUgd2hlcmUgdG8gc3RhcnQ/IFVzZSBIb3QgVG93ZWwgQW5ndWxhciBhbmQgaW4gc2Vjb25kcyB5b3UnbGwgaGF2ZSBhIFNQQSBhbmQgYWxsIHRoZSB0b29scyB5b3UgbmVlZCB0byBidWlsZCBvbiBpdCEgXG5cbiFbXShodHRwOi8vd3d3LmpvaG5wYXBhLm5ldC93cC1jb250ZW50L3VwbG9hZHMvMjAxMy8wOS9Ib3RUb3dlbC1ORy1QcmV2aWV3LnBuZylcblxuSG90IFRvd2VsIEFuZ3VsYXIgY3JlYXRlcyBhIGdyZWF0IHN0YXJ0aW5nIHBvaW50IGZvciBidWlsZGluZyBhIFNpbmdsZSBQYWdlIEFwcGxpY2F0aW9uIChTUEEpLiBPdXQgb2YgdGhlIGJveCBpdCBwcm92aWRlcyBhIG1vZHVsYXIgc3RydWN0dXJlIGZvciB5b3VyIGNvZGUsIHZpZXcgbmF2aWdhdGlvbiwgZGF0YSBiaW5kaW5nLCBzZXBhcmF0aW9uIG9mIHNlcnZpY2VzLCBhbmQgc2ltcGxlIGJ1dCBlbGVnYW50IHN0eWxpbmcuIEhvdCBUb3dlbCBwcm92aWRlcyBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGJ1aWxkIGEgU1BBLCBzbyB5b3UgY2FuIGZvY3VzIG9uIHlvdXIgYXBwLCBub3QgdGhlIHBsdW1iaW5nLlxuXG4+IExlYXJuIG1vcmUgYWJvdXQgYnVpbGRpbmcgYSBTUEEgZnJvbSBbSm9obiBQYXBhJ3MgdmlkZW9zLCB0dXRvcmlhbHMgYW5kIFBsdXJhbHNpZ2h0IGNvdXJzZXNdKGh0dHA6Ly9qb2hucGFwYS5uZXQvc3BhKS5cblxuIyMgSW5zdGFsbGluZyB2aWEgdGhlIE51R2V0IFBhY2thZ2UgIyNcbkhvdCBUb3dlbCBBbmd1bGFyIGlzIGEgTnVHZXQgcGFja2FnZSB0aGF0IGF1Z21lbnRzIGFuIGV4aXN0aW5nIGVtcHR5IEFTUC5ORVQgcHJvamVjdC4gSnVzdCBpbnN0YWxsIHVzaW5nIE51R2V0IGFuZCB0aGVuIHJ1biFcblxuICAgIEluc3RhbGwtUGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyXG5cbiMjIEhvdyBEbyBJIEJ1aWxkIE9uIEhvdCBUb3dlbD8gIyNcblNpbXBseSBzdGFydCBhZGRpbmcgY29kZSEgXG5cbjEuIEFkZCB5b3VyIG93biBzZXJ2ZXItc2lkZSBjb2RlLCBzdWNoIGFzIEVudGl0eSBGcmFtZXdvcmsgYW5kIFdlYiBBUEkgKHdoaWNoIHJlYWxseSBzaGluZXMgd2l0aCBCcmVlemUuanMpXG4yLiBBZGQgdmlld3MgYW5kIGNvbnRyb2xsZXJzXG4zLiBVcGRhdGUgdGhlIG5hdmlnYXRpb24gcm91dGVzIGluIGBjb25maWcucm91dGVzLmpzYFxuXG4jIyBBZGQgUmljaCBEYXRhIHdpdGggQnJlZXplICMjXG5BZGQgcmljaCBkYXRhIGZlYXR1cmVzIHVzaW5nIEJyZWV6ZSB0byBIb3QgVG93ZWwgQW5ndWxhciwgdmlhIE51R2V0LlxuXG4gICAgSW5zdGFsbC1QYWNrYWdlIEhvdFRvd2VsLkFuZ3VsYXIuQnJlZXplXG5cbiMjIFJlc291cmNlcyAjI1xuXG4rIFtTUEEgUmVzb3VyY2VzXShodHRwOi8vam9obnBhcGEubmV0L3NwYSlcbisgW0hvdCBUb3dlbCBBbmd1bGFyIG9uIEdpdEh1Yl0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL0hvdFRvd2VsLU5HKVxuKyBbSG90IFRvd2VsIEFuZ3VsYXIgb24gTnVHZXRdIChodHRwOi8vbnVnZXQub3JnL3BhY2thZ2VzL0hvdFRvd2VsLUFuZ3VsYXIpXG5cbiMjIEhvdCBUb3dlbCBBbmd1bGFyIGZvciBhbnkgRW52aXJvbm1lbnQgXG4rIFtIb3QgVG93ZWwgQW5ndWxhciBTZWVkL1N0YXJ0ZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9uZy1kZW1vcy90cmVlL21hc3Rlci9ob3R0b3dlbClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjg4Y2E4NjU2LWFhZTItNGI0Yy05MDk1LWFiMGI5YWNiMTYwYiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1qQTVOek01T1E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbU1lZGlhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI3MGMxZDFhMjJhZDI2OTQyYzcyOTRlOTAyNGFkNjZjMjM0N2FiZWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFhhbU1lZGlhXG5YYW1hcmluLmlPUyBhbmQgWGFtYXJpbi5BbmRyb2lkIGFwcCB0byBkaXNwbGF5IG1laWRhIGZyb20gWW91VHViZSBhbmQgVmltZW9cblxuIVtdKC4vRGVtby9pT1NfWGFtTWVkaWEuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjZjNWNmZmNlLWJkYTYtNGExYy05ZjFjLWZiMzY1NTlhYjNhNCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTROVFUyTURNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5CbG9iU3RvcmFnZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyODMxMjlkYTMzMzQ3Y2Y4OTcyMTQ0NzAzZTE0ZTQ0ODU3YjZhOGVmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpORGc0TkRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hanMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzJkYTMwZTk2ZDBjNmE0OTNlYzVmNzYwNTlkOWU4M2Q3ZDhjNWQxMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTBNalUyTkRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIjI0SG91clRpbWVQaWNrZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTc2YmQ0MWEyYzA5ZmU0MWU1OWJkZmY4YzcxNDEzZjY0ZGE3NTRiNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09EUTBOamcwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXp1cmUtZG9jcy1zZGstbm9kZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjEwNjViMjk2MDgwMDkzNWMwN2I1NzMwMzg0ZWFkY2I1MDdmODU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXdOVFU0TURNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1zbXRoIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM2ZWMwNDhhMzg4ODViMWVhNWM5NTAwODI4NmQxNmQ1NzdjM2NjZTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTFNamc1TXpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlRleHRNb29kIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjllNjQzMWZiOWE4ZTMyZWNkZTBlMWQ5ZjAxMTYyMjhjOWEyNDViMWQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTROVGt6TVRZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbG9yRXF1YWxzUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzRhNTBmMTRlNzg2NWM0ODZhMDlkN2I1MTgyYzBmMzg3YzU0ZWE1OSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3Rhci13YXJzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16QXdOelUwTnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicHdhLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjZiMjIyYzUxYWFhOGFmNjQ1YWJiYTFkOTg0NmQ4ZmVmZjdmNTg2MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9EVTFNVFF4T0E9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbU1hcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjYWQ0NzNmZWY5YWIyYTk1ODE0MWQ0Zjc5NjgyYWY5OWZkYWNlNGMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBYYW1NYXBcblxuWGFtTWFwIGlzIGEgc2FtcGxlIGFwcCB0aGF0IGRlbW9uc3RyYXRlcyB0aGUgZm9sbG93aW5nIHVzaW5nIE1LTWFwVmlldzpcbiAtIFBlcmZvcm0gYW4gYW5pbWF0ZWQgem9vbSB0byBhIGxvY2F0aW9uXG4gLSBBZGQgYSBQSU4gdG8gYSBtYXBcbiAtIERpc3BsYXkgdGhlIFBJTuKAmXMgVGl0bGUgcHJvZ3JhbW1hdGljYWxseSBcbiAtIFRyYWNrIGEgdXNlcuKAmXMgbG9jYXRpb25cblxuIVtYYW1NYXAgRGVtb10oLi9EZW1vcy9EZW1vLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyN2MwMTdmOC03MThkLTRkMGEtYmJjMy05Yjc0NzM0MzFlMzgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTRPVGszTWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbUNvbnZlcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4M2I2NzNkZTFmZWVjMGY0YTUyNzczYzU4ODkxNjM2ZTBiMGVjZTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiMgWGFtQ29udmVydGVyXG5BbiBpT1MgYW5kIEFuZHJvaWQgYXBwIGxldmVyYWdpbmcgW1hhbWFyaW4uRXNzZW50aWFscy5Vbml0Q29udmVydGVyXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS94YW1hcmluL2Vzc2VudGlhbHMvdW5pdC1jb252ZXJ0ZXJzP1dULm1jX2lkPXhhbWNvbnZlcnRlci1naXRodWItYnJhbWluKSB0byBjb252ZXJ0IHVuaXRzIG9mIExlbmd0aCwgTWFzcyBhbmQgVGVtcGVyYXR1cmVcblxufCBBbmRyb2lkICAgICAgfCBpT1MgfFxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCAhW10oLi9EZW1vcy9BbmRyb2lkQ29udmVydGVyRGVtby5naWYpfCAhW10oLi9EZW1vcy9pT1NDb252ZXJ0ZXJEZW1vLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0YjMyMTcwMy0yMzFjLTRmMzYtOWI3MS05NTdmYmY1MzE3MjUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UUTFNemsyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWdncmVnYXRvci1hcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzAxOTI1OGVlMmIxZWRhZmY4YjNhOWRlNzgzMmE1OGU4MDcxNmIyNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTNOakUwTWpNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZG9ja2VyLWFuZ3VsYXItY2xpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhNTU2Y2UyY2I4MmY0MTY2NWVhNzg3ZGJkYTc2OGIxYjIyY2QwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTNOVEE0TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2RhLWxvY2FsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZjkzMDEzMzU2MjM4MTcwYjJlY2I5MTE3OTBhZGViMTM1ZjFmMGU2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qa3pOekE0T0E9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3N0YXJ0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NzlkYWU5YzEzYzJiMWMxZTMyYjk2NzU5MmFmNWIxZDliOWUyMWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFVwZ3JhZGVQcm9qZWN0XG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjAuMC5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlL3BpcGUvc2VydmljZS9jbGFzcy9tb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cbkJlZm9yZSBydW5uaW5nIHRoZSB0ZXN0cyBtYWtlIHN1cmUgeW91IGFyZSBzZXJ2aW5nIHRoZSBhcHAgdmlhIGBuZyBzZXJ2ZWAuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1YmEzMGMwYS0zZWQ3LTRjZmEtYmZhZS02MjZlY2EwZjQ1MmIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTJPREl6TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctZGVtb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Q0YzY1MDQzYWJiZjVmMDY2YWRmZmMzYWNmMzdmOWY1OGI0NDJhMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIm5nLWRlbW9zXG49PT09PT09PVxuVmFyaWV0eSBvZiBhbmd1bGFyIGRlbW9zIGFyZSBjb250YWluZWQgaGVyZWluLlxuXG4+Kk9waW5pb25hdGVkIEFuZ3VsYXJKUyBzdHlsZSBndWlkZSBmb3IgdGVhbXMgYnkgW0Bqb2huX3BhcGFdKC8vdHdpdHRlci5jb20vam9obl9wYXBhKSpcblxuPk1vcmUgZGV0YWlscyBhYm91dCB0aGUgc3R5bGVzIGFuZCBwYXR0ZXJucyB1c2VkIGluIHRoZXNlIGFwcHMgY2FuIGJlIGZvdW5kIGluIG15IFtBbmd1bGFySlMgU3R5bGUgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyanMtc3R5bGVndWlkZSkgYW5kIG15ICoqQW5ndWxhckpTIFBhdHRlcm5zOiBDbGVhbiBDb2RlKiooY29taW5nIHNvb24pIGNvdXJzZSBhdCBbUGx1cmFsc2lnaHRdKGh0dHA6Ly9wbHVyYWxzaWdodC5jb20vdHJhaW5pbmcvQXV0aG9ycy9EZXRhaWxzL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuIFxuXG5cbiMjIGdydW50LWd1bHBcbkRlbW9uc3RyYXRlcyB1c2Ugb2YgZ3J1bnQgYW5kIGd1bHAgd2l0aCBhbiBhbmd1bGFyIGFwcC5cblxuLSBncnVudFxuLSBndWxwXG5cbiMjIGhvdHRvd2VsXG5TdGFydGVyIHRlbXBsYXRlIGZvciBBbmd1bGFyIGFwcHMuIEFsbCBjbGllbnQgc2lkZSBqYXZhc2NyaXB0IHVzaW5nIEFuZ3VsYXIgZm9yIHJvdXRpbmcsIGFuaW1hdGlvbiwgYW5kIGJhc2ljIENTUyB0aGVtaW5nLlxuXG4jIyBtb2R1bGFyXG5EZW1vbnN0cmF0ZXMgaG93IHRvIGRpc3RyaWJ1dGUgYW4gYXBwIGFjcm9zcyBzZXZlcmFsIG1vZHVsZXMsIGluY2x1ZGluZyBoYW5kbGluZyB0aGUgcm91dGluZywgdGVzdGluZywgZ3VscCBhdXRvbWF0aW9uIGFuZCBtb3JlLlxuXG4jIyBjYy1ibWVhblxuTGFyZ2VyIGFwcCBydW5uaW5nIGEgZmljdGl0aW91cyBldmVudCBuYW1lZCBcIkNvZGVDYW1wZXJcIi5cblxuIyNuZy0xLjMgcGxheWdyb3VuZFxuU2ltcGxlIGRlbW9zIGZvciBuZyAxLjMgZmVhdHVyZXMuXG5cbi0gbmctbW9kZWwtb3B0aW9ucz1cInsgZGVib3VuY2U6IDEwMDAsIHVwZGF0ZU9uOiAnYmx1cicgfVwiXG5cbiMjIG5nLWp3dFxuSlNPTiBXZWIgVG9rZW5zIChKV1QpIGluIGFuIEFuZ3VsYXJKUyBhcHAsIHRvIGRlbW9uc3RyYXRlIGhvdyB0byB1c2UgdGhlIEpXVCBmb3IgcmVzdHJpY3RpbmcgQVBJIGFjY2Vzcy5cblxuIyMgcXVpY2tzdGFydFxuU2ltcGxlIEFuZ3VsYXIgZGVtb3NcblxuLSBkYXRhIGJpbmRpbmdcbi0gcm91dGluZ1xuLSByZXBlYXRcbi0gZmlsdGVyXG4tICRodHRwXG4tIHNlcnZpY2UvZmFjdG9yeSBcblxuIyMgdG9kby16dW1vXG5EZW1vbnN0cmF0ZXMgaG93IHRvIHRhbGsgdG8gQXp1cmUgTW9iaWxlIFNlcnZpY2VzIHZpYSBhIHNpbmdsZSB0b2RvIGxpc3QuXG5cbi0gQ2hhbmdlc2V0cyBhbmQgY2hhbmdlIHN0YXRlIChBZGRlZCwgRGVsZXRlZCwgVWRwYXRlZClcbi0gVGFsa2luZyBBenVyZSBNb2JpbGUgU2VydmljZXNcbi0gU2F2aW5nIGNoYW5nZXNldHMgdG8gbG9jYWwgc3RvcmFnZVxuLSBIYW5kIHdyaXR0ZW4gbWV0YWRhdGEgZm9yIGJyZWV6ZVxuXG4jIyB6LW1ldGFkYXRhXG5UaHJvd3MgYSBzd2l0Y2ggZnJvbSB1c2luZyBXZWIgQVBJIC8gRUYgbWV0YWRhdGEgdG8gdXNpbmcgaGFuZCB3cml0dGVuIGNsaWVudCBzaWRlIG1ldGFkYXRhXG5cbi0gVG9nZ2xlIGJldHdlZW4gRUYgbWV0YWRhdGEgYW5kIGhhbmQgd3JpdHRlbiBtZXRhZGF0YSBmb3IgYnJlZXplXG5cbiMjIFp6YVxuUGl6emEgb3JkZXJpbmcgc2VydmljZSB1c2luZyBNRUFOIHN0YWNrLiBEYXRhIGlzIHN0cnVjdHVyZWQgaW4gYSBkb2N1bWVudCBmYXNoaW9uLCBub3QgU1FMIHNob3ZlZCBpbiBNb25nb0RCLlxuXG4tIG5vZGUuanNcbi0gbW9uZ29kYiB1c2luZyB0cnVlIGRvY3VtZW50IHN0cnVjdHVyZVxuLSBleHByZXNzXG4tIGJyZWV6ZVxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImNhNGEzNzU1LWExNWMtNGQ3My1iZDQwLWYzMjMwMmVmYmM5OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UUXlPVFl5TkE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctYXoiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDY3Y2Q5N2RkNTA1NWM2Njg5MjJjZmVhMGQwNmRkMjJlYzYzNTc4MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQW5ndWxhckF6XG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjEuMy5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cbkJlZm9yZSBydW5uaW5nIHRoZSB0ZXN0cyBtYWtlIHN1cmUgeW91IGFyZSBzZXJ2aW5nIHRoZSBhcHAgdmlhIGBuZyBzZXJ2ZWAuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjNjA4ZTA5Zi1mOWIyLTQyZjctOGZiNS1lZmU3OTNjYjIxMzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXlPVFl4TVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVwcGllcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5OWYyODJhZTM1MDg3YTM2OGU5NDY4OTdhMTI1NWFmMjVmYWMzOTY4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazNOak16TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNvc21vc2RiIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM2ZTI2OWRhMDYwYjNiNWI1MzdjZWM1MDkwYWFjMGVlZWJlZmNkZTIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1ETXhOVGszTkE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbVNwZWFrIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBlZmVmN2RjYWU0NmU2MmMxMjIxYzBkNDkyMWMxMjU2ODExZTIzYTkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBYYW1TcGVha1xuXG5YYW1TcGVhayBhbGxvd3MgeW91IHRvIHRha2UgYSBwaG90byBvZiB0ZXh0IGFuZCB0aGUgYXBwIHdpbGwgZGljdGF0ZSBpdCBhbG91ZC5cblxuIyMgQWJvdXRcblxuWGFtU3BlYWsgaXMgYW4gaU9TIGFuZCBBbmRyb2lkIGFwcCB0aGF0IHdpbGwgZGljdGF0ZSB0ZXh0IGZyb20gYSBwaG90by5cblxuV2UgYXJlIGxldmVyYWdpbmcgW01pY3Jvc29mdCBDb2duaXRpdmUgU2VydmljZXNdKGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vY29nbml0aXZlLXNlcnZpY2VzP1dULm1jX2lkPXhhbXNwZWFrLWdpdGh1Yi1icmFtaW4pIHRvIHBlcmZvcm0gT3B0aWNhbCBDaGFyYWN0ZXIgUmVjb2duaXRpb24gKE9DUikgYW5kIFNwZWxsIENoZWNrLlxuXG4jIyBUb0RvXG5cblRvIGFjY2VzcyB0aGUgTWljcm9zb2Z0IENvZ2luaXRpdmUgU2VydmljZXMgQVBJIGZyb20gdGhpcyBhcHAsIHNpZ24gdXAgZm9yIGEgW2ZyZWUgQ29tcHV0ZXIgVmlzaW9uIEFQSSBLZXldKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9mcmVlL2FpLz91dG1fc291cmNlPWNoYW5uZWw5JnV0bV9tZWRpdW09ZGVzY3JpcHRpb25saW5rcyZ1dG1fY2FtcGFpZ249ZnJlZWFjY291bnQmV1QubWNfaWQ9eGFtc3BlYWstZ2l0aHViLWJyYW1pbikgJiBhIFtmcmVlIEJpbmcgU3BlbGwgQ2hlY2sgQVBJIEtleV0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvYWkvP3V0bV9zb3VyY2U9Y2hhbm5lbDkmdXRtX21lZGl1bT1kZXNjcmlwdGlvbmxpbmtzJnV0bV9jYW1wYWlnbj1mcmVlYWNjb3VudCZXVC5tY19pZD14YW1zcGVhay1naXRodWItYnJhbWluKSBhbmQgaW5zZXJ0IGl0IHRvIHRoZSBjb2RlIFtoZXJlXSguL1NvdXJjZS9YYW1TcGVhay9Db25zdGFudHMvQ29nbml0aXZlU2VydmljZXNDb25zdGFudHMuY3MjTDgpLlxuXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvWGFtU3BlYWsvWGFtU3BlYWtHaWYuZ2lmP3Jhdz10cnVlKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImE5ZDUyOTFjLTQ5YWYtNDU1MS1iZmVlLTZkZmNiNTQyOWIxMiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzFOak01TWpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNoYW5nZVRhYmJlZFBhZ2VJY29uU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZmNGY3ZjY5NjEyNDZiYTAyMDVhMjI0NDU1ZDkwYTE1MDNiY2UzYzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXlPVGN6TmpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVwcGllcy1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZGZkYWExNmM0MWQ3OGY3NjA1OGVjYjI5MTQ0MzcyNjk5ZWNjMGI5MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USXhNVFF4TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1uZ3J4LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FlOTVlMzc3NjliNzZlOTE2NzlhMmM5Nzk2MTY3MDNmY2NlODBlOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qazRNakUzTmpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNmNDg2YjEwYjBjZDAxMjZjMjI2NjZjZjJjMGQxMTQ0ODBiY2ZlMTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16QXlOVFU0TURNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkN1c3RvbVNsaWRlckNvbG9yIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE5M2IxOGQzMzA4N2FiOWMwMWFjZmRjM2E3OWI2NzE4ZjQxMzc1N2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16STROelF6TnpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hLXBicCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzZTU5ODViMWFjODlkNDVlNGZmZTVkZTJkODE0Y2E1NmFkMTY0ZmJmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTFNelEyTURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c2UtYm90IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA4NTk1MzQ3YmVjZjJkYWYxNzU4NjBjY2I3NjFkOTFmMjNlOTNlMGYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RTVNRE0yTmpnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlvdGNvcmUtc21hcnQtZGV2aWNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwYmE1MTE3NWRlNmQ4NWEyOGNlZjA3ZjdmNzBlM2VmNzI4YTBlMjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16STROelkwT1RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hY28uZ2l0aHViLmlvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdiOGJiYWI2YjkxMGRhOGVmMzcxNTFlYmE4ZWZiMTkzMzRiNmVkMDAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTNOemMyT0RFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXdlc29tZS1hbmd1bGFyLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg1NGExNDZhYzBjODMxMWE3NmNiNGI0ZmQ5ZGJkOGQxN2MzNjYyMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TXlOelkxTlRRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk11bHRpcGxlVmlld01vZGVsU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ2NGU4MWE1NjdmMWNiZTk2ZjMyNDM1Yzk2OWY0ZDIxOGNhNTRkMTMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TXlOekEyTmpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaGVsbG8tZHVyYWJsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiMzE3NjllNGE2NzU2Y2RhNDQ2ZDM4ZjdiZTRhNTFhMWY5MjBiN2UzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1EWTVOVFUxTlE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldpZ2dsZUFuaW1hdGlvbnMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDI5NWFhMzkzNWVjZjc2YWQ3ZjEyOTUxZWI3NDI2MjRhYzUzMmY1MCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgV2lnZ2xlQW5pbWF0aW9uc1xuQSBYYW1hcmluLmlPUyBhbmQgYSBYYW1hcmluLkFuZHJvaWQgc2FtcGxlIGFwcCBkZW1vbnN0cmF0aW5nIGhvdyB0byBpbWl0YXRlIGEgd2lnZ2xlIGFuaW1hdGlvblxuXG4hW10oLi9EZW1vL0FuZHJvaWREZW1vLmdpZilcbiFbXSguL0RlbW8vaU9TRGVtby5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMDY5NjE0ZGEtYTYxOC00N2UzLTlhNDEtZjNkN2I2MmZkNmRlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UTBOVEV4TXpJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkxpc3RWaWV3V2l0aEVudHJ5IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ2MTMyOTg4MDZkNDQ2ZTgyMmYwMTRkZWMyOGYyNzlhMjViYzVmNmIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTBORFF4TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWR2YW5jZWQtZGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOGI5MDZmM2EwYWFhNTU5M2ViMTY0YjQ3ZjRhNjYxNDdhODNmOTY5NiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXhPVEF6T1RrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGFnZS10cmFuc2l0aW9ucy10cmF2ZWxhcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTY0Yzc5ZGMzOGIwMzUwMzNlM2E0YzA4OGZjZTI3M2Q5Yzc4ODE1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UTJPREUxTkRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1vYmlsZUFwcHNPZlRvbW9ycm93LUxhYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4MGQ2MWZmZDkwOWViZmMxNTRlNmNhMzkzZmY5NWNhNmVlZjBkZDkxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgU3R5bGUgR3VpZGVcblxuIyMgVmVyc2lvbnNcblRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBBbmd1bGFyLCBhbmQgdGh1cyB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgb2YgdGhlIGd1aWRlLiBDaG9vc2UgeW91ciBndWlkZSBhcHByb3ByaWF0ZWx5LlxuXG4jIyMgQW5ndWxhciAxIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMSBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMS9SRUFETUUubWQpLlxuXG4jIyMgQW5ndWxhciAyIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMiBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMi9SRUFETUUubWQpLlxuXG4jIyBBbmd1bGFyIFRlYW0gRW5kb3JzZWRcblNwZWNpYWwgdGhhbmtzIHRvIElnb3IgTWluYXIsIGxlYWQgb24gdGhlIEFuZ3VsYXIgdGVhbSwgZm9yIHJldmlld2luZywgY29udHJpYnV0aW5nIGZlZWRiYWNrLCBhbmQgZW50cnVzdGluZyBtZSB0byBzaGVwaGVyZCB0aGlzIGd1aWRlLlxuXG4jIyBQdXJwb3NlXG4qT3BpbmlvbmF0ZWQgQW5ndWxhciBzdHlsZSBndWlkZSBmb3IgdGVhbXMgYnkgW0Bqb2huX3BhcGFdKC8vdHdpdHRlci5jb20vam9obl9wYXBhKSpcblxuSWYgeW91IGFyZSBsb29raW5nIGZvciBhbiBvcGluaW9uYXRlZCBzdHlsZSBndWlkZSBmb3Igc3ludGF4LCBjb252ZW50aW9ucywgYW5kIHN0cnVjdHVyaW5nIEFuZ3VsYXIgYXBwbGljYXRpb25zLCB0aGVuIHN0ZXAgcmlnaHQgaW4uIFRoZXNlIHN0eWxlcyBhcmUgYmFzZWQgb24gbXkgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZSB3aXRoIFtBbmd1bGFyXSgvL2FuZ3VsYXJqcy5vcmcpLCBwcmVzZW50YXRpb25zLCBbUGx1cmFsc2lnaHQgdHJhaW5pbmcgY291cnNlc10oaHR0cDovL2FwcC5wbHVyYWxzaWdodC5jb20vYXV0aG9yL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG5cblRoZSBwdXJwb3NlIG9mIHRoaXMgc3R5bGUgZ3VpZGUgaXMgdG8gcHJvdmlkZSBndWlkYW5jZSBvbiBidWlsZGluZyBBbmd1bGFyIGFwcGxpY2F0aW9ucyBieSBzaG93aW5nIHRoZSBjb252ZW50aW9ucyBJIHVzZSBhbmQsIG1vcmUgaW1wb3J0YW50bHksIHdoeSBJIGNob29zZSB0aGVtLlxuXG4+SWYgeW91IGxpa2UgdGhpcyBndWlkZSwgY2hlY2sgb3V0IG15IFtBbmd1bGFyIFBhdHRlcm5zOiBDbGVhbiBDb2RlXShodHRwOi8vanBhcGEubWUvbmdjbGVhbikgY291cnNlIGF0IFBsdXJhbHNpZ2h0IHdoaWNoIGlzIGEgY29tcGFuaW9uIHRvIHRoaXMgZ3VpZGUuXG5cbiAgWyFbQW5ndWxhciBQYXR0ZXJuczogQ2xlYW4gQ29kZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS9tYXN0ZXIvYTEvYXNzZXRzL25nLWNsZWFuLWNvZGUtYmFubmVyLnBuZyldKGh0dHA6Ly9qcGFwYS5tZS9uZ2NsZWFuKVxuXG4jIyBDb21tdW5pdHkgQXdlc29tZW5lc3MgYW5kIENyZWRpdFxuTmV2ZXIgd29yayBpbiBhIHZhY3V1bS4gSSBmaW5kIHRoYXQgdGhlIEFuZ3VsYXIgY29tbXVuaXR5IGlzIGFuIGluY3JlZGlibGUgZ3JvdXAgd2hvIGFyZSBwYXNzaW9uYXRlIGFib3V0IHNoYXJpbmcgZXhwZXJpZW5jZXMuIE1hbnkgb2YgbXkgc3R5bGVzIGhhdmUgYmVlbiBmcm9tIHRoZSBtYW55IHBhaXIgcHJvZ3JhbW1pbmcgc2Vzc2lvbnMgW1dhcmQgQmVsbF0oaHR0cHM6Ly90d2l0dGVyLmNvbS93YXJkYmVsbCkgYW5kIEkgaGF2ZSBoYWQuIE15IG1vc3QgZXhjZWxsZW50IGZyaWVuZCBXYXJkIGhhcyBoZWxwZWQgaW5mbHVlbmNlIHRoZSB1bHRpbWF0ZSBldm9sdXRpb24gb2YgdGhlc2UgZ3VpZGVzLlxuXG4jIyBDb250cmlidXRpbmdcbk9wZW4gYW4gaXNzdWUgZmlyc3QgdG8gZGlzY3VzcyBwb3RlbnRpYWwgY2hhbmdlcy9hZGRpdGlvbnMuIElmIHlvdSBoYXZlIHF1ZXN0aW9ucyB3aXRoIHRoZSBndWlkZSwgZmVlbCBmcmVlIHRvIGxlYXZlIHRoZW0gYXMgaXNzdWVzIGluIHRoZSByZXBvc2l0b3J5LiBJZiB5b3UgZmluZCBhIHR5cG8sIGNyZWF0ZSBhIHB1bGwgcmVxdWVzdC4gVGhlIGlkZWEgaXMgdG8ga2VlcCB0aGUgY29udGVudCB1cCB0byBkYXRlIGFuZCB1c2UgZ2l0aHVi4oCZcyBuYXRpdmUgZmVhdHVyZSB0byBoZWxwIHRlbGwgdGhlIHN0b3J5IHdpdGggaXNzdWVzIGFuZCBQUuKAmXMsIHdoaWNoIGFyZSBhbGwgc2VhcmNoYWJsZSB2aWEgZ29vZ2xlLiBXaHk/IEJlY2F1c2Ugb2RkcyBhcmUgaWYgeW91IGhhdmUgYSBxdWVzdGlvbiwgc29tZW9uZSBlbHNlIGRvZXMgdG9vISBZb3UgY2FuIGxlYXJuIG1vcmUgaGVyZSBhdCBhYm91dCBob3cgdG8gY29udHJpYnV0ZS5cblxuKkJ5IGNvbnRyaWJ1dGluZyB0byB0aGlzIHJlcG9zaXRvcnkgeW91IGFyZSBhZ3JlZWluZyB0byBtYWtlIHlvdXIgY29udGVudCBhdmFpbGFibGUgc3ViamVjdCB0byB0aGUgbGljZW5zZSBvZiB0aGlzIHJlcG9zaXRvcnkuKlxuXG4jIyMgUHJvY2Vzc1xuICAgIDEuIERpc2N1c3MgdGhlIGNoYW5nZXMgaW4gYSBHaXRIdWIgaXNzdWUuXG4gICAgMi4gT3BlbiBhIFB1bGwgUmVxdWVzdCwgcmVmZXJlbmNlIHRoZSBpc3N1ZSwgYW5kIGV4cGxhaW4gdGhlIGNoYW5nZSBhbmQgd2h5IGl0IGFkZHMgdmFsdWUuXG4gICAgMy4gVGhlIFB1bGwgUmVxdWVzdCB3aWxsIGJlIGV2YWx1YXRlZCBhbmQgZWl0aGVyIG1lcmdlZCBvciBkZWNsaW5lZC5cblxuIyMgTGljZW5zZVxuXG5fdGxkcjsgVXNlIHRoaXMgZ3VpZGUuIEF0dHJpYnV0aW9ucyBhcmUgYXBwcmVjaWF0ZWQuX1xuXG4jIyMgQ29weXJpZ2h0XG5cbkNvcHlyaWdodCAoYykgMjAxNC0yMDE2IFtKb2huIFBhcGFdKGh0dHA6Ly9qb2hucGFwYS5uZXQpXG5cbiMjIyAoVGhlIE1JVCBMaWNlbnNlKVxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG5hIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbidTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG5FWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbk1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG5DTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcblNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4qKltCYWNrIHRvIHRvcF0oI2FuZ3VsYXItc3R5bGUtZ3VpZGUpKipcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImZkMmY4NzY0LTE2YTctNDc0NS05NDMzLTg4MGEwZTQyYTE5NyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTBPVE0xTmpnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidmlraW5ncyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNTZiYjE3Mjc1NzRhYTNiMzhiMWRjNzg3ZDg5MmY0YTYwYWQwZWU4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXlOVGsxT1RRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYW5ndWxhci13b3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ZjMwNzY2MjRhZWY2Njg3ODY5MDMwYjIwYjFhNjVkNDBiYjljYjU3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16WXpPVEF6TVRjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Jb1RXb3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxNjZhZmQ1NzBlODlhNjA0NDU0OGU4MTQ2NGZiZDRkZWMzMWEwMWI4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXpNRGswT0RVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGxhY2VzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5MDM5MmYxYjQ5MGNhNWY3OTQ2NGJiY2Q4NDI5YjdlODBiZjEzMDEyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTJOVFk1TVRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kYXRhLWxhYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MTk3NGQ1MjRhOGI3NWU1YTEyZWRiOTkxMzZjMzI1ZWVjNjIyNzg5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1Ea3dPVE16TXc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkV4cGFuZGFibGVMaXN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNhMTc1MDA5MWU0MjM1N2Q3MTY2ZDkwOTg5YzYxZDRiMTBhODJiNTciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBFeHBhbmRhYmxlTGlzdFxuQSBYYW1hcmluLmlPUyBhbmQgWGFtYXJpbi5BbmRyb2lkIGFwcCBkZW1vbnN0cmF0aW5nIGhvdyB0byBjcmVhdGUgYW4gRXhwYW5kYWJsZSBMaXN0XG5cbiFbXSguL0RlbW9zL0FuZHJvaWREZW1vLmdpZilcbiFbXSguL0RlbW9zL0V4cGFuZGFibGVMaXN0aU9TLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0Yjg2ZDZmNS1iYWZkLTRiYzEtYTQ0Yy01YmU1ZWJkNzBhYjEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16ZzRNREEwTnpnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlJ4VUlPblByb3BlcnR5Q2hhbmdlZFJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImM0Nzc4M2FlMWIzNDJjOTc2NTI4ZTgzM2FhNjYxZDc4ZTIwMzA2ZjIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16VXhPRGszTmpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYWR2YW5jZWQtcHdhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjJkOTI1OGIwMWY0MmU3MWMzYmM4MzRkYjdhMGFhOTljNGEyZTlhYjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTRNRE0yTmpJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidGhyZWUtdnVlLXBhdHRlcm4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiY2YwMDU5NWQ2ZmMzOTAxYzgxZDE0MmUyMDQ3NDU5OWI4MTE4NzBlZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16VXpNakUwTURjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVzaC1ub3RpZmljYXRpb25zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE2NjZlZjUwMjcyYTFkNGYxNzE3MmE1NTEyNTBhMzllMzlmMTM4OTIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16WXhOamt3TWpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibG9uZG9ub2h0ZWFtYXdlc29tZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlOTlkYmY3ZDc5ZjMwYzQ4OGVmZTExOWE1OTBlMDRjZjczNTI1OTI4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ERXpOakl4TXpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlRleHRNb29kX1R3aWxpb0Jsb2ciLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiY2RmMDAwYTRiZjQyYWVlYWU1YTNkNzQ4NTU2ZDBlYzNlM2E0NmQ0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlOek13T0RBPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWV4dGVuc2lvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlYzU0MjkzYzIxMTE5OGNkMGIxYzE1MzcyNzY0MmQ3Njk1NTc4NjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16a3lOalEzTWpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZnVuY3Rpb25zLWJhc2UtYXJtLXRlbXBsYXRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImM2NGQ3YTZmZTBmM2NhMmMzYjRkZTZiYjkxYzM2ZWM1MDZmOWQxMDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlPRGMyTnpRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk1Y2Y2NTEwOTYwNDM5MGUzMDg5MzcwZDJhZDgwYzUxOTFmNDU4ZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXdOakF3TmpFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5TZW50cnlBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjYyNDE5YjNhOWI5ZmQ4OTFhN2MyNTdiNGQ0N2U5NTI0MTRkMzVhYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXpORGsxTlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmlrYml0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImVmMzJmNWI5NWIyNzhmMTRmZGY4MjRlMDExYjEzYWFhYWU1NjE4YjgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXpOVE00TlRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFjY2VsZXJvbWV0ZXJBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTc2MGIwYjc0ZGQxMTkwZjkyMDBiMjM5NGZkZDUwOTM5NGY3YjIyYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNOall6T1RNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWludHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMyN2UyM2QzN2E2OTliNzM4MmM3NzA5Y2RhNWE4ZGY3NGExNzdjYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5Ea3dORE01TnprPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImF6dXJlLWZvci1kZXZlbG9wZXJzLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI0NTE5Y2I4Yzc1YTcyZWUyNjZiNWM0MzNjZDk2ODUyM2Q4YzlmMjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESTBORFkyTXpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidm90aW5nLWFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYmNjOTlmOGMzODgzNWQwYmJjM2JiYTc2MmQ0YmU3YmRlMzI4YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTFPREk1TURBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdsaWRlWF9Ib3Jpem9udGFsT3B0aW9uc19SZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MWJhMmQxNWUwZjBmOTFlNjU0NDA5ODQ0NzUwMDBiZDBhZGVjMTQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EWTJOamd6TmprPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibGF5b3V0LXRyYW5zaXRpb24tZ3JvdXAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDFlODA0M2JkZjg3Y2E2YWMwZDZjZDQzYWMwZDgzY2Q1NDBiNDg1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qUTVORGsyTXpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YkV4cGxvcmVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdmZWE0MDkyNjM4ZjBlODEwNzFlZTk5NTZhMzliMGUxMWQxZTEwZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qY3lNamczTlRZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiTm9kZUpTV29ya3Nob3AiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODNmYmY2MzAyMmVmYjM0ODZiZTAxMDhjMDcxZDhhYjFmMjAzOTExNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EazBNRFF3TlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjby1mYW5jeSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3MzcxYTllNGZiZmViYjk2NWYwNWI2OTc3ZDY1Yjc0MDdmY2NjMWIzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qWXpOall6T0RBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YlhhbWFyaW4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmM0YjNlNjQ5YTY2ZTNjODY2MzQ5ZmIxNTJjOGM0OGNhZmMwZDU0MyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USXhNVEl6TmpjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYXBpcGVsaW5lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxODAwMzk3YmVkNzJlODdmYjdmYmYyZTVjMmRjYTJhM2VlMmFiZmI4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpNakF6TURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1hcmNoaXRlY3R1cmUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTYzYzNlNDY0NTdlMTQxZGRhNGUwZTVmZmNkNTBiZGYxODY5ZGI4YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TTFOalkzTURjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXJ0aWNsZS1leHBsb3JlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhOGQ1OTdkMWJiOTdiMDYyY2Q0NTk1MGMzZmQyYmFkNmZjN2Q5MjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiI0FuZ3VsYXJKUyBQYXR0ZXJucyBUZXN0aW5nIC0gRGVtb1xuRGVtb25zdHJhdGVzIEFuZ3VsYXIgdGVzdGluZ1xuXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9qb2hucGFwYS9uZy1wYXR0ZXJucy10ZXN0aW5nLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2pvaG5wYXBhL25nLXBhdHRlcm5zLXRlc3RpbmcpXG5cbj4qT3BpbmlvbmF0ZWQgQW5ndWxhckpTIHN0eWxlIGd1aWRlIGZvciB0ZWFtcyBieSBbQGpvaG5fcGFwYV0oLy90d2l0dGVyLmNvbS9qb2huX3BhcGEpKlxuXG4+TW9yZSBkZXRhaWxzIGFib3V0IHRoZSBzdHlsZXMgYW5kIHBhdHRlcm5zIHVzZWQgaW4gdGhpcyBhcHAgY2FuIGJlIGZvdW5kIGluIG15IFtBbmd1bGFySlMgU3R5bGUgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyanMtc3R5bGVndWlkZSkgYW5kIG15ICoqQW5ndWxhckpTIFBhdHRlcm5zOiBDbGVhbiBDb2RlKiooY29taW5nIHNvb24pIGNvdXJzZSBhdCBbUGx1cmFsc2lnaHRdKGh0dHA6Ly9wbHVyYWxzaWdodC5jb20vdHJhaW5pbmcvQXV0aG9ycy9EZXRhaWxzL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG4+IFxuIyMgU2xpZGVzXG5cblRoZSBzbGlkZXMgZm9yIFdhcmQncyB0YWxrIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgcHJvamVjdCBhcmUgYXZhaWxhYmxlIG9uIGdvb2dsZSBkb2NzLlxuXG5bU2VlIHRoZSBzbGlkZXNdKGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kLzEzN2xnTE10ZmxXM3E0U0JLcnJqVmdpdVNBaTZHQzE5VDRtTlZveC00a1Y4L3ByZXNlbnQpXG5cbiMjIFRPRE9cbjEuIFN0cnVjdHVyZSB3aWxsIGhhdmUgc3BlY3Mgc2lkZSBieSBzaWRlIHdpdGggY29kZSwgZXhjZXB0IGNyb3NzIGN1dHRpbmcgdGVzdHNcbjIuIFJlbW92ZSBleHRyYW5lb3VzIGNvZGUgdW5yZWxhdGVkIHRvIHRlc3RzXG4zLiBBZGQgdWktcm91dGVyXG40LiBSZXZpc2UgZnJvbSBhdmVuZ2Vyc1xuXG4jIyBTdHJ1Y3R1cmVcblx0L2J1aWxkIFx0KGNyZWF0ZWQgb24gdGhlIGZseSlcblx0L2d1bHBcdFxuXHQvc3JjXG5cdFx0L2NsaWVudFxuXHRcdFx0L2FwcFxuXHRcdFx0L2NvbnRlbnRcblx0XHRcdC90ZXN0XG5cdFx0L3NlcnZlclxuXHRcdFx0L2RhdGFcblx0XHRcdC9yb3V0ZXNcblx0XG5cbiMjIEluc3RhbGxpbmcgTm9kZS5qcyBhbmQgQm93ZXIgUGFja2FnZXNcbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBucG0gaW5zdGFsbGBcblxuPkRvIG5vdCBiZSBhbGFybWVkIGJ5IHRoZSBvY2Nhc2lvbmFsIHNlYSBvZiByZWQgY29tcGxhaW5pbmcgYWJvdXRcbnRoZSBpbmFiaWxpdHkgdG8gcmUtYnVpbGQgc29tZSBsaWJyYXJ5LiBZb3UgY2FuIGlnbm9yZSB0aGVzZSB3YXJuaW5nc1xuYmVjYXVzZSB3ZSBhbHdheXMgdXNlIHRoZSBwcmUtYnVpbHQgbGlicmFyaWVzIHRoYXQgd2VyZSBzaGlwcGVkIHdpdGhcbnRoZSBwYWNrYWdlLlxuXG4jIyBDbGVhbmluZyBcbk92ZXIgdGltZSB5b3UgbWlnaHQgYWNjdW11bGF0ZSBzb21lIG9sZCBsaWJyYXJpZXMuXG5cbkl0IGRvZXNuJ3QgaHVydCB0byBvY2Nhc2lvbmFsbHkgY2xlYXIgdGhlIGRlY2tzIGJ5IGRlbGV0aW5nIHRoZVxuXCJib3dlclxcX2NvbXBvbmVudHNcIiBhbmQgXCJub2RlXFxfbW9kdWxlc1wiIGZvbGRlcnMgYW5kIHJlLWluc3RhbGxpbmdcbndpdGggYG5wbSBpbnN0YWxsYC5cblxuIyMgSW5zdGFsbGluZyBCb3dlciBQYWNrYWdlc1xuYG5wbSBpbnN0YWxsYCB3aWxsIGluc3RhbGwgdGhlc2UgdG9vLCBidXQgeW91IGNhbiBkbyBpdCBtYW51YWxseS5cbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBib3dlciBpbnN0YWxsYFxuXG5cbiMjIFRlc3RpbmdcblRoZXJlIGFyZSB0d28gd2F5cyB0byB0ZXN0OiBpbiB0aGUgYnJvd3NlciBhbmQgd2l0aCBrYXJtYVxuXG4jIyMgVGVzdGluZyBpbiB0aGUgYnJvd3NlclxuXG4qIE9wZW4gYSBjb21tYW5kIG9yIHRlcm1pbmFsIHdpbmRvdy5cblxuKiBXaXRoIGJyb3dzZXItc3luYyBcbiAgICAqIGluIHNwZWNzLmh0bWwsIGNvbW1lbnQgb3V0IGBtb2NoYS5jaGVja0xlYWtzKClgIC8vIGZhbHNlIGxlYWsgcmVwb3J0IGZyb20gYnJvd3NlciBzeW5jXG4gICAgKiBydW4gYGd1bHAgc2VydmUtc3BlY3NgPGJyLz48YnIvPlxuXG4qIFdpdGhvdXQgYnJvd3Nlci1zeW5jIFxuICAgICogcnVuIGBndWxwIHNlcnZlLXNwZWNzIC0tbm9zeW5jYFxuXHQqIG9wZW4gYSBicm93c2VyIHRvIGBsb2NhbGhvc3Q6NzIwMi9zcGVjcy5odG1sYFxuXHQqIGJyb3dzaW5nIHRvIGBsb2NhbGhvc3Q6NzIwMmAgcnVucyB0aGUgYXBwPGJyLz48YnIvPlxuXG4qIFRvIHN0b3AsIGVpdGhlciBcIkN0cmwtQ1wiIGFuZCBhbnN3ZXIgdGhlIHByb21wdCB3aXRoIFwiWVwiIG9yIGp1c3QgY2xvc2UgdGhlIHdpbmRvdy5cblxuIyMjIFRlc3Rpbmcgd2l0aCBrYXJtYVxuKiBPcGVuIGEgY29tbWFuZCBvciB0ZXJtaW5hbCB3aW5kb3cuXG5cbiogVG8ganVzdCB0aGUgdW5pdCB0ZXN0cywgdHlwZSBgZ3VscCBhdXRvdGVzdGAgXG5cbiogVG8gcnVuIGJvdGggdW5pdCBhbmQgbWlkd2F5IHRlc3RzIChzcGlucyB1cCBhIGRldiBzZXJ2ZXIpLCB0eXBlIGBndWxwIGF1dG90ZXN0IC0tc3RhcnRTZXJ2ZXJzYFxuXG5UZXN0aW5nIHVzZXMga2FybWEsIG1vY2hhLCBjaGFpLCBzaW5vbiwgbmdNaWR3YXlUZXN0ZXIgbGlicmFyaWVzLlxuXG4+XCJhdXRvdGVzdFwiIHN0YXJ0cyB0aGUgdGVzdHMgYW5kIHN0YXlzIGFsaXZlLCB3YXRjaGluZyBmb3IgZmlsZSBjaGFuZ2VzLiBUeXBlIFwidGVzdFwiIGluc3RlYWQgaWYgeW91IG9ubHkgd2FudCB0byBydW4gdGhlIHRlc3RzIG9uY2UgYW5kIHRoZW4gZXhpdC5cblxuKiBUbyBzdG9wLCBlaXRoZXIgXCJDdHJsLUNcIiBhbmQgYW5zd2VyIHRoZSBwcm9tcHQgd2l0aCBcIllcIiBvciBqdXN0IGNsb3NlIHRoZSB3aW5kb3cuXG5cbiMjIFJ1bm5pbmcgdGhlIGFwcFxuUnVucyBsb2NhbGx5LCBubyBkYXRhYmFzZSByZXF1aXJlZC5cblxuIyMjIERldiBCdWlsZHNcblRoZSBkZXYgYnVpbGQgZG9lcyBub3Qgb3B0aW1pemUgdGhlIGRlcGxveWVkIGNvZGUuIEl0IHNpbXBseSBydW5zIGl0IGluIHBsYWNlLiBZb3UgY2FuIHJ1biBhIGRldiBidWlsZCBpbiBtdWx0aXBsZSB3YXlzLlxuXG4jIyMjT3B0aW9uIDEgLSBTZXJ2ZVxuVHlwZSBgZ3VscCBzZXJ2ZS1kZXZgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuIyMjI09wdGlvbiAyIC0gU2VydmUgYW5kIERlYnVnIE5vZGVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnYCBhbmQgYnJvd3NlIHRvIGBodHRwOi8vbG9jYWxob3N0OjcyMDJgIGZvciB0aGUgY2xpZW50IGFuZCBgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlYnVnP3BvcnQtNTg1OGAgdG8gZGVidWcgdGhlIHNlcnZlci5cblxuIyMjI09wdGlvbiAzIC0gU2VydmUgYW5kIERlYnVnIE5vZGUgQnJlYWtpbmcgb24gMXN0IExpbmVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnLWJya2AgYW5kIGJyb3dzZSB0byBgaHR0cDovL2xvY2FsaG9zdDo3MjAyYCBmb3IgdGhlIGNsaWVudCBhbmQgYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9kZWJ1Zz9wb3J0LTU4NThgIHRvIGRlYnVnIHRoZSBzZXJ2ZXIuXG5cbiMjIyBTdGFnaW5nIEJ1aWxkXG5UaGUgc3RhZ2luZyBidWlsZCBpcyBhbiBvcHRpbWl6ZWQgYnVpbGQuIFR5cGUgYGd1bHAgc2VydmUtc3RhZ2VgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuVGhlIG9wdGltaXphdGlvbnMgYXJlIHBlcmZvcm1lZCBieSB0aGUgZ3VscCB0YXNrcyBhbmQgaW5jbHVkZSB0aGUgZm9sbG93aW5nIGxpc3QuIFNlZSB0aGUgYGd1bHBmaWxlLmpzYCBmb3IgZGV0YWlsc1xuXG4tIGpzaGludFxuLSBwcmVwYXJpbmcgQW5ndWxhcidzIHRlbXBsYXRlY2FjaGUgZm9yIGh0bWwgdGVtcGxhdGVzXG4tIGNvbmNhdCB0YXNrIHRvIGJ1bmRsZSBjc3MgYW5kIGpzLCBzZXBhcmF0ZWx5XG4tIEFuZ3VsYXIgZGVwZW5kZW5jeSBpbmplY3Rpb24gYW5ub3RhdGlvbnMgdXNpbmcgbmdBbm5vdGF0ZVxuLSB1Z2xpZnkgdG8gbWluaWZ5IGFuZCBtYW5nbGUgamF2YXNjcmlwdFxuLSBzb3VyY2UgbWFwc1xuLSBjc3MgYXV0b3ByZWZpeGVyIGZvciB2ZW5kb3IgcHJlZml4ZXNcbi0gbWluaWZ5IGNzc1xuLSBvcHRpbWl6ZSBpbWFnZXNcbi0gaW5kZXguaHRtbCBpbmplY3Rpb24gZm9yIHNjcmlwdHMgYW5kIGxpbmtzXG4tIGRlcGxveWluZyBhbGwganMsIGNzcywgaW1hZ2VzLCBmb250cywgYW5kIGluZGV4Lmh0bWxcblxuIyMgSG93IFRoZSBBcHAgV29ya3NcblRoZSBhcHAgaXMgcXVpdGUgc2ltcGxlIGFuZCBoYXMgMiBtYWluIHJvdXRlczpcbi0gZGFzaGJvYXJkXG4tIGF2ZW5nZXJzIGxpc3RcblxuIyMjIFRoZSBNb2R1bGVzXG5UaGUgYXBwIGhhcyA0IGZlYXR1cmUgbW9kdWxlcyBhbmQgZGVwZW5kcyBvbiBhIHNlcmllcyBvZiBleHRlcm5hbCBtb2R1bGVzIGFuZCBjdXN0b20gYnV0IGNyb3NzLWFwcCBtb2R1bGVzXG5cblx0YXBwIC0tPiBbXG5cdCAgICAgICAgYXBwLmF2ZW5nZXJzLFxuXHQgICAgICAgIGFwcC5kYXNoYm9hcmQsXG5cdCAgICAgICAgYXBwLmxheW91dCxcblx0ICAgICAgICBhcHAud2lkZ2V0cyxcblx0XHRcdGFwcC5jb3JlIC0tPiBbXG5cdFx0XHRcdG5nQW5pbWF0ZSxcblx0XHRcdFx0bmdSb3V0ZSxcblx0XHRcdFx0bmdTYW5pdGl6ZSxcblx0XHRcdFx0YmxvY2tzLmV4Y2VwdGlvbixcblx0XHRcdFx0YmxvY2tzLmxvZ2dlcixcblx0XHRcdFx0YmxvY2tzLnJvdXRlclxuXHRcdFx0XVxuXHQgICAgXVxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjBlOTdiMGE3LWQ5OWUtNDgzNC1hNmU1LTlmYmRkZWVmZTAyOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBNelkzT1RZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtdWktIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImUwMzYyOTNhYTU5MGI0ZGVlOTU5ZjYxODI5ZjI2MTcyYmZiYjBiM2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9ETXhOVEE0TXc9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtcGVyZiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NTI0NGVhOWQ0YjU1MmU4NDNiMmNmZTE4NTlmZThhZmZmMjI4ZjQ3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyByZWFjdC1wZXJmXG5UaGlzIGlzIGEgY29sbGVjdGlvbiBvZiBhcnRpY2xlcyB0aGF0IGRlc2NyaWJlIHBlcmZvcm1hbmNlIGlzc3VlcyB3aXRoIFJlYWN0IGFuZCBob3cgdG8gdGFja2xlIHRoZW1cblxuLSBodHRwczovL21lZGl1bS5jb20vQGFyaWttYW9yL3JlYWN0LXJlZHV4LXBlcmZvcm1hbmNlLXR1bmluZy10aXBzLWNlZjFhNmM1MDc1OSMuYmNlcXQwOTRrXG4tIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlZHV4L2lzc3Vlcy8xMzAzXG4tIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJlZHV4L2Jsb2IvbWFzdGVyL2RvY3MvYXBpLm1kXG4tIGh0dHBzOi8vbWFybWVsYWIuY29tL2Jsb2cvMjAxNy8wMi8wNi9yZWFjdC1pcy1zbG93LXJlYWN0LWlzLWZhc3QuaHRtbFxuLSBodHRwOi8vYmVuY2hsaW5nLmVuZ2luZWVyaW5nL2RlZXAtZGl2ZS1yZWFjdC1wZXJmLWRlYnVnZ2luZy9cbi0gaHR0cHM6Ly9lbmdpbmVlcmluZy5tdXNlZmluZC5jb20vaG93LXRvLWJlbmNobWFyay1yZWFjdC1jb21wb25lbnRzLXRoZS1xdWljay1hbmQtZGlydHktZ3VpZGUtZjU5NWJhZjEwMTRjIy5wa2J2cWI1NG9cbi0gaHR0cHM6Ly9hdXRoMC5jb20vYmxvZy9vcHRpbWl6aW5nLXJlYWN0LyNcbi0gaHR0cHM6Ly9vbnNlbi5pby9ibG9nL3JlYWN0LXN0YXRlLW1hbmFnZW1lbnQtcmVkdXgtc3RvcmUvXG4tIGh0dHBzOi8vbWVkaXVtLmNvbS9AYWxleGFuZGVyZWFyZG9uL3BlcmZvcm1hbmNlLW9wdGltaXNhdGlvbnMtZm9yLXJlYWN0LWFwcGxpY2F0aW9ucy1iNDUzYzU5N2IxOTEjLjhtNmZidmxpYlxuLSBodHRwczovL21lZGl1bS5jb20vamF2YXNjcmlwdC1zY2VuZS8xMC10aXBzLWZvci1iZXR0ZXItcmVkdXgtYXJjaGl0ZWN0dXJlLTY5MjUwNDI1YWY0NCMucTRueXI4c3Q1XG4tIGh0dHBzOi8vbWVkaXVtLmNvbS9AYXJpa21hb3IvcmVhY3QtcmVkdXgtcGVyZm9ybWFuY2UtdHVuaW5nLXRpcHMtY2VmMWE2YzUwNzU5Iy5xOTI5cjAzMjVcbi0gaHR0cDovL2Jsb2cucmFuZ2xlLmlvL3JlYWN0LWFuZC1yZWR1eC1wZXJmb3JtYW5jZS13aXRoLXJlc2VsZWN0L1xuLSBodHRwczovL3R5bGVybWNnaW5uaXMuY29tL2J1aWxkaW5nLXVzZXItaW50ZXJmYWNlcy13aXRoLXB1cmUtZnVuY3Rpb25zLWFuZC1mdW5jdGlvbi1jb21wb3NpdGlvbi1pbi1yZWFjdC1qcy8/dXRtX3NvdXJjZT1yZWFjdG5sJnV0bV9tZWRpdW09ZW1haWxcbi0gaHR0cHM6Ly9tZWRpdW0uY29tL0BkYW5fYWJyYW1vdi9taXhpbnMtYXJlLWRlYWQtbG9uZy1saXZlLWhpZ2hlci1vcmRlci1jb21wb25lbnRzLTk0YTBkMmY5ZTc1MFxuLSBodHRwOi8vYmVuY2hsaW5nLmVuZ2luZWVyaW5nL2RlZXAtZGl2ZS1yZWFjdC1wZXJmLWRlYnVnZ2luZy9cbi0gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVzZWxlY3QjcS1ob3ctZG8taS10ZXN0LWEtc2VsZWN0b3Jcbi0gaHR0cHM6Ly9oYWNrZXJub29uLmNvbS9yZWFjdC1zdGF0ZWxlc3MtZnVuY3Rpb25hbC1jb21wb25lbnRzLW5pbmUtd2lucy15b3UtbWlnaHQtaGF2ZS1vdmVybG9va2VkLTk5N2IwZDkzM2RiY1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjczOGE2ZjUzLTkxMjYtNDRlOC05N2RmLWY2ZTI5N2Y2MDNlMyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qYzRNVE01TXpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImNzaGFycC13b3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzZWFlMWQ1NGIxOGJkZmZiZmZiMjQyZWJjNGM0OGFlMTkwMjk0YTYxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ETTNPRGswTkRjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS1oZWxsbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NDRhZjQwNzkxOGQ0YjI1YzljN2RjMzg3NGFiY2E4M2JmMTdiODMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDVjOTFiODMtMTdmNS00MmE2LWFiNzYtOTZlNjg3OGNkNjcyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56WTRNamt6TkRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVSTEVuY29kZWRGb3JtQnVnX0xMVk0iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzUyZmFkMzMyODdiNDU5NWZkYTZmOTJkNGRjYTRjYzY5MWM5Mjg5OCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalUxTlRNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtdWkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjkzZjc5Yzc5MmQ1YTE4MmRmOWYwZDFjOThiODg4N2U5YzE3M2Y2MyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1qSXlOekE1TVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvc21vc0RiU2FtcGxlQXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjZmYjY1MGVlNGFjNzIzNmQ2OTE3MjM2ZjE1ZjQwMWZlYzBlYzA1NDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBDb3Ntb3NEYlNhbXBsZUFwcFxuXG5BIFhhbWFyaW4uaU9TIGFuZCBYYW1hcmluLkFuZHJvaWQgYXBwIGJ1aWx0IHVzaW5nIFhhbWFyaW4uRm9ybXMgdGhhdCB1dGlsaXplcyBhIFtDb3Ntb3MgREIgQmFja2VuZF0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvY29zbW9zLWRiL21vYmlsZS1hcHBzLXdpdGgteGFtYXJpbj9XVC5tY19pZD1jb3Ntb3NkYnNhbXBsZWFwcC1naXRodWItYnJhbWluKS5cblxuSXQgd2FzIGFsc28gd2FzIGZlYXR1cmVkIG9uIFtUaGUgWGFtYXJpbiBTaG93LCBTY2FsYWJsZSArIFNlY3VyZSBEYXRhIHdpdGggQ29zbW9zREIgZm9yIE1vYmlsZV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbS9TaG93cy9YYW1hcmluU2hvdy9TY2FsYWJsZS0tU2VydmljZS1EYXRhLXdpdGgtQ29zbW9zREItZm9yLU1vYmlsZT9XVC5tY19pZD1jb3Ntb3NkYnNhbXBsZWFwcC1naXRodWItYnJhbWluKS5cblxuWyFbVGhlIFhhbWFyaW4gU2hvd10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTc3MTcwOTItNGI0NzExODAtNzYyZi0xMWU5LTllZTctYTVlOWI2NmJiMzg5LnBuZyldKGh0dHBzOi8vY2hhbm5lbDkubXNkbi5jb20vU2hvd3MvWGFtYXJpblNob3cvU2NhbGFibGUtLVNlcnZpY2UtRGF0YS13aXRoLUNvc21vc0RCLWZvci1Nb2JpbGU/V1QubWNfaWQ9Y29zbW9zZGJzYW1wbGVhcHAtZ2l0aHViLWJyYW1pbilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhOGE2ZTdiYS1iZmIyLTQ3NDEtOTNhYy0yOTI2Njc5MmU5OGQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGd5T0RJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLXJlYWN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY1NmRhYTFmOTgwZTA4MTYwY2E5ZGY4MzI3OWM4MTY1YmRjNDllNDIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalUyTWpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjZlOTBiYzQ4MDU4YjJhNTM2YTExMTVlZDc0ZjNkNjIyYjdjZGNiYTMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56Y3dNVGc1TWprPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJ1bmRsZUFzc2VtYmxpZXNSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NjYwZTQ1NjJmMjM0ZDAxZWY0MjVmNDAxZTFlNGY3NDcwOWM2ZWUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGcwTURrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLW5vZGUtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NDNmYTEwYjcxZjBlNGM1NTMwNmIzNDRkOTA4NTU1ZWE4M2NiYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NWM5MWI4My0xN2Y1LTQyYTYtYWI3Ni05NmU2ODc4Y2Q2NzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UTXpOREUxTmpJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVzdC1hY3Rpb25zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU4MWY0NDQ4NWJhNjgzNWI1Y2UwMGJlYWQ5NWUzMjJlNjYxMGZmYjkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UVTRNVE0yTVRVPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODkxOWY0ZGI2MzI3MmEyNzI0YmM2YTNjNzUyMTNmNDY1OWQ2ZWQ5OSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1YzkxYjgzLTE3ZjUtNDJhNi1hYjc2LTk2ZTY4NzhjZDY3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56a3pOVEF4TlRBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5BenVyZUNoYWxsZW5nZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0MGE3YzA4MjVlOThhNzUxYWYzMTE5M2Y0M2I1OTA3ZjVmZWMwMjdkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UWTFNRGcwTlRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5MWI1MmI2ODYwM2Y5ZmMzZWUxNDNkZmM0ZWVlZjI5ODIyYmIwODYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ESXpNRE0zTlRFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtc1NpbmdsZXRvblJlcHJvLVBsdWdpbi5CYWRnZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkMDJlMjYyNTgxMWFlYmIwYzU4MTI3NGJiYTMzOTI4OTk0OWNjNGFlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UZzRNelUyT0RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jb2duaXRpdmUtc2VydmljZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzI4MGIwNTU5MjliNDU3N2Q5YTEzNjg3Y2FmMmY4NzZiODU2ZDQwOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ESXpNRGN4TURjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVuaXRUZXN0QXBwVGVtcGxhdGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDdjNjlmNmMyMzFhMTk3YTkwNTRlYjExZjBhMGUzNTI0MjZmNTdmOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQXlNREUzTXpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm9kZWJpbmFyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYwNjcxMDIwOGM3YTViYTY5N2ZmZjNmYWYwNjBmOTdiZTNlOGJlODkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXhNRGcyTVRrPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJ1dHRvblJlbmRlcmVyU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ0NGUzOTVlMjI4ZmRjZWJlNDdjNWVhNmFlZDlkZDExMTgzYzMyZjIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qUXpNak0wTmpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzLWRlcHJlY2F0ZWQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTE5Y2M4NjM3ZThlNDhhZDQ5MDVmZDIwZmQ0YTJmNzY2ZmQ3NDhhZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EWXpOREk1TURnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdFRyZW5kcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhY2U1MmY1MjM2NzBjZGRlMTU3NDk4ODExODU5OTQyZjk2NTE1Nzc5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qZzVOekl3TmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaWduaXRlLXRoZS10b3VyLWZ1bjMwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5MzQ2MjFkOWYzNjMwMWFmOGI0M2RiZGNmZDJkMTlmNjgxMTFhZGMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXlPVGM0TkRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzFlMjMwMmRkM2M5YmNmMWY2MTI2N2VjMTYxMzQ3YTQ0NGQ4YmY4NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UWXlNakExTURBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZVhhbWFyaW5HcmFwaFFMIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImFkYTA2ZTY4MDI0NDY0N2ZmYTIxYTYwOTBhNTRmMzI0NTBjN2RhM2UiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXpNRFV5TURJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYmI2MDJmN2FlYWI4YTVlMjY3ZDcyMzNiMzMwYTI0ODVlZDM3YjliYiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1ERTVOell5T1RnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1vYmlsZUJsYXpvckJpbmRpbmdzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImVhMmIxZjJiZjE5OTkzNDI5MWI5YTY0Yzc3MTkzOTEyMTAwMDdmMDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXpNRGcwTVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTY1MjYwNTAwODkyODhhNWEwNTgxODAxNzQzNjc4YWJmOWVmYzNkNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5EUTVOamd3TWc9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNob3BwZWRQaWNrZXJSZXByb2R1Y3Rpb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjkyZThiMGM3N2NhODRmYWQ4OWMxOTE1YzgzNTM0YjI0ZDg2NWNmOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ2hvcHBlZFBpY2tlclJlcHJvZHVjdGlvblxuUmVwcm9kdWN0aW9uIHRvIGRlbW9uc3RyYXRlIHRoYXQgYSBYYW1hcmluLkZvcm1zLlBpY2tlciBkb2VzIG5vdCBzY2FsZSBob3Jpem9udGFsbHkgdG8gbWF0Y2ggaXRzIGNvbnRlbnRzXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYWQyYjM5ZTMtNTlkNy00NjAyLWJkN2ItZjVmMzE5NjM4MzRhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56RTJOVFEzT1RZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtY291cnNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjFjMGEyMDRjOWJjYTUwMzE4Mjg2NjM3ZTM3NzBhYmZiODlkMDE2MzIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EUTFOalk1T0RjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogInhhbWFyaW4tMTAxIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRkMDVkYTIyYjg3NmFhYjVkMzYwZGY1ZWI2YjgxZmUxMzhlODkxYjgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EY3lNRFF3T0RFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNhbmNlbFRleHRUb1NwZWVjaFNhbXBsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkMTZiOTY0NGUyZWIyMDNiOTdiYmE1Y2Q5MzFjNjgwOTc3MmU3M2Q0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56TTNNVGN4TVRZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidHdlZXR2ZXJzZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwNWViN2IyNzMzMTg4MmY5YzY1NjM0OWY1ODM1ZWY5MmQ2ZWIwMjAwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTROekkyT1RVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibGlua3ktbGluayIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwYTY4YWE1YTRmZGE5MzMzZWJhMjAzNTQ4M2NmZTY0NGIyMDEwNDAxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EZ3hOemN4T1RFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkpzb25QYXJzZVRleHRSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5MTFiNzk2YjI0MDMzNDZkZjY3N2I0N2ZiZDBhNDk4NTQ0OTk1NGQ0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56WTNNelV4TXpNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwYjZhZDQ3YmU1ZmQ0ODAzMzExYWUyMjEwZWY0NmQ2OGE3NjAxZGQ5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1URXhORFl3TVRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlPU0xhcmdlVGl0bGVSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MDk2MTE4MzZkMTAwZTRiNzk0MzYzNjA5YTJjZjIxNDVkODZkY2FkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EVXlOak16TWpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZmF2LXRhbGtzLWV2ZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjRkZGMzZjcwNTk5N2U1MDMyZGY1YWIyYzdlZjJjYTEzZDg4ZmNkOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgZmF2LXRhbGtzLWV2ZXJcblRoaXMgaXMgYSBsaXN0IG9mIG15IGZhdm91cml0ZSB0YWxrcyBcblxuKiBBbWF6aW5nIHRhbGsgYWJvdXQgc3RheWluZyBoYXBweTogaHR0cHM6Ly93d3cudGVkLmNvbS90YWxrcy9zaGF3bl9hY2hvcl90aGVfaGFwcHlfc2VjcmV0X3RvX2JldHRlcl93b3JrIFxuKiBQdWJsaWMgc3BlYWtpbmcgdGlwczogaHR0cHM6Ly93d3cudGVkLmNvbS90YWxrcy9qdWxpYW5fdHJlYXN1cmVfNV93YXlzX3RvX2xpc3Rlbl9iZXR0ZXIgXG4qIEludHJvdmVydHMgdnMgZXh0cm92ZXJ0czogaHR0cHM6Ly93d3cudGVkLmNvbS90YWxrcy9icmlhbl9saXR0bGVfd2hvX2FyZV95b3VfcmVhbGx5X3RoZV9wdXp6bGVfb2ZfcGVyc29uYWxpdHkgXG4qIEFsZXggQ29ybmVsbCdzIHRhbGsgYWJvdXQgY3JlYXRpdmUgcHJvY2VzczogaHR0cHM6Ly95b3V0dS5iZS9qbDZ1bGlBbDhGSSBcbiogQXNpbSBIdXNzYWluJ3MgdGFsayAtIEhvdyB0byBoYWNrIGEgTm9kZSBhcHA6IGh0dHBzOi8veW91dHUuYmUvV3gzV2xRTEZhM3dcblxuXG5UbyB3YXRjaDpcblxuKiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMNjVwcDZUcGs2OTJsTDg1anZvT0FUX2U5WXV6el9ud0FcblxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyYWRhZDkzNi01Yjg1LTRmZDctYjc2Yi1iYzQ3NDc2ZDM3YTUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1URTBNREU1TkRVPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlPUzEzU2ltdWxhdG9yRW50cnlSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNzZlYWQyNzE5OTQxNWVhMGJjZGY0MGM2YjM0MmY2NmIxNGYwNGY2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56azRNekE0TXpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVkZGl0aWZpZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODcyNWU0MmRhNmVjZDM3Y2QwNzUyYTQ2OGZlODJlNmUyYjEzM2Q1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EQTVOamcyTkRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jYW4tZG8tdGhhdCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4ZjJmZDBlNWE0OTZmNDgyOGIyYWQ2MTIyM2VjMGQzNzFmODQ3YmNmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UTTBOVEV6TnpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1hc3RlckRldGFpbFRhYmJlZFNlYXJjaEJhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiY2RiMTE0ZDA5ZDJjZTQ5ZWYyNzQ2MzljYmU3Y2MxZmY2MjE3ZTAxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ETXhOekUzTnpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3JhcGhsZXNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgyOGJlN2RiZDZlOWEwZDZkMGRiNDczZjAxY2JmODNiYTlkMTZjNTkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UUTFNemd6T0RBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRhcmtNb2RlU3BsYXNoU2NyZWVuIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjkzYThiZWZiNzk1MDc3YjRmNjlhNmVmMzgwMWM4ZjU3N2FhNDZjYzYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ETTRNakUwTURNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYXV0by1iYW5uZXItaW1hZ2UtbWFrZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTk2MmFiNmEwODQxZTQ0MWZkMDhiNTM3ZTIzMzFkOWQxZjM3MGEzNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UZ3hOamMyTURFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRvdE5ldEdyYXBoUUwiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjBhMzcyYzU3ODUzYWRlZTlkODZiMmY5NDdiMGFhM2UzOWFiZjQ2MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXdNekUwT1RBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY3JlYXRlLWdyYXBobGVzcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkOGY4OWRlZTI5NDEzNjgzZTgwNDgzZDJlNDVmZmQzZGVlNDIzNzc2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UazROakEyTmpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3T2JzZXJ2YWJsZUNvbGxlY3Rpb25SZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiOTJlOTllZjEyMGU1NWFkY2MwZmEyNWNmMDhlZjQ5YmEyODI5NTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qRTBOelEwTXpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFwcENlbnRlckF1dGhEYXRhU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMzMTYzMGE1NTE0MTUzZmI3OGNiNTZkYzZkMjMxYWZmNjI1YzA0NzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXpOemsxT0RFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYnVpbGRncmFwaGxlc3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjI0NDIzNjJjZTg1MDAzN2E3MWUyODFhMzc2ZTQ2Y2IwYTdjOWNkMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTXlOakUyTnpVPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlRlbXAtQXN5bmMtYW5kLUF3YWl0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY0YjRlODg2MWM5ZjYzZWRiYmQ2MGYyMmZiYmY3ODllNjAxNDQ0YjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UQTFOVGN3TkRVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2VibWwiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjUyMjliNWY2MDExNDcwYzgzNTRjMTI0NGY4ZDkxNjNkNTVhNDQwNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qZzNNRFV6T0RFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlBlcmZlY3QtR2lmdCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxY2Q0NmM3NjM3OGM2MWIyOTcwNThlMTI2ZTc0ZDdmYWYwNmJmMWQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EUXhNelkxTlRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VuZC1lbWFpbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMGI3OTgyNDk5ZWI5YzIxOWU3YTNjNmRhODExMDIxYzNhYmM1NWRlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16SXlORE15TkRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlN3aXBlVmlld0NyYXNoUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzhiNjE0MzEwMDJkZTE5NWVhYjlmYTJlY2MxZWU4MjdjMWJjMWI5OCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EVTNNRFV5T1RjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjliZWZhYmQwMzQyODYzOGU2NjA0YzFhMTYwNTkyYjc2ZGJiNDI3YzMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16TTNNREl3TlRjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkxvY2FsTm90aWZpY2F0aW9uc1NhbXBsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNmJhYTIxMTE0YjI0MjI1ZWViNTFmNzFkNTY1MmEwMmE5MTNmZGJmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EZ3lNalV5TVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3JhcGhsZXNzLWhlbGxvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI0NzMzMjJjMmI5ZGJkZWYwZTVlOTViMWM1NWFhZDUwM2M3MDQwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16VTVORFV4T0RRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVJTW9kYWxQcmVzZW50YXRpb25TdHlsZUZvcm1TaGVldE9uQXBwZWFyaW5nUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMmNmOWE1OTlkZTA4YTMyMzkzZjcxYzQxNTE3ZjYzYWFmMzI5MTkyMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UTTVOall3TkRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY29uY2F0ZW5hdGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjEzOTNmNTAwMjE2NGQwMTM1OThmMjkxODU1Y2I0MGU3OWNjNWNlYyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16Y3pNRFk1TXpVPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNyZWF0ZUludGVyYWN0aXZlQ2hhcnRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA4ZmYyMzUzMWRlYmZiZWViN2M2NWJjNjQyYmE0NWQ2OWI1OGJjNGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qSXlNRGt3TlRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZHVyYWJsZS1zbGFjay1yZW1pbmRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhMTI0YTE5NDZlMDcxNjIyNTA0NGM1YmY3NWM3OWI0YmY0MDhjOWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTXdNelEwTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVwcHktcm9kZW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmFlMGUzN2FiOTk5MzYyZTE5ZGUzMWYzZDUzN2ZhNGEzODY3ZWQ4OCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UQXpNakkwTWpFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YlJlYWRtZVJldHJpZXZlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhYTNkYzc0YzkxNDY5ZTFmZTZkMTcxNGMyZjg5ZDZhMWVjMWMyMjFiIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qVXdPRFV4TmpjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jaGFsbGVuZ2VzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQwNTI2OWNlMGEwZjM4ODNkMGE3ODJiNDMyNzM4MDU1ODY1YWM3MDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5URTBNVEEzTlRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3Rm9vdGVyUmVmcmVzaFZpZXdSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyMGVjZjMwZjc3NTVlYjRmMTllZGUxZjdhYjA2YjNlMTM5NTRkNGQ5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UTTRPVGd6TXpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlRyYWl0Q29sbGVjdGlvbkRpZENoYW5nZVJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImMwNjhhODhiNzRmNTBjODJmYTExNzNlYTU2OTJhMzUyMGY5Y2VhZWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qYzNNREUxTlRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiMjVkYXlzb2ZzZXJ2ZXJsZXNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjAzNTBiYjJjYzUyYzRmMjVmNzM4ZjY4OGU2NjAzODk0NWJmN2M3YzMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1ndWxwXG5Zb3UndmUgYnVpbHQgeW91ciBKYXZhU2NyaXB0IGFwcGxpY2F0aW9uIGJ1dCBob3cgZG8geW91IGF1dG9tYXRlIHRlc3RpbmcsIGNvZGUgYW5hbHlzaXMsIHJ1bm5pbmcgaXQgbG9jYWxseSBvciBkZXBsb3lpbmcgaXQ/IFRoZXNlIHJlZHVuZGFudCB0YXNrcyBjYW4gY29uc3VtZSB2YWx1YWJsZSB0aW1lIGFuZCByZXNvdXJjZXMuIFN0b3Agd29ya2luZyBzbyBoYXJkIGFuZCB0YWtlIGFkdmFudGFnZSBvZiBKYXZhU2NyaXB0IHRhc2sgYXV0b21hdGlvbiB1c2luZyBHdWxwIHRvIHN0cmVhbWxpbmUgdGhlc2UgdGFza3MgYW5kIGdpdmUgeW91IGJhY2sgbW9yZSB0aW1lIGluIHRoZSBkYXkuIFN0dWR5aW5nIHRoaXMgcmVwbyBjYW4gaGVscCBjbGFyaWZ5IGhvdyBHdWxwIHdvcmtzLCBqdW1wLXN0YXJ0IHRhc2sgYXV0b21hdGlvbiB3aXRoIEd1bHAsIGZpbmQgYW5kIHJlc29sdmUgaXNzdWVzIGZhc3RlciwgYW5kIGJlIGEgbW9yZSBwcm9kdWN0aXZlLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuLSBJbnN0YWxsIE5vZGVcblx0LSBvbiBPU1ggaW5zdGFsbCBbaG9tZSBicmV3XShodHRwOi8vYnJldy5zaC8pIGFuZCB0eXBlIGBicmV3IGluc3RhbGwgbm9kZWBcblx0LSBvbiBXaW5kb3dzIGluc3RhbGwgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBcbiAgICAtIFJlYWQgaGVyZSBmb3Igc29tZSBbdGlwcyBvbiBXaW5kb3dzXShodHRwOi8vanBhcGEubWUvd2lubm9kZSlcbiAgICAtIG9wZW4gY29tbWFuZCBwcm9tcHQgYXMgYWRtaW5pc3RyYXRvclxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzLmluc3RhbGxgXG4tIE9uIE9TWCB5b3UgY2FuIGFsbGV2aWF0ZSB0aGUgbmVlZCB0byBydW4gYXMgc3VkbyBieSBbZm9sbG93aW5nIHRoZXNlIGluc3RydWN0aW9uc10oaHR0cDovL2pwYXBhLm1lL25vbW9yZXN1ZG8pLiBJIGhpZ2hseSByZWNvbW1lbmQgdGhpcyBzdGVwIG9uIE9TWFxuLSBPcGVuIHRlcm1pbmFsXG4tIFR5cGUgYG5wbSBpbnN0YWxsIC1nIG5vZGUtaW5zcGVjdG9yIGJvd2VyIGd1bHBgXG5cbiMjIFF1aWNrIFN0YXJ0XG5QcmlvciB0byB0YWtpbmcgdGhlIGNvdXJzZSwgY2xvbmUgdGhpcyByZXBvIGFuZCBydW4gdGhlIGNvbnRlbnQgbG9jYWxseVxuYGBgYmFzaFxuJCBucG0gaW5zdGFsbFxuJCBib3dlciBpbnN0YWxsXG4kIG5wbSBzdGFydFxuYGBgXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjcxMGRhZGM0LWE5ZWItNDI0YS05MWM5LTg3MGMyOWZjZjE0NSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UZzFOelk0TlRZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1lZGlhRWxlbWVudFJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjFkYzQ0NTU4ZDk3Mzc4N2JmZWMyZjkxZWU4NzIzYjA3OWNiMzM5NmQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16TXdORFV6TnpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Vyc2UiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDhkYzFiYWY4ZGQ0ODk2YzM3NTgwM2U4MzQyNjcxYTYzNDVlMjRiMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qRXdORE0wTnpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkVtcHR5Vmlld0xheW91dE9wdGlvbnNSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwZDc0NmRjODUyMDhhNzBjY2RkNmUwYTg3N2M4YTAxYjYzYzVlY2YxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16ZzNNREl3TkRJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmctZ29vZHJlYWRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgwOTJlYzQ0OWVlOTQwMTU1OGIwMzBjODRlOTQ2ZmNkNmViNzZmZjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qRXlPREl4TXpnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJHQmFja2dyb3VuZFRhc2tXb3JrYXJvdW5kIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU4NTNjNzZlOTE0ZjQ4MDVlODNkZDM5YjY5YTYwY2NkYzMwOGEwMTIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5URXdOamMwTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYXp1cmUtc3RhcnR1cHMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTdjOTVlMThiZmI0NTU1OWU2YzM0MjZmZDJkYWFkMjU2NWIzNWViMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5USTBNekUzTURnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZHVyYWJsZWRheXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMWEyYTk0OTA2OTkwMjFhYTY2ZjY1YjFhOTc3MDVlNGVjODc2Y2M4MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UUTJNekExTVRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2NoZWR1bGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI1NDI1NGUxNDBhNjUxNGIwZWJjYWE4ZWVjMGU3YTE4ZDc3ODBjZjkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1uZy10ZXN0aW5nXG5UQkQ6IFdoYXQgaXMgdGhpc1xuXG4jIyBJbnN0YWxsXG5cbiogY2xvbmUgZnJvbSBnaXRodWIgb3IgZG93bmxvYWQgaXRcbiogYG5wbSBpbnN0YWxsYFxuXG4jIyBSdW5cbiogbGF1bmNoIHNlcnZlciBpbiB0ZXJtaW5hbC9jb21tYW5kIHdpbmRvdzogYG5vZGUgc3JjL3NlcnZlci9hcHAuanNgXG4qIEZvciBhcHAsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi8+XG4qIEZvciBtaW5Nb2NoYS5odG1sLCBicm93c2UgdG86IDxodHRwOi8vbG9jYWxob3N0OjcyNzIvbWluTW9jaGEuaHRtbD5cbiogRm9yIHNwZWNzLmh0bWwsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi9zcGVjcy5odG1sPlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYjMwNTNkNjgtOTBkZC00MzAyLTk2Y2QtNjEyZDI0YWE4M2NhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EWTFNemMyTmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY2lyY2xlY2kiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMGIxZmY4M2UwYjRiMjVkNzEzNmVkOGIzNjRlYzU3ZjE2NWI0ZTMwMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ2lyY2xlY2lcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDEuNC40LlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLXByb2RgIGZsYWcgZm9yIGEgcHJvZHVjdGlvbiBidWlsZC5cblxuIyMgUnVubmluZyB1bml0IHRlc3RzXG5cblJ1biBgbmcgdGVzdGAgdG8gZXhlY3V0ZSB0aGUgdW5pdCB0ZXN0cyB2aWEgW0thcm1hXShodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8pLlxuXG4jIyBSdW5uaW5nIGVuZC10by1lbmQgdGVzdHNcblxuUnVuIGBuZyBlMmVgIHRvIGV4ZWN1dGUgdGhlIGVuZC10by1lbmQgdGVzdHMgdmlhIFtQcm90cmFjdG9yXShodHRwOi8vd3d3LnByb3RyYWN0b3J0ZXN0Lm9yZy8pLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZTU0Y2YyNjUtNTM1NS00ZDEzLWIwNTUtNjVlNDkyNjdhYTZhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qRTROalF5TXpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZUNTaGFycE1hcmt1cCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0NmIwYjZhMjg0Y2MwNDZmZTJjODcwZThiYmUxNzAzOWUwZWM1ZjM1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UUTJOVFl5T1RrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYWR2YW5jZWQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYWUwNDkyMjIzZGJhOWMzY2JkODFlNDMzMWZmZmExNzM0NGRiM2MwOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qSTVNRGMxTnpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdFN0YXR1cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyMTA3ODA2YTY4ZjA3ZGVjZjgwNTYxNzI0ZTJiODM5YTUzMjkxMGY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qYzJOekV6TkRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkV4cGFuZGVyU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4OWMxODYzYTI0NGJmYWIwNzE2NDRmODFjOTQxZmQxNzAzN2NmYWQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODk2YWMtYjJmYi00Y2EyLWJiZWItNzQxMWVkYzdjOTg4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UZzNPRFExTmpBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic3Bpcml0ZG9nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRjMDRiYTQ4ZWU5ZDhjZjFhMDNiZDE0YjgyYzg4MjRlNGJkYjg0MWIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5Ua3lOakUzTVRNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidHVlc2RheXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNDhhZDcxODAxZmNhNmJlZDE3NGFiNDNhMzgzNjZhYTFiM2E2MDA0YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qazBOVFk0TlRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldlYkF1dGhlbnRpY2F0b3JSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkOTRiOGMxOGU0MjUwY2I2ZjJkNjVlMTE2Zjk1ZjQ1NmIxOWMzNGViIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY4Yjg5NmFjLWIyZmItNGNhMi1iYmViLTc0MTFlZGM3Yzk4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UazFPVGMwTnpBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibW9uZGF5cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0OGZhZTFjZWQ0NDMwN2JmOGUyNGJlNjgzOTBjNjdmMzkwNTFjMWFmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56WTNOVEEwTXpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3Qm91bmRzRXhjZXB0aW9uUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODM1OGI0YTlhMjI5ZTU4MTczMzUxNzdkZjUxYzk3MjcxMjUwMWY4NCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9ETXpNVFV4TXpFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YlJlYWRtZVdlYlRyZW5kcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZTA1NWU5NzY5YzI3Y2ZhNWFiZDg5Yjk4NDg5NDA5ZGUzNGZmYzQ0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGI4OTZhYy1iMmZiLTRjYTItYmJlYi03NDExZWRjN2M5ODgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UazJNREV4T1RnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZnJpZGF5cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmMWY3OWM4NDU0MWZhMmYxYWE1MWVhMTYwMWRmZjUzNzE0YTI0N2EzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qSXhOamt4TmpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2hvcGF0aG9tZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NzQyZDY4ZmM1ZGJjZDNhNTIxYTNkMGNlMTQyMGY5ZDM0N2VjNGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qTTROell4TVRnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2hvcGF0aG9tZTEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzQ4ZDk2YWY4OTUzNzhlZGUzZWRlMjc3ZTUzYzM0MTI5ZWMyN2MwNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ea3hNalUyTmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ2VuZXJhdGUtc2FzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0MmRhOTllZDM0ZjFkNzI3MWRhMjM1NDA4MzNkYzg0MTlhNDZjNTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGdlbmVyYXRlLXNhc1xuRnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgU2hhcmVkIEFjY2VzcyBTaWduYXR1cmUgKFNBUykgcmVxdWlyZWQgZm9yIEJsb2IgU3RvcmFnZVxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMmU3OTYzY2UtNjdkMi00NjRjLTkyYjEtNWY1NTA1NDJiNzFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtYW5ndWxhci10eXBlc2NyaXB0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cDovL2NoYW5uZWw5Lm1zZG4uY29tL0V2ZW50cy9CdWlsZC8yMDE1LzMtNjgwKSBwcmVzZW50ZWQgYnkgRXJpY2ggR2FtbWEsIENocmlzIERpYXMgYW5kIEpvaG4gUGFwYS5cblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBJbnN0YWxsIFtOb2RlLmpzXShodHRwOi8vbm9kZWpzLm9yZykgXG4gLSBvbiBPU1ggdXNlIFtob21lYnJld10oaHR0cDovL2JyZXcuc2gpIGBicmV3IGluc3RhbGwgbm9kZWBcbiAtIG9uIFdpbmRvd3MgdXNlIFtjaG9jb2xhdGV5XShodHRwczovL2Nob2NvbGF0ZXkub3JnLykgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuXG4yLiBJbnN0YWxsIFllb21hbiBgbnBtIGluc3RhbGwgLWcgeW9gXG5cbjMuIEluc3RhbGwgdGhlc2UgTlBNIHBhY2thZ2VzIGdsb2JhbGx5XG5cbiAgICBgYGBiYXNoXG4gICAgbnBtIGluc3RhbGwgLWcgYm93ZXIgZ3VscCBub2RlbW9uXG4gICAgYGBgXG5cbiAgICA+UmVmZXIgdG8gdGhlc2UgW2luc3RydWN0aW9ucyBvbiBob3cgdG8gbm90IHJlcXVpcmUgc3Vkb10oaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9ndWlkZXMvYmxvYi9tYXN0ZXIvbnBtLWdsb2JhbC13aXRob3V0LXN1ZG8ubWQpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlMTMwMDNkYS1lMWQ5LTRiNzYtOGUyNi00MWYxNjA1NjY0MDIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qUTBNamMxTXpBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVtcGxhdGUtc2hvcGF0aG9tZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5NmVlY2NjZTAxOTg3NDBmNDQwMjMwM2E4NDgzOTZkODIzYjk3Yjc0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qVXhOelUwTWpJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZHJ5cnVuMTgiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTFkYWMzMDMxNDE4MTU1OGY3YzQzYTBlYTQ1ZjA4MGMyM2VkODYzYiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qVXlNVEF6TkRNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaGVsbG93b3JsZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZTlkZWJjODg3ODVmYTQ3ZDk1NTM4NWU0YWMzNjkzZDliZTQzMTg0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ea3hNall5TnprPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxvYi11cGxvYWRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNDI4MjYyYTJjYjQxM2U5NWMxMzc5ZTA4OTEwMmZiZjgwZTRmOTVlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBVcGxvYWRlclxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS40LjQuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyMGU5NTliNi1hODUyLTRlMjEtOWYyNi04NDc1MDkzODE0N2IiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5qQTBNamcyTVE9PSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtcy1Nb2JpbGVDZW50ZXJQdXNoLUFwcExpbmtzLVJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY5NDg0ZjlkMzBiMTI1MTI1Yjk3YmNkMzkxMDFhN2U2NzgxNmM1NzciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFhhbWFyaW5Gb3Jtcy1Nb2JpbGVDZW50ZXJQdXNoLUFwcExpbmtzLVJlcHJvXG5BIHJ1bnRpbWUgY3Jhc2ggb2NjdXJzIHdoZW4gdGhlIE1vYmlsZSBDZW50ZXIgUHVzaCBTREsgYW5kIHRoZSBYYW1hcmluLkZvcm1zIEFwcCBMaW5rcyBTREsgYXJlIGFkZGVkIHRvIGEgWGFtcmFpbi5Gb3JtcyBwcm9qZWN0LiBUaGlzIGlzIGhhcHBlbmluZyBiZWNhdXNlIFhhbWFyaW4uRm9ybXMgQXBwIExpbmtzIGhhcyBhIGRlcGVuZGVuY3kgb24gWGFtYXJpbi5Hb29nbGVQbGF5U2VydmljZXMuQmFzZW1lbnQgdjI5LjAuMC4xLCBidXQgTW9iaWxlIENlbnRlciBQdXNoIGhhcyBhIGRlcGVuZGFuY3kgb24gWGFtYXJpbi5Hb29nbGVQbGF5U2VydmljZXMuQmFzZW1lbnQgdjQyLjEwMjEuMS5cblxuIyBTdGVwcyBUbyBSZXByb2R1Y2VcbiAxLiBEb3dubG9hZCBzb3VyY2UgY29kZSBmcm9tIHRoaXMgcmVwcm9cbiAyLiBPcGVuIGluIFZpc3VhbCBTdHVkaW9cbiAzLiBCdWlsZC9EZXBsb3kgdGhlIFhhbWFyaW4uQW5kcm9pZCBwcm9qZWN0IHRvIGFuIEFuZHJvaWQgRGV2aWNlL1NpbXVsYXRvclxuIDQuIFRoZSBFcnJvciB3aWxsIG9jY3VyIGF0IFJ1bnRpbWUgd2hlbiB0aGUgYXBwIGxhdW5jaGVzXG5cbiMgUnVudGltZSBDcmFzaFxuPkNvdWxkIG5vdCBsb2FkIHR5cGUgb2YgZmllbGQgJ1hhbWFyaW4uRm9ybXMuUGxhdGZvcm0uQW5kcm9pZC5BcHBMaW5rcy5BbmRyb2lkQXBwTGlua3M6X2NsaWVudCcgKDApIGR1ZSB0bzogQ291bGQgbm90IHJlc29sdmUgdHlwZSB3aXRoIHRva2VuIDAxMDAwMDEzIChmcm9tIHR5cGVyZWYsIGNsYXNzL2Fzc2VtYmx5IEFuZHJvaWQuR21zLkNvbW1vbi5BcGlzLkdvb2dsZUFwaUNsaWVudCwgWGFtYXJpbi5Hb29nbGVQbGF5U2VydmljZXMuQmFzZW1lbnQsIFZlcnNpb249MS4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1udWxsKSBhc3NlbWJseTpYYW1hcmluLkdvb2dsZVBsYXlTZXJ2aWNlcy5CYXNlbWVudCwgVmVyc2lvbj0xLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPW51bGwgdHlwZTpBbmRyb2lkLkdtcy5Db21tb24uQXBpcy5Hb29nbGVBcGlDbGllbnQgbWVtYmVyOjxub25lPlxuXG4jIEJ1ZyBUcmFja2luZ1xuVGhpcyBidWcgaXMgYmVpbmcgdHJhY2tlZCBieSB0aGUgWGFtYXJpbi5Gb3JtcyB0ZWFtIFtpbiBCdWd6aWxsYV0oaHR0cHM6Ly9idWd6aWxsYS54YW1hcmluLmNvbS9zaG93X2J1Zy5jZ2k/aWQ9NTQzODMpLlxuXG4jIElERVxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE3IGZvciBNYWMgPT09XG5cblZlcnNpb24gNy4wLjEgKGJ1aWxkIDI0KVxuSW5zdGFsbGF0aW9uIFVVSUQ6IDZlNTE0MmI0LWU4YmUtNGQxYy1iNzVlLTQ3NDRiMGQ4YzNkZVxuUnVudGltZTpcbiBNb25vIDUuMC4xLjEgKDIwMTctMDIvNTA3NzIwNSkgKDY0LWJpdClcbiBHVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG5cbiBQYWNrYWdlIHZlcnNpb246IDUwMDAxMDAwMVxuXG49PT0gTnVHZXQgPT09XG5cblZlcnNpb246IDQuMC4wLjIzMjNcblxuPT09IC5ORVQgQ29yZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8xLjAuMS9TZGtzXG5NU0J1aWxkIFNES3M6IC9MaWJyYXJ5L0ZyYW1ld29ya3MvTW9uby5mcmFtZXdvcmsvVmVyc2lvbnMvNS4wLjEvbGliL21vbm8vbXNidWlsZC8xNS4wL2Jpbi9TZGtzXG5cbj09PSBYYW1hcmluLlByb2ZpbGVyID09PVxuXG5WZXJzaW9uOiAxLjUuNFxuTG9jYXRpb246IC9BcHBsaWNhdGlvbnMvWGFtYXJpbiBQcm9maWxlci5hcHAvQ29udGVudHMvTWFjT1MvWGFtYXJpbiBQcm9maWxlclxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSA4LjMuMyAoMTIxNzUuMSlcbkJ1aWxkIDhFMzAwNGJcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogNy4zLjEuMiAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFuZG9ubS9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ0LjEgKEFQSSBsZXZlbCAxNilcblx0XHQ2LjAgKEFQSSBsZXZlbCAyMylcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblx0XHQ3LjEgKEFQSSBsZXZlbCAyNSlcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjAuMlxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI1LjAuNVxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI2LjAuMFxuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTIxXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEyMS1iMTMpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEyMS1iMTMsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTAuMTAuMC4zNiAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogZDIyNzBlZWNcbkJyYW5jaDogZDE1LTJcbkJ1aWxkIGRhdGU6IDIwMTctMDUtMjIgMTY6MzA6NTMtMDQwMFxuXG49PT0gWGFtYXJpbi5NYWMgPT09XG5cblZlcnNpb246IDMuNC4wLjM2IChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS4yLjJcbkhhc2g6IGI3MWIwMzVcbkJyYW5jaDogZDE1LTFcbkJ1aWxkIGRhdGU6IEZyaSwgMjEgQXByIDIwMTcgMTc6NTc6MTIgR01UXG5cbj09PSBCdWlsZCBJbmZvcm1hdGlvbiA9PT1cblxuUmVsZWFzZSBJRDogNzAwMDEwMDI0XG5HaXQgcmV2aXNpb246IDdhYjFjYTJjZWQ2ZjU4NGU1NmI3YTBkNGQzMjFkMDA3NzVjZDk1YzlcbkJ1aWxkIGRhdGU6IDIwMTctMDUtMTkgMDU6NDQ6NTEtMDRcblhhbWFyaW4gYWRkaW5zOiAwOGQxNzE1OGYzMzY1YmVlZTVlNjBmNjc5OTllNjA3Y2NlNGIzZjkzXG5CdWlsZCBsYW5lOiBtb25vZGV2ZWxvcC1saW9uLWQxNS0yXG5cbj09PSBPcGVyYXRpbmcgU3lzdGVtID09PVxuXG5NYWMgT1MgWCAxMC4xMi41XG5EYXJ3aW4gMTYuNi4wIERhcndpbiBLZXJuZWwgVmVyc2lvbiAxNi42LjBcbiAgICBGcmkgQXByIDE0IDE2OjIxOjE2IFBEVCAyMDE3XG4gICAgcm9vdDp4bnUtMzc4OS42MC4yNH42L1JFTEVBU0VfWDg2XzY0IHg4Nl82NFxuXG49PT0gRW5hYmxlZCB1c2VyIGluc3RhbGxlZCBhZGRpbnMgPT09XG5cbk51R2V0IFBhY2thZ2UgTWFuYWdlbWVudCBFeHRlbnNpb25zIDAuMTIuMlxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGVhN2I0YTEtN2I0NC00OTFiLWI5MjAtNGIwZmVjODcxZmM4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qVXlNak0zTVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaGVsbG8tY29kZXNwYWNlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwZjM0MmMyOTQ2MmJjMzNhNTgyOWI3NTRkMjUyYjljNDQ5NDU0ZmIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qVTRORGN3TkRVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibW90aXZhdGlvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZTVmNzMyZDZkNmNkOTA0MTg4ODMwYjVkNDdmYWVmYzBhOGIwMmM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWXlOall3TnpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY3JhLWNpLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZGY3Y2ZiZTllNDAxNzUyYTE1NzQ4YTk1MDc4YTRmZWFlMWY2NDNmNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWXpNVFk1TWpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAib2xkdjIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTE4NGUxMDkwYTNiNDRkZjNiNjNkOWNjNmM4Mzc5ZjNkNzg4ZGI0ZiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWXpNemd3T0RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVzdC1jaXJjbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzgxNmEyMmIzMDM0NzY1ZjEwZWY1NjdhNGE3ZWEyMjE5MjgxMThmOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQTRNREk1TnpNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxvYi10cmlnZ2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjkzOGRmNzcwNjc4NDU4YjNkZjdhNTk3NzVmY2Q4OTRiNmQ4OGM5MzQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGJsb2ItdHJpZ2dlclxuXG5GdW5jdGlvbiB0aGF0IHJ1bnMgb24gaW1hZ2UgdXBsb2FkIGluIEJsb2IgU3RvcmFnZSBhY2NvdW50XG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMjY0MjM1NjQtZmVkZi00MmMwLWEwZGQtZDUzYmIzOGZiNzI5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTFNVGsyTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzLXYzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZkYzg1ZDM5M2NmMDc0ZjE2OGEwN2RjNDNmZThiM2YxMmUxZWMzZTMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1qRTRNemN6IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJDb2RlQ2FtcGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjQ4YTM4Nzk2MDgzMDZhNzhmYTU0ZGVkZWU2ZWZlYzE2MDQ1OWEyNDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UQTRNemN5TVRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1sb25kb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTY1MDc4ZGMwOGQ3Y2VmMmU0Y2JiZTIyNmQwYWMxMTgzNWY0MTU4NiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgc2VydmVybGVzcy1sb25kb25cblxuVGhpcyBpcyBhIGRlbW8gcHJvamVjdFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImMyMjI1MzJjLTg3NDgtNGViNC05YzYwLWRkOWIxMTA0NGM3YiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTFPVEUzTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzLXY0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0MjNmMjQzNzQ0NzM2OGJmMTU1NTI3ZmVlOWZhMDEyY2ZjZjkzMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU16TTNORFExIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJraXMtcmVxdWlyZWpzLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODhjMTYyZTI3Y2U0M2E5OTQzZjM5NmViNzk5M2ZhNmM4ZjNlMjBjOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTNNek0wTmpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYWR2YW5jZWQtY291cnNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQwODM0NTIyYzE5MWQxMDYxNTQzMGEzOTJjMDM1NGQzNjViZmM4Y2QiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERXlNVFl4TXpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdyaWRUb1JlbGF0aXZlTGF5b3V0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYyZmFmNGFjNjk2ZjMwMjFhZDk2YWMxZDc3NDIyMDRlNTQ1ODMwNjAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEdyaWRUb1JlbGF0aXZlTGF5b3V0XG5cblRoaXMgWGFtYXJpbi5Gb3JtcyBzYW1wbGUgYXBwIHdhcyBjcmVhdGVkIHRvIGFuc3dlciBhIFN0YWNrT3ZlcmZsb3cgcXVlc3Rpb24uXG5cbkl0IGRlbW9uc3RyYXRlcyBob3cgdG8gY3JlYXRlIGEgIGEgYFJlbGF0aXZlTGF5b3V0YCBmcm9tIGEgYEdyaWRgIGxheW91dC5cblxuIyMjIFN0YWNrT3ZlcmZsb3cgQW5zd2VyXG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDU4NDk0ODMvNTk1MzY0M1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImEzYmJhZTE3LWQ3YmEtNDJjYS1hZDQyLTIwODNhMWJlNzc0YyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5URXpNakE0IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJqczRuZXRkZXYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjcyNzUzNzkwN2IyMGFhYTFlZGZkZDg4OTRiMGIxOTYzMDNhZmIyYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09UY3lOVEUwIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJIb3RUb3dlbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlZTM3ZjBmNDhlMmY5MGQ0NDU5YWY1MTk3ZjUwZmZhZTcyZjFmOTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTNOekk0TnpjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3RhZHZhbmNlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxMWRkMDgyNjVhNmFlYjczZjI3MzFiYzNhNDQxNWE4OGI5ODU4MjY3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxZmYzYzQ2LWExYzQtNGE2YS1iMzM2LWEzZmMxZDEzMTJmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1UY3pOakV6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10b3VyLW9mLWhlcm9lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNjU5Njc3MTBlOGIxYjg3YzBlNmE0ZjE5ZWVhMmI1ZjU0ZTdjNTBlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBHZXR0aW5nIFN0YXJ0ZWRcblxuU3VwZXIgc2ltcGxlIEFuZ3VsYXIgYXBwIHdpdGggMSBtb2R1bGUgYW5kIDIgcm91dGVzLiBUaGlzIGlzIGEgbWlub3IgdmFyaWF0aW9uIG9uIHRoZSBUb3VyIG9mIEhlcm9lcyBJIHdyb3RlIGZvciB0aGUgW29mZmljaWFsIGRvY3NdKGh0dHBzOi8vYW5ndWxhci5pby90dXRvcmlhbCkuXG5cbiMjIEdldCB0aGUgQ29kZVxuYGBgXG5naXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItdG91ci1vZi1oZXJvZXMuZ2l0IHRvaFxuY2QgdG9oXG5ucG0gaVxuYGBgXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5CZWZvcmUgcnVubmluZyB0aGUgdGVzdHMgbWFrZSBzdXJlIHlvdSBhcmUgc2VydmluZyB0aGUgYXBwIHZpYSBgbmcgc2VydmVgLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjIuMC5cblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNmNmZTBhNmMtODk0Zi00MmNiLWExZWEtYTkyZGU5NTBiOTFjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qVTBPVGMxIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJQbHVyYWxzaWdodFNwYUp1bXBTdGFydEZpbmFsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjhlNTJlYmVlODQ0ZDk0YzUwNGU0MzVmODU3OGQ4ZmM4MTU5NmRlYjMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJob3R0b3dlbC1hbmd1bGFyLXR5cGVzY3JpcHQiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbTo4MC9FdmVudHMvQnVpbGQvMjAxNS8zLTY4MD9XVC5tY19pZD1ob3R0b3dlbGFuZ3VsYXJ0eXBlc2NyaXB0LWdpdGh1Yi1qb3BhcGEpIHByZXNlbnRlZCBieSBFcmljaCBHYW1tYSwgQ2hyaXMgRGlhcyBhbmQgSm9obiBQYXBhLlxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEluc3RhbGwgW05vZGUuanNdKGh0dHA6Ly9ub2RlanMub3JnKSBcbiAtIG9uIE9TWCB1c2UgW2hvbWVicmV3XShodHRwOi8vYnJldy5zaCkgYGJyZXcgaW5zdGFsbCBub2RlYFxuIC0gb24gV2luZG93cyB1c2UgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBgY2hvY28gaW5zdGFsbCBub2RlanNgXG5cbjIuIEluc3RhbGwgWWVvbWFuIGBucG0gaW5zdGFsbCAtZyB5b2BcblxuMy4gSW5zdGFsbCB0aGVzZSBOUE0gcGFja2FnZXMgZ2xvYmFsbHlcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaW5zdGFsbCAtZyBib3dlciBndWxwIG5vZGVtb25cbiAgICBgYGBcblxuICAgID5SZWZlciB0byB0aGVzZSBbaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBub3QgcmVxdWlyZSBzdWRvXShodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2d1aWRlcy9ibG9iL21hc3Rlci9ucG0tZ2xvYmFsLXdpdGhvdXQtc3Vkby5tZClcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkNDgyZmY2Mi1jY2RlLTRmZDktOTJjOS1jNmI2Mjc1YWEwMzYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56RXdNVFk0TURFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVkaXJlY3RzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjc5YWUyZTNkYjUxYjIxODEyNGFiMmY5NDA5MzQ4M2ZiMmU5MzIwN2IiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVNek0yTnpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm91bmFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjZjcwZWRlMDFjOWZlZGYwNDE5MGNkMDEwYTBjY2FlODIzZDI4ODM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBub3VuYXBpXG5cbkEgQXp1cmUgZnVuY3Rpb24gdGhhdCByZXRyaWV2ZXMgaWNvbiBzdWdnZXN0aW9ucyB1c2luZyB0aGUgbm91biBwcm9qZWN0IGFwaVxuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHA6Ly9henVyZWRlcGxveS5uZXQvZGVwbG95YnV0dG9uLnBuZyldKGh0dHBzOi8vZGVwbG95LmF6dXJlLmNvbS8/cmVwb3NpdG9yeT1odHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vbm91bmFwaSMvZm9ybS9kZXBsb3kpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMjFhN2M4OGItZmNlYS00ZTU0LWExMDMtOWNiZjBlYWQxZmFiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UVTRNRGszIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJ0ZWxla2luZXNpcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4NDc3MDQ5MWM5MGUzN2FkODVjNzE1NzJjM2M5MGFjYmJlZTlmN2I5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56azFOREl3TXpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYWktam9rZXMtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk2Yzg3YTEyN2JmYzE1YzVkYmE5ZjhmYTMzYThiZGFmOTQ5YzhlMjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTVPVEU1Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2xpbXBzZS50b2FzdHIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjU0NzQ1NGE0NjA1MjE5ODUwMTZmYmRjMjNhMDA0NzcxMWYxZDc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTBPVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidG9hc3RyLWJvd2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE2OWFhOGUzMDIxY2JmMWM2NGVhZWRlYzNiNDE4YzA0MzEzYWY5NWEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERXlNelEyT1RjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkF6dXJlTWVkaWFTZXJ2aWNlc1NhbXBsZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmMTFjMzEwZGEwMjgyNzNkNDYwZmI0MmJhODdkOGZhNTEwOTMzNmMzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQXp1cmVNZWRpYVNlcnZpY2VzU2FtcGxlQXBwXG5BbiBpT1MgYW5kIEFuZHJvaWQgYXBwIG1hZGUgaW4gWGFtYXJpbi5Gb3JtcyB0aGF0IGludGVncmF0ZXMgd2l0aCBBenVyZSBNZWRpYSBTZXJ2aWNlc1xuXG4jIGlPUyBEZW1vXG4hW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvMjk2NDM1ODUtZTA4MWYxNjYtODgyNC0xMWU3LTk2ZjMtNzhjN2NjYjE2YWJlLmdpZilcblxuIyBBbmRyb2lkIERlbW9cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy8yOTY0MzgxMi02OWE3NzAwYS04ODI2LTExZTctOGUxMy00MGI1MDA3MWYyNjAuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjJlNjIxOWRlLTdiNWQtNDliMi04YmY2LTQwNjdhMmNmMjA5YSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRPVFkzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiSG90VG93ZWwtQW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMThlZTkxN2ZmNTk2NTgwY2M1YmU5OTdmNjIyNTMxNWFmNjZmNmIwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJGdWxsTmFtZSI6ICJTaGF5bmUgQm95ZXIiLAogICJVc2VyTmFtZSI6ICJzcGJveWVyIiwKICAiTWljcm9zb2Z0QWxpYXMiOiAic2hib3llciIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4OTAwM2NiZS1lOWQ2LTQ4YmEtOWUwMS03ZWIyNmQwNThkMWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTFNRFEwTVRBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlZpZXdDZWxsT25EaXNhcHBlYXJpbmciLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjA3ODhhMTgyNjE4Mjk2NTE5MDM1MDBkNDE0ZGFhZmNkMjkzMTcwMyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgVmlld0NlbGxPbkRpc2FwcGVhcmluZ1xuQSByZXByb2R1Y3Rpb24gb2YgVmlld0NlbGwuT25EaXNhcHBlYXJpbmcgbm90IGZpcmluZ1xuXG4jIyBSZXByb2R1Y3Rpb24gU3RlcHNcbjEuIE9wZW4gYFZpZXdDZWxsT25EaXNhcHBlYXJpbmcuc2xuYFxuMi4gQnVpbGQvRGVwbG95IGBWaWV3Q2VsbE9uRGlzYXBwZWFyaW5nLmlPU2Agb3IgYFZpZXdDZWxsT25EaXNhcHBlYXJpbmcuRHJvaWRgXG4zLiBSdW4gYFZpZXdDZWxsT25EaXNhcHBlYXJpbmcuaU9TYCBvbiBhbiBpT1MgZGV2aWNlIG9yIGBWaWV3Q2VsbE9uRGlzYXBwZWFyaW5nLkRyb2lkYCBvbiBhbiBBbmRyb2lkIGRldmljZVxuNC4gQ2xpY2sgb24gYExpc3QgUGFnZWAgYnV0dG9uXG41LiBJbiB0aGUgQXBwbGljYXRpb24gT3V0cHV0LCBgT25BcHBlYXJpbmcgRmlyZWRgIGlzIHByaW50ZWQgZm9yIGVhY2ggVmlld0NlbGxcbjYuIEluIHRoZSBuYXZpZ2F0aW9uIGJhciwgY2xpY2sgb24gdGhlIGJhY2sgYnV0dG9uXG43LiBJbiB0aGUgQXBwbGljYXRpb24gT3V0cHV0LCBgT25EaXNwcGVhcmluZyBGaXJlZGAgaXMgKipub3QqKiBwcmludGVkIGZvciBlYWNoIFZpZXdDZWxsXG5cblxuIyMgRW52aXJvbm1lbnRcblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE3IGZvciBNYWMgPT09XG5cblZlcnNpb24gNy4xIChidWlsZCAxMjk3KVxuSW5zdGFsbGF0aW9uIFVVSUQ6IDZlNTE0MmI0LWU4YmUtNGQxYy1iNzVlLTQ3NDRiMGQ4YzNkZVxuUnVudGltZTpcbj5Nb25vIDUuMi4wLjIxNSAoZDE1LTMvZGE4MDg0MCkgKDY0LWJpdClcbj5HVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG4+XG4+UGFja2FnZSB2ZXJzaW9uOiA1MDIwMDAyMTVcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA0LjMuMC4yNDE4XG5cbj09PSAuTkVUIENvcmUgPT09XG5cblJ1bnRpbWU6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L2RvdG5ldFxuUnVudGltZSBWZXJzaW9uczpcblx0MS4xLjFcblx0MS4wLjRcblNESzogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvc2RrLzEuMC4xL1Nka3NcblNESyBWZXJzaW9uOiAxLjAuMVxuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzUuMi4wL2xpYi9tb25vL21zYnVpbGQvMTUuMC9iaW4vU2Rrc1xuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS41LjVcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IEFwcGxlIERldmVsb3BlciBUb29scyA9PT1cblxuWGNvZGUgOC4zLjMgKDEyMTc1LjEpXG5CdWlsZCA4RTMwMDRiXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTAuMTIuMC4yMCAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogODBiODQ4N2RcbkJyYW5jaDogZDE1LTNcbkJ1aWxkIGRhdGU6IDIwMTctMDgtMTggMTY6MDc6MjYtMDQwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiA3LjQuMC4yMSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFuZG9ubS9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ0LjEgKEFQSSBsZXZlbCAxNilcblx0XHQ2LjAgKEFQSSBsZXZlbCAyMylcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblx0XHQ3LjEgKEFQSSBsZXZlbCAyNSlcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjAuMlxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI2LjAuMFxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI2LjAuMVxuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTIxXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEyMS1iMTMpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEyMS1iMTMsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS4yLjJcbkhhc2g6IGI3MWIwMzVcbkJyYW5jaDogZDE1LTFcbkJ1aWxkIGRhdGU6IEZyaSwgMjEgQXByIDIwMTcgMTc6NTc6MTIgR01UXG5cbj09PSBYYW1hcmluLk1hYyA9PT1cblxuVmVyc2lvbjogMy42LjAuMTkgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcblxuPT09IEJ1aWxkIEluZm9ybWF0aW9uID09PVxuXG5SZWxlYXNlIElEOiA3MDEwMDEyOTdcbkdpdCByZXZpc2lvbjogOWM1Mjk5NjY2NTM4YjJmOGJhZjUwMTQxOGE1YzA2NGQ3ODRkNjRkYVxuQnVpbGQgZGF0ZTogMjAxNy0wOC0wNyAxMToyOTozNS0wNFxuWGFtYXJpbiBhZGRpbnM6IDNiYjBjMzJhMTRmMWI3ZTM2OGJmNWFjNTNhODRjMzU4MWMwMTkzOTFcbkJ1aWxkIGxhbmU6IG1vbm9kZXZlbG9wLWxpb24tZDE1LTNcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjEyLjVcbkRhcndpbiAxNi42LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE2LjYuMFxuICAgIEZyaSBBcHIgMTQgMTY6MjE6MTYgUERUIDIwMTdcbiAgICByb290OnhudS0zNzg5LjYwLjI0fjYvUkVMRUFTRV9YODZfNjQgeDg2XzY0XG5cbj09PSBFbmFibGVkIHVzZXIgaW5zdGFsbGVkIGFkZGlucyA9PT1cblxuTnVHZXQgUGFja2FnZSBNYW5hZ2VtZW50IEV4dGVuc2lvbnMgMC4xMi4yXG5cblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImZkMzNkNDE1LWNhZWItNDc5OC05NDljLWFhNjAwYjM5NjExYSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5Ua3hNREEyT1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2MtbW9uZ28tZGF0YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzNDIyM2ZjZDAxNjE0OGJlMGEyMGFjMDhmZWNjMmI2MzIzZWVkOWZhIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTJPREl6TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctZGVtb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Q0YzY1MDQzYWJiZjVmMDY2YWRmZmMzYWNmMzdmOWY1OGI0NDJhMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UUTJNelEyTWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2hlZXJ6LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNDgxODMzYzM0MDRjZDRlYmE3M2EwYjQxMDc4M2Y5OTQxYTZmNGZiZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USTVNek0yTnpnPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJub3VuYXBpIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjZjcwZWRlMDFjOWZlZGYwNDE5MGNkMDEwYTBjY2FlODIzZDI4ODM5IiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBub3VuYXBpXG5cbkEgQXp1cmUgZnVuY3Rpb24gdGhhdCByZXRyaWV2ZXMgaWNvbiBzdWdnZXN0aW9ucyB1c2luZyB0aGUgbm91biBwcm9qZWN0IGFwaVxuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHA6Ly9henVyZWRlcGxveS5uZXQvZGVwbG95YnV0dG9uLnBuZyldKGh0dHBzOi8vZGVwbG95LmF6dXJlLmNvbS8/cmVwb3NpdG9yeT1odHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20lMkZzaW1vbmFjbyUyRm5vdW5hcGkmV1QubWNfaWQ9bm91bmFwaS1naXRodWItc2ljb3RpbiMvZm9ybS9kZXBsb3kpXG4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDdiMTM0YzgtYzY3OC00M2I2LTg3NGItZTkxNjBhZTM5ZjI3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EZzFOakkwTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVHlwZVNjcmlwdERlbW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ4YTc2N2NmMjNkN2ViMDQ4ZDA0NDdmYjk3MTczYjczODc0ZWMwZGUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFR5cGVTY3JpcHQgRXhhbXBsZXNcblxuIyMgUnVubmluZyB0aGUgQXBwbGljYXRpb25cblxuMS4gSW5zdGFsbCBOb2RlLmpzIGZyb20gaHR0cDovL25vZGVqcy5vcmdcblxuMS4gUnVuIGBucG0gaW5zdGFsbGAgXG5cbjEuIFJ1biBgbnBtIHN0YXJ0YCB0byBjb21waWxlIHRoZSBUeXBlU2NyaXB0IGFuZCBzdGFydCB0aGUgc2VydmVyIFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTgxZDRkYWMtOTQ2ZS00OTVmLTkzMWUtYmE1ZGVhN2E4NGE1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ua3lORFF3T1RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmdyeC1zY2hlbWF0aWNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImExOWFiYjFhYmZmM2ExYzk2M2Y4ZmMwNDI4YTViM2FlYTQ3ZmUyODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEZpcnN0XG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjYuNi5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRjNTA3ZjE4LWVhNGEtNGI0Ni1hYzBmLTBkY2U2M2VjMjA2NiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTFOemc1TnpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3NzZiYTkwMjdjNThlNGQ5NWVjNmNkMjYxZjBiOTc1ZDRjODFiOTUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIERyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvXG5SZXByb2R1Y3Rpb24gb2YgYSByZWdyZXNzaW9uIGluIFhhbWFyaW4uVUlUZXN0IHYyLjAuMTBcblxuIyMgRXJyb3JcblRoZSBmb2xsb3dpbmcgZXJyb3IgYXBwZXJzIHdoZW4gcGVyZm9ybWluZyBgRHJhZ0Nvb3JkaW5hdGVzYCBvbiBpT1M6XG5cbj5TeXN0ZW0uRXhjZXB0aW9uIDogRXJyb3Igd2hpbGUgcGVyZm9ybWluZyBEcmFnQ29vcmRpbmF0ZXMoMTg3LjUsIDg0LCAxODcuNSwgNjQ3LCBudWxsKVxuICAtLS0tPiBTeXN0ZW0uQWdncmVnYXRlRXhjZXB0aW9uIDogT25lIG9yIG1vcmUgZXJyb3JzIG9jY3VycmVkLlxuICAtLS0tPiBNaWNyb3NvZnQuQ1NoYXJwLlJ1bnRpbWVCaW5kZXIuUnVudGltZUJpbmRlckV4Y2VwdGlvbiA6IENhbm5vdCBpbXBsaWNpdGx5IGNvbnZlcnQgdHlwZSAndm9pZCcgdG8gJ29iamVjdCdcbiAgXG5Ob3RlOiBgRHJhZ0Nvb3JkaW5hdGVzYCB3b3JrcyBmaW5lIG9uIEFuZHJvaWQuXG5cbiMjIFJlcHJvZHVjdGlvbiBTdGVwc1xuMS4gRG93bmxvYWQgYW5kIG9wZW4gRHJhZ0Nvb3JkaW5hdGVzVUlUZXN0UmVwcm8uc2xuXG4yLiBCdWlsZC9Db21waWxlIGBEcmFnQ29vcmRpbmF0ZXNVSVRlc3RSZXByby5pT1NgXG4zLiBCdWlsZC9Db21waWxlIGBEcmFnQ29vcmRpbmF0ZXNVSVRlc3RSZXByby5VSVRlc3RzYFxuNC4gUnVuIHRoZSBgUHVsbFRvUmVmcmVzaF9EcmFnRHJvcENvb3JkaW5hdGVzYCBVSVRlc3Qgb24gYERyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvLmlPU2AgcnVubmluZyBpT1MgMTAuM1xuNS4gVGhlIHRlc3RzIGZhaWxzIGBTeXN0ZW0uRXhjZXB0aW9uIDogRXJyb3Igd2hpbGUgcGVyZm9ybWluZyBEcmFnQ29vcmRpbmF0ZXNgXG5cbiMjIFdvcmsgQXJvdW5kXG4xLiBJbnN0YWxsIFhhbWFyaW4uVUlUZXN0IHYyLjAuOVxuMi4gUnVuIHRoZSBgUHVsbFRvUmVmcmVzaF9EcmFnRHJvcENvb3JkaW5hdGVzYCBVSVRlc3Qgb24gYERyYWdDb29yZGluYXRlc1VJVGVzdFJlcHJvLmlPU2AgcnVubmluZyBpT1MgMTAuM1xuXG4jIyBFbnZpcm9ubWVudFxuXG49PT0gVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlIDIwMTcgZm9yIE1hYyA9PT1cblxuVmVyc2lvbiA3LjEgKGJ1aWxkIDEyOTcpXG5JbnN0YWxsYXRpb24gVVVJRDogNmU1MTQyYjQtZThiZS00ZDFjLWI3NWUtNDc0NGIwZDhjM2RlXG5cblJ1bnRpbWU6XG5cbi0gTW9ubyA1LjIuMC4yMTUgKGQxNS0zL2RhODA4NDApICg2NC1iaXQpXG4tIEdUSysgMi4yNC4yMyAoUmFsZWlnaCB0aGVtZSlcbi0gUGFja2FnZSB2ZXJzaW9uOiA1MDIwMDAyMTVcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA0LjMuMC4yNDE4XG5cbj09PSAuTkVUIENvcmUgPT09XG5cblJ1bnRpbWU6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L2RvdG5ldFxuUnVudGltZSBWZXJzaW9uczpcblx0MS4xLjFcblx0MS4wLjRcblNESzogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvc2RrLzEuMC4xL1Nka3NcblNESyBWZXJzaW9uOiAxLjAuMVxuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzUuMi4wL2xpYi9tb25vL21zYnVpbGQvMTUuMC9iaW4vU2Rrc1xuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS41LjVcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IEFwcGxlIERldmVsb3BlciBUb29scyA9PT1cblxuWGNvZGUgOC4zLjMgKDEyMTc1LjEpXG5CdWlsZCA4RTMwMDRiXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTAuMTIuMC4yMCAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogODBiODQ4N2RcbkJyYW5jaDogZDE1LTNcbkJ1aWxkIGRhdGU6IDIwMTctMDgtMTggMTY6MDc6MjYtMDQwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiA3LjQuMC4yMSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFuZG9ubS9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ0LjEgKEFQSSBsZXZlbCAxNilcblx0XHQ2LjAgKEFQSSBsZXZlbCAyMylcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblx0XHQ3LjEgKEFQSSBsZXZlbCAyNSlcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjAuMlxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI2LjAuMFxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI2LjAuMVxuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTIxXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEyMS1iMTMpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEyMS1iMTMsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS4yLjJcbkhhc2g6IGI3MWIwMzVcbkJyYW5jaDogZDE1LTFcbkJ1aWxkIGRhdGU6IEZyaSwgMjEgQXByIDIwMTcgMTc6NTc6MTIgR01UXG5cbj09PSBYYW1hcmluLk1hYyA9PT1cblxuVmVyc2lvbjogMy42LjAuMTkgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcblxuPT09IEJ1aWxkIEluZm9ybWF0aW9uID09PVxuXG5SZWxlYXNlIElEOiA3MDEwMDEyOTdcbkdpdCByZXZpc2lvbjogOWM1Mjk5NjY2NTM4YjJmOGJhZjUwMTQxOGE1YzA2NGQ3ODRkNjRkYVxuQnVpbGQgZGF0ZTogMjAxNy0wOC0wNyAxMToyOTozNS0wNFxuWGFtYXJpbiBhZGRpbnM6IDNiYjBjMzJhMTRmMWI3ZTM2OGJmNWFjNTNhODRjMzU4MWMwMTkzOTFcbkJ1aWxkIGxhbmU6IG1vbm9kZXZlbG9wLWxpb24tZDE1LTNcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjEyLjVcbkRhcndpbiAxNi42LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE2LjYuMFxuICAgIEZyaSBBcHIgMTQgMTY6MjE6MTYgUERUIDIwMTdcbiAgICByb290OnhudS0zNzg5LjYwLjI0fjYvUkVMRUFTRV9YODZfNjQgeDg2XzY0XG5cbj09PSBFbmFibGVkIHVzZXIgaW5zdGFsbGVkIGFkZGlucyA9PT1cblxuTnVHZXQgUGFja2FnZSBNYW5hZ2VtZW50IEV4dGVuc2lvbnMgMC4xMi4yXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjM2RhODE4ZC1lNDMyLTQ1MWMtYmQwZC1kMDBjOWJiMjc4OWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56QXhORGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2VuZXJhdG9yLWhvdHRvd2VsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI2ZDUzNzYzMDFiNGJmYTEyNjExZjI5ZDY3NTU2MzdhMjQ5MzA3NDgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9ETXdPVFkyTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYmFyZGpzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZmZjY0ZTJiY2YxYjkzMTkyNWE2N2JiOTgzYjlmNThmYTU1NGZmMzUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVNREU1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXIxLXNuaXBwZXRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY2ZDYyMzY0NTM0ZGRiNmZjZDNkZmVhOWQxOTQ0ZGQ1MGRmMmY0ZDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgMSBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0IFNuaXBwZXRzIGZvciBWUyBDb2RlXG5cblRoaXMgZXh0ZW5zaW9uIGZvciBWaXN1YWwgU3R1ZGlvIENvZGUgYWRkcyBzbmlwcGV0cyBmb3IgQW5ndWxhciAxIGZvciBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0LlxuXG4hW1VzZSBFeHRlbnNpb25dKGltYWdlcy91c2UtZXh0ZW5zaW9uLmdpZilcblxuIyMgVXNhZ2VcblxuVHlwZSBwYXJ0IG9mIGEgc25pcHBldCwgcHJlc3MgYGVudGVyYCwgYW5kIHRoZSBzbmlwcGV0IHVuZm9sZHMuXG5cbkphdmFTY3JpcHQgU25pcHBldHNcblxuYGBgamF2YXNjcmlwdFxubmcxY29tcG9uZW50OyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29tcG9uZW50XG5uZzFjb250cm9sbGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29udHJvbGxlclxubmcxZGlyZWN0aXZlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZGlyZWN0aXZlXG5uZzFmYWN0b3J5OyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZmFjdG9yeVxubmcxbW9kdWxlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgbW9kdWxlXG5uZzFzZXJ2aWNlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgc2VydmljZVxubmcxZmlsdGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZmlsdGVyXG5gYGBcblxuVHlwZVNjcmlwdCBTbmlwcGV0c1xuXG5gYGB0eXBlc2NyaXB0XG5uZzFjb250cm9sbGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29udHJvbGxlclxubmcxc2VydmljZTsgLy8gY3JlYXRlcyBhbiBBbmd1bGFyIHNlcnZpY2Vcbm5nMW1vZHVsZTsgLy8gY3JlYXRlcyBhbiBBbmd1bGFyIG1vZHVsZVxuYGBgXG5cbkFsdGVybmF0aXZlbHksIHByZXNzIGBDdHJsYCtgU3BhY2VgIChXaW5kb3dzLCBMaW51eCkgb3IgYENtZGArYFNwYWNlYCAoT1NYKSB0byBhY3RpdmF0ZSBzbmlwcGV0cyBmcm9tIHdpdGhpbiB0aGUgZWRpdG9yLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuMS4gSW5zdGFsbCBWaXN1YWwgU3R1ZGlvIENvZGUgMC4xMC4xIG9yIGhpZ2hlclxuMi4gTGF1bmNoIENvZGVcbjMuIEZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBgQ3RybGAtYFNoaWZ0YC1gUGAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYC1gU2hpZnRgLWBQYCAoT1NYKVxuNC4gU2VsZWN0IGBJbnN0YWxsIEV4dGVuc2lvbmBcbjUuIENob29zZSB0aGUgZXh0ZW5zaW9uXG42LiBSZWxvYWQgVmlzdWFsIFN0dWRpbyBDb2RlXG5cbiFbSW5zdGFsbCBFeHRlbnNpb25dKGltYWdlcy9pbnN0YWxsLWV4dGVuc2lvbi5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNWM2ZDM2Zi0xOWYzLTRjN2MtYmI5Yy0wOTZlNmYzY2RiZjMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1Ua3lOelV5T0RRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidG9kbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmZWNiYWY3YTIxNDc5YWQwOTc4MmQ4YTQ1MjdmOTNlNjE5MDZiZjg1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBUb2RvXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjYuNi5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImUyNTZhYWFhLTJkNGQtNDRjZS1iMTNkLTZkNDM5NWZhNWZhZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERXdOelF4T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiRVM2LU1vZHVsZXMtU3RhcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2N2Y4ZmViOThiOTQ2NDg4MmI5NTA5NjVmZjQ2YzJhYTRhZjYyNWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERTRNVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzYxZmY0ZTBkOTg2YTQ1OWM4NDE0YWVlYTZhZTBhNTcyMTE1Mzc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9UTXdPRGM1Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci0yLWZpcnN0LWxvb2stbGF1bmNoZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTYzNzVhY2U4N2UwN2M5ZWFlNTBkMjNkMzFhMWZlZDI1MDVmZDk0ZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgYW5ndWxhcjItZmlyc3QtbG9vay1sYXVuZ2hlclxuXG4jIyBUSEVSRSBCRSBEUkFHT05TIEhFUkVcblxuVGhpcyBpcyB0aGUgY29kZSBmb3IgdGhlIG9yaWdpbmFsIEFuZ3VsYXIgMiBGaXJzdCBMb29rIGNvdXJzZSwgd3JpdHRlbiB3aXRoIHRoZSBBbmd1bGFyIDIgYmV0YXMuIEl0IGlzIG5vdyAqKmRlcHJlY2F0ZWQqKiBhbmQgcmVwbGFjZWQuXG5cbldpdGggd2hhdD8gIEdsYWQgeW91IGFza2VkLiBIZXJlIGlzIHdoZXJlIHlvdSBwcm9iYWJseSB3YW50IHRvIGdvIDopIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyMi1maXJzdC1sb29rXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImE5ZjQzY2I3LTRhYWEtNGQxYi04ZDY2LWU4YTEzM2MzOWJjYSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1URTROVEE1TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtZWxlY3Ryb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTFkYjVmZGIyODcwOTYyNzEzMDM4ZjRhZTc1YzQwYWJlNTI2OWVmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXpOVFkzT1RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGJwLXNlcnZlcmxlc3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2JlYzJiNmQxNTg1YTQ2ODk4ZTUwZWY0MGVlYmYxZjJlYTljZWNiMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ1JVRCBTZXJ2ZXJsZXNzIEFQSVxuXG5UaGlzIHByb2plY3QgcmVwcmVzZW50cyBhIGZ1bGx5IHNlcnZlcmxlc3MgaW1wbGVtZW50YXRpb24gZm9yIGEgQ1JVRCAoQ3JlYXRlLCBSZXRyaWV2ZSwgVXBkYXRlLCBEZWxldGUpIEFQSSBpbXBsZW1lbnRlZCB3aXRoIFtBenVyZSBGdW5jdGlvbnNdKGh0dHBzOi8vYWthLm1zL2F6dXJlLWZ1bmN0aW9ucykgYW5kIFtBenVyZSBDb3Ntb3MgREJdKGh0dHBzOi8vYWthLm1zL2F6dXJlLWNvc21vc2RiKS5cblxuRm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgZGVtbyB3ZSBhcmUgZ29pbmcgdG8gdXNlIGFuIEFuZ3VsYXIgYXBwbGljYXRpb24gYnVpbHQgYnkgW0pvaG4gUGFwYV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGEpLiBUaGUgY29kZSBmb3IgdGhpcyBhcHBsaWNhdGlvbiBpcyBhdmFpbGFibGUgb24gR2l0aHViIGF0IFtBbmd1bGFyIENvc21vcyBEQl0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIpLlxuXG5Zb3UgY2FuIHdhdGNoIEpvaG4gUGFwYSBhbmQgSSB0YWxrIGFib3V0IHRoaXMgcHJvamVjdCBpbiB0aGlzIFtQbHVyYWxzaWdodCBjb3Vyc2VdKGh0dHBzOi8vYWthLm1zL3BicCkuIFxuXG4jIyBSZXF1aXJlbWVudHNcblxuMS4gIEluc3RhbGwgdGhlIFtBenVyZSBGdW5jdGlvbnMgZm9yIFZpc3VhbCBTdHVkaW8gQ29kZV0oaHR0cHM6Ly9ha2EubXMvdnNjb2RlLWF6dXJlLWZ1bmN0aW9ucykgZXh0ZW5zaW9uXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiAgQ2xvbmUgdGhpcyByZXBvc2l0b3J5XG5cbiAgICBgYGBiYXNoXG4gICAgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9wYnAtc2VydmVybGVzcy5naXRcbiAgICBjZCBwYnAtc2VydmVybGVzc1xuICAgIGBgYFxuXG4xLiAgSW5zdGFsbCB0aGUgbnBtIHBhY2thZ2VzXG5cbiAgICBgYGBiYXNoXG4gICAgbnBtIGlcbiAgICBgYGBcblxuMS4gIENvbmZpZ3VyZSBDb3Ntb3MgREIgc2VydmVyIHNldHRpbmdzXG5cbiAgICBHbyB0byBgbG9jYWwuc2V0dGluZ3MuanNvbmAgaW4gdGhlIHByb2plY3Qgcm9vdCBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIElmIHRoZSBmaWxlIGRvZXNuJ3QgZXhpc3QsIG1ha2Ugc3VyZSB0byBjcmVhdGUgaXQuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUsIHBhc3N3b3JkIGFuZCBwb3J0IHdpdGggeW91ciBzcGVjaWZpYyBjb25maWd1cmF0aW9uLlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIC8vIGxvY2FsLnNldHRpbmdzLmpzb25cbiAgICB7XG4gICAgXCJJc0VuY3J5cHRlZFwiOiBmYWxzZSxcbiAgICAgICAgXCJWYWx1ZXNcIjoge1xuICAgICAgICAgICAgXCJBenVyZVdlYkpvYnNTdG9yYWdlXCI6IFwiXCIsXG4gICAgICAgICAgICBcIkNvc21vc0RCVVJMXCI6IFwibW9uZ29kYjovLzx5b3VyLUhPU1QtZ29lcy1oZXJlPjo8eW91ci1QT1JULWdvZXMtaGVyZT4vP3NzbD10cnVlXCIsXG4gICAgICAgICAgICBcIkNvc21vc0RCVXNlclwiOiBcIjx5b3VyLVVTRVJOQU1FLWdvZXMtaGVyZT5cIixcbiAgICAgICAgICAgIFwiQ29zbW9zREJQYXNzXCI6IFwiPHlvdXItUEFTU1dPUkQtZ29lcy1oZXJlPlwiLFxuICAgICAgICAgICAgXCJDb3Ntb3NEQlwiOiBcIjx5b3VyLWNvc21vcy1kYi1uYW1lLWdvZXMtaGVyZT5cIlxuICAgICAgICB9LFxuICAgICAgICBcIkhvc3RcIjoge1xuICAgICAgICAgICAgXCJMb2NhbEh0dHBQb3J0XCI6IDcwNzEsXG4gICAgICAgICAgICBcIkNPUlNcIjogXCIqXCJcbiAgICAgICAgfVxuICAgIH1cbiAgICBgYGBcblxuMS4gIEdvIHRvIFtBbmd1bGFyIENvc21vcyBEQl0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIpIGFuZCBmb2xsb3cgc3RlcHMgdG8gZ2V0IHN0YXJ0ZWQgYW5kIHJ1biB0aGUgYXBwIHRoZXJlXG5cbiMjIFJ1bm5pbmcgdGhlIGFwcGxpY2F0aW9uIGxvY2FsbHlcblxuMS4gIE9wZW4gdGhlIGFwcGxpY2F0aW9uIGluIFZTIENvZGUgYW5kIHJ1biBhcHBsaWNhdGlvblxuXG4gICAgIVtSdW4gQXp1cmUgRnVuY3Rpb25zIGxvY2FsbHkgaW4gVlMgQ29kZV0oaHR0cHM6Ly9pLmltZ3VyLmNvbS9HZmp1RUtELmdpZilcblxuMS4gIEFzc3VtaW5nIHlvdSB3ZW50IHRocm91Z2ggdGhlIHN0ZXBzIG9mIGluc3RhbGxpbmcgYW5kIHJ1bm5pbmcgeW91ciBBbmd1bGFyIGFwcGxpY2F0aW9uIGxvY2FsbHkgbm93IG9wZW4gdGhlIGFwcCBpbiBWUyBDb2RlIGFuZCBnbyB0byBgaGVyby5zZXJ2aWNlLnRzYCBhbmQgY29uZmlndXJlIHlvdXIgZW5kcG9pbnQgdG8gYmUgdGhlIG5ld2x5IGNyZWF0ZWQgZnVuY3Rpb25zOlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGNvbnN0IGFwaSA9ICdodHRwOi8vbG9jYWxob3N0OjcwNzEvYXBpJztcbiAgICBgYGBcblxuIyMgUHVibGlzaCB5b3VyIEFQSSB0byB0aGUgY2xvdWRcblxuMS4gIEluIFZTIENvZGUgZ28gdG8gQXp1cmUgRnVuY3Rpb25zIGV4dGVuc2lvbiBhbmQgZm9sbG93IHN0ZXBzIGluIHRoaXMgW3ZpZGVvXShodHRwczovL3lvdXR1LmJlLzhHQU8zb2JnRXpjKVxuXG4xLiAgSW4gdGhlIEF6dXJlIHBvcnRhbCBnbyB0byB5b3VyIG5ld2x5IHB1Ymxpc2hlZCBmdW5jdGlvbiBhcHAgYW5kIGNvcHkgVVJMXG5cbiAgICAhW0dldCBGdW5jdGlvbiBVUkwgZnJvbSB0aGUgQXp1cmUgcG9ydGFsXShodHRwczovL2kuaW1ndXIuY29tL0xDbDFrTk4uZ2lmKVxuXG4xLiAgSW4geW91ciBBbmd1bGFyIGFwcCBnbyB0byBgaGVyby5zZXJ2aWNlLnRzYCBhbmQgY29uZmlndXJlIHlvdXIgZW5kcG9pbnQgdG8gcG9pbnQgdG8gdGhlIG5ld2x5IGRlcGxveWVkIGZ1bmN0aW9uOlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGNvbnN0IGFwaSA9ICdodHRwczovL3NpY290aW4tc2VydmVybGVzcy5henVyZXdlYnNpdGVzLm5ldC9hcGknO1xuICAgIGBgYFxuXG4tLS1cblxuSWYgeW91J3JlIGxvb2tpbmcgZm9yIG1vcmUgdXNlIGNhc2VzIG9uIHdoYXQgeW91IGNhbiBidWlsZCB3aXRoIHNlcnZlcmxlc3MgbWFrZSBzdXJlIHRvIGNoZWNrb3V0IFtBbiBvcGVuIHNvdXJjZSBzZXQgb2YgY29tbW9uIHVzZSBjYXNlcyBmb3IgQXp1cmUgRnVuY3Rpb25zXShodHRwczovL2FrYS5tcy9zZXJ2ZXJsZXNzLWRlbW9zKVxuXG4jIyBQcm9ibGVtcyBvciBTdWdnZXN0aW9uc1xuXG5bT3BlbiBhbiBpc3N1ZSBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vcGJwLXNlcnZlcmxlc3MvaXNzdWVzKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImU2NDVhZmQwLTNiZDYtNDNjYi04OGM4LWYyMDkzZTJjYjRmZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1UY3pOakV6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10b3VyLW9mLWhlcm9lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNjU5Njc3MTBlOGIxYjg3YzBlNmE0ZjE5ZWVhMmI1ZjU0ZTdjNTBlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EUTNPRFl3TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibGl0ZS1zZXJ2ZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmJjNmIwYzYzYzdhODJjMDFiN2IxMTM1NzljMzE0MDBjNDE1ZmE3NSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EZzFOakkwTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVHlwZVNjcmlwdERlbW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ4YTc2N2NmMjNkN2ViMDQ4ZDA0NDdmYjk3MTczYjczODc0ZWMwZGUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVNREU1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXIxLXNuaXBwZXRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY2ZDYyMzY0NTM0ZGRiNmZjZDNkZmVhOWQxOTQ0ZGQ1MGRmMmY0ZDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVPRGd6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXItc25pcHBldHMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDk4OTk1N2ZmOWFlOWUxZjYyOTA0NDI0YWU3YmQ3MGM4MmY3ZTQwMyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qRXpNVFk1T1RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2ViYXBwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY1MzdjY2EyNmRiM2ExNjQ2ZmU2ODFlYjE2NTgyNzllNTRiNGU2YzYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFdlYmFwcFxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS42LjYuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwODU1ZDk4Ny1lNjY0LTQzNmItOWM3NS04NTkwNzMxMmIzM2EiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qTXhPVFk0TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUmVhZGluZ0J1ZGRpZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjljMGQwMzQ2OTYyMTBiNjJjMzM3NDM2OWM2ODFmMDIzOTY5NGJlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9UTXdPRGM1Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci0yLWZpcnN0LWxvb2stbGF1bmNoZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTYzNzVhY2U4N2UwN2M5ZWFlNTBkMjNkMzFhMWZlZDI1MDVmZDk0ZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9Ua3dNelEzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c3RvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNzM5MjcxMTExNDU1Mzc0ZmY3ZGUxYjI1NzgxMmQ5Njk1Mjk0MTc2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU1ESXlNRFE1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWV4YW1wbGVzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5ZjRiZjJmYzQ1NDgzODI0OGY4OWU4ODY0MmE3MjA3NTRjMTVjYTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgRmlyc3QgTG9va1xuXG4jIyBGb3IgUGx1cmFsc2lnaHRcblxuVGhlIGNvZGUgaW4gdGhpcyByZXBvIGlzIHRoZSBzb3VyY2UgZm9yIHdoYXQgYmVjb21lcyB0aGUgcGx1bmtlcnMgbG9jYXRlZCBbaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItZmlyc3QtbG9vay1ob3N0ZWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyLWZpcnN0LWxvb2staG9zdGVkKVxuXG4+IE5vdGU6IFRoZSBwbHVua2VycyBhcmUgdGhlIHJlY29tbWVuZGVkIHdheSB0byBydW4gdGhlIGNvZGUuIEhvd2V2ZXIsIGlmIHlvdSB3aXNoIHRvIGV4cGxvcmUsIGluc3RydWN0aW9ucyBjYW4gYmUgZm91bmQgYmVsb3cuIFRoaXMgcmVwbyBpcyBub3QgcGFydCBvZiB0aGUgY291cnNlIC4uLiB0aGlzIGlzIGludGVuZGVkIHRvIGJlIGV4dHJhIGNyZWRpdCAuLi4gZnVuIC4uLiBmb3IgdGhvc2Ugd2hvIGFyZSBjdXJpb3VzIDopXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG5Gb3JrIGFuZCBjbG9uZSB0aGlzIHJlcG8gLi4uXG5cbmBgYGJhc2hcbmdpdCBjbG9uZSBnaXRAZ2l0aHViLmNvbTpqb2hucGFwYS9hbmd1bGFyLWZpcnN0LWxvb2stZXhhbXBsZXMuZ2l0IG5nLWV4XG5jZCBuZy1leFxucm0gLXJmIC5naXQvXG5ucG0gaVxuYGBgXG5cblByZXAgdGhlIEV4YW1wbGVzXG5cbmBgYGJhc2hcbmNkIF9leGFtcGxlc1xubnBtIGlcbmNkIC4uXG5ucG0gcnVuIGFsbFxuYGBgXG5cblJ1biBhbiBleGFtcGxlXG5cbmBgYGJhc2hcbmNkIF9leGFtcGxlcy9jb21wb25lbnQtc2ltcGxlL1xubnBtIHN0YXJ0XG5gYGBcblxuRWFjaCBleGFtcGxlIGlzIGxvY2F0ZWQgaW4gaXRzIG93biBmb2xkZXIgdW5kZXIgYF9leGFtcGxlcy9gLiBGZWVsIGZyZWUgdG8gZXhwbG9yZSB0aGVtLiBZb3UgbWF5IHJ1biBgbnBtIHN0YXJ0YCBpbiB0aG9zZSByZXNwZWN0aXZlIGZvbGRlcnMsIGlmIHlvdSB3aXNoIHRvIHJ1biB0aGVtIGxvY2FsbHkuXG5cblJlbWluZGVyIC4uLiBUaGUgb3RoZXIgZmlsZXMgaW4gdGhpcyByZXBvIGFyZSBoZXJlIGZvciBoZWxwaW5nIGNyZWF0ZSB0aGUgcGx1bmtlcnMuIEZvY3VzIG9ubHkgb24gdGhlIGZpbGVzIGluIHRoZWBfZXhhbXBsZXMveHh4YCBmb2xkZXJzLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiM2NkYzZiZDAtZmI3Ni00YzNlLWE1NzQtZjBhZTI1YjJjODUyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU1ESXlNRFE1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWV4YW1wbGVzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5ZjRiZjJmYzQ1NDgzODI0OGY4OWU4ODY0MmE3MjA3NTRjMTVjYTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5EWTNOekkyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmcyLWtlc3RyZWwtYXBwc2VydmVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU0OTM4NDE4NzA0NTk3YjA2MGFlNjI2OTdlNTk1YzI0YTk2NjliMWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9EQTNNVEF4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhcjItZm9yY2UiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTRkM2U4N2M4ZWZhOWUxNjcyYWY3NmQ3MDM2NTBkZmI0ODgxMzNiYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qRTNORFUwTWpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidWx0aW1hdGUtcHdhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NDhlZGU2ZWRhNTExZDU4OWM2NmFiZmU5NDg5NjA5NTYzNDYwNzMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFBXQVxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS42LjYuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5ZWU3NmNkOS02MzkwLTQ4YzktOWVlOC1kZTAyNDA2ZTkwMTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EUXpNalUwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLXBsYXkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjU1MDY4NWQ2MWQ3Y2VjZDY5MjRkYTA5ZTE0ZTM3ZjI1ODgyNWNhZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EUXdPVFl5TWpJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNlbnRpbWVudEFuYWx5c2lzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI3MzU4N2ZiZjI0OWYzNGQ2NmRkZjlhNDVmODM1OWU2NDZmZmExNTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBTZW50aW1lbnQgQW5hbHlzaXNcblxuVGhpcyBhcHAgd2FzIG1hZGUgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgTWljcm9zb2Z0IEJsb2csIFtVcGdyYWRlIFlvdXIgQXBwIFdpdGggU2VudGltZW50IEFuYWx5c2lzXShodHRwczovL2RldmJsb2dzLm1pY3Jvc29mdC5jb20veGFtYXJpbi91cGdyYWRlLXlvdXItYXBwLXdpdGgtc2VudGltZW50LWFuYWx5c2lzP1dULm1jX2lkPXNlbnRpbWVudGFuYWx5c2lzLWdpdGh1Yi1icmFtaW4pLlxuXG58IEhhcHB5IFNlbnRpbWVudCAgICAgIHwgU2FkIFNlbnRpbWVudCB8XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCAhW0hhcHB5IFNlbnRpbWVudF0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNDUzODQzMzItOTMwYTJhODAtYjVjMi0xMWU4LTkzYTMtMTIwYTVmNTc0Y2ZiLmdpZil8ICAhW1NhZCBTZW50aW1lbnRdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzQ1Mzg0MzMzLTkzYTJjMTAwLWI1YzItMTFlOC04MWQ0LTM5Y2JlOTczMTY0Yy5naWYpfFxuXG5NaWNyb3NvZnQncyBbQ29nbml0aXZlIFNlcnZpY2VzXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vc2VydmljZXMvY29nbml0aXZlLXNlcnZpY2VzP1dULm1jX2lkPXNlbnRpbWVudGFuYWx5c2lzLWdpdGh1Yi1icmFtaW4pIHRlYW0gaGF2ZSBjcmVhdGVkIHRoZSBbU2VudGltZW50IEFuYWx5c2lzIEFQSV0oaHR0cHM6Ly93ZXN0dXMuZGV2LmNvZ25pdGl2ZS5taWNyb3NvZnQuY29tL2RvY3Mvc2VydmljZXMvVGV4dEFuYWx5dGljcy5WMi4wL29wZXJhdGlvbnMvNTZmMzBjZWVlZGE1NjUwZGIwNTVhM2M5Lz9XVC5tY19pZD1zZW50aW1lbnRhbmFseXNpcy1naXRodWItYnJhbWluKSB0aGF0IHVzZXMgbWFjaGluZSBsZWFybmluZyB0byBkZXRlcm1pbmUgdGhlIHNlbnRpbWVudCBvZiB1cGxvYWRlZCB0ZXh0LiBBbmQgdGhlIGJlc3QgcGFydCBpcywgd2UgZG9uJ3QgbmVlZCB0byBiZSBtYWNoaW5lIGxlYXJuaW5nIGV4cGVydHMgdG8gdXNlIGl0LlxuXG5JIGp1c3Qgc3VibWl0IHRoZSB0ZXh0IGFzIGEgUE9TVCBSZXF1ZXN0OlxuXG5gYGBqc29uXG57XG4gIFwiZG9jdW1lbnRzXCI6IFtcbiAgICB7XG4gICAgICBcImxhbmd1YWdlXCI6IFwiZW5cIixcbiAgICAgIFwiaWRcIjogXCIyNTFjOTlkNy0xZjg5LTQyNmEtYTNhZC1jNmZhMWIzNGYwMjBcIixcbiAgICAgIFwidGV4dFwiOiBcIkkgaG9wZSB5b3UgZmluZCB0aW1lIHRvIGFjdHVhbGx5IGdldCB5b3VyIHJlcG9ydHMgZG9uZSB0b2RheS5cIlxuICAgIH1cbiAgXVxufVxuYGBgXG5cbkFuZCB0aGUgQVBJIHJldHVybnMgYmFjayBpdHMgc2VudGltZW50IHNjb3JlOlxuXG5gYGBqc29uXG57XG5cInNlbnRpbWVudFwiOiB7XG4gIFwiZG9jdW1lbnRzXCI6IFtcbiAgICB7XG4gICAgICBcImlkXCI6IFwiMjUxYzk5ZDctMWY4OS00MjZhLWEzYWQtYzZmYTFiMzRmMDIwXCIsXG4gICAgICBcInNjb3JlXCI6IDAuNzc2MzU1NTA0OTg5NjI0XG4gICAgfVxuICBdXG59XG5gYGBcblxuVGhlIHNlbnRpbWVudCBzY29yZSByYW5nZXMgYmV0d2VlbiAwIGFuZCAxLlxuXG5TY29yZXMgY2xvc2UgdG8gMCBpbmRpY2F0ZSBuZWdhdGl2ZSBzZW50aW1lbnQsIHdoaWxlIHNjb3JlcyBjbG9zZSB0byAxIGluZGljYXRlIHBvc2l0aXZlIHNlbnRpbWVudC5cblxuIyMgTGVhcm4gTW9yZVxuXG4tIFtVcGdyYWRlIFlvdXIgQXBwIFdpdGggU2VudGltZW50IEFuYWx5c2lzIHwgTWljcm9zb2Z0IEJsb2ddKGh0dHBzOi8vZGV2YmxvZ3MubWljcm9zb2Z0LmNvbS94YW1hcmluL3VwZ3JhZGUteW91ci1hcHAtd2l0aC1zZW50aW1lbnQtYW5hbHlzaXM/V1QubWNfaWQ9c2VudGltZW50YW5hbHlzaXMtZ2l0aHViLWJyYW1pbilcbi0gW0NvZ25pdGl2ZSBTZXJ2aWNlc10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL3NlcnZpY2VzL2NvZ25pdGl2ZS1zZXJ2aWNlcz9XVC5tY19pZD1zZW50aW1lbnRhbmFseXNpcy1naXRodWItYnJhbWluKVxuLSBbVGV4dCBBbmFseXRpY3NdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9zZXJ2aWNlcy9jb2duaXRpdmUtc2VydmljZXMvdGV4dC1hbmFseXRpY3M/V1QubWNfaWQ9c2VudGltZW50YW5hbHlzaXMtZ2l0aHViLWJyYW1pbilcbi0gW1NlbnRpbWVudCBBbmFseXNpcyBBUEldKGh0dHBzOi8vd2VzdHVzLmRldi5jb2duaXRpdmUubWljcm9zb2Z0LmNvbS9kb2NzL3NlcnZpY2VzL1RleHRBbmFseXRpY3MuVjIuMC9vcGVyYXRpb25zLzU2ZjMwY2VlZWRhNTY1MGRiMDU1YTNjOT9XVC5tY19pZD1zZW50aW1lbnRhbmFseXNpcy1naXRodWItYnJhbWluKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM5Zjg4ZjEwLTI2MjUtNDczYy1iZjcwLWMyMTdmMjcyY2VjMyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5UazFOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3RhcndhcnMtaW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI3ZWJjZjEwMDdmZTZjOTJmNzRmNGI3N2VmYmZmMjhkMGJiMGQzMzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUXhNRFEyTlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm9kZS1xcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkN2E2NmZjZDhmZmM4YzkwMmVhN2ZkNGE0ZTAzNjE5ZmJlNDM3NzhlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBub2RlLXFzXG5cblRoaXMgaXMgYSBzYW1wbGUgcHJvamVjdCBjcmVhdGVkIHdpdGggZXhwcmVzcy1nZW5lcmF0b3IgZm9sbG93aW5nIHN0ZXBzIG9uIDxodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS90dXRvcmlhbHMvYXBwLXNlcnZpY2UtZXh0ZW5zaW9uL2NyZWF0ZS1hcHA+XG5cbllvdSBjYW4gc2NhZmZvbGQgKGNyZWF0ZSkgYSBuZXcgRXhwcmVzcyBhcHBsaWNhdGlvbiB1c2luZyB0aGUgRXhwcmVzcyBHZW5lcmF0b3IgdG9vbC4gVGhlIEV4cHJlc3MgR2VuZXJhdG9yIGlzIHNoaXBwZWQgYXMgYW4gbnBtIG1vZHVsZSBhbmQgaW5zdGFsbGVkIGJ5IHVzaW5nIHRoZSBucG0gY29tbWFuZCBsaW5lIHRvb2wgbnBtLlxuXG5gYGBcbiQgbnBtIGluc3RhbGwgLWcgZXhwcmVzcy1nZW5lcmF0b3JcbmBgYFxuXG5UaGUgLWcgc3dpdGNoIGluc3RhbGxzIHRoZSBFeHByZXNzIEdlbmVyYXRvciBnbG9iYWxseSBvbiB5b3VyIG1hY2hpbmUgc28geW91IGNhbiBydW4gaXQgZnJvbSBhbnl3aGVyZS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlZWVkZDNmMS1kYjcyLTQ3ZDMtODFkMi1hZThhNTI3NGQ4ZTciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTJNekV6T0RjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYmxhMiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNTFiMzg2ODZiN2YyMjIyZWE0OTJmZDc2NWY3MTZmNTYwNWE1OGFlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBNeVNob3BcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDEuNi43LlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLXByb2RgIGZsYWcgZm9yIGEgcHJvZHVjdGlvbiBidWlsZC5cblxuIyMgUnVubmluZyB1bml0IHRlc3RzXG5cblJ1biBgbmcgdGVzdGAgdG8gZXhlY3V0ZSB0aGUgdW5pdCB0ZXN0cyB2aWEgW0thcm1hXShodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8pLlxuXG4jIyBSdW5uaW5nIGVuZC10by1lbmQgdGVzdHNcblxuUnVuIGBuZyBlMmVgIHRvIGV4ZWN1dGUgdGhlIGVuZC10by1lbmQgdGVzdHMgdmlhIFtQcm90cmFjdG9yXShodHRwOi8vd3d3LnByb3RyYWN0b3J0ZXN0Lm9yZy8pLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMDZiYTEyOGYtYmYzMi00YjE3LWE3OTEtMzE1YTAwZjQ2NGMzIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9EQTNNVEF4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhcjItZm9yY2UiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTRkM2U4N2M4ZWZhOWUxNjcyYWY3NmQ3MDM2NTBkZmI0ODgxMzNiYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQW5ndWxhciAyIERlbW8gZnJvbSBuZ0NvbmYgMjAxNlxuXG5bVmlldyB0aGUgcHJlc2VudGF0aW9uIGhlcmVdKGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V0FQUUZfR0E3UWcmaW5kZXg9MiZsaXN0PVBMT0VURWNwM0RrQ3E3ODh4YXBrUF9PVS03OGpoVGY2OGopXG5cbkNsb25lIGl0IGFuZCBydW4gaXQhXG5cbmBgYGJhc2hcbm5wbSBpbnN0YWxsXG5ucG0gc3RhcnRcbmBgYFxuXG5cbltWaWV3IHRoZSBzbGlkZXMgaGVyZV0oaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMS1XeEotZ25jV1ZCT3lYV0p2aDR2amhYUG5zX09oeTZpQ3poWjBPTDJqZXMvZWRpdD91c3A9c2hhcmluZylcblxuXG5PdGhlciBsaW5rczpcblxuLSBbSm9obidzIEFuZ3VsYXIgMiBQbHVyYWxpZ2h0IENvdXJzZV0oaHR0cDovL2pwYXBhLm1lL2EycHMxc3Rsb29rKSBcbi0gW0FuZ3VsYXIgMiBBcHAgaW4gMTcgTWludXRlcyBMaXZlIENvZGluZyBEZW1vXShodHRwczovL2pvaG5wYXBhLm5ldC8xNy1taW51dGUtYW5ndWxhci0yLWFwcC8pXG4tIE1vYmlsZVxuICAtIFtJb25pYyAyXShodHRwOi8vaW9uaWMuaW8vMilcbiAgLSBbTmF0aXZlU2NyaXB0XShodHRwOi8vd3d3Lm5hdGl2ZXNjcmlwdC5vcmcpXG4gIC0gW1JlYWN0IE5hdGl2ZV0oaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvKVxuLSBbRWxlY3Ryb25dKGh0dHA6Ly9lbGVjdHJvbi5hdG9tLmlvLylcbi0gW0FuZ3VsYXIgTWF0ZXJpYWxdKGh0dHBzOi8vbWF0ZXJpYWwuYW5ndWxhci5pby8pXG4gIC0gW0FuZ3VsYXIgbWF0ZXJpYWwgZGVtb10oaHR0cHM6Ly9wdXBweS1sb3ZlLmZpcmViYXNlYXBwLmNvbS8pXG4tIFtUeXBlU2NyaXB0XShodHRwOi8vdHlwZXNjcmlwdGxhbmcub3JnKVxuLSBbQW5ndWxhciAyIERvY3NdKGh0dHBzOi8vYW5ndWxhci5pby9kb2NzL3RzL2xhdGVzdC8pXG4tIFtBbmd1bGFyIDIgVHV0b3JpYWxdKGh0dHBzOi8vYW5ndWxhci5pby9kb2NzL3RzL2xhdGVzdC90dXRvcmlhbC8pXG4tIFtBbmd1bGFyIDIgQ0xJXShodHRwOi8vY2xpLmFuZ3VsYXIuaW8pXG4tIFtBbmd1bGFyIDIgQ29kZWx5emVyXShodHRwczovL2dpdGh1Yi5jb20vbWdlY2hldi9jb2RlbHl6ZXIpXG4tIFtDb2RlIHNuaXBwZXRzIGluIHZzIGNvZGVdKGh0dHA6Ly9qcGFwYS5tZS9hMnZzY29kZSkgXG4tIFtBbmd1bGFyIDIgU3R5bGUgR3VpZGVdKGh0dHA6Ly9qcGFwYS5tZS9uZzJzdHlsZWd1aWRlKSBcbi0gW0FuZ3VsYXIgMiBXb3Jrc2hvcCBpbiBCYXJjZWxvbmEgd2l0aCBEYW4gV2FobGluXShodHRwczovL2pvaG5wYXBhLm5ldC9hbmd1bGFyLTItd29ya3Nob3AtaW4tYmFyY2Vsb25hLylcbi0gW0FuZ3VsYXIgMiBuZ0ZvciBzeW50YXggY2hhbmdlXShodHRwczovL2pvaG5wYXBhLm5ldC9hbmd1bGFyLTItbmdmb3IvKVxuLSBbV2h5IFR5cGVTY3JpcHQ/XShodHRwczovL2pvaG5wYXBhLm5ldC9lczUtZXMyMDE1LXR5cGVzY3JpcHQvKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiY2Y4YTM3M2MtZTA2MS00NGVhLTg3NTQtODNiMDU2MWY2ZWNhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qY3lNall6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhcldvcmtzaG9wTGFicyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0M2ZlYTVjMDM4NWU4NjQwZjliMWE1ZTE0ZjU1NGQzOTNmY2NhZjgxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01EWTFOakExTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWhvc3RlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1Yzc5MzZhY2MzOWI1MGFiMTFjNGY2YmE5ZjcyYjQ1ZDIwOWE2NTE0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UUTFOall3Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY29kZS13aXRoLXVzLWFuZ3VsYXItcXVpY2tzdGFydCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxMWUwOWQ2MDVkY2Y0ZTU5OGFmNTg0ZTc3NGFkOWRjNDc0NGU2MDVmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EUXpNalUwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLXBsYXkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjU1MDY4NWQ2MWQ3Y2VjZDY5MjRkYTA5ZTE0ZTM3ZjI1ODgyNWNhZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgaW9zLXBsYXkiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5MDhmMGY2MS1hMjVkLTQzZTQtYmRiZC0wNDc5ZDUwMTU4NmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5UazFOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3RhcndhcnMtaW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI3ZWJjZjEwMDdmZTZjOTJmNzRmNGI3N2VmYmZmMjhkMGJiMGQzMzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHN0YXJ3YXJzLWlvc1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZTgwMzI3ZjUtYTBkMS00ZDVhLWJjNDItMWYwMmU2ZTRkZWQ2Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UazVNVGt4TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLWZhdm9yaXRlLW1vdmllcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzNjJlYzEyNTM2YmRhMWMyZGY4ZjU5NWY0MWRjYThlMGY1OGVjNDhhIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09EUTBOamcwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXp1cmUtZG9jcy1zZGstbm9kZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjEwNjViMjk2MDgwMDkzNWMwN2I1NzMwMzg0ZWFkY2I1MDdmODU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUXhNRFEyTlRFPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJub2RlLXFzIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkN2E2NmZjZDhmZmM4YzkwMmVhN2ZkNGE0ZTAzNjE5ZmJlNDM3NzhlIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBub2RlLXFzXG5cblRoaXMgaXMgYSBzYW1wbGUgcHJvamVjdCBjcmVhdGVkIHdpdGggZXhwcmVzcy1nZW5lcmF0b3IgZm9sbG93aW5nIHN0ZXBzIG9uIDxodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS90dXRvcmlhbHMvYXBwLXNlcnZpY2UtZXh0ZW5zaW9uL2NyZWF0ZS1hcHA/V1QubWNfaWQ9bm9kZXFzLWdpdGh1Yi1zaWNvdGluPlxuXG5Zb3UgY2FuIHNjYWZmb2xkIChjcmVhdGUpIGEgbmV3IEV4cHJlc3MgYXBwbGljYXRpb24gdXNpbmcgdGhlIEV4cHJlc3MgR2VuZXJhdG9yIHRvb2wuIFRoZSBFeHByZXNzIEdlbmVyYXRvciBpcyBzaGlwcGVkIGFzIGFuIG5wbSBtb2R1bGUgYW5kIGluc3RhbGxlZCBieSB1c2luZyB0aGUgbnBtIGNvbW1hbmQgbGluZSB0b29sIG5wbS5cblxuYGBgXG4kIG5wbSBpbnN0YWxsIC1nIGV4cHJlc3MtZ2VuZXJhdG9yXG5gYGBcblxuVGhlIC1nIHN3aXRjaCBpbnN0YWxscyB0aGUgRXhwcmVzcyBHZW5lcmF0b3IgZ2xvYmFsbHkgb24geW91ciBtYWNoaW5lIHNvIHlvdSBjYW4gcnVuIGl0IGZyb20gYW55d2hlcmUuXG4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjhiODgzMjEtMDMxNi00YWQ3LWJkNjYtMjQ5NjBkOTQ0ZDdiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1URXpNamczTWpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdlb2xvY2F0b3JTYW1wbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZmM4ZTQxOWMyMzJhNmQ4NzFlNDBjMjg5MTgxMzI1NTQ0M2U0MjNjNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIhW2xvZ29dKEFydHdvcmsvaG9yaXpvbnRhbC5wbmcpXG5cbmlPUyBhbmQgQW5kcm9pZCBhcHAgdGhhdCBnYXRoZXJzIEdlb2xvY2F0aW9uIGRhdGEsIGNyZWF0ZWQgaW4gWGFtYXJpbi5Gb3Jtc1xuXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvR2VvbG9jYXRvclNhbXBsZS9HUFMuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjBjZjNiNTkwLTg1ZTUtNDUzZS05YjM3LTBlNTUwYjAwMmJjNCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01EWTFOakExTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWhvc3RlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1Yzc5MzZhY2MzOWI1MGFiMTFjNGY2YmE5ZjcyYjQ1ZDIwOWE2NTE0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyRmlyc3RMb29rSG9zdGVkXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiA2LjAuNy5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC0tcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImVhOWYzMGI4LTVjMWItNGI5Mi04NjYyLWNmOTc0ZWE3NmU2MCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1qRXlNRFF6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXItZXNzZW50aWFscyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZjUzNTRlNGYyZGU1YzJhMzI0Zjc0MDhmMDBkNmM5MTlhYmIwMmUzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16QXdOelUwTnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicHdhLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjZiMjIyYzUxYWFhOGFmNjQ1YWJiYTFkOTg0NmQ4ZmVmZjdmNTg2MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UUTFNemsyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWdncmVnYXRvci1hcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzAxOTI1OGVlMmIxZWRhZmY4YjNhOWRlNzgzMmE1OGU4MDcxNmIyNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1UY3hOVEV4TXpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkhlYWx0aENsaW5pYyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhNTYxNjY2Yzg1YTU4MDIxOWI1MDVhMmRhNzM4ZmZiMDAyM2RhN2Q5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIlshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzL2U3YjBmMGJiLTM4ZDEtNDU0ZC04M2NjLTE3NzQ3NWY1MmMwNi9icmFuY2hlcy9tYXN0ZXIvYmFkZ2UpXShodHRwczovL2FwcGNlbnRlci5tcylcblxuIyBIZWFsdGhDbGluaWNcblxuQW4gaU9TICYgQW5kcm9pZCBhcHAgdGhhdCBwYXJzZXMgaW1hZ2VzIG9mIGZvb2QgdG8gcHJvdmlkZSBudXRyaXRpb25hbCBpbmZvcm1hdGlvbi5cblxuVGhlIGxvZ2ljIG9uIHRoZSBiYWNrZW5kIHVzZXMgW01pY3Jvc29mdCBDb2duaXRpdmUgU2VydmljZXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlLz9XVC5tY19pZD1oZWFsdGhjbGluaWMtZ2l0aHViLWJyYW1pbikgdG8gcGFyc2UgdGhlIGltYWdlIGFuZCBkZXRlcm1pbmUgdGhlIGZvb2QuIFRoZSBmb29kIGlzIHRoZW4gbG9nZ2VkIGluIGEgZGF0YWJhc2UgYW5kIGFkZGVkIHRvIHRoZSBsaXN0LlxuXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvSGVhbHRoQ2xpbmljL0hlYWx0aENsaW5pYy5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMGEzMWE1NDgtNzdkMy00OTNiLTk1ZGItNzZkY2IyYTRjOTA2Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTVOak0wTVRnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVucyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkYzc5ZDZhODE3NmFlYTAyOTczMzM2MjJhN2UzZmVlODNmZjNhYTRmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwdW5zXG5cbltQdW5wZWRpYV0oaHR0cDovL3B1bnBlZGlhLm9yZy8pXFxcbltGcm9udGVuZCBXZWIgRGV2IEpva2VzXShodHRwOi8vZWxpamFobWFub3IuY29tL2Zyb250LWVuZC13ZWItZGV2LWpva2VzLylcXFxuW1Byb2dyYW1taW5nIFB1bnNdKGh0dHA6Ly93aWtpLmMyLmNvbS8/UHJvZ3JhbW1pbmdQdW5zKVxcXG5bQ29kZSBQdW5zXShodHRwOi8vd3d3LmNvZGVwdW5zLmNvbS8pXFxcbltQcm9ncmFtbWluZyBKb2tlc10oaHR0cHM6Ly93d3cuaG9uZ2tpYXQuY29tL2Jsb2cvcHJvZ3JhbW1pbmctam9rZXMvKVxcXG5bUHJvZ3JhbW1pbmcgUHVuc10oaHR0cHM6Ly90ZWNoYmxvZy5ib3poby5uZXQvcHJvZ3JhbW1pbmctcHVucy8pXFxcbltQcm9ncmFtbWluZyBMYW5ndWFnZSBMaW1lcmlja3NdKGh0dHBzOi8vbWVkaXVtLmZyZWVjb2RlY2FtcC5vcmcvcHJvZ3JhbW1pbmctbGFuZ3VhZ2UtbGltZXJpY2tzLWE4ZmIzNDE2ZTBlNClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjZGY0NDM3Yi00MDIyLTQ1ZjktYmVlNC1lNDkwNDE3MDhlNjciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTNOakUwTWpNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZG9ja2VyLWFuZ3VsYXItY2xpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhNTU2Y2UyY2I4MmY0MTY2NWVhNzg3ZGJkYTc2OGIxYjIyY2QwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTNOVEE0TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2RhLWxvY2FsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZjkzMDEzMzU2MjM4MTcwYjJlY2I5MTE3OTBhZGViMTM1ZjFmMGU2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qYzJNVEV5TXpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHJvcGVydHktc3VnZ2VzdGVyLXVpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY0ZTM1YjYxY2ZhNzhmZDQxZDk0OTkwNTc0Yzc5Mjc4YTlmYWZmYmMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIENsaWVudFxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS42LjYuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0MDE3NDU3ZC1mMjc3LTRlNDItOWViZi1jNmJhMmJhM2JkYWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazNOak16TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNvc21vc2RiIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM2ZTI2OWRhMDYwYjNiNWI1MzdjZWM1MDkwYWFjMGVlZWJlZmNkZTIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZ3pOams1TVRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2Vla2x5LXJlYWRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImRiZDJhMjkxMjFmZmVhZjcyZmE3M2ZkODY3MTQ1YTYxZGViZWYxYTQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHdlZWtseS1yZWFkc1xuVGhpcyBpcyAoeWV0KSBhbm90aGVyIGF0dGVtcHQgYXQgb3JnYW5pc2luZyBteSB3ZWVrbHkgcmVhZHNcblxuSSB3aWxsIHBvc3QgaGVyZSBhcnRpY2xlcyB0aGF0IEknbSBwbGFubmluZyB0byByZWFkIHdpdGggYSB3ZWVrbHkgZ29hbFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ1NWJiMTRmLTdjNDktNDkxNi05OTI5LWYzMzI1NGM0OGRhYyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USXhNVFF4TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1uZ3J4LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FlOTVlMzc3NjliNzZlOTE2NzlhMmM5Nzk2MTY3MDNmY2NlODBlOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTFNelEyTURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c2UtYm90IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA4NTk1MzQ3YmVjZjJkYWYxNzU4NjBjY2I3NjFkOTFmMjNlOTNlMGYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTNOemMyT0RFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXdlc29tZS1hbmd1bGFyLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg1NGExNDZhYzBjODMxMWE3NmNiNGI0ZmQ5ZGJkOGQxN2MzNjYyMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTBORFF4TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWR2YW5jZWQtZGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOGI5MDZmM2EwYWFhNTU5M2ViMTY0YjQ3ZjRhNjYxNDdhODNmOTY5NiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzJNekl4T1RjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZG9wcGVsZ2FuZ2VyLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1YmJmNmJmMjMyZGU5ZGUyNjdhYzM1MmU2OGNhY2QyODA2ODFlMWFjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBkb3BwZWxnYW5nZXItYXBpXG5UaGlzIGlzIGEgc2VydmVybGVzcyBBUEkgZm9yIHRoZSBkb3BwZWxnYW5nZXIgYXBwXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMjVjODk4MzAtNjhlMC00YWVmLTg2ZWYtNzg4MTExMGVhODAzIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQXdNemM1TVRZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkN1c3RvbVN0ZXBwZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYmVkNTVkMzhjZjg5YWRhOTczNDExZmFhZjMwZjUzMzFmNzEyOTZjZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEN1c3RvbVN0ZXBwZXJcblNhbXBsZSBhcHAgc2hvd2luZyBob3cgdG8gc2V0IHRoZSBjb2xvciBvZiBhIFhhbWFyaW4uRm9ybXMuU3RlcHBlciB1c2luZyBFZmZlY3RzIGFuZCBDdXN0b20gUmVuZGVyZXJzLlxuXG4jIEFuZHJvaWQgXG4hW10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvQ3VzdG9tU3RlcHBlci9SZWQlMjBBbmRyb2lkJTIwU3RlcHBlci5wbmcpXG5cbiMgaU9TIFxuIVtdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVmlkZW9zL2Jsb2IvbWFzdGVyL0N1c3RvbVN0ZXBwZXIvUmVkJTIwaU9TJTIwU3RlcHBlci5wbmcpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNGM2Yjg5ZmItZWU4OS00NmVkLTllY2UtMDZlOWFlMTRkNmUyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qQTFOVEkwTVRRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkhhY2tlck5ld3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzQ1NjM1YWVhN2JhMzJlMTM1ZWQwYmJjODZhMjBjNTIzMjBiNTFiNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEhhY2tlck5ld3NcblxuPGEgaHJlZj1cImh0dHBzOi8vd3d3LmJ1eW1lYWNvZmZlZS5jb20vYm1pbm5pY2tcIiB0YXJnZXQ9XCJfYmxhbmtcIj48aW1nIHNyYz1cImh0dHBzOi8vY2RuLmJ1eW1lYWNvZmZlZS5jb20vYnV0dG9ucy9kZWZhdWx0LW9yYW5nZS5wbmdcIiBhbHQ9XCJCdXkgTWUgQSBDb2ZmZWVcIiBzdHlsZT1cImhlaWdodDogNTFweCAhaW1wb3J0YW50O3dpZHRoOiAyMTdweCAhaW1wb3J0YW50O1wiID48L2E+XG5cbkEgWGFtYXJpbi5Gb3JtcyBhcHAgZm9yIGRpc3BsYXlpbmcgdGhlIHRvcCBwb3N0cyBvbiBIYWNrZXIgTmV3cy5cblxuVGhpcyBhcHAgZGVtb25zdHJhdGVzIGhvdyB0byB1c2UgYElBc3luY0VudW1lcmFibGVgICsgQyMgOC4wIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UuIFRoYW5rcyB0byBgSUFzeW5jRW51bWVyYWJsZWAsIHRoZSBpdGVtcyBhcmUgYWRkZWQgdG8gdGhlIGxpc3QgYXMgc29vbiBhcyB0aGV5J3JlIGF2YWlsYWJsZSBtYWtpbmcgdGhlIGFwcCBmZWVsIGZhc3RlciBhbmQgbW9yZSByZXNwb25zaXZlLlxuXG5UaGlzIGFwcCBhbHNvIHVzZXMgdGhlIFtUZXh0IEFuYWx5dGljcyBBUEldKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9zZXJ2aWNlcy9jb2duaXRpdmUtc2VydmljZXMvdGV4dC1hbmFseXRpY3M/V1QubWNfaWQ9aGFja2VybmV3cy1naXRodWItYnJhbWluKSBmcm9tIFtNaWNyb3NvZnQgQ29nbml0aXZlIFNlcnZpY2VzXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vc2VydmljZXMvY29nbml0aXZlLXNlcnZpY2VzP1dULm1jX2lkPWhhY2tlcm5ld3MtZ2l0aHViLWJyYW1pbikgdG8gYW5hbHl6ZSB0aGUgc2VudGltZW50IG9mIGVhY2ggaGVhZGxpbmUuIFxuLSDwn5iDIEhlYWRsaW5lIGlzIEhhcHB5IFxuLSDimLnvuI8gSGVhZGxpbmUgaXMgU2FkIFxuLSDwn5iQIEhlYWRsaW5lIGlzIE5laXRoZXIgSGFwcHkgb3IgU2FkXG5cbiFbSGFja2VyIE5ld3MgRGVtb10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjY5NTY5MTgtMjg3M2JiODAtZjAxYS0xMWU5LTgzOWMtNmU5MzVjMGI2MDZjLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmZjcwMTNmMi02N2MyLTQwOGItYjE1Ny1mNDdmNWNjNjE2YWYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpORGc0TkRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hanMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzJkYTMwZTk2ZDBjNmE0OTNlYzVmNzYwNTlkOWU4M2Q3ZDhjNWQxMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgc2ltb25hanNcblBvdGVudGlhbGx5IGEgbmV3IGpzIGZyYW1ld29yayDwn5iCXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMmI3ZjBjMDQtNDg3ZS00NmU5LWJhZWYtYmRlODk0YTQyOGY0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTROVFUyTURNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5CbG9iU3RvcmFnZUFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyODMxMjlkYTMzMzQ3Y2Y4OTcyMTQ0NzAzZTE0ZTQ0ODU3YjZhOGVmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiMgWGFtYXJpbkJsb2JTdG9yYWdlQXBwXG5cbkEgYSBzaW5nbGUtcGFnZSBYYW1hcmluLkZvcm1zIGFwcCB0aGF0IGRpc3BsYXlzIGFuIGltYWdlIGZyb20gQXp1cmUgQmxvYiBTdG9yYWdlIGJ5IGNvbW11bmljYXRpbmcgZGlyZWN0bHkgd2l0aCBhbiBBenVyZSBCbG9iIFN0b3JhZ2UgQ29udGFpbmVyIHVzaW5nIHRoZSBbQXp1cmUgU3RvcmFnZSBTREsgZm9yIC5ORVRdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2RvdG5ldC9hcGkvb3ZlcnZpZXcvYXp1cmUvc3RvcmFnZS8/V1QubWNfaWQ9eGFtYXJpbmJsb2JzdG9yYWdlYXBwLWdpdGh1Yi1icmFtaW4pLlxuXG4jIyBMZWFybiBNb3JlXG4tIFtUaGUgWGFtYXJpbiBTaG93OiBBenVyZSBCbG9iIFN0b3JhZ2UgZm9yIE1vYmlsZV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbS9TaG93cy9YYW1hcmluU2hvdy9BenVyZS1CbG9iLVN0b3JhZ2UtZm9yLU1vYmlsZS13aXRoLUJyYW5kb24tTWlubmljay8/V1QubWNfaWQ9eGFtYXJpbmJsb2JzdG9yYWdlYXBwLWdpdGh1Yi1icmFtaW4pXG4tIFtYYW1hcmluIEJsb2c6IEFkZCBDbG91ZCBTdG9yYWdlIHRvIFhhbWFyaW4gQXBwcyB3aXRoIEF6dXJlIEJsb2IgU3RvcmFnZV0oaHR0cHM6Ly9ibG9nLnhhbWFyaW4uY29tL3hhbWFyaW4tcGx1cy1henVyZS1ibG9iLWNsb3VkLXN0b3JhZ2UvP1dULm1jX2lkPW5vbmUtY2g5LWJyYW1pbilcbi0gW0F6dXJlIEJsb2IgU3RvcmFnZV0oaHR0cHM6Ly9ha2EubXMveGFtYXJpbmJsb2cvYXp1cmVibG9ic3RvcmFnZSlcbi0gW0hvdyB0byB1c2UgQmxvYiBTdG9yYWdlIGZyb20gWGFtYXJpbl0oaHR0cHM6Ly9ha2EubXMvWGFtYXJpbkJsb2cvQXp1cmVCbG9iU3RvcmFnZVdpdGhYYW1hcmluKVxuXG4hW1hhbWFyaW4gQmxvYiBTdG9yYWdlIFNhbXBsZSBBcHAgRGlhZ3JhbV0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9WaWRlb3MvYmxvYi9tYXN0ZXIvQXp1cmVCbG9iU3RvcmFnZVNhbXBsZUFwcC9BenVyZUJsb2JTdG9yYWdlU2FtcGxlQXBwRGlhZ3JhbS9YYW1hcmluQmxvYlN0b3JhZ2VTYW1wbGVBcHBEaWFncmFtLnBuZylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzYzFiZTllZC1iYjkwLTQxMzEtOGYyYi1jODlhYmFhM2MwMTkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlOek13T0RBPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWV4dGVuc2lvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlYzU0MjkzYzIxMTE5OGNkMGIxYzE1MzcyNzY0MmQ3Njk1NTc4NjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTBNalUyTkRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIjI0SG91clRpbWVQaWNrZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTc2YmQ0MWEyYzA5ZmU0MWU1OWJkZmY4YzcxNDEzZjY0ZGE3NTRiNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgMjRIb3VyVGltZVBpY2tlclxuQSAyNCBIb3VyIFRpbWUgUGlja2VyIGZvciBbWGFtYXJpbi5Gb3Jtc10oaHR0cHM6Ly9kb3RuZXQubWljcm9zb2Z0LmNvbS9hcHBzL3hhbWFyaW4veGFtYXJpbi1mb3Jtcz9XVC5tY19pZD0yNGhvdXJ0aW1lcGlja2VyLWdpdGh1Yi1icmFtaW4pXG5cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy84ODQyMjM2OS1mZmU1ZDI4MC1jZDllLTExZWEtOTRhOS01MWUxYWI0N2IwMjIuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjdhZWU2MDU2LTJkOTgtNGJmZi04MmFjLWJhNzkxN2ZkOTI3MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlPRGMyTnpRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk1Y2Y2NTEwOTYwNDM5MGUzMDg5MzcwZDJhZDgwYzUxOTFmNDU4ZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNOall6T1RNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWludHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMyN2UyM2QzN2E2OTliNzM4MmM3NzA5Y2RhNWE4ZGY3NGExNzdjYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qY3lNamczTlRZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiTm9kZUpTV29ya3Nob3AiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODNmYmY2MzAyMmVmYjM0ODZiZTAxMDhjMDcxZDhhYjFmMjAzOTExNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpNakF6TURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1hcmNoaXRlY3R1cmUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTYzYzNlNDY0NTdlMTQxZGRhNGUwZTVmZmNkNTBiZGYxODY5ZGI4YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TTFOalkzTURjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXJ0aWNsZS1leHBsb3JlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhOGQ1OTdkMWJiOTdiMDYyY2Q0NTk1MGMzZmQyYmFkNmZjN2Q5MjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ETTNPRGswTkRjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS1oZWxsbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NDRhZjQwNzkxOGQ0YjI1YzljN2RjMzg3NGFiY2E4M2JmMTdiODMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGd5T0RJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLXJlYWN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY1NmRhYTFmOTgwZTA4MTYwY2E5ZGY4MzI3OWM4MTY1YmRjNDllNDIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBFdmVudFZpZXdDbGlcblxuQW5ndWxhciBEZW1vIHdpdGggYSBMaXR0bGUgYml0IG9mIGEgbG90IG9mIGZlYXR1cmVzXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5wbSBydW4gc3RhcnQtbmdgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQzMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIFJlc291cmNlc1xuXG4tIEdldCBbVlMgQ29kZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vP3d0Lm1jX2lkPWFuZ3VsYXJldmVudHZpZXdjbGktZ2l0aHViLWpvcGFwYSlcbi0gR2V0IHRoZSBWUyBDb2RlIFtBbmd1bGFyIEVzc2VudGlhbHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyLWVzc2VudGlhbHMmd3QubWNfaWQ9YW5ndWxhcmV2ZW50dmlld2NsaS1naXRodWItam9wYXBhKVxuLSBHZXQgdGhlIFZTIENvZGUgW0FuZ3VsYXIgU25pcHBldHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyMiZ3dC5tY19pZD1hbmd1bGFyZXZlbnR2aWV3Y2xpLWdpdGh1Yi1qb3BhcGEpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyOTUxNTFhYy1hZTU2LTQwMTctYTk3Mi1hY2FhODZmMzU3Y2UiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTROVGt6TVRZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbG9yRXF1YWxzUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzRhNTBmMTRlNzg2NWM0ODZhMDlkN2I1MTgyYzBmMzg3YzU0ZWE1OSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ29sb3JFcXVhbHNSZXByb1xuQSByZXByb2R1Y3Rpb24gb2YgdGhpcyBTdGFja092ZXJmbG93IHF1ZXN0aW9uOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDk0MzkxODEvNTk1MzY0M1xuXG4jIyBFbnZpcm9ubWVudFxuXG49PT0gVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlIDIwMTcgZm9yIE1hYyAoUHJldmlldykgPT09XG5cblZlcnNpb24gNy41IFByZXZpZXcgKDcuNSBidWlsZCA5MzMpXG5JbnN0YWxsYXRpb24gVVVJRDogOTdmOTNiNzQtYmQ4NC00MTYxLTg2ZmItZThjNDc0ZDFhMjczXG5SdW50aW1lOlxuIC0gTW9ubyA1LjEwLjAuMTc5ICgyMDE3LTEyL2RhYzYwNzc1NjE2KSAoNjQtYml0KVxuIC0gR1RLKyAyLjI0LjIzIChSYWxlaWdoIHRoZW1lKVxuIC0gWGFtYXJpbi5NYWMgNC40LjAuMzYgKG1hc3RlciAvIDBjN2M0OWE2KVxuXG4gLSBQYWNrYWdlIHZlcnNpb246IDUxMDAwMDE3OVxuXG49PT0gTnVHZXQgPT09XG5cblZlcnNpb246IDQuMy4xLjQ0NDVcblxuPT09IC5ORVQgQ29yZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5SdW50aW1lIFZlcnNpb246IDIuMC41XG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8yLjEuNC9TZGtzXG5TREsgVmVyc2lvbjogMi4xLjRcbk1TQnVpbGQgU0RLczogL0xpYnJhcnkvRnJhbWV3b3Jrcy9Nb25vLmZyYW1ld29yay9WZXJzaW9ucy81LjEwLjAvbGliL21vbm8vbXNidWlsZC8xNS4wL2Jpbi9TZGtzXG5cbj09PSBYYW1hcmluLlByb2ZpbGVyID09PVxuXG5WZXJzaW9uOiAxLjYuMlxuTG9jYXRpb246IC9BcHBsaWNhdGlvbnMvWGFtYXJpbiBQcm9maWxlci5hcHAvQ29udGVudHMvTWFjT1MvWGFtYXJpbiBQcm9maWxlclxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSA5LjIgKDEzNzcyKVxuQnVpbGQgOUM0MGJcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5WZXJzaW9uOiA0LjQuMC4zMSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuXG49PT0gWGFtYXJpbi5pT1MgPT09XG5cblZlcnNpb246IDExLjEwLjAuMzIgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDRkOGM0ZTMyXG5CcmFuY2g6IGQxNS03XG5CdWlsZCBkYXRlOiAyMDE4LTAzLTA3IDE4OjM5OjQ2LTA1MDBcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogOC4zLjAuNSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuQW5kcm9pZCBTREs6IC9Vc2Vycy9icmFtaW4vTGlicmFyeS9BbmRyb2lkL3Nka1xuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ3LjEgKEFQSSBsZXZlbCAyNSlcblx0XHQ4LjAgKEFQSSBsZXZlbCAyNilcblx0XHQ4LjEgKEFQSSBsZXZlbCAyNylcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjEuMVxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI3LjAuMVxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI2LjAuMlxuXG5KYXZhIFNESzogL3VzclxuamF2YSB2ZXJzaW9uIFwiMS44LjBfMTMxXCJcbkphdmEoVE0pIFNFIFJ1bnRpbWUgRW52aXJvbm1lbnQgKGJ1aWxkIDEuOC4wXzEzMS1iMTEpXG5KYXZhIEhvdFNwb3QoVE0pIDY0LUJpdCBTZXJ2ZXIgVk0gKGJ1aWxkIDI1LjEzMS1iMTEsIG1peGVkIG1vZGUpXG5cbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS40LjBcbkhhc2g6IGIzZjkyZjlcbkJyYW5jaDogbWFzdGVyXG5CdWlsZCBkYXRlOiBGcmksIDE5IEphbiAyMDE4IDIyOjAwOjM0IEdNVFxuQ2xpZW50IGNvbXBhdGliaWxpdHk6IDFcblxuPT09IEJ1aWxkIEluZm9ybWF0aW9uID09PVxuXG5SZWxlYXNlIElEOiA3MDUwMDA5MzNcbkdpdCByZXZpc2lvbjogYWNlMWUxMDdjODg0NzdkYjFhYmU1ZTgwNzgwOTY1MGYwNjQxMTJjNFxuQnVpbGQgZGF0ZTogMjAxOC0wMy0xOSAxNzo0Mjo0MS0wNFxuWGFtYXJpbiBhZGRpbnM6IGEwMTI2M2JkYmJhMjU4OWIxZjZlNDJlZjA4NWJkMzFmNmUzYmZjZjRcbkJ1aWxkIGxhbmU6IG1vbm9kZXZlbG9wLWxpb24tZDE1LTdcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjEzLjNcbkRhcndpbiAxNy40LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE3LjQuMFxuICAgIFN1biBEZWMgMTcgMDk6MTk6NTQgUFNUIDIwMTdcbiAgICByb290OnhudS00NTcwLjQxLjJ+MS9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuPT09IEVuYWJsZWQgdXNlciBpbnN0YWxsZWQgYWRkaW5zID09PVxuXG5NRnJhY3RvciAzLjA0LjE0XG5BZGRpbk1ha2VyIDEuNC4yXG5OdUdldCBQYWNrYWdlIE1hbmFnZW1lbnQgRXh0ZW5zaW9ucyAwLjEyLjZcblRlbXBsYXRlIENyZWF0b3IgMC4yXG5XYWthVGltZSAzLjAuMlxuUmVkdGgncyBBZGRpbnMgMS4wLjlcbkludGVybmV0IG9mIFRoaW5ncyAoSW9UKSBkZXZlbG9wbWVudCAoUHJldmlldykgNy4xXG5cblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjdmYTA5MjY5LTY4MmUtNGE2Yi05YjQ4LWQ0MTYxNGE0YmMzYSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvKVxuXG5bVHJ5IEF6dXJlIEZ1bmN0aW9ucyBQbGF5Z3JvdW5kXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vdHJ5L2FwcC1zZXJ2aWNlL2Z1bmN0aW9ucy8pXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmZjcxMTAzMi05YjFiLTQ1MzctYjUzZi0xZjk1OGVkODMxMjgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWF6dXJlLWZ1bmN0aW9ucy10b29scyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgaW5zdGVhZC5cblxuIyMgRmVhdHVyZXNcblRoaXMgZXh0ZW5zaW9uIGZvciBWaXN1YWwgU3R1ZGlvIENvZGUgaW5jbHVkZXM6XG5cbi0gSlNPTiBJbnRlbGxpc2Vuc2UgZm9yIGBob3N0Lmpzb25gLCBgZnVuY3Rpb24uanNvbmAgYW5kIGBwcm94aWVzLmpzb25gXG4tIFNuaXBwZXRzIGZvciBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0IGZ1bmN0aW9uc1xuXG4+IFdlJ2xsIGFkZCBvdGhlciBmZWF0dXJlcyBpbiBmdXR1cmUgdmVyc2lvbnNcblxuYGBgamF2YXNjcmlwdFxuLy8gSmF2YVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgSmF2YVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuYGBgamF2YXNjcmlwdFxuLy8gVHlwZVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgVHlwZVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuIyMjIEpTT04gU2NoZW1hIEludGVsbGlzZW5zZVxuIVtKU09OIFNjaGVtYV0oaW1hZ2VzL2pzb24tc2NoZW1hLWZ1bmN0aW9uLmdpZilcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChtYWNPUykgdG8gYWN0aXZhdGUgaW50ZWxsaXNlbnNlIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjExLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChtYWNPUylcbjQuIFNlbGVjdCBgSW5zdGFsbCBFeHRlbnNpb25gXG41LiBDaG9vc2UgdGhlIGV4dGVuc2lvblxuNi4gUmVsb2FkIFZpc3VhbCBTdHVkaW8gQ29kZVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiN2U5Y2EyNzAtN2YwOS00ZTFiLTgxYTQtMWE1NDRmZjg2YjRlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGcwTURrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLW5vZGUtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NDNmYTEwYjcxZjBlNGM1NTMwNmIzNDRkOTA4NTU1ZWE4M2NiYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkZjUxYTJhMC1hYmFjLTQyMmUtOTNlZS0wZGVlYWFjZDIzNmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UVTRNVE0yTVRVPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODkxOWY0ZGI2MzI3MmEyNzI0YmM2YTNjNzUyMTNmNDY1OWQ2ZWQ5OSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qY3dOemsxTWpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlZhbHVlVGFza1JlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk2MGEyZTQwZjJmZTFmZTFjZDYxM2MxNDJlODVlYjZmMGU5OTczYWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFZhbHVlVGFza1JlcHJvXG5SZXByb2R1Y3Rpb24gZm9yIHRoZSBmb2xsb3dpbmcgVmFsdWVUYXNrIGVycm9yOlxuXG4+L1VzZXJzL2JyYW1pbi9Qcm9qZWN0cy9WYWx1ZVRhc2tSZXByby9pT1MvUGF0aF9pT1MuY3MoMjYsMjYpOiBFcnJvciBDUzAwMTI6IFRoZSB0eXBlICdWYWx1ZVRhc2s8PicgaXMgZGVmaW5lZCBpbiBhbiBhc3NlbWJseSB0aGF0IGlzIG5vdCByZWZlcmVuY2VkLiBZb3UgbXVzdCBhZGQgYSByZWZlcmVuY2UgdG8gYXNzZW1ibHkgJ1N5c3RlbS5UaHJlYWRpbmcuVGFza3MuRXh0ZW5zaW9ucywgVmVyc2lvbj00LjEuMS4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWNjN2IxM2ZmY2QyZGRkNTEnLiAoQ1MwMDEyKSAoVmFsdWVUYXNrUmVwcm8uaU9TKVxuXG4jIyBTdGVwcyB0byBSZXByb2R1Y2VcbjEuIEluc3RhbGwgdGhlIGN1cnJlbnQgVmlzdWFsIFN0dWRpbyBNYWMgQmV0YSBDaGFubmVsIHJlbGVhc2UsIGFzIG9mIDAzNDAgMjggTWFyY2ggMjAxOCAoRW52aXJvbm1lbnQgSW5mb3JtYXRpb24gYmVsb3cpXG4yLiBPcGVuIFZhbHVlVGFza1JlcHJvLnNsbiBpbiBWaXN1YWwgU3R1ZGlvIE1hYyAoQmV0YSBDaGFubmVsKVxuMy4gQnVpbGQgVmFsdWVUYXNrUmVwcm8uaU9TIG9yIFZhbHVlVGFza1JlcHJvLkRyb2lkXG5cbiMjIEF2YWlsYWJsZSBXb3JrYXJvdW5kXG4xLiBJbnN0YWxsIHRoZSBjdXJyZW50IFZpc3VhbCBTdHVkaW8gTWFjIFN0YWJsZSBDaGFubmVsIHJlbGVhc2UsIGFzIG9mIDAzNDAgMjggTWFyY2ggMjAxOCBcbjIuIE9wZW4gVmFsdWVUYXNrUmVwcm8uc2xuIGluIFZpc3VhbCBTdHVkaW8gTWFjIChTdGFibGUgQ2hhbm5lbClcbjMuIEluc3RhbGwgW1N5c3RlbS5UaHJlYWRpbmcuVGFza3MuRXh0ZW5zaW9ucyBOdUdldCBQYWNrYWdlXShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvU3lzdGVtLlRocmVhZGluZy5UYXNrcy5FeHRlbnNpb25zLykgaW50byB0aGUgVmFsdWVUYXNrUmVwcm8uaU9TIHByb2plY3RcbjQuIEluc3RhbGwgW1N5c3RlbS5UaHJlYWRpbmcuVGFza3MuRXh0ZW5zaW9ucyBOdUdldCBQYWNrYWdlXShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvU3lzdGVtLlRocmVhZGluZy5UYXNrcy5FeHRlbnNpb25zLykgaW50byB0aGUgVmFsdWVUYXNrUmVwcm8uRHJvaWQgcHJvamVjdFxuNS4gQnVpbGQgVmFsdWVUYXNrUmVwcm8uaU9TIG9yIFZhbHVlVGFza1JlcHJvLkRyb2lkXG5cbiMjIEVudmlyb25tZW50XG5cbj09PSBWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UgMjAxNyBmb3IgTWFjIChQcmV2aWV3KSA9PT1cblxuVmVyc2lvbiA3LjUgUHJldmlldyAoNy41IGJ1aWxkIDkzMylcbkluc3RhbGxhdGlvbiBVVUlEOiA5N2Y5M2I3NC1iZDg0LTQxNjEtODZmYi1lOGM0NzRkMWEyNzNcblJ1bnRpbWU6XG4tXHRNb25vIDUuMTAuMC4xNzkgKDIwMTctMTIvZGFjNjA3NzU2MTYpICg2NC1iaXQpXG4tXHRHVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG4tXHRYYW1hcmluLk1hYyA0LjQuMC4zNiAobWFzdGVyIC8gMGM3YzQ5YTYpXG5cbi1cdFBhY2thZ2UgdmVyc2lvbjogNTEwMDAwMTc5XG5cbj09PSBOdUdldCA9PT1cblxuVmVyc2lvbjogNC4zLjEuNDQ0NVxuXG49PT0gLk5FVCBDb3JlID09PVxuXG5SdW50aW1lOiAvdXNyL2xvY2FsL3NoYXJlL2RvdG5ldC9kb3RuZXRcblJ1bnRpbWUgVmVyc2lvbnM6XG5cdDIuMC42XG5cdDIuMC41XG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8yLjEuMTAxL1Nka3NcblNESyBWZXJzaW9uczpcblx0Mi4xLjEwMVxuXHQyLjEuNFxuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzUuMTAuMC9saWIvbW9uby9tc2J1aWxkLzE1LjAvYmluL1Nka3NcblxuPT09IFhhbWFyaW4uUHJvZmlsZXIgPT09XG5cblZlcnNpb246IDEuNi4yXG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIFByb2ZpbGVyLmFwcC9Db250ZW50cy9NYWNPUy9YYW1hcmluIFByb2ZpbGVyXG5cbj09PSBBcHBsZSBEZXZlbG9wZXIgVG9vbHMgPT09XG5cblhjb2RlIDkuMiAoMTM3NzIpXG5CdWlsZCA5QzQwYlxuXG49PT0gWGFtYXJpbi5NYWMgPT09XG5cblZlcnNpb246IDQuNC4wLjMxIChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTEuMTAuMC4zMiAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogNGQ4YzRlMzJcbkJyYW5jaDogZDE1LTdcbkJ1aWxkIGRhdGU6IDIwMTgtMDMtMDcgMTg6Mzk6NDYtMDUwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiA4LjMuMC41IChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5BbmRyb2lkIFNESzogL1VzZXJzL2JyYW1pbi9MaWJyYXJ5L0FuZHJvaWQvc2RrXG5cdFN1cHBvcnRlZCBBbmRyb2lkIHZlcnNpb25zOlxuXHRcdDcuMSAoQVBJIGxldmVsIDI1KVxuXHRcdDguMCAoQVBJIGxldmVsIDI2KVxuXHRcdDguMSAoQVBJIGxldmVsIDI3KVxuXG5TREsgVG9vbHMgVmVyc2lvbjogMjYuMS4xXG5TREsgUGxhdGZvcm0gVG9vbHMgVmVyc2lvbjogMjcuMC4xXG5TREsgQnVpbGQgVG9vbHMgVmVyc2lvbjogMjYuMC4yXG5cbkphdmEgU0RLOiAvdXNyXG5qYXZhIHZlcnNpb24gXCIxLjguMF8xMzFcIlxuSmF2YShUTSkgU0UgUnVudGltZSBFbnZpcm9ubWVudCAoYnVpbGQgMS44LjBfMTMxLWIxMSlcbkphdmEgSG90U3BvdChUTSkgNjQtQml0IFNlcnZlciBWTSAoYnVpbGQgMjUuMTMxLWIxMSwgbWl4ZWQgbW9kZSlcblxuQW5kcm9pZCBEZXNpZ25lciBFUEwgY29kZSBhdmFpbGFibGUgaGVyZTpcbmh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL0FuZHJvaWREZXNpZ25lci5FUExcblxuPT09IFhhbWFyaW4gSW5zcGVjdG9yID09PVxuXG5WZXJzaW9uOiAxLjQuMFxuSGFzaDogYjNmOTJmOVxuQnJhbmNoOiBtYXN0ZXJcbkJ1aWxkIGRhdGU6IEZyaSwgMTkgSmFuIDIwMTggMjI6MDA6MzQgR01UXG5DbGllbnQgY29tcGF0aWJpbGl0eTogMVxuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDcwNTAwMDkzM1xuR2l0IHJldmlzaW9uOiBhY2UxZTEwN2M4ODQ3N2RiMWFiZTVlODA3ODA5NjUwZjA2NDExMmM0XG5CdWlsZCBkYXRlOiAyMDE4LTAzLTE5IDE3OjQyOjQxLTA0XG5YYW1hcmluIGFkZGluczogYTAxMjYzYmRiYmEyNTg5YjFmNmU0MmVmMDg1YmQzMWY2ZTNiZmNmNFxuQnVpbGQgbGFuZTogbW9ub2RldmVsb3AtbGlvbi1kMTUtN1xuXG49PT0gT3BlcmF0aW5nIFN5c3RlbSA9PT1cblxuTWFjIE9TIFggMTAuMTMuM1xuRGFyd2luIDE3LjQuMCBEYXJ3aW4gS2VybmVsIFZlcnNpb24gMTcuNC4wXG4gICAgU3VuIERlYyAxNyAwOToxOTo1NCBQU1QgMjAxN1xuICAgIHJvb3Q6eG51LTQ1NzAuNDEuMn4xL1JFTEVBU0VfWDg2XzY0IHg4Nl82NFxuXG49PT0gRW5hYmxlZCB1c2VyIGluc3RhbGxlZCBhZGRpbnMgPT09XG5cbk1GcmFjdG9yIDMuMDQuMTRcbkFkZGluTWFrZXIgMS40LjJcbk51R2V0IFBhY2thZ2UgTWFuYWdlbWVudCBFeHRlbnNpb25zIDAuMTIuNlxuVGVtcGxhdGUgQ3JlYXRvciAwLjJcbldha2FUaW1lIDMuMC4yXG5SZWR0aCdzIEFkZGlucyAxLjAuOVxuSW50ZXJuZXQgb2YgVGhpbmdzIChJb1QpIGRldmVsb3BtZW50IChQcmV2aWV3KSA3LjFcblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjJjOTUxNWE3LWI1NDAtNDc0Ny04NTFkLWFiMDM3NGVmZWFkZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56QXdORE00TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NmJmOWE1OTkwYTI4NGYzOWZhOTI3NTA4YjZjYWZhMzQ3MGY3YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBPbmUgV2l0aCBBbmd1bGFyXG5cbkZpbmQgdGhlIFtBenVyZSBGdW5jdGlvbnMgU2VydmVybGVzcyBBUEkgZm9yIHRoaXMgYXBwIGxvY2F0ZWQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXItYXBpKS5cblxuYGBgYmFzaFxuZ2l0IGNsb25lIGdpdEBnaXRodWIuY29tOmpvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXIuZ2l0IG9uZVxuY2Qgb25lXG5ucG0gaW5zdGFsbFxuYGBgXG5cbkRpc2NhcmQgdGhlIGAuZ2l0YCBmb2xkZXJcblxuYGBgYmFzaFxucm0gLXJmIC5naXQgICMgT1MvWCAoYmFzaClcbnJkIC5naXQgL1MvUSAjIHdpbmRvd3NcbmBgYFxuXG4jIyBEb2NrZXJcblxuLSBJbnN0YWxsIGFuZCBydW4gW0RvY2tlcl0oaHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9jb21tdW5pdHktZWRpdGlvbilcblxuIyMjIERvY2tlciBDb21wb3NlXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIHVwIC1kIC0tYnVpbGRcbm9wZW4gaHR0cDovL2xvY2FsaG9zdDo0MjAwXG5gYGBcblxuIyMjIERvY2tlciBDb21wb3NlIHdpdGggRGVidWdnaW5nXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIC1mIGRvY2tlci1jb21wb3NlLmRlYnVnLnltbCB1cCAtZCAtLWJ1aWxkXG5vcGVuIGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMFxuYGBgXG5cbk9wZW4gVlMgQ29kZSwgbGF1bmNoIHRoZSBgRG9ja2VyOiBBdHRhY2ggdG8gTm9kZWAgZGVidWdnaW5nIHByb2ZpbGVcblxuIyMjIERvY2tlciBSdW5cblxuYGBgYmFzaFxuZG9ja2VySW1hZ2U9b25lLXdpdGgtYW5ndWxhclxucG9ydD00MjAwXG5cbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAkcG9ydDozMDAwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlNzNmNWNjMi0yNmI1LTRkNmItOTY3Ni0xYWYyMjM4MmEyMTUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UWXhNemMxTWpVPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLXZ1ZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwOTRkOTEwNmYxMWRhYWFkYWNlNWMzZmI3NmY2MDcwMDA0OGZlNGNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGY1MWEyYTAtYWJhYy00MjJlLTkzZWUtMGRlZWFhY2QyMzZmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qYzBOVFkwTkRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkR5bmFtaWNTdGFja0xheW91dFNpemUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzdkNDI4YWQxYTM2MzIwYWMzM2MzNmFmMGYyYjQ0NTBkYjJhZjYxMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIER5bmFtaWNTdGFja0xheW91dFNpemVcbkEgc2FtcGxlIGFwcCB3cml0dGVuIGluIFhhbWFyaW4uRm9ybXMgdGhhdCBzaG93cyBob3cgdG8gZHluYW1pY2FsbHkgY2hhbmdlIHRoZSBoZWlnaHQgb2YgYSBYYW1hcmluLkZvcm1zLlN0YWNrTGF5b3V0XG5cbiFbXShodHRwczovL2dpdGh1Yi5jb20vYnJtaW5uaWNrL1ZpZGVvcy9ibG9iL21hc3Rlci9EeW5hbWljU3RhY2tMYXlvdXRTaXplL1Jlc2l6ZVN0YWNrTGF5b3V0LmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0MGNhZjI0Yi0yZDdmLTRhODItYWVkMC0xYWE1NzA1MzRkNmUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQTVOVFV3TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWY0NjE1ZDNmNTlmNTI0ZjE5ZmY0OTU4ZTcxMjIwZGM2YWFmNGI3YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmNTFhMmEwLWFiYWMtNDIyZS05M2VlLTBkZWVhYWNkMjM2ZiIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJvbmUtd2l0aC1hbmd1bGFyLWFwaSIsCiAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvP1dULm1jX2lkPW9uZXdpdGhhbmd1bGFyYXBpLWdpdGh1Yi1qb3BhcGEpXG5cbltUcnkgQXp1cmUgRnVuY3Rpb25zIFBsYXlncm91bmRdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS90cnkvYXBwLXNlcnZpY2UvZnVuY3Rpb25zLz9XVC5tY19pZD1vbmV3aXRoYW5ndWxhcmFwaS1naXRodWItam9wYXBhKVxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjUwNDNlNWNkLTgwMWMtNDdkYi04NGIwLTJkNzgyNzE1OWY5MyIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJ2c2NvZGUtYXp1cmUtZnVuY3Rpb25zLXRvb2xzIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucyZXVC5tY19pZD12c2NvZGVhenVyZWZ1bmN0aW9uc3Rvb2xzLWdpdGh1Yi1qb3BhcGEpIGluc3RlYWQuXG5cbiMjIEZlYXR1cmVzXG5UaGlzIGV4dGVuc2lvbiBmb3IgVmlzdWFsIFN0dWRpbyBDb2RlIGluY2x1ZGVzOlxuXG4tIEpTT04gSW50ZWxsaXNlbnNlIGZvciBgaG9zdC5qc29uYCwgYGZ1bmN0aW9uLmpzb25gIGFuZCBgcHJveGllcy5qc29uYFxuLSBTbmlwcGV0cyBmb3IgSmF2YVNjcmlwdCBhbmQgVHlwZVNjcmlwdCBmdW5jdGlvbnNcblxuPiBXZSdsbCBhZGQgb3RoZXIgZmVhdHVyZXMgaW4gZnV0dXJlIHZlcnNpb25zXG5cbmBgYGphdmFzY3JpcHRcbi8vIEphdmFTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIEphdmFTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbmBgYGphdmFzY3JpcHRcbi8vIFR5cGVTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIFR5cGVTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbiMjIyBKU09OIFNjaGVtYSBJbnRlbGxpc2Vuc2VcbiFbSlNPTiBTY2hlbWFdKGltYWdlcy9qc29uLXNjaGVtYS1mdW5jdGlvbi5naWYpXG5cbkFsdGVybmF0aXZlbHksIHByZXNzIGBDdHJsYCtgU3BhY2VgIChXaW5kb3dzLCBMaW51eCkgb3IgYENtZGArYFNwYWNlYCAobWFjT1MpIHRvIGFjdGl2YXRlIGludGVsbGlzZW5zZSBmcm9tIHdpdGhpbiB0aGUgZWRpdG9yLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuMS4gSW5zdGFsbCBWaXN1YWwgU3R1ZGlvIENvZGUgMS4xMS4wIG9yIGhpZ2hlclxuMi4gTGF1bmNoIENvZGVcbjMuIEZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBgQ3RybGAtYFNoaWZ0YC1gUGAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYC1gU2hpZnRgLWBQYCAobWFjT1MpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb25cbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4YTg3MzNhMS1kZmIyLTQwZDYtOTZmMS1iMjYyMDA0NDMxN2IiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3Rhci13YXJzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaSlcblxuTG9naW5cblxuYGBgYmFzaFxuYXogbG9naW5cbmBgYFxuXG5DcmVhdGUgYSBwbGFjZSB0byBsb2dpY2FsbHV5IHN0b3JlIGV2ZXJ5dGhpbmcgKHJlc291cmNlIGdyb3VwKVxuXG5gYGBiYXNoXG5heiBncm91cCBjcmVhdGUgLW4gUGFwYVN0YXJXYXJzQXBpR3JvdXAgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBzdG9yYWdlIHJlc291cmNlIGZvciB0aGUgRnVuY3Rpb24gQXBwXG5cbmBgYGJhc2hcbmF6IHN0b3JhZ2UgYWNjb3VudCBjcmVhdGUgLW4gcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtZyBQYXBhU3RhcldhcnNBcGlHcm91cCAtLXNrdSBTdGFuZGFyZF9MUlMgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogZnVuY3Rpb25hcHAgY3JlYXRlIC1uIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC1zIHBhcGFzdGFyd2Fyc2FwaXN0b3JhZ2UgLWMgZWFzdHVzXG5gYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM4MDVjYzY2LTBhNmYtNGRkYS05NGYxLTJkNjY1MWRjNDcxNyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBQUk9KRUNUIE5BTUVcblxuLi4uXG5cbiMjIFRhYmxlIE9mIENvbnRlbnRzXG5cbi0gW0ZlYXR1cmVzXSgjZmVhdHVyZXMpXG4tIFtRdWlja1N0YXJ0XSgjcXVpY2tzdGFydClcbi0gW1JlcXVpcmVtZW50c10oI3JlcXVpcmVtZW50cylcbi0gW0luc3RhbGxhdGlvbl0oI2luc3RhbGxhdGlvbilcbi0gW0RlbW9dKCNkZW1vKVxuXG4jIyBGZWF0dXJlc1xuXG5UaGlzIHByb2plY3QgZnJhbWV3b3JrIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXM6XG5cbiMjIFF1aWNrU3RhcnRcblxuMS5cbjIuXG4zLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuKGlkZWFsbHkgdmVyeSBzaG9ydCwgaWYgYW55KVxuXG4tXG5cbiMjIEluc3RhbGxhdGlvblxuXG4oaWRlYWxseSB2ZXJ5IHNob3J0KVxuXG4tXG5cbiMjIERlbW9cblxuQSBkZW1vIGFwcCBpcyBpbmNsdWRlZCB0byBzaG93IGhvdyB0byB1c2UgdGhlIHByb2plY3QuXG5cblRvIHJ1biB0aGUgZGVtbywgZm9sbG93IHRoZXNlIHN0ZXBzOlxuXG4jIyBSZXNvdXJjZXNcblxuLVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDcwYWJhNDUtODlkZi00MGIxLTlhYWMtYzQwNGZjMTMwMjAwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEV4cGlyZVxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS4wLjEuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5CZWZvcmUgcnVubmluZyB0aGUgdGVzdHMgbWFrZSBzdXJlIHlvdSBhcmUgc2VydmluZyB0aGUgYXBwIHZpYSBgbmcgc2VydmVgLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNjQyN2Y2Ny0wZjM0LTQ0ZTMtYjQ1Yy1jOWI5NDViZmVjZDUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5ieSBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vam9obl9wYXBhKVxuXG5Zb3UgY2FuIFt3YXRjaCBtZSBidWlsZCB0aGUgYXBwIGFzIHBhcnQgb2YgbXkgc2VyaWVzIGhlcmVdKGh0dHBzOi8vam9obnBhcGEubmV0L2FuZ3VsYXItY29zbW9zZGItMS8pXG5cbllvdSBjYW4gW3ZpZXcgYWxsIHZpZGVvcyB0b2dldGhlciBoZXJlXSgvVklERU9TLm1kKVxuXG5bTGVhcm4gbW9yZSBhYm91dCBkZXZlbG9waW5nIE5vZGUuanMgYXBwcyB3aXRoIEF6dXJlJ3MgY2xvdWQgc2VydmljZXMgaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbm9kZWpzL2F6dXJlKVxuXG4jIyBEb2NrZXJcblxuQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlckltYWdlPWFuZ3VsYXItY29zbW9zZGJcbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAzMDAwOjgwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIFJlcXVpcmVtZW50c1xuXG4xLiBJbnN0YWxsIHRoZSBBbmd1bGFyIENMSVxuXG4gICAgYGBgYmFzaFxuICAgIG5wbSBpbnN0YWxsIC1nIEBhbmd1bGFyL2NsaVxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBbQXp1cmUgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9jbGkvYXp1cmUvaW5zdGFsbC1henVyZS1jbGkpXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnlcblxuICAgIGBgYGJhc2hcbiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIuZ2l0XG4gICAgY2QgYW5ndWxhci1jb3Ntb3NkYlxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBucG0gcGFja2FnZXNcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaVxuICAgIGBgYFxuXG4xLiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgZXhhbXBsZS1lbnZpcm9ubWVudC5qc2AgZmlsZSB0byBgZW52aXJvbm1lbnQuanNgIGluIHRoZSBgc2VydmVyL2Vudi9gIGZvbGRlciBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUga2V5LCBhbmQgcG9ydCB3aXRoIHlvdXIgc3BlY2lmaWMgY29uZmlndXJhdGlvbi5cblxuICAgIGBgYGphdmFzY3JpcHRcbiAgICAvLyBzZXJ2ZXIvZW52L2Vudmlyb25tZW50LmpzXG4gICAgY29uc3QgY29zbW9zUG9ydCA9IDEyMzQ7IC8vIHJlcGxhY2Ugd2l0aCB5b3VyIHBvcnRcbiAgICBjb25zdCBkYk5hbWUgPSAneW91ci1jb3Ntb3MtZGItbmFtZS1nb2VzLWhlcmUnO1xuICAgIGNvbnN0IGtleSA9ICd5b3VyLWtleS1nb2VzLWhlcmUnO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBjb3Ntb3NQb3J0LFxuICAgICAgZGJOYW1lLFxuICAgICAga2V5XG4gICAgfTtcbiAgICBgYGBcblxuIyMgUnVubmluZyB0aGUgYXBwXG5cbjEuIEJ1aWxkIHRoZSBBbmd1bGFyIGFwcFxuXG4gICAgYGBgYmFzaFxuICAgIG5nIGJ1aWxkXG4gICAgYGBgXG5cbjEuIExhdW5jaCB0aGUgc2VydmVyXG5cbiAgICBgYGBiYXNoXG4gICAgbm9kZSBzcmMvc2VydmVyL2luZGV4LmpzXG4gICAgYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gaHR0cDovL2xvY2FsaG9zdDozMDAwXG5cbiMjIFByb2JsZW1zIG9yIFN1Z2dlc3Rpb25zXG5cbltPcGVuIGFuIGlzc3VlIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyLWNvc21vcy9pc3N1ZXMpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwZTBmYTIzMi1lZDA1LTQ1NzQtYjE3Mi0yYjFkZjQ5NmQ2ZWIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBWUyBDb2RlIEV4dGVuc2lvbiBmb3IgUFdBIFRvb2xpbmdcblZTIENvZGUgRXh0ZW5zaW9uIGZvciBQV0EgVG9vbHNcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHNuaXBwZXRzIGFuZCBKU09OIHNjaGVtYSBmb3IgYSBgbWFuaWZlc3QuanNvbmAgZm9yIGNyZWF0aW5nIFByb2dyZXNzaXZlIFdlYiBBcHBzIChQV0EpLlxuXG4qKlRISVMgSVMgQU4gQUxQSEEgVkVSU0lPTioqXG5cbiFbVXNlIEV4dGVuc2lvbl0oaW1hZ2VzL2luamVjdC1wcmVjYWNoZS5naWYpXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzXG5cbiMjIFVzYWdlXG5UeXBlIHBhcnQgb2YgYSBzbmlwcGV0LCBwcmVzcyBgZW50ZXJgLCBhbmQgdGhlIHNuaXBwZXQgdW5mb2xkcy5cblxuIyMjIEphdmFTY3JpcHQgLyBUeXBlU2NyaXB0IFNuaXBwZXRzXG5gYGBqYXZhc2NyaXB0XG5wd2EtY3VzdG9tLXNlcnZpY2Utd29ya2VyICAgICAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB3b3JrZXIgZmlsZSB3aGljaCBjYW4gYmUgZXh0ZW5kZWRcbnB3YS1yZWdpc3RlciAgICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiB0aGF0IHJlZ2lzdGVycyB0aGUgc2VydmljZSB3b3JrZXJcbmBgYFxuXG4jIyMgSmF2YVNjcmlwdCBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxuLy8gSGVscGZ1bCBmb3IgYnVpbGQgcHJvY2Vzc2VzIHRoYXQgZ2VuZXJhdGUgc2VydmljZSB3b3JrZXIgY29kZVxucHdhLWluamVjdC1wcmVjYWNoZSAgICAgICAgICAgICAgIC8vIGluamVjdCBwcmVjYWNoZSBsaXN0IGludG8gc2VydmljZSB3b3JrZXJcbnB3YS1nZW5lcmF0ZS1zZXJ2aWNlLXdvcmtlciAgICAgICAvLyBnZW5lcmF0ZSBhIHNlcnZpY2Ugd29ya2VyIHdpdGggYSBwcmVjYWNoZSBtYW5pZmVzdFxuXG4vLyBFdmVudCBsaXN0ZW5lcnNcbnB3YS1ldmVudC1wdXNoICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgcHVzaFxucHdhLWV2ZW50LXN5bmMgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBzeW5jXG5wd2EtZXZlbnQtbm90aWZpY2F0aW9uY2xpY2sgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIG5vdGlmaWNhdGlvbmNsaWNrXG5wd2EtZXZlbnQtcHVzaHN1YnNjcmlwdGlvbmNoYW5nZSAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIHB1c2hzdWJzY3JpcHRpb25jaGFuZ2VcbnB3YS1ldmVudC1sb2FkICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgbG9hZFxucHdhLWV2ZW50LWFjdGl2YXRlICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBhY3RpdmF0ZVxucHdhLWV2ZW50LWluc3RhbGwgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBpbnN0YWxsXG5wd2EtZXZlbnQtZmV0Y2ggICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIGZldGNoXG5gYGBcblxuIyMjIEhUTUwgU25pcHBldHNcbmBgYGphdmFzY3JpcHRcbnB3YS1tYW5pZmVzdC1saW5rICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGhlIGxpbmsgdG8gdGhlIG1hbmlmZXN0Lmpzb25cbnB3YS1hcHBsZS1tb2JpbGUtd2ViLWNhcGFibGUgICAgICAvLyBhZGQgdGhlIG1ldGEgdGFnIGZvciBhcHBsZSBtb2JpbGUgd2ViIGNhcGFibGVcbmBgYFxuXG4jIyMgSlNPTiBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxucHdhLW1hbmlmZXN0ICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgY29udGVudHMgb2YgYG1hbmlmZXN0Lmpzb25gXG5gYGBcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChPU1gpIHRvIGFjdGl2YXRlIHNuaXBwZXRzIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjEwLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChPU1gpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb24gYFBXQS1Ub29sc2BcbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcblxuIyMgVHJ5IGl0IE91dFxuXG5MZXQncyB0YWtlIGEgUFdBIGZvciBhIHNwaW4uIFVzaW5nIHRoZSBBbmd1bGFyIENMSSwgbGV0J3MgZ2VuZXJhdGUgYSBuZXcgYXBwIGFuZCBhZGQgUFdBIGZlYXR1cmVzLlxuXG5CZWZvcmUgd2UgYmVnaW4sIGluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJIGFuZCBsaXRlLXNlcnZlciwgaWYgeW91IGhhdmVuJ3QgYWxyZWFkeSBkb25lIHNvLCBieSBydW5uaW5nIGBucG0gaSBAYW5ndWxhci9jbGkgbGl0ZS1zZXJ2ZXIgLWdgXG5cbjEuIENyZWF0ZSBhbiBBbmd1bGFyIGFwcCB3aXRoIGBuZyBuZXcgbXktYXBwIC0tcm91dGluZ2AgYW5kIG9wZW4gdGhlIGFwcCBpbiBWUyBDb2RlXG4xLiBDcmVhdGUgYHNyYy9tYW5pZmVzdC5qc29uYFxuMS4gVXNlIHRoZSBgcHdhLW1hbmlmZXN0YCBzbmlwcGV0XG4xLiBPcGVuIGBzcmMvaW5kZXguaHRtbGAgYW5kIHVzZSB0aGUgYHB3YS1tYW5pZmVzdC1saW5rYCBzbmlwcGV0IChpbiB0aGUgPGhlYWQ+PC9oZWFkPiBlbGVtZW50KVxuMS4gVXNlIHRoZSBwd2EtYXBwbGUtbW9iaWxlLXdlYi1jYXBhYmxlIHNuaXBwZXQgKGluIHRoZSA8aGVhZD48L2hlYWQ+IGVsZW1lbnQpXG4xLiBDcmVhdGUgYGdlbmVyYXRlLXN3LmpzYFxuMS4gUnVuIGBjZCBteS1hcHBgIGFuZCB0aGVuIGBucG0gaSB3b3JrYm94LWJ1aWxkYCAoYWRkIC0tc2F2ZSBpZiB5b3UncmUgdXNpbmcgbnBtIDwgNS54KVxuMS4gVXNlIHRoZSBwd2EtZ2VuZXJhdGUtc2VydmljZS13b3JrZXIgaW4gYGdlbmVyYXRlLXN3LmpzYFxuMS4gQWRkIFwibWFuaWZlc3QuanNvblwiIHRvIHRoZSBgYXBwc1swXS5hc3NldHNgIGFycmF5IGluIGAuYW5ndWxhci1jbGkuanNvbmBcbjEuIE9wZW4gYHNyYy9hcHAvbWFpbi50c2AgYW5kIHJ1biBgcHdhLXJlZ2lzdGVyYCBhdCB0aGUgYm90dG9tXG4xLiBDYWxsIGAudGhlbigoKSA9PiByZWdpc3RlclNlcnZpY2VXb3JrZXIoKSk7YCBhZnRlciBib290c3RyYXBwaW5nXG4xLiBSdW4gYG5nIGJ1aWxkIC0tcHJvZCAmJiBub2RlIGdlbmVyYXRlLXN3LmpzICYmIGNkIGRpc3QgJiYgbGl0ZS1zZXJ2ZXJgXG5cbioqTm93IHRlc3QgaXQhKipcblxuWW91ciBhcHAgc2hvdWxkIGJlIHJ1bm5pbmcgaW4gdGhlIGJyb3dzZXIuIE9wZW4gdGhlIGRldmVsb3BlciB0b29scywgZ28gdG8gdGhlIGBBcHBsaWNhdGlvbmAgdGFiLCBhbmQgc2VsZWN0IGBTZXJ2aWNlIFdvcmtlcnNgLiBJbnNwZWN0IHRoZSBzZXJ2aWNlIHdvcmtlciwgYW5kIHRyeSB0byBnbyBvZmZsaW5lIGFuZCByZWZyZXNoLlxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5MzYzMjNjZS0xODM3LTQzMjctYTBiZS0wNmM3YTg3Zjk4YmYiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJzdGFyLXdhcnMtYXBpIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaT9XVC5tY19pZD1zdGFyd2Fyc2FwaS1naXRodWItam9wYXBhKVxuXG5Mb2dpblxuXG5gYGBiYXNoXG5heiBsb2dpblxuYGBgXG5cbkNyZWF0ZSBhIHBsYWNlIHRvIGxvZ2ljYWxsdXkgc3RvcmUgZXZlcnl0aGluZyAocmVzb3VyY2UgZ3JvdXApXG5cbmBgYGJhc2hcbmF6IGdyb3VwIGNyZWF0ZSAtbiBQYXBhU3RhcldhcnNBcGlHcm91cCAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogc3RvcmFnZSBhY2NvdW50IGNyZWF0ZSAtbiBwYXBhc3RhcndhcnNhcGlzdG9yYWdlIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC0tc2t1IFN0YW5kYXJkX0xSUyAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIEZ1bmN0aW9uIEFwcFxuXG5gYGBiYXNoXG5heiBmdW5jdGlvbmFwcCBjcmVhdGUgLW4gLWcgUGFwYVN0YXJXYXJzQXBpR3JvdXAgLXMgcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtYyBlYXN0dXNcbmBgYFxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ3ZmQ3ZmY1LWIxZjUtNDFlNi1iNzczLWUxMjE4YTM3ZGU3YSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UUTFNemsyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWdncmVnYXRvci1hcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzAxOTI1OGVlMmIxZWRhZmY4YjNhOWRlNzgzMmE1OGU4MDcxNmIyNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgYWdncmVnYXRvciBhcHBcblxuYGBgYmFzaFxuYXogbG9naW5cbmBgYFxuXG5DcmVhdGUgYSBwbGFjZSB0byBsb2dpY2FsbHkgc3RvcmUgZXZlcnl0aGluZyAocmVzb3VyY2UgZ3JvdXApXG5cbmBgYGJhc2hcbmF6IGdyb3VwIGNyZWF0ZSAtbiBQYXBhU3RhcldhcnNBcGlHcm91cCAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogc3RvcmFnZSBhY2NvdW50IGNyZWF0ZSAtbiBwYXBhc3RhcndhcnNhcGlzdG9yYWdlIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC0tc2t1IFN0YW5kYXJkX0xSUyAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIEZ1bmN0aW9uIEFwcFxuXG5gYGBiYXNoXG5heiBmdW5jdGlvbmFwcCBjcmVhdGUgLW4gLWcgUGFwYVN0YXJXYXJzQXBpR3JvdXAgLXMgcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtYyBlYXN0dXNcbmBgYFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDI3NDE5YTgtMDYzMy00ODBiLWI2NzMtNGFhZGQxNGFmZjVhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTNOakUwTWpNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZG9ja2VyLWFuZ3VsYXItY2xpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhNTU2Y2UyY2I4MmY0MTY2NWVhNzg3ZGJkYTc2OGIxYjIyY2QwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIERvY2tlcmZpbGUgd2l0aCBBbmd1bGFyIENMSVxuXG5Ob2RlIDguMTIgKyBBbmd1bGFyIENMSSA2LjIuMCtcblxuRmluZCBbdGhlIGltYWdlIGhlcmVdKGh0dHBzOi8vaHViLmRvY2tlci5jb20vci9qb2hucGFwYS9hbmd1bGFyLWNsaS8pXG5cblB1bGxpbmcgdGhlIGltYWdlXG5cbmBgYGJhc2hcbmRvY2tlciBwdWxsIGpvaG5wYXBhL2FuZ3VsYXItY2xpXG5gYGBcblxuVXNpbmcgdGhlIGltYWdlIGluIGEgYERvY2tlcmZpbGVgXG5cbmBgYGJhc2hcbkZST00gam9obnBhcGEvYW5ndWxhci1jbGlcbmBgYFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZTc4NDUzMjYtZjk1OS00NDJmLTkxNmUtZjNkNGZhMjZlOGJhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFdpbnRlciBpcyBDb21pbmdcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHRoZW1lcyB0aXRsZWQgXCJXaW50ZXIgaXMgQ29taW5nXCIuIFRoZXJlIGFyZSBkYXJrLCBkYXJrIHdpdGggbm8gaXRhbGljcywgYW5kIGxpZ2h0IHRoZW1lcy5cblxuPiBJIHBlcnNvbmFsbHkgdXNlIHRoZSBkYXJrIHRoZW1lcyBmb3IgbW9zdCBvY2Nhc2lvbnMsIGJ1dCBmaW5kIHRoZSBsaWdodCB0aGVtZSBnb29kIG9uIHNvbWUgZGltbWVyIHByb2plY3RvcnMgd2hlbiBJIHByZXNlbnQuXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzLlxuXG5UaGUgdGhlbWVzIGFsc28gc3VwcG9ydCBhbiBpdGFsaWNpemVkIHZlcnNpb24sIHdpdGggZm9udHMgdGhhdCBzdXBwb3J0cyBjdXJzaXZlIGl0YWxpY2l6ZWQgZm9udHMuXG5cbiMjIERhcmsgQmx1ZSBUaGVtZVxuXG4qKkRhcmsgQmx1ZSBIVE1MKipcbiFbSFRNTF0oaW1hZ2VzL2RhcmstYmx1ZS1odG1sLnBuZylcblxuKipEYXJrIEJsdWUgSmF2YVNjcmlwdCoqXG4hW0phdmFTY3JpcHRdKGltYWdlcy9kYXJrLWJsdWUtanMucG5nKVxuXG4qKkRhcmsgQmx1ZSBUeXBlU2NyaXB0KipcbiFbVHlwZVNjcmlwdF0oaW1hZ2VzL2RhcmstYmx1ZS10cy5wbmcpXG5cbioqRGFyayBCbHVlIFNDU1MqKlxuIVtTQ1NTXShpbWFnZXMvZGFyay1ibHVlLXNjc3MucG5nKVxuXG4jIyBEYXJrIEJsYWNrIFRoZW1lXG5cbioqRGFyayBCbGFjayBKYXZhU2NyaXB0KipcbiFbRGFyayBCbGFjayBUaGVtZV0oaW1hZ2VzL2RhcmstanMucG5nKVxuXG4jIyBMaWdodCBUaGVtZVxuXG4qKkxpZ2h0IEphdmFTY3JpcHQqKlxuIVtMaWdodCBUaGVtZV0oaW1hZ2VzL2xpZ2h0LWpzLnBuZylcblxuIyMgVXNhZ2VcblxuU2VsZWN0IHRoZSB0aGVtZSBhbmQgZ28hXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBPcGVuICoqRXh0ZW5zaW9ucyoqIHNpZGViYXIgcGFuZWwgaW4gVmlzdWFsIFN0dWRpbyBDb2RlLiBgVmlldyDihpIgRXh0ZW5zaW9uc2BcbjEuIFNlYXJjaCBmb3IgYFdpbnRlciBpcyBDb21pbmdgXG4xLiBDbGljayAqKkluc3RhbGwqKlxuMS4gQ2xpY2sgKipSZWxvYWQqKlxuMS4gRmlsZSA+IFByZWZlcmVuY2VzID4gQ29sb3IgVGhlbWUgPiAqKldpbnRlciBpcyBDb21pbmcgKERhcmsgQmx1ZSkqKlxuMS4gT3B0aW9uYWw6IFVzZSB0aGUgcmVjb21tZW5kZWQgc2V0dGluZ3MgYmVsb3cgZm9yIGJlc3QgZXhwZXJpZW5jZVxuXG4jIyBSZWNvbW1lbmRlZCBTZXR0aW5nc1xuXG5gYGBqc1xue1xuICBcImVkaXRvci5hdXRvSW5kZW50XCI6IFwiZnVsbFwiLFxuICBcImVkaXRvci5jdXJzb3JCbGlua2luZ1wiOiBcInNvbGlkXCIsXG4gIFwiZWRpdG9yLmN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uXCI6IHRydWUsXG4gIFwiZWRpdG9yLmN1cnNvclN0eWxlXCI6IFwibGluZVwiLFxuICBcImVkaXRvci5mb250U2l6ZVwiOiAxNixcbiAgXCJlZGl0b3IuZm9udEZhbWlseVwiOiBcIkRhbmsgTW9ubywgRmlyYSBDb2RlLCBJbmNvbnNvbGF0YVwiLFxuICBcImVkaXRvci5mb250TGlnYXR1cmVzXCI6IHRydWUsXG4gIFwiZWRpdG9yLmZvcm1hdE9uUGFzdGVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IuZm9ybWF0T25UeXBlXCI6IGZhbHNlLFxuICBcImVkaXRvci5mb3JtYXRPblNhdmVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IubGV0dGVyU3BhY2luZ1wiOiAwLjMsXG4gIFwiZWRpdG9yLmxpbmVIZWlnaHRcIjogMjUsXG4gIFwiZWRpdG9yLm1pbmltYXAuZW5hYmxlZFwiOiBmYWxzZSxcbiAgXCJlZGl0b3IubXVsdGlDdXJzb3JNb2RpZmllclwiOiBcImN0cmxDbWRcIixcbiAgXCJlZGl0b3Iuc3VnZ2VzdFNlbGVjdGlvblwiOiBcImZpcnN0XCIsXG4gIFwiZWRpdG9yLnRhYkNvbXBsZXRpb25cIjogXCJvblwiLFxuICBcImVkaXRvci50YWJTaXplXCI6IDIsXG4gIFwiZWRpdG9yLndvcmRXcmFwXCI6IFwib25cIixcbiAgXCJmaWxlcy5hdXRvU2F2ZVwiOiBcImFmdGVyRGVsYXlcIixcbiAgXCJmaWxlcy5hdXRvU2F2ZURlbGF5XCI6IDEwMDAsXG4gIFwic2VhcmNoLnNob3dMaW5lTnVtYmVyc1wiOiB0cnVlLFxuICBcIndvcmtiZW5jaC5pY29uVGhlbWVcIjogXCJtYXRlcmlhbC1pY29uLXRoZW1lXCIsXG4gIFwid29ya2JlbmNoLmNvbG9yQ3VzdG9taXphdGlvbnNcIjoge30sXG4gIFwid29ya2JlbmNoLmNvbG9yVGhlbWVcIjogXCJXaW50ZXIgaXMgQ29taW5nIChEYXJrIEJsdWUpXCIsXG4gIFwiemVuTW9kZS5jZW50ZXJMYXlvdXRcIjogZmFsc2UsXG59XG5gYGBcblxuIyMgRm9udHNcblxuSSBhbSB1c2luZyBhIHBhaWQgZm9udCB0aXRsZWQgKipEYW5rIE1vbm8qKi4gKipPcGVyYXRvciBNb25vKiogaXMgYWxzbyBhIHBhaWQgZm9udCB0aGF0IGlzIGF3ZXNvbWUuIElmIHlvdSBkbyBub3QgaGF2ZSB0aGVzZSBmb250cywgdXNlIHlvdXIgZmF2b3JpdGUgZm9udC4gKipGaXJhIENvZGUqKiBpcyBhIGZyZWUgb25lIHRoYXQgd29ya3Mgd2VsbCB0b28uXG5cbiMjIEZlZWRiYWNrXG5cbklmIHlvdSBoYXZlIHN1Z2dlc3Rpb25zLCBwbGVhc2UgW29wZW4gYW4gaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvaXNzdWVzKSBvciBiZXR0ZXIgeWV0LCBhIFtwdWxsIHJlcXVlc3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvcHVsbHMpLlxuXG5CZSBuaWNlLlxuXG4jIyBDcmVkaXRzXG5cbkNyZWRpdCB3aGVyZSBjcmVkaXQgaXMgZHVlIC4uLiB0aGlzIHRoZW1lIHdhcyBpbnNwaXJlZCBieSB0aGUgdGhlbWVzIFZpc3VhbCBTdHVkaW8gRGFyayssIE1vbm9rYWkgYW5kIFtEdXN0aW4gU2FuZGVyJ3MgdGhlbWUgZm9yIFwiQW4gT2xkIEhvcGVcIl0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWR1c3RpbnNhbmRlcnMuYW4tb2xkLWhvcGUtdGhlbWUtdnNjb2RlKS4gQ3VzdG9tIENTUyBpbnNwaXJlZCBieSBbV2VzIEJvc10oaHR0cHM6Ly90d2l0dGVyLmNvbS93ZXNib3MpLiBCbHVlIGJhY2tncm91bmQgZm9yIHRoZSBEYXJrIHRoZW0gaW5zcGlyZWQgYnkgW1NhcmFoIERyYXNuZXJdKGh0dHBzOi8vdHdpdHRlci5jb20vc2FyYWhfZWRvKSdzIFtOaWdodCBPd2wgdGhlbWVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1zZHJhcy5uaWdodC1vd2wpXG5cbiMjIEF1dGhvcnNcblxuQXV0aG9yZWQgYnkgW0pvaG4gUGFwYV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9qb2huX3BhcGEpXG5cbkxpZ2h0IHRoZW1lIGNvLWF1dGhvcmVkIGJ5IFtCcmlhbiBDbGFya10oaHR0cHM6Ly90d2l0dGVyLmNvbS9fY2xhcmtpbylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImNiMzMzMzAxLTA2NmItNDMxMy04ZGRhLWRkMmU1YWUwNzBkMSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXlPVFl4TVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVwcGllcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5OWYyODJhZTM1MDg3YTM2OGU5NDY4OTdhMTI1NWFmMjVmYWMzOTY4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5PcmlnaW5hbCBwcm9qZWN0IGJ5IFtKb2huIFBhcGFdKGh0dHA6Ly90d2l0dGVyLmNvbS9qb2huX3BhcGEpXG5cbllvdSBhcmUgdmlld2luZyBhIGZvcmsgYWRhcHRlZCBieSBbU2ltb25hIENvdGluXShodHRwOi8vdHdpdHRlci5jb20vc2ltb25hX2NvdGluKVxuXG5Zb3UgY2FuIFt3YXRjaCBKb2huIFBhcGEgYnVpbGQgdGhlIGFwcCBhcyBwYXJ0IG9mIGhpcyBzZXJpZXMgaGVyZV0oaHR0cHM6Ly9qb2hucGFwYS5uZXQvYW5ndWxhci1jb3Ntb3NkYi0xLylcblxuWW91IGNhbiBbdmlldyBhbGwgdmlkZW9zIHRvZ2V0aGVyIGhlcmVdKC9WSURFT1MubWQpXG5cbltMZWFybiBtb3JlIGFib3V0IGRldmVsb3BpbmcgTm9kZS5qcyBhcHBzIHdpdGggQXp1cmUncyBjbG91ZCBzZXJ2aWNlcyBoZXJlXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9ub2RlanMvYXp1cmUpXG5cbiMjIERvY2tlclxuXG5DcmVhdGUgdGhlIERvY2tlciBpbWFnZSBhbmQgcnVuIGl0IGxvY2FsbHlcblxuYGBgYmFzaFxuZG9ja2VySW1hZ2U9YW5ndWxhci1jb3Ntb3NkYlxuZG9ja2VyIGJ1aWxkIC10ICRkb2NrZXJJbWFnZSAuXG5kb2NrZXIgcnVuIC1kIC1wIDMwMDA6ODAgJGRvY2tlckltYWdlXG5gYGBcblxuIyMgUmVxdWlyZW1lbnRzXG5cbjEuIEluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJXG5cbiAgIGBgYGJhc2hcbiAgIG5wbSBpbnN0YWxsIC1nIEBhbmd1bGFyL2NsaVxuICAgYGBgXG5cbjEuIEluc3RhbGwgdGhlIFtBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaSlcblxuIyMgR2V0dGluZyBTdGFydGVkXG5cbjEuIENsb25lIHRoaXMgcmVwb3NpdG9yeVxuXG4gICBgYGBiYXNoXG4gICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3B1cHBpZXNcbiAgIGNkIHB1cHBpZXNcbiAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBucG0gcGFja2FnZXNcblxuICAgYGBgYmFzaFxuICAgbnBtIGlcbiAgIGBgYFxuXG4xLiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICBSZW5hbWUgdGhlIGBleGFtcGxlLWVudmlyb25tZW50LmpzYCBmaWxlIHRvIGBlbnZpcm9ubWVudC5qc2AgaW4gdGhlIGBzZXJ2ZXIvZW52L2AgZm9sZGVyIGFuZCB1cGRhdGUgaXQgd2l0aCB5b3VyIENvc21vcyBEQiBzZXR0aW5ncy4gUmVwbGFjZSB0aGUgZGF0YWJhc2UgbmFtZSBrZXksIGFuZCBwb3J0IHdpdGggeW91ciBzcGVjaWZpYyBjb25maWd1cmF0aW9uLlxuXG4gICBgYGBqYXZhc2NyaXB0XG4gICAvLyBzZXJ2ZXIvZW52L2Vudmlyb25tZW50LmpzXG4gICBjb25zdCBjb3Ntb3NQb3J0ID0gMTIzNDsgLy8gcmVwbGFjZSB3aXRoIHlvdXIgcG9ydFxuICAgY29uc3QgZGJOYW1lID0gJ3lvdXItY29zbW9zLWRiLW5hbWUtZ29lcy1oZXJlJztcbiAgIGNvbnN0IGtleSA9ICd5b3VyLWtleS1nb2VzLWhlcmUnO1xuXG4gICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgY29zbW9zUG9ydCxcbiAgICAgZGJOYW1lLFxuICAgICBrZXlcbiAgIH07XG4gICBgYGBcblxuIyMgUnVubmluZyB0aGUgYXBwXG5cbjEuIEJ1aWxkIHRoZSBBbmd1bGFyIGFwcFxuXG4gICBgYGBiYXNoXG4gICBuZyBidWlsZFxuICAgYGBgXG5cbjEuIExhdW5jaCB0aGUgc2VydmVyXG5cbiAgIGBgYGJhc2hcbiAgIG5vZGUgc3JjL3NlcnZlci9pbmRleC5qc1xuICAgYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gaHR0cDovL2xvY2FsaG9zdDozMDAwXG5cbiMjIFByb2JsZW1zIG9yIFN1Z2dlc3Rpb25zXG5cbltPcGVuIGFuIGlzc3VlIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9wdXBwaWVzL2lzc3VlcylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjM2E4OWM3Yi1hZjFlLTQ2MTAtOGJlZC1mY2JlYTU2ZWFlZGYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWhlcm9lc1xuXG5BIENvc21vcyBEQiwgRXhwcmVzcy5qcywgVnVlLCBhbmQgTm9kZS5qcyBhcHBcblxuIyMgRmVhdHVyZXNcblxuVGhpcyBwcm9qZWN0IGZyYW1ld29yayBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGZlYXR1cmVzOlxuXG4qIFZ1ZS5qc1xuKiBOb2RlLmpzXG4qIEV4cHJlc3NcbiogTW9uZ29vc2UgQVBJXG4qIENvbm5lY3RpbmcgdG8gTW9uZ29EQiBvciBDb3Ntb3NEQlxuKiBCdWlsZGluZywgRGVidWdnaW5nLCBEZXBsb3lpbmcgd2l0aCBEb2NrZXJcblxuIyMgR2V0dGluZyBTdGFydGVkXG5cbiMjIyBQcmVyZXF1aXNpdGVzXG5cbk5vZGUuanMgd2l0aCBucG1cblxuIyMjIEluc3RhbGxhdGlvblxuXG5gYGAgYmFzaFxuZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92dWUtaGVyb2VzLmdpdFxuY2QgdnVlLWhlcm9lc1xubnBtIGluc3RhbGxcbmBgYFxuXG4jIyMgRGF0YWJhc2Ugc2V0dGluZ3NcblxuKiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgLmVudi5leGFtcGxlLmpzYCBmaWxlIHRvIGAuZW52YCBpbiB0aGUgcm9vdCBmb2xkZXIgYW5kIHVwZGF0ZSBpdCB3aXRoIHlvdXIgQ29zbW9zIERCIHNldHRpbmdzLiBSZXBsYWNlIHRoZSBhY2NvdW50TmFtZSwgZGF0YWJhc2VOYW1lLCBrZXksIGFuZCBwb3J0IHdpdGggeW91ciBzcGVjaWZpYyBjb25maWd1cmF0aW9uLlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIFNFUlZFUl9QT1JUPTMwMDFcbiAgICBQVUJMSUNXRUI9Li9zZXJ2ZXIvd3d3XG4gICAgQ09TTU9TREJfQUNDT1VOVD15b3VyX2Nvc21vc19hY2NvdW50XG4gICAgQ09TTU9TREJfREI9eW91cl9jb3Ntb3NfZGJcbiAgICBDT1NNT1NEQl9LRVk9eW91cl9jb3Ntb3Nfa2V5XG4gICAgQ09TTU9TREJfUE9SVD0xMDI1NVxuICAgIGBgYFxuXG4jIyMgUXVpY2tzdGFydFxuXG5UaGlzIHdpbGwgYnVpbGQgdGhlIGFwcCBhbmQgcnVuIHRoZSBkZXYgc2VydmVyIGZvciBWdWUgYW5kIFdlYlBhY2suIFRoZSBOb2RlIGV4cHJlc3Mgc2VydmVyIHdpbGwgbGF1bmNoIGFuZCBXZWJQYWNrIHdpbGwgcHJveHkgdGhlIGNhbGxzIGZyb20gdGhlIGJyb3dzZXIgdG8gdGhlIEFQSSBpbiBleHByZXNzLiBJdCB3aWxsIGFsc28gYW5kIHByZXBhcmUgaXQgZm9yIGxvY2FsIGRlYnVnZ2luZy5cblxuYGBgIGJhc2hcbiMgYnVpbGQgZm9yIHByb2R1Y3Rpb24gd2l0aCBtaW5pZmljYXRpb25cbm5wbSBydW4gYnVpbGRcblxuIyBzZXJ2ZSBvbiBodHRwOi8vbG9jYWxob3N0OjgwODBcbiMgYW5kIHJ1biB0aGUgYXBpIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMVxubnBtIHJ1biBkZWJ1Z1xuYGBgXG5cbiMjIyBMb2NhbCBQcm9kIEJ1aWxkXG5cblRoaXMgd2lsbCBidWlsZCB0aGUgYXBwIGFuZCBsYXVuY2ggdmlhIHRoZSBOb2RlLmpzIGV4cHJlc3Mgc2VydmVyLlxuXG5gYGBiYXNoXG4jIGJ1aWxkIGZvciBwcm9kdWN0aW9uIHdpdGggbWluaWZpY2F0aW9uXG5ucG0gcnVuIGJ1aWxkXG5cbiMgcnVuIHRoZSBub2RlIHNlcnZlclxubnBtIHN0YXJ0XG5gYGBcblxuIyMjIERvY2tlclxuXG5CdWlsZCB0aGUgaW1hZ2UgYW5kIHJ1biBjb250YWluZXIuXG5cbmBgYCBiYXNoXG5ucG0gcnVuIGRvY2tlci11cFxuYGBgXG5cbkJ1aWxkIHRoZSBpbWFnZSBhbmQgcnVuIGNvbnRhaW5lciBmb3IgbG9jYWwgZGVidWdnaW5nLlxuXG5gYGAgYmFzaFxubnBtIHJ1biBkb2NrZXItdXAtZGVidWdcbmBgYCIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImE4MWYwZTlkLWEwYTAtNGU3Zi04YTdhLWM1MWU4NTc2NTViZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16SXlPVGN6TmpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicHVwcGllcy1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZGZkYWExNmM0MWQ3OGY3NjA1OGVjYjI5MTQ0MzcyNjk5ZWNjMGI5MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgcHVwcGllcy1hcGlcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkNjI3ZWViYS00Nzg0LTRmOTAtYjI4ZC1kNGIxNGQ5MjczZWIiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJhbmd1bGFyLWNvc21vc2RiIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5ieSBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vam9obl9wYXBhKVxuXG5Zb3UgY2FuIFt3YXRjaCBtZSBidWlsZCB0aGUgYXBwIGFzIHBhcnQgb2YgbXkgc2VyaWVzIGhlcmVdKGh0dHBzOi8vam9obnBhcGEubmV0L2FuZ3VsYXItY29zbW9zZGItMS8pXG5cbllvdSBjYW4gW3ZpZXcgYWxsIHZpZGVvcyB0b2dldGhlciBoZXJlXSgvVklERU9TLm1kKVxuXG5bTGVhcm4gbW9yZSBhYm91dCBkZXZlbG9waW5nIE5vZGUuanMgYXBwcyB3aXRoIEF6dXJlJ3MgY2xvdWQgc2VydmljZXMgaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vbm9kZWpzL2F6dXJlP1dULm1jX2lkPWFuZ3VsYXJjb3Ntb3NkYi1naXRodWItam9wYXBhKVxuXG4jIyBEb2NrZXJcblxuQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlckltYWdlPWFuZ3VsYXItY29zbW9zZGJcbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAzMDAwOjgwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIFJlcXVpcmVtZW50c1xuXG4xLiBJbnN0YWxsIHRoZSBBbmd1bGFyIENMSVxuXG4gICAgYGBgYmFzaFxuICAgIG5wbSBpbnN0YWxsIC1nIEBhbmd1bGFyL2NsaVxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBbQXp1cmUgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9jbGkvYXp1cmUvaW5zdGFsbC1henVyZS1jbGk/V1QubWNfaWQ9YW5ndWxhcmNvc21vc2RiLWdpdGh1Yi1qb3BhcGEpXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnlcblxuICAgIGBgYGJhc2hcbiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIuZ2l0XG4gICAgY2QgYW5ndWxhci1jb3Ntb3NkYlxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBucG0gcGFja2FnZXNcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaVxuICAgIGBgYFxuXG4xLiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgZXhhbXBsZS1lbnZpcm9ubWVudC5qc2AgZmlsZSB0byBgZW52aXJvbm1lbnQuanNgIGluIHRoZSBgc2VydmVyL2Vudi9gIGZvbGRlciBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUga2V5LCBhbmQgcG9ydCB3aXRoIHlvdXIgc3BlY2lmaWMgY29uZmlndXJhdGlvbi5cblxuICAgIGBgYGphdmFzY3JpcHRcbiAgICAvLyBzZXJ2ZXIvZW52L2Vudmlyb25tZW50LmpzXG4gICAgY29uc3QgY29zbW9zUG9ydCA9IDEyMzQ7IC8vIHJlcGxhY2Ugd2l0aCB5b3VyIHBvcnRcbiAgICBjb25zdCBkYk5hbWUgPSAneW91ci1jb3Ntb3MtZGItbmFtZS1nb2VzLWhlcmUnO1xuICAgIGNvbnN0IGtleSA9ICd5b3VyLWtleS1nb2VzLWhlcmUnO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBjb3Ntb3NQb3J0LFxuICAgICAgZGJOYW1lLFxuICAgICAga2V5XG4gICAgfTtcbiAgICBgYGBcblxuIyMgUnVubmluZyB0aGUgYXBwXG5cbjEuIEJ1aWxkIHRoZSBBbmd1bGFyIGFwcFxuXG4gICAgYGBgYmFzaFxuICAgIG5nIGJ1aWxkXG4gICAgYGBgXG5cbjEuIExhdW5jaCB0aGUgc2VydmVyXG5cbiAgICBgYGBiYXNoXG4gICAgbm9kZSBzcmMvc2VydmVyL2luZGV4LmpzXG4gICAgYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gaHR0cDovL2xvY2FsaG9zdDozMDAwXG5cbiMjIFByb2JsZW1zIG9yIFN1Z2dlc3Rpb25zXG5cbltPcGVuIGFuIGlzc3VlIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyLWNvc21vcy9pc3N1ZXMpXG4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZTM5NDRjYmUtYmE1My00MjYwLWI0ZjctMzMyYjQ1YjI1MzQ3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzFOak01TWpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNoYW5nZVRhYmJlZFBhZ2VJY29uU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZmNGY3ZjY5NjEyNDZiYTAyMDVhMjI0NDU1ZDkwYTE1MDNiY2UzYzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIENoYW5nZVRhYmJlZFBhZ2VJY29uU2FtcGxlXG5BIHNhbXBsZSBYYW1hcmluLkZvcm1zIGFwcCBkZW1vbnN0cmF0aW5nIGhvdyB0byB1cGRhdGUgdGhlIGljb24gYW5kIHRpdGxlIG9mIGEgVGFiYmVkUGFnZSBhbnkgdGltZSBpdCBpcyB0YXBwZWRcblxuIVtdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVmlkZW9zL2Jsb2IvbWFzdGVyL0NoYW5nZVRhYmJlZFBhZ2VJY29uU2FtcGxlL0NoYW5nZVRhYmJlZFBhZ2VJY29uU2FtcGxlLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1ZTAzNzVhOC0wMTA4LTQxMDEtOTc5Yy1lY2Q3MTA2MzkyNTciCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJ2c2NvZGUtd2ludGVyaXNjb21pbmciLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIFdpbnRlciBpcyBDb21pbmdcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHRoZW1lcyB0aXRsZWQgXCJXaW50ZXIgaXMgQ29taW5nXCIuIFRoZXJlIGFyZSBkYXJrLCBkYXJrIHdpdGggbm8gaXRhbGljcywgYW5kIGxpZ2h0IHRoZW1lcy5cblxuPiBJIHBlcnNvbmFsbHkgdXNlIHRoZSBkYXJrIHRoZW1lcyBmb3IgbW9zdCBvY2Nhc2lvbnMsIGJ1dCBmaW5kIHRoZSBsaWdodCB0aGVtZSBnb29kIG9uIHNvbWUgZGltbWVyIHByb2plY3RvcnMgd2hlbiBJIHByZXNlbnQuXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzLlxuXG5UaGUgdGhlbWVzIGFsc28gc3VwcG9ydCBhbiBpdGFsaWNpemVkIHZlcnNpb24sIHdpdGggZm9udHMgdGhhdCBzdXBwb3J0cyBjdXJzaXZlIGl0YWxpY2l6ZWQgZm9udHMuXG5cbiMjIERhcmsgQmx1ZSBUaGVtZVxuXG4qKkRhcmsgQmx1ZSBIVE1MKipcbiFbSFRNTF0oaW1hZ2VzL2RhcmstYmx1ZS1odG1sLnBuZylcblxuKipEYXJrIEJsdWUgSmF2YVNjcmlwdCoqXG4hW0phdmFTY3JpcHRdKGltYWdlcy9kYXJrLWJsdWUtanMucG5nKVxuXG4qKkRhcmsgQmx1ZSBUeXBlU2NyaXB0KipcbiFbVHlwZVNjcmlwdF0oaW1hZ2VzL2RhcmstYmx1ZS10cy5wbmcpXG5cbioqRGFyayBCbHVlIFNDU1MqKlxuIVtTQ1NTXShpbWFnZXMvZGFyay1ibHVlLXNjc3MucG5nKVxuXG4jIyBEYXJrIEJsYWNrIFRoZW1lXG5cbioqRGFyayBCbGFjayBKYXZhU2NyaXB0KipcbiFbRGFyayBCbGFjayBUaGVtZV0oaW1hZ2VzL2RhcmstanMucG5nKVxuXG4jIyBMaWdodCBUaGVtZVxuXG4qKkxpZ2h0IEphdmFTY3JpcHQqKlxuIVtMaWdodCBUaGVtZV0oaW1hZ2VzL2xpZ2h0LWpzLnBuZylcblxuIyMgVXNhZ2VcblxuU2VsZWN0IHRoZSB0aGVtZSBhbmQgZ28hXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBPcGVuICoqRXh0ZW5zaW9ucyoqIHNpZGViYXIgcGFuZWwgaW4gVmlzdWFsIFN0dWRpbyBDb2RlLiBgVmlldyDihpIgRXh0ZW5zaW9uc2BcbjEuIFNlYXJjaCBmb3IgYFdpbnRlciBpcyBDb21pbmdgXG4xLiBDbGljayAqKkluc3RhbGwqKlxuMS4gQ2xpY2sgKipSZWxvYWQqKlxuMS4gRmlsZSA+IFByZWZlcmVuY2VzID4gQ29sb3IgVGhlbWUgPiAqKldpbnRlciBpcyBDb21pbmcgKERhcmsgQmx1ZSkqKlxuMS4gT3B0aW9uYWw6IFVzZSB0aGUgcmVjb21tZW5kZWQgc2V0dGluZ3MgYmVsb3cgZm9yIGJlc3QgZXhwZXJpZW5jZVxuXG4jIyBSZWNvbW1lbmRlZCBTZXR0aW5nc1xuXG5gYGBqc1xue1xuICBcImVkaXRvci5hdXRvSW5kZW50XCI6IFwiZnVsbFwiLFxuICBcImVkaXRvci5jdXJzb3JCbGlua2luZ1wiOiBcInNvbGlkXCIsXG4gIFwiZWRpdG9yLmN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uXCI6IHRydWUsXG4gIFwiZWRpdG9yLmN1cnNvclN0eWxlXCI6IFwibGluZVwiLFxuICBcImVkaXRvci5mb250U2l6ZVwiOiAxNixcbiAgXCJlZGl0b3IuZm9udEZhbWlseVwiOiBcIkRhbmsgTW9ubywgRmlyYSBDb2RlLCBJbmNvbnNvbGF0YVwiLFxuICBcImVkaXRvci5mb250TGlnYXR1cmVzXCI6IHRydWUsXG4gIFwiZWRpdG9yLmZvcm1hdE9uUGFzdGVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IuZm9ybWF0T25UeXBlXCI6IGZhbHNlLFxuICBcImVkaXRvci5mb3JtYXRPblNhdmVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IubGV0dGVyU3BhY2luZ1wiOiAwLjMsXG4gIFwiZWRpdG9yLmxpbmVIZWlnaHRcIjogMjUsXG4gIFwiZWRpdG9yLm1pbmltYXAuZW5hYmxlZFwiOiBmYWxzZSxcbiAgXCJlZGl0b3IubXVsdGlDdXJzb3JNb2RpZmllclwiOiBcImN0cmxDbWRcIixcbiAgXCJlZGl0b3Iuc3VnZ2VzdFNlbGVjdGlvblwiOiBcImZpcnN0XCIsXG4gIFwiZWRpdG9yLnRhYkNvbXBsZXRpb25cIjogXCJvblwiLFxuICBcImVkaXRvci50YWJTaXplXCI6IDIsXG4gIFwiZWRpdG9yLndvcmRXcmFwXCI6IFwib25cIixcbiAgXCJmaWxlcy5hdXRvU2F2ZVwiOiBcImFmdGVyRGVsYXlcIixcbiAgXCJmaWxlcy5hdXRvU2F2ZURlbGF5XCI6IDEwMDAsXG4gIFwic2VhcmNoLnNob3dMaW5lTnVtYmVyc1wiOiB0cnVlLFxuICBcIndvcmtiZW5jaC5pY29uVGhlbWVcIjogXCJtYXRlcmlhbC1pY29uLXRoZW1lXCIsXG4gIFwid29ya2JlbmNoLmNvbG9yQ3VzdG9taXphdGlvbnNcIjoge30sXG4gIFwid29ya2JlbmNoLmNvbG9yVGhlbWVcIjogXCJXaW50ZXIgaXMgQ29taW5nIChEYXJrIEJsdWUpXCIsXG4gIFwiemVuTW9kZS5jZW50ZXJMYXlvdXRcIjogZmFsc2UsXG59XG5gYGBcblxuIyMgRm9udHNcblxuSSBhbSB1c2luZyBhIHBhaWQgZm9udCB0aXRsZWQgKipEYW5rIE1vbm8qKi4gKipPcGVyYXRvciBNb25vKiogaXMgYWxzbyBhIHBhaWQgZm9udCB0aGF0IGlzIGF3ZXNvbWUuIElmIHlvdSBkbyBub3QgaGF2ZSB0aGVzZSBmb250cywgdXNlIHlvdXIgZmF2b3JpdGUgZm9udC4gKipGaXJhIENvZGUqKiBpcyBhIGZyZWUgb25lIHRoYXQgd29ya3Mgd2VsbCB0b28uXG5cbiMjIEZlZWRiYWNrXG5cbklmIHlvdSBoYXZlIHN1Z2dlc3Rpb25zLCBwbGVhc2UgW29wZW4gYW4gaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvaXNzdWVzKSBvciBiZXR0ZXIgeWV0LCBhIFtwdWxsIHJlcXVlc3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvcHVsbHMpLlxuXG5CZSBuaWNlLlxuXG4jIyBDcmVkaXRzXG5cbkNyZWRpdCB3aGVyZSBjcmVkaXQgaXMgZHVlIC4uLiB0aGlzIHRoZW1lIHdhcyBpbnNwaXJlZCBieSB0aGUgdGhlbWVzIFZpc3VhbCBTdHVkaW8gRGFyayssIE1vbm9rYWkgYW5kIFtEdXN0aW4gU2FuZGVyJ3MgdGhlbWUgZm9yIFwiQW4gT2xkIEhvcGVcIl0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWR1c3RpbnNhbmRlcnMuYW4tb2xkLWhvcGUtdGhlbWUtdnNjb2RlJldULm1jX2lkPXZzY29kZXdpbnRlcmlzY29taW5nLWdpdGh1Yi1qb3BhcGEpLiBDdXN0b20gQ1NTIGluc3BpcmVkIGJ5IFtXZXMgQm9zXShodHRwczovL3R3aXR0ZXIuY29tL3dlc2JvcykuIEJsdWUgYmFja2dyb3VuZCBmb3IgdGhlIERhcmsgdGhlbSBpbnNwaXJlZCBieSBbU2FyYWggRHJhc25lcl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9zYXJhaF9lZG8pJ3MgW05pZ2h0IE93bCB0aGVtZV0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXNkcmFzLm5pZ2h0LW93bCZXVC5tY19pZD12c2NvZGV3aW50ZXJpc2NvbWluZy1naXRodWItam9wYXBhKVxuXG4jIyBBdXRob3JzXG5cbkF1dGhvcmVkIGJ5IFtKb2huIFBhcGFdKGh0dHBzOi8vdHdpdHRlci5jb20vam9obl9wYXBhKVxuXG5MaWdodCB0aGVtZSBjby1hdXRob3JlZCBieSBbQnJpYW4gQ2xhcmtdKGh0dHBzOi8vdHdpdHRlci5jb20vX2NsYXJraW8pXG4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMDY3YTczYTYtMjA4Ny00MjE4LWIwMDItN2ZlOWU1NDZkMDcxIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qazRNakUzTmpRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjNmNDg2YjEwYjBjZDAxMjZjMjI2NjZjZjJjMGQxMTQ0ODBiY2ZlMTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlXG5BIHNhbXBsZSBhcHAgdG8gZGVtb25zdHJhdGUgaG93IHRvIGNyYXNoIGEgWGFtYXJpbi5Gb3JtcyBhcHAgdXNpbmcgc2ltdWx0YW5lb3VzIGFuaW1hdGlvbnNcblxuIVtdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svVmlkZW9zL2Jsb2IvbWFzdGVyL0FuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlL0FuaW1hdGlvbkNyYXNoUmVwcm9kdWN0aW9uU2FtcGxlLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyMDgxNThjYy1hMGU4LTQzYjAtODA3NS0zMzljODY0NDVmY2EiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16STROelkwT1RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2ltb25hY28uZ2l0aHViLmlvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdiOGJiYWI2YjkxMGRhOGVmMzcxNTFlYmE4ZWZiMTkzMzRiNmVkMDAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHNpbW9uYWNvdGluLmdpdGh1Yi5pb1xuXG5UZXN0XG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDhhM2ZjY2YtZTBlMi00NGUzLTkxN2UtYzAzYmMxZGYyMTY0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTNOemMyT0RFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXdlc29tZS1hbmd1bGFyLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg1NGExNDZhYzBjODMxMWE3NmNiNGI0ZmQ5ZGJkOGQxN2MzNjYyMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXI6IFRoZSBBd2Vzb21lIFBhcnRzIFdvcmtzaG9wXG5cbmJ5IFtXYXJkIEJlbGxdKGh0dHBzOi8vdHdpdHRlci5jb20vd2FyZGJlbGwpIGFuZCBbSm9obiBQYXBhXShodHRwczovL3R3aXR0ZXIuY29tL2pvaG5fcGFwYSlcblxuIyMgQXBwc1xuXG5BbGwgYXBwcyBhcmUgaW4gdGhlIGBzcmNgIGZvbGRlci4gVGhlcmUgaXMgYSBgc3JjL3NlcnZlcmAgZm9sZGVyIGNvbnRhaW5pbmcgYSBub2RlIHNlcnZlciwgYXMgc29tZSBvdGhlciBhcHBzIG1heSBvciBtYXkgbm90IHVzZSBpdC5cblxuIyMjIDAtYXdlc29tZVxuXG5gMC1hd2Vzb21lYCBpcyBvdXIgYmFzaWMgdGVtcGxhdGUgYXBwLiBBbGwgb3RoZXIgYXBwcyBpbiB0aGUgYHNyY2AgZm9sZGVyIGFyZSBkZXJpdmVkIGZyb20gYDAtYXdlc29tZWAgYW5kIHRoZW4gbW9kaWZpZWQgYXMgbmVlZGVkLlxuXG4jIyMgMS1yb3V0ZXJcblxuYDEtcm91dGluZy1iZWdpbmAgaXMgb3VyIGJlZ2lubmluZyBsYWIgZm9yIHJvdXRpbmcgYW5kIGAxLXJvdXRpbmctYmVnaW4tZW5kYCBpcyB0aGUgZW5kIHN0YXRlLlxuXG5XZSBhbHNvIGhhdmUgYSByb3V0aW5nIGd1YXJkIGxhYi4gYDEtcm91dGluZy1ndWFyZHMtYmVnaW5gIGFuZCBgMS1yb3V0aW5nLWd1YXJkcy1lbmRgLlxuXG4jIyMgMi1Nb2R1bGVzXG5cbmAyLW1vZHVsZXMtYmVnaW5gIGFuZCBgMi1tb2R1bGVzLWVuZGAuXG5cbiMjIyAzLXJ4anNcblxuSG93IHRvIGNvbW11bmljYXRlIGNoYW5nZXMgYWNyb3NzIHRoZSBhcHAgd2l0aCBSeEpTXG5cbiMjIyA0LXJlYWN0aXZlXG5cbmA0LXJlYWN0aXZlYCBkZW1vbnN0cmF0ZXMgYSAoMSkgcmVhY3RpdmUsICgyKSBpbW11dGFibGUsICgzKSBDUVJTIGFwcCBidWlsdCB3aXRoIHBsYWluIHNlcnZpY2VzIHJhdGhlciB0aGFuIF9uZ3J4Xy5cblNlZSBob3cgdGhlIGJhc2ljIGFwcCBjaGFuZ2VzIHRvIGNvbmZvcm0gdG8gdGhlc2UgdGhyZWUgcHJpbmNpcGxlcy5cblxuIyMjIDUtbmdyeFxuXG5gNS1uZ3J4LWJlZ2luYCByZWZhY3RvcnMgdGhlIGA0LXJlYWN0aXZlYCBfSGVyb2VzXyB0byB1c2UgKipuZ3J4KiouIE9ubHkgcGFydGx5IGRvbmUuXG5gNS1uZ3J4LWVuZGAgaXMgdGhlIHN0YXRlIG9mIHRoZSAqKm5ncngqKiBhcHAgYWZ0ZXIgY29tcGxldGluZyB0aGUgYDUtbmdyeC1iZWdpbmAgbGFiLlxuXG4jIyMgNi1uZ3J4LWRhdGFcblxuYDYtbmdyeC1kYXRhLWJlZ2luYCByZWZhY3RvcnMgYDUtbmdyeC1lbmRgIHRvIHVzZSBfbmdyeC1kYXRhXyBmb3IgSGVyb2VzLlxuYDYtbmdyeC1kYXRhLWVuZGAgZG9lcyB0aGUgc2FtZSB0byBWaWxsYWlucy5cbkl0IGRlbW9uc3RyYXRlcyBhZGRpdGlvbmFsIG1ldGFkYXRhIGZlYXR1cmVzLCBpbmNsdWRpbmcgb3B0aW1pc3RpYyBhZGQgYW5kIHVwZGF0ZSxcbndoaWNoIHJlcXVpcmUgYSBjbGllbnQtc2lkZSBJZCBHZW5lcmF0b3IgZm9yIEFkZHMgKHNlZSBWaWxsYWluU2VydmljZSkuXG5cbiMjIyA3LWRlcGxveVxuXG5Mb2NhbGx5XG5cbjEuIFJ1biBgbnBtIHJ1biA3LWRlcGxveS1idWlsZGAgdG8gYnVpbGQgaXQuXG4yLiBSdW4gYG5wbSBydW4gNy1kZXBsb3ktc2VydmVgIHRvIHNlcnZlIGl0LlxuMy4gS2lsbCB0aGUgcHJvY2Vzc1xuXG5Mb2NhbGx5IHdpdGggRG9ja2VyXG5cbjEuIFJ1biBgZG9ja2VyIGNvbXBvc2UgdXBgIGZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBpbiBWUyBDb2RlLlxuMi4gQ2hvb3NlIHRoZSBkZWJ1ZyBvcHRpb25cblxuIyMgRGVmaW5lIE11bHRpcGxlIEFwcHMgaW4gdGhlIFNhbWUgXFxfc3JjIGZvbGRlclxuXG5FeGFtcGxlOiBtYWtlIGEgbGFiIGNhbGxlZCBgbi1uZXctbGFiLWJlZ2luYCB3aGVyZSBgbmAgaXMgYW4gaW50ZWdlci5cblxuMS4gIENyZWF0ZSB0aGUgYG4tbmV3LWxhYi1iZWdpbmAgX2FwcCBmb2xkZXJfIHVuZGVyIGBzcmNgLlxuXG4yKSAgQWRkIGEgbmV3IGFwcCBvYmplY3QgdG8gdGhlIGBcImFwcHNcImAgYXJyYXkgaW4gW2Bhbmd1bGFyLWNsaS5qc29uYF0oLi8uYW5ndWxhci1jbGkuanNvbik6XG5cbi0gbWFrZSBpdCBhIGNvcHkgb2YgYW4gZXhpc3RpbmcgYXBwIG9iamVjdFxuLSBzZXQgYFwibmFtZVwiYCB0byBgXCJuLW5ldy1sYWItYmVnaW5cImBcbi0gc2V0IGBcImFwcFJvb3RcImAgdG8gYFwibi1uZXctbGFiLWJlZ2luXCJgXG4tIHNldCBgXCJvdXREaXJcImAgdG8gYFwiZGlzdC9uLW5ldy1sYWItYmVnaW5cImBcbi0gc2V0IGBcIm1haW5cImAgdG8gYFwibWFpbi5uLW5ldy1sYWItYmVnaW4udHNcImBcblxuMy4gIFVwZGF0ZSB0aGUgbGF6eSBsb2FkZWQgcm91dGVzIHRoYXQgc3RhcnQgd2l0aCBgMC1hd2Vzb21lL2AgdG8gYG4tbmV3LWxhYi1iZWdpbi9gIGluIGBuLW5ldy1sYWItYmVnaW4vYXBwLXJvdXRpbmcubW9kdWxlLnRzYC5cblxuPiBIaW50OiBlYXN5IHdpdGggc2VhcmNoLWFuZC1yZXBsYWNlIF9BRlRFUl8gbGltaXRpbmcgYGZpbGVzLXRvLWluY2x1ZGVgIHRvIGBcIm4tbmV3LWxhYi1iZWdpblwiYC5cblxuNC4gIENvcHkgW2BtYWluLjAtYXdlc29tZS50c2BdKHNyYy9tYWluLjAtYXdlc29tZS50cykgdG8gYG1haW4ubi1uZXctbGFiLWJlZ2luLnRzYCBhbmQgdXBkYXRlIHRoZSBwYXRocyB0byB0aGUgYXBwIG1vZHVsZXM6XG5cbiAgICBgYGBcbiAgICBpbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL24tbmV3LWxhYi1iZWdpbi9hcHAubW9kdWxlJztcbiAgICBpbXBvcnQgeyBBcHBEZXZNb2R1bGUgfSBmcm9tICcuL24tbmV3LWxhYi1iZWdpbi9hcHAtZGV2Lm1vZHVsZSc7XG4gICAgYGBgXG5cbjUuICBBZGQgYSBub2RlIHNjcmlwdCB0byB0aGUgW2BwYWNrYWdlLmpzb25gXShwYWNrYWdlLmpzb24pLCBzZXR0aW5nIHRoZSBsYXN0XG4gICAgdHdvIHBvcnQgZGlnaXRzIChmaXJzdCBkaWdpdCBpcyBmb3IgYG5gLCBzZWNvbmQgZm9yIHRoZSBgbmV3LWxhYi1iZWdpbmAgdmFyaWF0aW9ucykuXG5cbiAgICBgYGBiYXNoXG4gICAgXCIwLW5ldy1sYWItYmVnaW5cIjogXCJuZyBzZXJ2ZSAtYSBuLW5ldy1sYWItYmVnaW4gLW8gLXAgOTBuMFwiLFxuICAgIGBgYFxuXG4gICAgPiBBbGwgbGFicyBydW4gaW4gdGhlIHBvcnQgOTAwMCBzZXJpZXMuXG5cbjYuICBVcGRhdGUgdGhlIGBsYWJUaXRsZWAgcHJvcGVydHkgb2YgdGhlIGBUb29sYmFyQ29tcG9uZW50YCB0byBgbi1uZXctbGFiLXh4eGAsIHdoZXJlIG4gaXMgdGhlIG51bWJlciBvZiB0aGUgbGFiIGFuZCB4eHggaXMgZWl0aGVyIGBiZWdpbmAgb3IgYGVuZGBcblxuICAgIGBgYHR5cGVzY3JpcHRcbiAgICBleHBvcnQgY2xhc3MgVG9vbGJhckNvbXBvbmVudCB7XG4gICAgICBsYWJUaXRsZSA9ICduLW5ldy1sYWItYmVnaW4nO1xuICAgICAgbGFiU3RhdGUgPSAnYmVnaW4nO1xuICAgIH1cbiAgICBgYGBcblxuNy4gIFVuY29tbWVudCB0aGUgYXBwcm9wcmlhdGUgbGFiIHN0YXRlIChlLmcuIGJlZ2luIG9yIGVuZCkgaW4gYHRvb2xiYXIuY29tcG9uZW50LnNjc3NgXG5cbiAgICBgYGBjc3NcbiAgICAvLyBAaW5jbHVkZSBwcmltYXJ5LWJhY2tncm91bmQtY29udHJhc3QtY29sb3I7IC8vIGVuZFxuICAgIC8vIEBpbmNsdWRlIGFjY2VudC1iYWNrZ3JvdW5kLWNvbG9yOyAvLyBiZWdpblxuICAgIGBgYFxuXG4jIyBCdWlsZCBhbmQgU2VydmVcblxuVG8gc2VlIGEgKipsaXN0IG9mIHRoZSBucG0gbGFiIHNjcmlwdHMqKlxuXG5gYGBiYXNoXG5ucG0gcnVuXG5gYGBcblxuQnVpbGQgYW5kIHNlcnZlIGFuIGFwcCBuYW1lZCBgbi1uZXctbGFiLWJlZ2luYCB3aXRoIG5wbSBvciB5YXJuXG5cbmBgYGJhc2hcbnlhcm4gbi1uZXctbGFiLWJlZ2luXG5ucG0gcnVuIG4tbmV3LWxhYi1iZWdpblxuYGBgXG5cbk9yIGdvIHRvIHRoZSBDTEkgZGlyZWN0bHlcblxuYGBgYmFzaFxubmcgc2VydmUgLWEgbi1uZXctbGFiLWJlZ2luIC1vXG5gYGBcblxuVG8gcnVuIGl0cyBfZW5kLXN0YXRlXyAoYGVgKSBhdCB0aGUgc2FtZSB0aW1lLFxub3BlbiBhbm90aGVyIHRlcm1pbmFsIHdpbmRvdywgdGhlbiBidWlsZCBhbmQgc2VydmUgb24gYSBkaWZmZXJlbnQgcG9ydCAod2hlcmUgdGhlIGxhc3QgZGlnaXRzIG1hdGNoIGBuYCBhbmQgYGVgKS5cblxuYGBgYmFzaFxubmcgc2VydmUgLWEgbi1uZXctbGFiLWVuZCAtbyAtcCA5MHtufXtlfVxuYGBgXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlMGEzM2RlMC04OTc3LTRiMjMtYmE5My01MGI4MWM4M2IzNDYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TXlOelkxTlRRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk11bHRpcGxlVmlld01vZGVsU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ2NGU4MWE1NjdmMWNiZTk2ZjMyNDM1Yzk2OWY0ZDIxOGNhNTRkMTMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBNdWx0aXBsZVZpZXdNb2RlbFNhbXBsZVxuQW4gaU9TIGFuZCBBbnJkb2lkIGFwcCBidWlsdCB1c2luZyBYYW1hcmluLkZvcm1zIGRlbW9uc3RyYXRpbmcgaG93IHRvIGhhdmUgbXVsdGlwbGUgdmlld3MgcmVmZXJlbmNlIHR3byBkaWZmZXJlbnQgVmlld01vZGVscyBmcm9tIHRoZSBzYW1lIENvbnRlbnRQYWdlXG5cblxuYGBgY3NoYXJwXG48P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJ1dGYtOFwiPz5cbjxDb250ZW50UGFnZSB4bWxucz1cImh0dHA6Ly94YW1hcmluLmNvbS9zY2hlbWFzLzIwMTQvZm9ybXNcIiBcbiAgICAgICAgICAgICB4bWxuczp4PVwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA5L3hhbWxcIiBcbiAgICAgICAgICAgICB4bWxuczpsb2NhbD1cImNsci1uYW1lc3BhY2U6TXVsdGlwbGVWaWV3TW9kZWxTYW1wbGVcIiBcbiAgICAgICAgICAgICB4OkNsYXNzPVwiTXVsdGlwbGVWaWV3TW9kZWxTYW1wbGUuTWFpblBhZ2VcIj5cbiAgICBcbiAgICA8U3RhY2tMYXlvdXRcbiAgICAgICAgSG9yaXpvbnRhbE9wdGlvbnM9XCJDZW50ZXJcIlxuICAgICAgICBWZXJ0aWNhbE9wdGlvbnM9XCJDZW50ZXJcIj5cbiAgICAgICAgXG4gICAgICAgIDxMYWJlbCBcbiAgICAgICAgICAgIHg6TmFtZT1cIlZpZXdNb2RlbDFMYWJlbFwiIFxuICAgICAgICAgICAgQmluZGluZ0NvbnRleHQ9XCJ7QmluZGluZyBTb3VyY2UgPXtsb2NhbDpWaWV3TW9kZWwxIH19XCIgXG4gICAgICAgICAgICBUZXh0PVwie0JpbmRpbmcgTGFiZWxUZXh0fVwiIFxuICAgICAgICAgICAgSG9yaXpvbnRhbE9wdGlvbnM9XCJDZW50ZXJcIiBcbiAgICAgICAgICAgIEhvcml6b250YWxUZXh0QWxpZ25tZW50PVwiQ2VudGVyXCIgLz5cbiAgICAgICAgPExhYmVsIFxuICAgICAgICAgICAgeDpOYW1lPVwiVmlld01vZGVsMkxhYmVsXCIgXG4gICAgICAgICAgICBCaW5kaW5nQ29udGV4dD1cIntCaW5kaW5nIFNvdXJjZSA9e2xvY2FsOlZpZXdNb2RlbDIgfX1cIiBcbiAgICAgICAgICAgIFRleHQ9XCJ7QmluZGluZyBMYWJlbFRleHR9XCIgXG4gICAgICAgICAgICBIb3Jpem9udGFsT3B0aW9ucz1cIkNlbnRlclwiIFxuICAgICAgICAgICAgSG9yaXpvbnRhbFRleHRBbGlnbm1lbnQ9XCJDZW50ZXJcIiAvPlxuICAgICAgICBcbiAgICA8L1N0YWNrTGF5b3V0PlxuICAgIFxuPC9Db250ZW50UGFnZT5cbmBgYFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjdmMDY4YTAxLTk2YWEtNDhhMi1iZTVjLWUyZmVlMGUzMGIzZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXhPVEF6T1RrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGFnZS10cmFuc2l0aW9ucy10cmF2ZWxhcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOTY0Yzc5ZGMzOGIwMzUwMzNlM2E0YzA4OGZjZTI3M2Q5Yzc4ODE1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgUGFnZSBUcmFuc2l0aW9ucyBUcmF2ZWxhcHBcblxuIyMjIEZvcmtcblxu8J+Zi/Cfj7wgVGhpcyByZXBvc2l0b3J5IGlzIGEgcmV3cml0ZSB3aXRoIEFuZ3VsYXIgJiBBbmd1bGFyIFVuaXZlcnNhbCBvZiBbU2FyYWggRHJhc25lcl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9zYXJhaF9lZG8pJ3Mgb3JnaW5hbCB3b3JrIHdpdGggW1Z1ZSAmIE51eHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9zZHJhcy9wYWdlLXRyYW5zaXRpb25zLXRyYXZlbGFwcCkuXG5cbkxpdmUgZGVtbzogW2h0dHBzOi8vcGFnZS10cmFuc2l0aW9ucy10cmF2ZWxhcHAuYXp1cmV3ZWJzaXRlcy5uZXRdKGh0dHBzOi8vcGFnZS10cmFuc2l0aW9ucy10cmF2ZWxhcHAuYXp1cmV3ZWJzaXRlcy5uZXQpXG5cbiMjIyBPcmlnaW5hbFxuXG5UaGlzIGRlbW8gc2hvd3MgYW4gZXhhbXBsZSBvZiBob3cgdG8gYWNoaWV2ZSBuYXRpdmUtbGlrZSBwYWdlIHRyYW5zaXRpb25zIG9uIHRoZSB3ZWIuIFRoZXJlJ3MgbXVjaCB0byBiZSBpbXByb3ZlZCBoZXJlLSBpdCdzIG5vdCBtZWFudCB0byBiZSBhIGZ1bGwtZmxlZGdlZCB3ZWIgYXBwbGljYXRpb24sIGp1c3QgYSBxdWljayBkZW1vIHRvIHNob3cgaG93IHRoaXMga2luZCBvZiBpbXBsZW1lbnRhdGlvbiBjb3VsZCB0aGVvcmV0aWNhbGx5IHdvcmsuIFRoZXNlIGNvbmNlcHRzIGNhbiBhbmQgc2hvdWxkIGJlIGV4cHJlc3NlZCBkaWZmZXJlbnRseSBpbiB5b3VyIG93biBhcHBsaWNhdGlvbiwgdGhlIHNreSdzIHRoZSBsaW1pdCBoZXJlISBUaGlzIGlzIGNyZWF0ZWQgd2l0aCBOdXh0IGFuZCBWdWUuXG5cbkFydGljbGUgZXhwbGFpbmluZyB0aGUgZGVtbyBpcyBhdmFpbGFibGUgYXRcbltodHRwczovL2Nzcy10cmlja3MuY29tL25hdGl2ZS1saWtlLWFuaW1hdGlvbnMtZm9yLXBhZ2UtdHJhbnNpdGlvbnMtb24tdGhlLXdlYl0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9uYXRpdmUtbGlrZS1hbmltYXRpb25zLWZvci1wYWdlLXRyYW5zaXRpb25zLW9uLXRoZS13ZWIpXG5cbiMjIEJ1aWxkIFNldHVwXG5cbmBgYGJhc2hcbiMgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiQgbnBtIGluc3RhbGwgIyBPciB5YXJuIGluc3RhbGxcblxuIyBzZXJ2ZSB3aXRoIGhvdCByZWxvYWQgYXQgaHR0cDovL2xvY2FsaG9zdDo0MjAwL1xuJCBuZyBzZXJ2ZVxuXG4jIGJ1aWxkIGZvciBwcm9kdWN0aW9uIGFuZCBsYXVuY2ggc2VydmVyXG4kIG5wbSBydW4gYnVpbGQ6c3NyICYmIG5wbSBydW4gc2VydmU6c3NyXG5cbiMgZ2VuZXJhdGUgc3RhdGljIHByb2plY3RcbiQgbnBtIHJ1biBidWlsZDpzc3JcbmBgYFxuXG4jIyBSdW5pbmcgaW4gRG9ja2VyXG5cbkZpcnN0IGJ1aWxkIHRoZSBwcm9qZWN0LiBTZWUgW2J1aWxkXSgjYnVpbGQpIGZvciBkZXRhaWxzLlxuXG5Ob3cgeW91IGNhbiBidWlsZCBEb2NrZXIgaW1hZ2U6XG5cbmBgYGJhc2hcbmRvY2tlciBidWlsZCAtdCBwYWdlLXRyYW5zaXRpb25zLXRyYXZlbGFwcCAuXG5gYGBcblxuYW5kIHJ1biBpdDpcblxuYGBgYmFzaFxuZG9ja2VyIHJ1biAtcCA4MDo4MCBwYWdlLXRyYW5zaXRpb25zLXRyYXZlbGFwcFxuYGBgXG5cbk5hdmlnYXRlIHRvIGh0dHA6Ly9sb2NhbGhvc3QgaW4gb3JkZXIgdG8gc2VlIHRoZSBjb250YWluZXJpemVkIGFwcGxpY2F0aW9uLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuRm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGhvdyB0aGluZ3Mgd29yaywgY2hlY2tvdXQgdGhlIFtBbmd1bGFyIFVuaXZlcnNhbCBkb2NzXShodHRwczovL2FuZ3VsYXIuaW8vZ3VpZGUvdW5pdmVyc2FsKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxNjhjOGMzYy0xMzJjLTRjOGEtYTNhZS01ZmI3NDk1ZDdiZjMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1qRTRNemN6IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJDb2RlQ2FtcGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjQ4YTM4Nzk2MDgzMDZhNzhmYTU0ZGVkZWU2ZWZlYzE2MDQ1OWEyNDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXlOVGsxT1RRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYW5ndWxhci13b3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ZjMwNzY2MjRhZWY2Njg3ODY5MDMwYjIwYjFhNjVkNDBiYjljYjU3IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBUcmF2ZWxBcHBcblxuVGhpcyB3b3Jrc2hvcCBpcyBhbiBpbnRybyB0byBBbmd1bGFyLiBUbyBmb2xsb3cgYWxvbmcgbWFrZSBzdXJlIHRvIGNoZWNrb3V0IGJyYW5jaGVzIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XG5cbjEuIGVzNi10eXBlc2NyaXB0XG4yLiBjb21wb25lbnRzXG4zLiB0ZW1wbGF0aW5nXG40LiBjb21wb25lbnRzLWNvbW11bmljYXRpb25cbjUuIHNlcnZpY2VzXG42LiBmb3Jtc1xuNy4gcm91dGluZ1xuOC4gZmluYWxcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDYuMC4xLlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLS1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjgwZmE2ZmU3LTA2YjEtNGM1Yy1hNTQ5LTg2Mzk3MDBlZGI0ZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU16TTNORFExIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJraXMtcmVxdWlyZWpzLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODhjMTYyZTI3Y2U0M2E5OTQzZjM5NmViNzk5M2ZhNmM4ZjNlMjBjOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5URXpNakE0IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJqczRuZXRkZXYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjcyNzUzNzkwN2IyMGFhYTFlZGZkZDg4OTRiMGIxOTYzMDNhZmIyYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09UY3lOVEUwIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJIb3RUb3dlbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlZTM3ZjBmNDhlMmY5MGQ0NDU5YWY1MTk3ZjUwZmZhZTcyZjFmOTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16UXpNRGswT0RVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicGxhY2VzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI5MDM5MmYxYjQ5MGNhNWY3OTQ2NGJiY2Q4NDI5YjdlODBiZjEzMDEyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbGFjZXMtYXBpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjM3OTM2OTEtNGJmNi00MzFlLWFhZmQtMWVhZGRlMzcxYmExIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qVTBPVGMxIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJQbHVyYWxzaWdodFNwYUp1bXBTdGFydEZpbmFsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjhlNTJlYmVlODQ0ZDk0YzUwNGU0MzVmODU3OGQ4ZmM4MTU5NmRlYjMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTBPVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidG9hc3RyLWJvd2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE2OWFhOGUzMDIxY2JmMWM2NGVhZWRlYzNiNDE4YzA0MzEzYWY5NWEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16VXhPRGszTmpRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYWR2YW5jZWQtcHdhIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjJkOTI1OGIwMWY0MmU3MWMzYmM4MzRkYjdhMGFhOTljNGEyZTlhYjciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFB3YVxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gNi4wLjEuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtLXByb2RgIGZsYWcgZm9yIGEgcHJvZHVjdGlvbiBidWlsZC5cblxuIyMgUnVubmluZyB1bml0IHRlc3RzXG5cblJ1biBgbmcgdGVzdGAgdG8gZXhlY3V0ZSB0aGUgdW5pdCB0ZXN0cyB2aWEgW0thcm1hXShodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8pLlxuXG4jIyBSdW5uaW5nIGVuZC10by1lbmQgdGVzdHNcblxuUnVuIGBuZyBlMmVgIHRvIGV4ZWN1dGUgdGhlIGVuZC10by1lbmQgdGVzdHMgdmlhIFtQcm90cmFjdG9yXShodHRwOi8vd3d3LnByb3RyYWN0b3J0ZXN0Lm9yZy8pLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG5cbiMjIFRlc3RcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4NWY1NjAyYi0zZWE5LTRlMGItYjlkMC0wYmZiMTJkNDI0M2QiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRPVFkzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiSG90VG93ZWwtQW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMThlZTkxN2ZmNTk2NTgwY2M1YmU5OTdmNjIyNTMxNWFmNjZmNmIwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzVPRGM1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhci1OdUdldCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhYTVlZDY1NTQyNWE0OGJiOTE5MDk4OTc3ZDc1MjAwZjY1ZjVjZjQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EZzVNams0TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci5icmVlemUuc3RvcmFnZXdpcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMjliY2JiMzMxZjBkMjk4ZDI2MDdiODM3NmIxNzllYWMwYWY2N2E5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5Ua3hNREEyT1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2MtbW9uZ28tZGF0YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzNDIyM2ZjZDAxNjE0OGJlMGEyMGFjMDhmZWNjMmI2MzIzZWVkOWZhIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTJPREl6TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctZGVtb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Q0YzY1MDQzYWJiZjVmMDY2YWRmZmMzYWNmMzdmOWY1OGI0NDJhMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UUTJNelEyTWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2hlZXJ6LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNDgxODMzYzM0MDRjZDRlYmE3M2EwYjQxMDc4M2Y5OTQxYTZmNGZiZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFUwTlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ3VscC1wYXR0ZXJucyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlYTZmNGY3Mzk1Yzk4MjY0M2Q3NDg5NzMwODMxMzQ1MjY1NzFlMWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qUTFNelE0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10ZXN0aW5nLXF1aWNrLXN0YXJ0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM5ZmZhMzc1NDdjNGUyYjUwMjFhMzY5NjA4Mjg1MTA2NTdjMDk5MTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16a3lOalEzTWpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZnVuY3Rpb25zLWJhc2UtYXJtLXRlbXBsYXRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImM2NGQ3YTZmZTBmM2NhMmMzYjRkZTZiYjkxYzM2ZWM1MDZmOWQxMDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGZ1bmN0aW9ucy1iYXNlLWFybS10ZW1wbGF0ZVxuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHA6Ly9henVyZWRlcGxveS5uZXQvZGVwbG95YnV0dG9uLnBuZyldKGh0dHBzOi8vcG9ydGFsLmF6dXJlLmNvbS8jY3JlYXRlL01pY3Jvc29mdC5UZW1wbGF0ZS91cmkvaHR0cHMlM0ElMkYlMkZyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tJTJGc2ltb25hY28lMkZmdW5jdGlvbnMtYmFzZS1hcm0tdGVtcGxhdGUlMkZtYXN0ZXIlMkZhenVyZWRlcGxveS5qc29uKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjUwNTI1NTUxLWRiNDItNDU2My1iYmI4LWYzOWNkNWM3MTUwZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56QXhORGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2VuZXJhdG9yLWhvdHRvd2VsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI2ZDUzNzYzMDFiNGJmYTEyNjExZjI5ZDY3NTU2MzdhMjQ5MzA3NDgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlPRGMyTnpRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk1Y2Y2NTEwOTYwNDM5MGUzMDg5MzcwZDJhZDgwYzUxOTFmNDU4ZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIE5ncnhEZW1vXG5cbkRlbW8gc2hvd2luZyBOZ1J4IHdpdGggQW5ndWxhclxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNWY3ZGMxZmYtNGYyNC00NTczLWI5MmItY2RhYzM4ZmZmOGVlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9ETXdPVFkyTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYmFyZGpzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZmZjY0ZTJiY2YxYjkzMTkyNWE2N2JiOTgzYjlmNThmYTU1NGZmMzUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16a3lOalEzTWpZPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJmdW5jdGlvbnMtYmFzZS1hcm0tdGVtcGxhdGUiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImM2NGQ3YTZmZTBmM2NhMmMzYjRkZTZiYjkxYzM2ZWM1MDZmOWQxMDciLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIGZ1bmN0aW9ucy1iYXNlLWFybS10ZW1wbGF0ZVxuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHA6Ly9henVyZWRlcGxveS5uZXQvZGVwbG95YnV0dG9uLnBuZyldKGh0dHBzOi8vcG9ydGFsLmF6dXJlLmNvbS8/V1QubWNfaWQ9ZnVuY3Rpb25zYmFzZWFybXRlbXBsYXRlLWdpdGh1Yi1zaWNvdGluI2NyZWF0ZS9NaWNyb3NvZnQuVGVtcGxhdGUvdXJpL2h0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRnNpbW9uYWNvJTJGZnVuY3Rpb25zLWJhc2UtYXJtLXRlbXBsYXRlJTJGbWFzdGVyJTJGYXp1cmVkZXBsb3kuanNvbilcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzZTQ5NmM0NS1iYmYzLTRlNzItOWE4ZS1hMmZiZGNmYmY0NTQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek16TXpPREl6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVGltZXNoZWV0cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZGFhM2Q5MDg5ZmU5MmQzYzQ2ZWQ5ZTM1MTdjNzU2ZDI3M2E1MWEyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXdOakF3TmpFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5TZW50cnlBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjYyNDE5YjNhOWI5ZmQ4OTFhN2MyNTdiNGQ0N2U5NTI0MTRkMzVhYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFhhbWFyaW5TZW50cnlBcHBcblxuVGhpcyBzYW1wbGUgYXBwIHNob3dzIGhvdyB0byBpbXBsZW1lbnQgW1NlbnRyeV0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9jbGllbnRzL2NzaGFycC8pJ3MgY3Jhc2ggYW5kIGFuYWx5dGljcyB0b29scyBpbnRvIHlvdXIgW1hhbWFyaW5dKGh0dHBzOi8vdmlzdWFsc3R1ZGlvLm1pY3Jvc29mdC5jb20veGFtYXJpbj9XVC5tY19pZD14YW1hcmluc2VudHJ5YXBwLWdpdGh1Yi1icmFtaW4pIGFwcC5cblxuIVtTZW50cnkgQ3Jhc2ggUmVwb3J0XShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy80MzM0Njk0OS0zNDZkNzA3NC05MWE4LTExZTgtOTRkNi1lZDEwZmYwNzhhMmMucG5nKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImI0ZGFlYTdkLWZlNWItNGEzMC1iMWZmLTg3YTliMDgzOTRiNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtYW5ndWxhci10eXBlc2NyaXB0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXpORGsxTlRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibmlrYml0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImVmMzJmNWI5NWIyNzhmMTRmZGY4MjRlMDExYjEzYWFhYWU1NjE4YjgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIG5pa2JpdFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRmMmJlNWZiLWFlNjctNDU1NC05NWJmLTIwYTU4OWVmOWZmMyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5EUXhPVEk1T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXNwbmV0NS13b3Jrc2hvcC0yMDE1IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI0MjgzZmNiNWM5Y2I0ZjY4ZDMyOTcxYmQ3MzM2Y2Y0YzZiNzMxN2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERXdOelF4T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiRVM2LU1vZHVsZXMtU3RhcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2N2Y4ZmViOThiOTQ2NDg4MmI5NTA5NjVmZjQ2YzJhYTRhZjYyNWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERTRNVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzYxZmY0ZTBkOTg2YTQ1OWM4NDE0YWVlYTZhZTBhNTcyMTE1Mzc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1URTROVEE1TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtZWxlY3Ryb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTFkYjVmZGIyODcwOTYyNzEzMDM4ZjRhZTc1YzQwYWJlNTI2OWVmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1UY3pOakV6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10b3VyLW9mLWhlcm9lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNjU5Njc3MTBlOGIxYjg3YzBlNmE0ZjE5ZWVhMmI1ZjU0ZTdjNTBlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EUTNPRFl3TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibGl0ZS1zZXJ2ZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmJjNmIwYzYzYzdhODJjMDFiN2IxMTM1NzljMzE0MDBjNDE1ZmE3NSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESTBORFkyTXpZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidm90aW5nLWFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYmNjOTlmOGMzODgzNWQwYmJjM2JiYTc2MmQ0YmU3YmRlMzI4YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby52b3RpbmctYXBwP2JyYW5jaE5hbWU9bWFzdGVyKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3NpY290aW4vc2ljb3Rpbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0xMT9icmFuY2hOYW1lPW1hc3RlcilcblxuIyBWb3RpbmcgQXBwXG5cbkluIHRoaXMgd29ya3Nob3Agd2UnbGwgYnVpbGQgYSBTZXJ2ZXJsZXNzIEdyYXBoUUwgZW5kcG9pbnQgZm9yIGFuIGV4aXN0aW5nIHZvdGluZyBBUEkuXG5cbiMjIFByZXJlcXVpc2l0ZXNcblxuMS4gQSByZWNlbnQgdmVyc2lvbiBvZiBOb2RlICg4KylcblxuMS4gVlMgQ29kZTogW2Rvd25sb2FkIHBhZ2VdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2Rvd25sb2FkLz9XVC5tY19pZD13b3Jrc2hvcC1sZG5qcy1zaWNvdGluKSAgXG5cbjEuIEF6dXJlIEZ1bmN0aW9ucyBDTEk6IFtkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9henVyZS1mdW5jdGlvbnMvZnVuY3Rpb25zLXJ1bi1sb2NhbD9XVC5tY19pZD13b3Jrc2hvcC1sZG5qcy1zaWNvdGluKSAgXG5cbjEuIEF6dXJlIEZ1bmN0aW9ucyBFeHRlbnNpb24gZm9yIFZTIENvZGU6IFttYXJrZXRwbGFjZV0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zLz9XVC5tY19pZD13b3Jrc2hvcC1sZG5qcy1zaWNvdGluJml0ZW1OYW1lPW1zLWF6dXJldG9vbHMudnNjb2RlLWF6dXJlZnVuY3Rpb25zKSAgXG5cbjEuIEF6dXJlIGFjY291bnQ6IFtodHRwczovL2FrYS5tcy9mcmVlXShodHRwczovL2FrYS5tcy9mcmVlKVxuXG4jIyBTdGVwc1xuXG4xLiBDcmVhdGUgeW91ciBvd24gc2VydmljZXMgZm9sbG93aW5nIHN0ZXBzIG9uIFtzZXJ2aWNlcyByZWFkbWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9zZXJ2ZXJsZXNzLWdyYXBocWwtd29ya3Nob3AvYmxvYi9tYXN0ZXIvc2VydmljZXMvUmVhZG1lLm1kKVxuXG4xLiBDcmVhdGUgR3JhcGhRTCBlbmRwb2ludCBmb2xsb3dpbmcgc3RlcHMgb24gW2FwaSByZWFkbWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9zZXJ2ZXJsZXNzLWdyYXBocWwtd29ya3Nob3AvYmxvYi9tYXN0ZXIvZ3JhcGhxbC1hcGkvUmVhZG1lLm1kKVxuXG4xLiBBZGQgR3JhcGhpUUwgVUkgdXNpbmcgc3RlcHMgaW4gW3JlYWRtZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3NlcnZlcmxlc3MtZ3JhcGhxbC13b3Jrc2hvcC9ibG9iL21hc3Rlci9ncmFwaGlxbC9SZWFkbWUubWQpXG5cbiMjIERlbW8gYXBwXG5cbkdyYXBoUUwgZW5kcG9pbnQ6IFtodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaHFsXShodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaHFsKVxuXG5HcmFwaGlRTCBlbmRwb2ludDpcbltodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaGlxbF0oaHR0cHM6Ly9ncmFwaHFscGxheWdyb3VuZC5henVyZXdlYnNpdGVzLm5ldC9hcGkvZ3JhcGhpcWwpXG5cblNhbXBsZSBxdWVyeTpcblxuYGBgXG5xdWVyeSB7XG4gIHRlYW1zIHtcbiAgICBpZFxuICAgIG5hbWVcbiAgICBwb2ludHNcbiAgfVxufVxuYGBgXG5cblNhbXBsZSBtdXRhdGlvbjpcblxuYGBgXG5tdXRhdGlvbiB7XG4gIGluY3JlbWVudFBvaW50cyhpZDoyKSB7XG4gICAgaWRcbiAgICBuYW1lXG4gICAgcG9pbnRzXG4gIH1cbn1cbmBgYFxuXG4jIyBJbnN0YWxsIE1vYmlsZSBBcHBcblxufCBNb2JpbGUgT1MgfCBJbnN0YWxsYXRpb24gTGluayB8XG58LS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLXxcbnwgaU9TIHwgW0luc3RhbGwgaU9TIEFwcF0oLi9tb2JpbGUvVm90aW5nQXBwL2lPU19Eb3dubG9hZF9JbnN0cnVjdGlvbnMubWQpIHxcbnwgQW5kcm9pZCB8IFtJbnN0YWxsIEFuZHJvaWQgQXBwXShodHRwczovL2luc3RhbGwuYXBwY2VudGVyLm1zL29yZ3Mvdm90aW5nLWFwcC9hcHBzL2J1YmJsZS13YXIvZGlzdHJpYnV0aW9uX2dyb3Vwcy9sb25kb24lMjBncmFwaHFsJTIwd29ya3Nob3ApIHxcblxufENJIFRvb2wgICAgICAgICAgICAgICAgICAgIHxCdWlsZCBTdGF0dXN8XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLXxcbnwgQXBwIENlbnRlciwgaU9TIHwgWyFbQnVpbGQgc3RhdHVzXShodHRwczovL2J1aWxkLmFwcGNlbnRlci5tcy92MC4xL2FwcHMvNjAwNTZkNDUtZjQyZi00YmNkLTg3MGItMTljMTBjNDAwYzY2L2JyYW5jaGVzL21hc3Rlci9iYWRnZSldKGh0dHBzOi8vYXBwY2VudGVyLm1zKSB8XG58IEFwcCBDZW50ZXIsIEFuZHJvaWQgfCBbIVtCdWlsZCBzdGF0dXNdKGh0dHBzOi8vYnVpbGQuYXBwY2VudGVyLm1zL3YwLjEvYXBwcy9iMWNkY2YxYi0yNjg1LTQxMDUtODk0ZS05YjYwMDg3ZGZjNDgvYnJhbmNoZXMvbWFzdGVyL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpIHxcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxNjBhNWFiMS01YjM2LTQxNjAtYTgzMi1hY2ViYTc0ODE0MTciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESXpOVE00TlRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFjY2VsZXJvbWV0ZXJBcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTc2MGIwYjc0ZGQxMTkwZjkyMDBiMjM5NGZkZDUwOTM5NGY3YjIyYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFpbiIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFjY2VsZXJvbWV0ZXIgQXBwXG5cblRoYW5rcyB0byBbWGFtYXJpbi5Fc3NlbnRpYWxzXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS94YW1hcmluL2Vzc2VudGlhbHM/V1QubWNfaWQ9YWNjZWxlcm9tZXRlcmFwcC1naXRodWItYnJhbWluKSBhbmQgW1N5bmNGdXNpb24ncyBDaXJjdWxhciBHYXVnZV0oaHR0cHM6Ly93d3cuc3luY2Z1c2lvbi5jb20vcHJvZHVjdHMveGFtYXJpbi9jaXJjdWxhci1nYXVnZSkgY29udHJvbCwgY3JlYXRpbmcgYSBtb2JpbGUgYXBwIHRoYXQgbW9uaXRvcnMgdGhlIGFjY2VsZXJvbWV0ZXIgZGF0YSBoYXMgbmV2ZXIgYmVlbiBlYXNpZXIuXG5cbkxldCdzIHRha2UgYSBsb29rIGF0IGhvdyB0byBpbXBsZW1lbnQgdGhpcyBjb250cm9sIGluIGEgWGFtYXJpbi5Gb3JtcyBhcHAuXG5cbiFbQWNjZWxlcm9tZXRlciBBcHBdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzQzMjI4ODc1LWIyYzUxNmVlLTkwMTctMTFlOC05MzUwLTEwMTZkNzQ1MWE4Zi5naWYpXG5cbiMjIFdhbGt0aHJvdWdoXG5cbiMjIyAxLiBJbnN0YWxsIE51R2V0IFBhY2thZ2VzXG5cbjEuIEluc3RhbGwgdGhlIFtTeW5jZnVzaW9uLlhhbWFyaW4uU2ZHYXVnZSBOdUdldCBQYWNrYWdlXShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvU3luY2Z1c2lvbi5YYW1hcmluLlNmR2F1Z2UpIGludG8gZWFjaCBwcm9qZWN0LCB0aGlzIGluY2x1ZGVzIHRoZSBYYW1hcmluLmlPUywgWGFtYXJpbi5BbmRyb2lkLCBhbmQgdGhlIC5ORVQgU3RhbmRhcmQgUHJvamVjdCAoaWYgb25lIGlzIGJlaW5nIHVzZWQpLlxuMi4gSW5zdGFsbCB0aGUgW1hhbWFyaW4uRXNzZW50aWFscyBOdUdldCBQYWNrYWdlXShodHRwczovL3d3dy5udWdldC5vcmcvcGFja2FnZXMvWGFtYXJpbi5Fc3NlbnRpYWxzKSBpbnRvIGVhY2ggcHJvamVjdCwgdGhpcyBpbmNsdWRlcyB0aGUgWGFtYXJpbi5pT1MsIFhhbWFyaW4uQW5kcm9pZCwgYW5kIHRoZSAuTkVUIFN0YW5kYXJkIFByb2plY3QgKGlmIG9uZSBpcyBiZWluZyB1c2VkKS5cblxuIyMjIDIuIEluaXRpYWxpemUgU3luY0Z1c2lvbiBvbiBpT1NcblxuVG8gdXRpbGl6ZSB0aGUgU3luY0Z1c2lvbiBDaXJjdWxhciBHYXVnZSwgd2UgZmlyc3QgbmVlZCB0byBpbml0aWFsaXplIGl0IGluIGBBcHBEZWxlZ2F0ZS5GaW5pc2hlZExhdW5jaGluZ2A6XG5cbmBgYGNzaGFycFxucHVibGljIHBhcnRpYWwgY2xhc3MgQXBwRGVsZWdhdGUgOiBnbG9iYWw6OlhhbWFyaW4uRm9ybXMuUGxhdGZvcm0uaU9TLkZvcm1zQXBwbGljYXRpb25EZWxlZ2F0ZVxue1xuICAgIC4uLlxuXG4gICAgcHVibGljIG92ZXJyaWRlIGJvb2wgRmluaXNoZWRMYXVuY2hpbmcoVUlBcHBsaWNhdGlvbiB1aUFwcGxpY2F0aW9uLCBOU0RpY3Rpb25hcnkgbGF1bmNoT3B0aW9ucylcbiAgICB7XG4gICAgICAgIC4uLlxuXG4gICAgICAgIFN5bmNmdXNpb24uU2ZHYXVnZS5YRm9ybXMuaU9TLlNmR2F1Z2VSZW5kZXJlci5Jbml0KCk7XG4gICAgICAgIFN5bmNmdXNpb24uTGljZW5zaW5nLlN5bmNmdXNpb25MaWNlbnNlUHJvdmlkZXIuUmVnaXN0ZXJMaWNlbnNlKFwiWW91ciBTeW5jRnVzaW9uIExpY2Vuc2UgS2V5XCIpO1xuXG4gICAgICAgIC4uLlxuICAgIH1cbn1cbmBgYFxuXG4jIyMgMy4gSW5pdGlhbGl6ZSBTeW5jRnVzaW9uIG9uIEFuZHJvaWRcblxuVG8gdXRpbGl6ZSB0aGUgU3luY0Z1c2lvbiBDaXJjdWxhciBHYXVnZSwgd2UgZmlyc3QgbmVlZCB0byBpbml0aWFsaXplIGl0IGBNYWluQWN0aXZpdHkuT25DcmVhdGVgOlxuXG5gYGBjc2hhcnBcbnB1YmxpYyBjbGFzcyBNYWluQWN0aXZpdHkgOiBnbG9iYWw6OlhhbWFyaW4uRm9ybXMuUGxhdGZvcm0uQW5kcm9pZC5Gb3Jtc0FwcENvbXBhdEFjdGl2aXR5XG57XG4gICAgLi4uXG5cbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBPbkNyZWF0ZShCdW5kbGUgc2F2ZWRJbnN0YW5jZVN0YXRlKVxuICAgIHtcbiAgICAgICAgLi4uXG5cbiAgICAgICAgU3luY2Z1c2lvbi5MaWNlbnNpbmcuU3luY2Z1c2lvbkxpY2Vuc2VQcm92aWRlci5SZWdpc3RlckxpY2Vuc2UoXCJZb3VyIFN5bmNGdXNpb24gTGljZW5zZSBLZXlcIik7XG5cbiAgICAgICAgLi4uXG4gICAgfVxufVxuYGBgXG5cbiMjIyA0LiBSZWZlcmVuY2UgTW9uby5BbmRyb2lkLkV4cG9ydFxuXG4xLiBJbiB0aGUgU29sdXRpb24gRXhwbG9yZXIsIGluIHRoZSBBbmRyb2lkIHByb2plY3QsIHJpZ2h0LWNsaWNrIG9uICoqUmVmZXJlbmNlcyoqXG4yLiBJbiB0aGUgKipSZWZlcmVuY2VzKiogbWVudSwgc2VsZWN0ICoqRWRpdCBSZWZlcmVuY2VzKipcblxuIVtFZGl0IFJlZmVyZW5jZXNdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzQzMjI3OTQwLTA4MDQxODRjLTkwMTUtMTFlOC04MjI1LTBiMDRiNTUwNzIxOS5wbmcpXG5cbjMuIEluIHRoZSAqKkVkaXQgUmVmZXJlbmNlcyoqIHdpbmRvdywgc2VsZWN0IHRoZSAqKlBhY2thZ2VzKiogdGFiXG40LiBJbiB0aGUgKipQYWNrYWdlcyoqIHRhYiwgbG9jYXRlIGBNb25vLkFuZHJvaWQuRXhwb3J0YFxuNS4gSW4gdGhlICoqUGFja2FnZXMqKiB0YWIsIGVuc3VyZSBgTW9uby5BbmRyb2lkLkV4cG9ydGAgaXMgY2hlY2tlZFxuNi4gSW4gdGhlICoqRWRpdCBSZWZlcmVuY2VzKiogd2luZG93LCBjbGljayAqKk9LKipcblxuIVtSZWZlcm5jZSBNb25vLkFuZHJvaWQuRXhwb3J0XShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy80MzIyNzk0OS0wYzc3ZWQwZS05MDE1LTExZTgtOGZmNS0yNmQ5Zjc2N2UwOTUucG5nKVxuXG4jIyMgNS4gSW1wbGVtZW50IFNmQ2lyY3VsYXJHYXVnZSBpbiBYYW1hcmluLkZvcm1zXG5cblRoaXMgYXBwIHJlcXVpcmVzIDMgaW5zdGFuY2VzIG9mIHRoZSBDaXJjdWxhciBHYXVnZSBDb250cm9sIGluIG91ciBhcHAsIHNvIGxldCdzIHN0YXJ0IGJ5IGNyZWF0aW5nIGFuIGltcGxlbWVudGF0aW9uIG9mIGBTZkNpcmN1bGFyR2F1Z2VgXG5cbmBgYGNzaGFycFxucHVibGljIGNsYXNzIENpcmN1bGFyR2F1Z2VWaWV3IDogU2ZDaXJjdWxhckdhdWdlXG57XG4gICAgcHVibGljIENpcmN1bGFyR2F1Z2VWaWV3KHN0cmluZyBoZWFkZXJUZXh0LCBkb3VibGUgc3RhcnRWYWx1ZSwgZG91YmxlIGVuZFZhbHVlKVxuICAgIHtcbiAgICAgICAgUG9pbnRlciA9IG5ldyBOZWVkbGVQb2ludGVyIHsgQW5pbWF0aW9uRHVyYXRpb24gPSAwLjUgfTtcblxuICAgICAgICB2YXIgaGVhZGVyID0gbmV3IEhlYWRlclxuICAgICAgICB7XG4gICAgICAgICAgICBUZXh0ID0gaGVhZGVyVGV4dCxcbiAgICAgICAgICAgIEZvcmVncm91bmRDb2xvciA9IENvbG9yLkdyYXlcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2lyY3VsYXJHYXVnZVNjYWxlID0gbmV3IFNjYWxlXG4gICAgICAgIHtcbiAgICAgICAgICAgIEludGVydmFsID0gKGVuZFZhbHVlIC0gc3RhcnRWYWx1ZSkgLyAxMCxcbiAgICAgICAgICAgIFN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlLFxuICAgICAgICAgICAgRW5kVmFsdWUgPSBlbmRWYWx1ZSxcbiAgICAgICAgICAgIFNob3dUaWNrcyA9IHRydWUsXG4gICAgICAgICAgICBTaG93TGFiZWxzID0gdHJ1ZSxcbiAgICAgICAgICAgIFBvaW50ZXJzID0geyBQb2ludGVyIH0sXG4gICAgICAgICAgICBNaW5vclRpY2tzUGVySW50ZXJ2YWwgPSA0LFxuICAgICAgICB9O1xuXG4gICAgICAgIFNjYWxlcyA9IG5ldyBPYnNlcnZhYmxlQ29sbGVjdGlvbjxTY2FsZT4geyBjaXJjdWxhckdhdWdlU2NhbGUgfTtcbiAgICAgICAgSGVhZGVycyA9IG5ldyBPYnNlcnZhYmxlQ29sbGVjdGlvbjxIZWFkZXI+IHsgaGVhZGVyIH07XG4gICAgfVxuXG4gICAgcHVibGljIE5lZWRsZVBvaW50ZXIgUG9pbnRlciB7IGdldDsgfVxufVxuYGBgXG5cbiMjIyA2LiBDcmVhdGUgQWNjZWxlcm9tZXRlciBQYWdlXG5cbkluIHRoZSBYYW1hcmluLkZvcm1zIHByb2plY3QsIGNyZWF0ZSBhIG5ldyBjbGFzcywgYEFjY2VsZXJvbWV0ZXJQYWdlLmNzYDpcblxuYGBgY3NoYXJwXG5wdWJsaWMgY2xhc3MgQWNjZWxlcm9tZXRlclBhZ2UgOiBDb250ZW50UGFnZVxue1xuICAgIHJlYWRvbmx5IENpcmN1bGFyR2F1Z2VWaWV3IHhDaXJjdWxhckdhdWdlLCB5Q2lyY3VsYXJHYXVnZSwgekNpcmN1bGFyR2F1Z2U7XG5cbiAgICBwdWJsaWMgQWNjZWxlcm9tZXRlclBhZ2UoKVxuICAgIHtcbiAgICAgICAgSWNvbiA9IFwiQWNjZWxlcm9tZXRlclwiO1xuICAgICAgICBUaXRsZSA9IFwiQWNjZWxlcm9tZXRlclwiO1xuXG4gICAgICAgIHhDaXJjdWxhckdhdWdlID0gbmV3IENpcmN1bGFyR2F1Z2VWaWV3KFwiWC1BeGlzXCIsIC0xLCAxKTtcbiAgICAgICAgeUNpcmN1bGFyR2F1Z2UgPSBuZXcgQ2lyY3VsYXJHYXVnZVZpZXcoXCJZLUF4aXNcIiwgLTEsIDEpO1xuICAgICAgICB6Q2lyY3VsYXJHYXVnZSA9IG5ldyBDaXJjdWxhckdhdWdlVmlldyhcIlotQXhpc1wiLCAtMTAsIDEwKTtcblxuICAgICAgICB2YXIgZ3JpZCA9IG5ldyBHcmlkXG4gICAgICAgIHtcbiAgICAgICAgICAgIE1hcmdpbiA9IG5ldyBUaGlja25lc3MoMCwgMjApLFxuICAgICAgICAgICAgUm93RGVmaW5pdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgbmV3IFJvd0RlZmluaXRpb24geyBIZWlnaHQgPSBuZXcgR3JpZExlbmd0aCgxLCBHcmlkVW5pdFR5cGUuU3RhcikgfSxcbiAgICAgICAgICAgICAgICBuZXcgUm93RGVmaW5pdGlvbiB7IEhlaWdodCA9IG5ldyBHcmlkTGVuZ3RoKDEsIEdyaWRVbml0VHlwZS5TdGFyKSB9LFxuICAgICAgICAgICAgICAgIG5ldyBSb3dEZWZpbml0aW9uIHsgSGVpZ2h0ID0gbmV3IEdyaWRMZW5ndGgoMSwgR3JpZFVuaXRUeXBlLlN0YXIpIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQ29sdW1uRGVmaW5pdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgbmV3IENvbHVtbkRlZmluaXRpb24geyBXaWR0aCA9IG5ldyBHcmlkTGVuZ3RoKDEsIEdyaWRVbml0VHlwZS5TdGFyKSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGdyaWQuQ2hpbGRyZW4uQWRkKHhDaXJjdWxhckdhdWdlLCAwLCAwKTtcbiAgICAgICAgZ3JpZC5DaGlsZHJlbi5BZGQoeUNpcmN1bGFyR2F1Z2UsIDAsIDEpO1xuICAgICAgICBncmlkLkNoaWxkcmVuLkFkZCh6Q2lyY3VsYXJHYXVnZSwgMCwgMik7XG5cbiAgICAgICAgQ29udGVudCA9IGdyaWQ7XG5cbiAgICAgICAgT248WGFtYXJpbi5Gb3Jtcy5QbGF0Zm9ybUNvbmZpZ3VyYXRpb24uaU9TPigpLlNldFVzZVNhZmVBcmVhKHRydWUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uQXBwZWFyaW5nKClcbiAgICB7XG4gICAgICAgIGJhc2UuT25BcHBlYXJpbmcoKTtcblxuICAgICAgICBJbml0aWFsaXplQWNjZWxlcm9tZXRlcigpO1xuICAgIH1cblxuICAgIHZvaWQgSW5pdGlhbGl6ZUFjY2VsZXJvbWV0ZXIoKVxuICAgIHtcbiAgICAgICAgdHJ5XG4gICAgICAgIHtcbiAgICAgICAgICAgIEFjY2VsZXJvbWV0ZXIuU3RhcnQoU2Vuc29yU3BlZWQuTm9ybWFsKTtcbiAgICAgICAgICAgIEFjY2VsZXJvbWV0ZXIuUmVhZGluZ0NoYW5nZWQgKz0gSGFuZGxlQWNjZWxlcm9tZXRlclJlYWRpbmdDaGFuZ2VkO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChGZWF0dXJlTm90U3VwcG9ydGVkRXhjZXB0aW9uKVxuICAgICAgICB7XG4gICAgICAgICAgICBEZWJ1Zy5Xcml0ZUxpbmUoXCJBY2NlbGVyb21ldGVyIFVuYXZhaWxhYmxlXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdm9pZCBIYW5kbGVBY2NlbGVyb21ldGVyUmVhZGluZ0NoYW5nZWQoQWNjZWxlcm9tZXRlckNoYW5nZWRFdmVudEFyZ3MgZSlcbiAgICB7XG4gICAgICAgIERldmljZS5CZWdpbkludm9rZU9uTWFpblRocmVhZCgoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICB4Q2lyY3VsYXJHYXVnZS5Qb2ludGVyLlZhbHVlID0gZS5SZWFkaW5nLkFjY2VsZXJhdGlvbi5YO1xuICAgICAgICAgICAgeUNpcmN1bGFyR2F1Z2UuUG9pbnRlci5WYWx1ZSA9IGUuUmVhZGluZy5BY2NlbGVyYXRpb24uWTtcbiAgICAgICAgICAgIHpDaXJjdWxhckdhdWdlLlBvaW50ZXIuVmFsdWUgPSBlLlJlYWRpbmcuQWNjZWxlcmF0aW9uLlo7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmBgYFxuXG4jIyMgNy4gU2V0IEFjY2VsZXJvbWV0ZXJQYWdlIGFzIHRoZSBNYWluUGFnZVxuXG5JbiBgQXBwLmNzYCwgZW5zdXJlIHRoYXQgYE1haW5QYWdlID0gbmV3IEFjY2VsZXJvbWV0ZXJQYWdlKCk7YDpcblxuYGBgY3NoYXJwXG5wdWJsaWMgY2xhc3MgQXBwIDogWGFtYXJpbi5Gb3Jtcy5BcHBsaWNhdGlvblxue1xuICAgIHB1YmxpYyBBcHAoKVxuICAgIHtcbiAgICAgICAgTWFpblBhZ2UgPSBuZXcgQWNjZWxlcm9tZXRlclBhZ2UoKTtcbiAgICB9XG59XG5gYGBcblxuIyMjIDguIExhdW5jaCB0aGUgYXBwIG9uIGFuIGlPUyBvciBBbmRyb2lkIERldmljZVxuXG4jIyBBYm91dCBUaGUgQXV0aG9yXG5cbkJyYW5kb24gTWlubmljayBpcyBhIERldmVsb3BlciBBZHZvY2F0ZSBhdCBNaWNyb3NvZnQgc3BlY2lhbGl6aW5nIGluIFhhbWFyaW4gYW5kIEF6dXJlLiBBcyBhIERldmVsb3BlciBBZHZvY2F0ZSwgQnJhbmRvbiB3b3JrcyBjbG9zZWx5IHdpdGggdGhlIG1vYmlsZSBhcHAgY29tbXVuaXR5LCBoZWxwaW5nIHRoZW0gY3JlYXRlIDUtc3RhciBhcHBzIGFuZCBwcm92aWRlIHRoZWlyIGZlZWRiYWNrIHRvIHRoZSBNaWNyb3NvZnQgcHJvZHVjdCB0ZWFtcyB0byBoZWxwIGltcHJvdmUgb3VyIHRvb2xzIGFuZCBlbXBvd2VyIGV2ZXJ5IHBlcnNvbiBhbmQgZXZlcnkgb3JnYW5pemF0aW9uIG9uIHRoZSBwbGFuZXQgdG8gYWNoaWV2ZSBtb3JlLlxuXG5bQFRoZUNvZGVUcmF2ZWxlcl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdXNlcj91c2VyX2lkPTM0MTg0MDgzNDEpXG5cbiMjIFJlc291cmNlc1xuXG4tIFtYYW1hcmluXShodHRwczovL3Zpc3VhbHN0dWRpby5taWNyb3NvZnQuY29tL3hhbWFyaW4/V1QubWNfaWQ9YWNjZWxlcm9tZXRlcmFwcC1naXRodWItYnJhbWluKVxuLSBbWGFtYXJpbi5Fc3NlbnRpYWxzXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS94YW1hcmluL2Vzc2VudGlhbHMvP1dULm1jX2lkPWFjY2VsZXJvbWV0ZXJhcHAtZ2l0aHViLWJyYW1pbilcbi0gW0F6dXJlIElvVCBDZW50cmFsXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vc2VydmljZXMvaW90LWNlbnRyYWwvP1dULm1jX2lkPWFjY2VsZXJvbWV0ZXJhcHAtZ2l0aHViLWJyYW1pbilcbi0gW1N5bmNGdXNpb24ncyBDaXJjdWxhciBHYXVnZV0oaHR0cHM6Ly93d3cuc3luY2Z1c2lvbi5jb20vcHJvZHVjdHMveGFtYXJpbi9jaXJjdWxhci1nYXVnZSlcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzOWM0YjQxYS02MGU1LTQ2NGUtYjJhNy05NDFmNjFlNzZmYmQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNOall6T1RNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWludHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMyN2UyM2QzN2E2OTliNzM4MmM3NzA5Y2RhNWE4ZGY3NGExNzdjYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHZ1ZS1pbnRyb1xuXG4jIyBQcm9qZWN0IHNldHVwXG5gYGBcbm5wbSBpbnN0YWxsXG5gYGBcblxuIyMjIENvbXBpbGVzIGFuZCBob3QtcmVsb2FkcyBmb3IgZGV2ZWxvcG1lbnRcbmBgYFxubnBtIHJ1biBzZXJ2ZVxuYGBgXG5cbiMjIyBDb21waWxlcyBhbmQgbWluaWZpZXMgZm9yIHByb2R1Y3Rpb25cbmBgYFxubnBtIHJ1biBidWlsZFxuYGBgXG5cbiMjIyBMaW50cyBhbmQgZml4ZXMgZmlsZXNcbmBgYFxubnBtIHJ1biBsaW50XG5gYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImM0NmIxNDAyLWIxZDYtNGMwOC1hMDdhLWIyY2Q5M2ZhZDgxOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHZ1ZS1ndWlkZVxuXG5BIHNlcmllcyBvZiBpbnRyb2R1Y3Rvcnkgc2FtcGxlcyB1c2luZyBWdWUuanMsIGFzIHNlZW4gaW4gdGhlaXIgZG9jcy4gPGh0dHBzOi8vdnVlanMub3JnLz4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2ZTkxMzViMy05OWU3LTQ1M2MtYjBkYi0zZTdlNTc1NTlhZDYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qUTVORGsyTXpNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YkV4cGxvcmVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjdmZWE0MDkyNjM4ZjBlODEwNzFlZTk5NTZhMzliMGUxMWQxZTEwZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEdpdEh1YiBFeHBsb3JlclxuQ29uc29sZSBBcHAgdG8gZXhwbG9yZSB0aGUgR2l0SHViIEdyYXBoUUwgQVBJXG5cbiFbQ29uc29sZSBTY3JlZW5zaG90XShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81MDk5ODk2Mi1lOGYxY2YwMC0xNGRkLTExZTktODFlOS0yODNjZDFmMjE2NjQucG5nKVxuXG4jIyBTZXR1cFxuR2l0SHViIHJlcXVpcmVzIGEgcGVyc29uYWwgYWNjZXNzIHRva2VuIHRvIGFjY2VzcyBpdHMgQVBJLlxuXG5Gb2xsb3cgdGhlIHN0ZXBzIGhlcmUgdG8gY3JlYXRlIHlvdXIgcGVyc29uYWwgYWNjZXNzIHRva2VuOiBodHRwczovL2hlbHAuZ2l0aHViLmNvbS9hcnRpY2xlcy9jcmVhdGluZy1hLXBlcnNvbmFsLWFjY2Vzcy10b2tlbi1mb3ItdGhlLWNvbW1hbmQtbGluZS8jY3JlYXRpbmctYS10b2tlbi5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3ZGM1Yjg3Mi00MWY3LTQ1Y2EtYTY2OS0yNTdiMmI2OTc3YTciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EWTJOamd6TmprPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibGF5b3V0LXRyYW5zaXRpb24tZ3JvdXAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDFlODA0M2JkZjg3Y2E2YWMwZDZjZDQzYWMwZDgzY2Q1NDBiNDg1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgVHJhbnNpdGlvbnNBcHBcblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDYuMS4yLlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLS1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjExNzY2YzExLTVjZTgtNGNiOS1hMDA5LTljYjRkOWRmNzhiMyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVNREU1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXIxLXNuaXBwZXRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY2ZDYyMzY0NTM0ZGRiNmZjZDNkZmVhOWQxOTQ0ZGQ1MGRmMmY0ZDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ESTBORFkyTXpZPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJ2b3RpbmctYXBwIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYmNjOTlmOGMzODgzNWQwYmJjM2JiYTc2MmQ0YmU3YmRlMzI4YTgyIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby52b3RpbmctYXBwP2JyYW5jaE5hbWU9bWFzdGVyKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3NpY290aW4vc2ljb3Rpbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0xMSUzRmJyYW5jaE5hbWUlM0RtYXN0ZXImV1QubWNfaWQ9dm90aW5nYXBwLWdpdGh1Yi1zaWNvdGluKVxuXG4jIFZvdGluZyBBcHBcblxuSW4gdGhpcyB3b3Jrc2hvcCB3ZSdsbCBidWlsZCBhIFNlcnZlcmxlc3MgR3JhcGhRTCBlbmRwb2ludCBmb3IgYW4gZXhpc3Rpbmcgdm90aW5nIEFQSS5cblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBBIHJlY2VudCB2ZXJzaW9uIG9mIE5vZGUgKDgrKVxuXG4xLiBWUyBDb2RlOiBbZG93bmxvYWQgcGFnZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG93bmxvYWQvP1dULm1jX2lkPXdvcmtzaG9wLWxkbmpzLXNpY290aW4pICBcblxuMS4gQXp1cmUgRnVuY3Rpb25zIENMSTogW2RvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtcnVuLWxvY2FsP1dULm1jX2lkPXdvcmtzaG9wLWxkbmpzLXNpY290aW4pICBcblxuMS4gQXp1cmUgRnVuY3Rpb25zIEV4dGVuc2lvbiBmb3IgVlMgQ29kZTogW21hcmtldHBsYWNlXShodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXMvP1dULm1jX2lkPXdvcmtzaG9wLWxkbmpzLXNpY290aW4maXRlbU5hbWU9bXMtYXp1cmV0b29scy52c2NvZGUtYXp1cmVmdW5jdGlvbnMpICBcblxuMS4gQXp1cmUgYWNjb3VudDogW2h0dHBzOi8vYWthLm1zL2ZyZWVdKGh0dHBzOi8vYWthLm1zL2ZyZWUpXG5cbiMjIFN0ZXBzXG5cbjEuIENyZWF0ZSB5b3VyIG93biBzZXJ2aWNlcyBmb2xsb3dpbmcgc3RlcHMgb24gW3NlcnZpY2VzIHJlYWRtZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3NlcnZlcmxlc3MtZ3JhcGhxbC13b3Jrc2hvcC9ibG9iL21hc3Rlci9zZXJ2aWNlcy9SZWFkbWUubWQpXG5cbjEuIENyZWF0ZSBHcmFwaFFMIGVuZHBvaW50IGZvbGxvd2luZyBzdGVwcyBvbiBbYXBpIHJlYWRtZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3NlcnZlcmxlc3MtZ3JhcGhxbC13b3Jrc2hvcC9ibG9iL21hc3Rlci9ncmFwaHFsLWFwaS9SZWFkbWUubWQpXG5cbjEuIEFkZCBHcmFwaGlRTCBVSSB1c2luZyBzdGVwcyBpbiBbcmVhZG1lXShodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vc2VydmVybGVzcy1ncmFwaHFsLXdvcmtzaG9wL2Jsb2IvbWFzdGVyL2dyYXBoaXFsL1JlYWRtZS5tZClcblxuIyMgRGVtbyBhcHBcblxuR3JhcGhRTCBlbmRwb2ludDogW2h0dHBzOi8vZ3JhcGhxbHBsYXlncm91bmQuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2dyYXBocWxdKGh0dHBzOi8vZ3JhcGhxbHBsYXlncm91bmQuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2dyYXBocWwpXG5cbkdyYXBoaVFMIGVuZHBvaW50OlxuW2h0dHBzOi8vZ3JhcGhxbHBsYXlncm91bmQuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2dyYXBoaXFsXShodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaGlxbClcblxuU2FtcGxlIHF1ZXJ5OlxuXG5gYGBcbnF1ZXJ5IHtcbiAgdGVhbXMge1xuICAgIGlkXG4gICAgbmFtZVxuICAgIHBvaW50c1xuICB9XG59XG5gYGBcblxuU2FtcGxlIG11dGF0aW9uOlxuXG5gYGBcbm11dGF0aW9uIHtcbiAgaW5jcmVtZW50UG9pbnRzKGlkOjIpIHtcbiAgICBpZFxuICAgIG5hbWVcbiAgICBwb2ludHNcbiAgfVxufVxuYGBgXG5cbiMjIEluc3RhbGwgTW9iaWxlIEFwcFxuXG58IE1vYmlsZSBPUyB8IEluc3RhbGxhdGlvbiBMaW5rIHxcbnwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tfFxufCBpT1MgfCBbSW5zdGFsbCBpT1MgQXBwXSguL21vYmlsZS9Wb3RpbmdBcHAvaU9TX0Rvd25sb2FkX0luc3RydWN0aW9ucy5tZCkgfFxufCBBbmRyb2lkIHwgW0luc3RhbGwgQW5kcm9pZCBBcHBdKGh0dHBzOi8vaW5zdGFsbC5hcHBjZW50ZXIubXMvb3Jncy92b3RpbmctYXBwL2FwcHMvYnViYmxlLXdhci9kaXN0cmlidXRpb25fZ3JvdXBzL2xvbmRvbiUyMGdyYXBocWwlMjB3b3Jrc2hvcCkgfFxuXG58Q0kgVG9vbCAgICAgICAgICAgICAgICAgICAgfEJ1aWxkIFN0YXR1c3xcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tfFxufCBBcHAgQ2VudGVyLCBpT1MgfCBbIVtCdWlsZCBzdGF0dXNdKGh0dHBzOi8vYnVpbGQuYXBwY2VudGVyLm1zL3YwLjEvYXBwcy82MDA1NmQ0NS1mNDJmLTRiY2QtODcwYi0xOWMxMGM0MDBjNjYvYnJhbmNoZXMvbWFzdGVyL2JhZGdlKV0oaHR0cHM6Ly9hcHBjZW50ZXIubXMpIHxcbnwgQXBwIENlbnRlciwgQW5kcm9pZCB8IFshW0J1aWxkIHN0YXR1c10oaHR0cHM6Ly9idWlsZC5hcHBjZW50ZXIubXMvdjAuMS9hcHBzL2IxY2RjZjFiLTI2ODUtNDEwNS04OTRlLTliNjAwODdkZmM0OC9icmFuY2hlcy9tYXN0ZXIvYmFkZ2UpXShodHRwczovL2FwcGNlbnRlci5tcykgfFxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRlOGJjZjhkLTZhMGMtNDgwMS1hOWVkLTAyN2E4ODk2MGY4OCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVPRGd6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXItc25pcHBldHMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDk4OTk1N2ZmOWFlOWUxZjYyOTA0NDI0YWU3YmQ3MGM4MmY3ZTQwMyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qWXpOall6T0RBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YlhhbWFyaW4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmM0YjNlNjQ5YTY2ZTNjODY2MzQ5ZmIxNTJjOGM0OGNhZmMwZDU0MyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgR2l0SHViWGFtYXJpblxuXG5UaGlzIHJlcG8gaGFzIGJlZW4gbW92ZWQgdG8gaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9naXR0cmVuZHNcblxuQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCBidWlsdCBpbiBYYW1hcmluLkZvcm1zIHRvIHJldHJpZXZlIEdpdGh1YiBSZXBvc2l0b3JpZXMgdXNpbmcgR2l0SHViJ3MgR3JhcGhRTCBBUElcblxufCBpT1MgfCBBbmRyb2lkIHxcbnwtLS0tLXwtLS0tLS0tLS18XG58ICFbaU9TIEdpZl0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjI4MjY1ODgtZDZjNzM0ODAtYmI4My0xMWU5LTg1MzYtZWM2N2UzMmM1YzgyLmdpZikgfCAhW0FuZHJvaWQgR2lmXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy82MjgyNjg1OS1lNDMyZWQ4MC1iYjg4LTExZTktODQxOC0zY2UxY2RlMmRkNDIuZ2lmKSB8XG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZTY3NjFjMTgtMWJjZi00ODczLWE5YTEtNGVlMWYyMTkzNDIyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qTXhPVFk0TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUmVhZGluZ0J1ZGRpZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjljMGQwMzQ2OTYyMTBiNjJjMzM3NDM2OWM2ODFmMDIzOTY5NGJlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9UTXdPRGM1Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci0yLWZpcnN0LWxvb2stbGF1bmNoZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTYzNzVhY2U4N2UwN2M5ZWFlNTBkMjNkMzFhMWZlZDI1MDVmZDk0ZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USXhNVEl6TmpjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYXBpcGVsaW5lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxODAwMzk3YmVkNzJlODdmYjdmYmYyZTVjMmRjYTJhM2VlMmFiZmI4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBcGlwZWxpbmVzXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiA2LjEuNS5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC0tcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2MTQ4YzkwNi03OWIyLTRiZDYtYjQ3Yy01NDAxYzA0YjVmZTYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpNakF6TURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1hcmNoaXRlY3R1cmUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTYzYzNlNDY0NTdlMTQxZGRhNGUwZTVmZmNkNTBiZGYxODY5ZGI4YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQW5ndWxhciBBcmNoaXRlY3R1cmVcblxuVGhpcyBjb2RlIHNhbXBsZSBkZW1vbnN0cmF0ZXMgZGlmZmVyZW50IEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGNvbmNlcHRzLiBJdCdzIHVzZWQgaW4gdGhlIEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGFuZCBCZXN0IFByYWN0aWNlcyB2aWRlbyBjb3Vyc2Ugb24gUGx1cmFsc2lnaHQgKGh0dHBzOi8vd3d3LnBsdXJhbHNpZ2h0LmNvbS9jb3Vyc2VzL2FuZ3VsYXItYXJjaGl0ZWN0dXJlLWJlc3QtcHJhY3RpY2VzKSBhbmQgaW4gdGhlIEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGFuZCBCZXN0IFByYWN0aWNlcyBpbnN0cnVjdG9yLWxlZCB0cmFpbmluZyBjb3Vyc2UgKGh0dHBzOi8vY29kZXdpdGhkYW4uY29tL3Byb2R1Y3RzL2FuZ3VsYXItYXJjaGl0ZWN0dXJlKS4gXG5cbiMjIFJ1bm5pbmcgdGhlIEFwcGxpY2F0aW9uXG5cbjEuIEluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJOiBgbnBtIGluc3RhbGwgLWcgQGFuZ3VsYXIvY2xpYFxuXG4xLiBPcGVuIHRoZSBgZGVtb3NgIGZvbGRlciBhbmQgcnVuIGBucG0gaW5zdGFsbGBcblxuMS4gUnVuIGBuZyBzZXJ2ZSAtb2AgaW4gdGhlIGBkZW1vc2AgZm9sZGVyIHRvIHN0YXJ0IHRoZSBzZXJ2ZXIgYW5kIGxhdW5jaCB0aGUgYXBwXG5cbiMjIEFkZGl0aW9uYWwgRGVtb3NcblxuMS4gQ2xvbmluZyAtIFJ1biB0aGUgcHJvamVjdCBpbiB0aGUgYGNsb25pbmdgIGZvbGRlclxuMS4gSW5wdXQvT3V0cHV0IFByb3BlcnRpZXMgLSBSdW4gdGhlIHByb2plY3QgaW4gdGhlIGBpbnB1dC1vdXRwdXQtZGVtb2AgcHJvamVjdFxuMS4gU2hhcmVkIExpYnJhcnkgLSBSdW4gdGhlIHByb2plY3QgaW4gdGhlIGBzaGFyZWQtbGlicmFyeS1leGFtcGxlYCBwcm9qZWN0XG4xLiBTdGF0ZSBNYW5hZ2VtZW50IC0gT3BlbiB0aGUgYHN0YXRlLW1hbmFnZW1lbnRgIGZvbGRlciBhbmQgcnVuIHRoZSBOZ1J4LCBuZ3J4LWRhdGEsIG9yIE9ic2VydmFibGUgU3RvcmUgcHJvamVjdHNcblxuIyMgVGhlIEFuZ3VsYXIgSnVtcFN0YXJ0IEFwcGxpY2F0aW9uXG5cbllvdSBjYW4gZmluZCBhbiBleGFtcGxlIG9mIGFuIGFwcGxpY2F0aW9uIHRoYXQgZm9sbG93cyB0aGUgcnVsZXMgaW4gdGhpcyBjb3Vyc2UgYXQgaHR0cHM6Ly9naXRodWIuY29tL0RhbldhaGxpbi9Bbmd1bGFyLUp1bXBTdGFydFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZWU0MDE2YjItNjgwMy00OGFiLWJiZWItODQyNzQxMTA4MzFjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9Ua3dNelEzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c3RvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNzM5MjcxMTExNDU1Mzc0ZmY3ZGUxYjI1NzgxMmQ5Njk1Mjk0MTc2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU1ESXlNRFE1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWV4YW1wbGVzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5ZjRiZjJmYzQ1NDgzODI0OGY4OWU4ODY0MmE3MjA3NTRjMTVjYTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5EWTNOekkyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmcyLWtlc3RyZWwtYXBwc2VydmVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU0OTM4NDE4NzA0NTk3YjA2MGFlNjI2OTdlNTk1YzI0YTk2NjliMWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9EQTNNVEF4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhcjItZm9yY2UiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTRkM2U4N2M4ZWZhOWUxNjcyYWY3NmQ3MDM2NTBkZmI0ODgxMzNiYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBNelkzT1RZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtdWktIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImUwMzYyOTNhYTU5MGI0ZGVlOTU5ZjYxODI5ZjI2MTcyYmZiYjBiM2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFVpXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiA2LjEuNS5cblxuIyMgUnVubmluZyB3aXRoIEF1dGVudGljYXRpb25cblxuUnVuIGBuZyBzZXJ2ZSAtLXNzbCB0cnVlYCBhbmQgbmF2aWdhdGUgdG8gW2h0dHBzOi8vMTI3LjAuMC4xOjQyMDBdKGh0dHBzOi8vMTI3LjAuMC4xOjQyMDApXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8Z3VhcmR8aW50ZXJmYWNlfGVudW18bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtLXByb2RgIGZsYWcgZm9yIGEgcHJvZHVjdGlvbiBidWlsZC5cblxuIyMgUnVubmluZyB1bml0IHRlc3RzXG5cblJ1biBgbmcgdGVzdGAgdG8gZXhlY3V0ZSB0aGUgdW5pdCB0ZXN0cyB2aWEgW0thcm1hXShodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8pLlxuXG4jIyBSdW5uaW5nIGVuZC10by1lbmQgdGVzdHNcblxuUnVuIGBuZyBlMmVgIHRvIGV4ZWN1dGUgdGhlIGVuZC10by1lbmQgdGVzdHMgdmlhIFtQcm90cmFjdG9yXShodHRwOi8vd3d3LnByb3RyYWN0b3J0ZXN0Lm9yZy8pLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZTkyZmNlNWUtZTZiMS00Mjk2LThlMmMtYTg5MWE3N2JhNjhjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EUXpNalUwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLXBsYXkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjU1MDY4NWQ2MWQ3Y2VjZDY5MjRkYTA5ZTE0ZTM3ZjI1ODgyNWNhZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qYzRNVE01TXpjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImNzaGFycC13b3Jrc2hvcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzZWFlMWQ1NGIxOGJkZmZiZmZiMjQyZWJjNGM0OGFlMTkwMjk0YTYxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBDIyBXb3Jrc2hvcFxuXG5bTkRDIExvbmRvbiAyMDE5XShodHRwczovL25kYy1sb25kb24uY29tL3dvcmtzaG9wL2JlY29tZS1hLWJldHRlci1jLXByb2dyYW1tZXItbW9yZS12YWx1ZS1tb3JlLWV4cHJlc3Npb25zLW5vLXdhaXRpbmcvKVxuXG5Ib3N0ZWQgYnkgW0JpbGwgV2FnbmVyXShodHRwczovL25kYy1sb25kb24uY29tL3NwZWFrZXIvYmlsbC13YWduZXIpXG5cbiMjIyBCZWNvbWUgYSBiZXR0ZXIgQyMgcHJvZ3JhbW1lcjogbW9yZSBWYWx1ZSwgbW9yZSBFeHByZXNzaW9ucywgbm8gV2FpdGluZ1xuXG5PdmVyIHRoZSBwYXN0IGZldyByZWxlYXNlcywgQyMgaGFzIGFkZGVkIGZlYXR1cmVzIHRoYXQgZ3JlYXRseSBpbXByb3ZlIHByb2R1Y3Rpdml0eS5cblxuSW4gdGhpcyB3b3Jrc2hvcCwgeW914oCZbGwgbGVhcm4gc2NlbmFyaW9zIHdoZXJlIHRoZXNlIG5ldyBmZWF0dXJlcyBtYWtlIHlvdSBtb3JlIHByb2R1Y3RpdmUsIGFuZCBpbXByb3ZlIHRoZSBjbGFyaXR5IG9mIHlvdXIgY29kZS4gWW914oCZbGwgZ2V0IGEgZ3VpZGVkIHRvdXIgdGhyb3VnaCB0aGUgYXN5bmMgYW5kIGF3YWl0IHdpbGRlcm5lc3MuIFlvdSdsbCBzdGFydCB3aXRoIGJhc2ljIHVzZXMgd2hlcmUgYXN5bmMgYW5kIGF3YWl0IHdvcmsgbGlrZSBtYWdpYy4gRnJvbSB0aGVyZSwgeW91J2xsIGxlYXJuIGNvbW1vbiBwcmFjdGljZXMgYW5kIGhvdyBhc3luYyB0YXNrcyBjb21wb3NlLiBZb3UnbGwgZGl2ZSBpbnRvIGVub3VnaCBvZiB0aGUgaW1wbGVtZW50YXRpb24gZGV0YWlscyB0byB1bmRlcnN0YW5kIGhvdyB0byBhcHBseSBhc3luYyBwcmFjdGljZXMuIEFmdGVyIHdvcmtpbmcgdGhyb3VnaCB0aGVzZSBkaWZmZXJlbnQgcHJhY3RpY2VzLCB5b3UnbGwgZW1lcmdlIGZyb20gdGhlIHdpbGRlcm5lc3MgdW5kZXJzdGFuZGluZyBob3cgdG8gd3JpdGUgY2xlYXIsIGNvcnJlY3QgYW5kIHNhZmUgYXN5bmMgY29kZS4gRnJvbSB0aGVyZSwgeW91J2xsIHdvcmsgdGhyb3VnaCBldmVyeWRheSBzY2VuYXJpb3Mgd2hlcmUgbW9kZXJuIEMjIGZyZWVzIGl0c2VsZiBmcm9tIHRoZSBzaGFja2xlcyBvZiBoaXN0b3J5LiBZb3UnbGwgc2VlIG5ldyB3YXlzIHRvIHdvcmsgd2l0aCB0ZXh0LCBuZXcgZXhwcmVzc2lvbnMgZm9yIGNvbnRyb2wgZmxvdywgYW5kIG5ldyB3YXlzIHRvIGJlbmQgdGhlIHR5cGUgc3lzdGVtIHRvIHlvdXIgd2lsbC5cbllvdeKAmWxsIGxlYXJuOlxuXG4tIFt4XSBHZXR0aW5nIHN0YXJ0ZWQgd2l0aCB0aGUgYmFzaWNzIG9mIGFzeW5jIGFuZCBhd2FpdFxuLSBbeF0gRGlzdGluZ3Vpc2ggYXN5bmNocm9ub3VzIHByb2dyYW1taW5nIGFuZCBwYXJhbGxlbCBwcm9ncmFtbWluZ1xuLSBbeF0gQ29tcG9zZSBhc3luY2hyb25vdXMgbWV0aG9kIGNhbGxzIHRocm91Z2hvdXQgeW91ciBjb2RlXG4tIFt4XSBVbmRlcnN0YW5kIHRoZSBwaXRmYWxscyBvZiBhc3luYyB2b2lkXG4tIFt4XSBEZXNpZ25pbmcgYXN5bmMgQVBJc1xuLSBbeF0gQWR2YW5jZWQgYXN5bmMgYW5kIFRhc2sgYmFzZWQgcHJvZ3JhbW1pbmdcbi0gW3hdIEhvdyBzdHJpbmcgaW50ZXJwb2xhdGlvbiBtYWtlcyBmb3JtYXR0aW5nIHN0cmluZ3MgbXVjaCBlYXNpZXIgYW5kIGNsZWFyZXIuXG4tIFt4XSBIb3cgdG8gY3JlYXRlIGNvbXBvdW5kIGFzc2lnbm1lbnRzIGFuZCBjb21wYXJpc29ucyB1c2luZyBUdXBsZXMgYW5kIERlY29uc3RydWN0aW9uXG4tIFt4XSBIb3cgdG8gc2ltcGxpZnkgaXRlcmF0b3JzIGFuZCBhc3luYyBlcnJvciBoYW5kbGluZyB1c2luZyBsb2NhbCBmdW5jdGlvbnNcbi0gW3hdIEhvdyB0byBzaW1wbGlmeSBlcnJvciByZXBvcnRpbmcgdXNpbmcgdGhyb3cgZXhwcmVzc2lvbnMgaW4gZXhwcmVzc2lvbiBib2RpZWQgbWVtYmVycy5cbi0gW3hdIFdyaXRlIG1vcmUgcGVyZm9ybWFudCBjb2RlIHVzaW5nIHZhbHVlIHR5cGVzIHNhZmUgcGFzcy1ieS1yZWZlcmVuY2Vcbi0gW3hdIEhvdyB0byB1c2UgUGF0dGVybiBNYXRjaGluZyB0byBjcmVhdGUgYWxnb3JpdGhtcyB0aGF0IGV4dGVuZCBleGlzdGluZyB0eXBlc1xuXG4jIyBDb21wdXRlciBTZXR1cDogXG5cbkF0dGVuZGVlcyB3aWxsIG5lZWQgdG8gYnJpbmcgYSBsYXB0b3Agd2l0aCBvbmUgb2YgdGhlIGZvbGxvd2luZyBzZXR1cHM6XG5cbi0gV2luZG93czogTGFwdG9wIHJ1bm5pbmcgVmlzdWFsIFN0dWRpbyAyMDE3LCBvciBWaXN1YWwgU3R1ZGlvIENvZGVcbi0gTWFjOiBMYXB0b3AgcnVubmluZyBWaXN1YWwgU3R1ZGlvIENvZGVcbi0gTGludXg6IExhcHRvcCBydW5uaW5nIFZpc3VhbCBTdHVkaW8gQ29kZVxuXG4jIyBSZWNvbW1lbmRhdGlvbnMgZm9yIEV4ZXJjaXNlc1xuXG4xLiBXZSdyZSBoZXJlIHRvIGxlYXJuLCBub3QgdG8gd2luIGFyZ3VtZW50cy4gU29tZSBleGVyY2lzZXMgd2lsbCBzcGFyayBkZWJhdGUuICpMaXN0ZW4gYW5kIGxlYXJuKi4gKndoYXQqIGFuc3dlciB5b3VyIGdyb3VwIGZpbmRzIGlzIG11Y2ggbGVzcyBpbXBvcnRhbnQgdGhhbiAqd2h5KiB5b3UgY2hvc2UgdGhhdCBhbnN3ZXIuIEEgcmVsYXRlZCBwb2ludCBpcyB0aGF0IHlvdSB3aWxsIGxlYXJuIGZyb20gb3RoZXIgZ3JvdXBzJyBvcGluaW9ucywgYW5kIHRlYWNoIGJ5IGV4cGxhaW5pbmcgeW91ciBncm91cCdzIG9waW5pb25zLlxuMi4gRXZlcnkgcGVyc29uIHNob3VsZCBiZSBoZWFyZC5cbjMuIENoYW5nZSByb2xlcyBvZnRlbiBpbiBwYWlyIHByb2dyYW1taW5nIGV4ZXJjaXNlcy5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMTU5YzZkZi00ZjU0LTRkOWYtYTNiYi01ZWMzNWQ5N2ZiMDQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5UazFOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3RhcndhcnMtaW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI3ZWJjZjEwMDdmZTZjOTJmNzRmNGI3N2VmYmZmMjhkMGJiMGQzMzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qY3lNall6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhcldvcmtzaG9wTGFicyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0M2ZlYTVjMDM4NWU4NjQwZjliMWE1ZTE0ZjU1NGQzOTNmY2NhZjgxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ETTNPRGswTkRjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS1oZWxsbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NDRhZjQwNzkxOGQ0YjI1YzljN2RjMzg3NGFiY2E4M2JmMTdiODMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBOb2RlIEhlbGxvIFdvcmxkXG5cblNpbXBsZSBub2RlLmpzIGFwcCB0aGF0IHNlcnZlcnMgXCJoZWxsbyB3b3JsZFwiXG5cbkdyZWF0IGZvciB0ZXN0aW5nIHNpbXBsZSBkZXBsb3ltZW50cyB0byB0aGUgY2xvdWRcblxuIyMgUnVuIEl0XG5cbmBucG0gc3RhcnRgXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhYWQwMjM1My0wZjllLTQ4NTItOGI0NS02NTFhOTJhOWNiYjMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01EWTFOakExTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWhvc3RlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1Yzc5MzZhY2MzOWI1MGFiMTFjNGY2YmE5ZjcyYjQ1ZDIwOWE2NTE0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UUTFOall3Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY29kZS13aXRoLXVzLWFuZ3VsYXItcXVpY2tzdGFydCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxMWUwOWQ2MDVkY2Y0ZTU5OGFmNTg0ZTc3NGFkOWRjNDc0NGU2MDVmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UazVNVGt4TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLWZhdm9yaXRlLW1vdmllcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzNjJlYzEyNTM2YmRhMWMyZGY4ZjU5NWY0MWRjYThlMGY1OGVjNDhhIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09EUTBOamcwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXp1cmUtZG9jcy1zZGstbm9kZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjEwNjViMjk2MDgwMDkzNWMwN2I1NzMwMzg0ZWFkY2I1MDdmODU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBub2RlLXRzXG5cblNpbXBsZSBOb2RlIGFuZCB0eXBlU2NyaXB0IGFwcFxuXG4jIyBRdWljayBTdGFydFxuXG4xLiBgbnBtIGluc3RhbGxgXG4yLiBgbnBtIHJ1biBzZXJ2ZS1kZWJ1Z2BcblxuIyMgSW5jbHVkZWRcblxuLSBiYXNpYyBgdHNjb25maWcuanNvbmBcbi0gbnBtIHNjcmlwdHMgdG8gaGVscCBidWlsZCwgcnVuLCB3YXRjaCwgYW5kIGRlYnVnXG4tIGNvbmN1cnJlbnRseSwgdHMtbm9kZSwgdHMtbGludCwgdHlwZXNjcmlwdCBmb3IgaGVscGluZyB3aXRoIGJ1aWxkc1xuLSB0eXBlcyBmb3Igbm9kZSB3aXRoIEB0eXBlcy9ub2RlXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwMmI4YjYzOC1hNGUyLTRkZmQtYmRhZi0xZDE1YTVlN2Q0NmIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWF6dXJlLWZ1bmN0aW9ucy10b29scyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56QXdORE00TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NmJmOWE1OTkwYTI4NGYzOWZhOTI3NTA4YjZjYWZhMzQ3MGY3YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56Z3pNRGc0Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiU3RpY2tlckFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmZWMzYTZhYjk5MmFiOGFjMTI4N2JlMTMyMTY4MDY0MGMyNWMxMTQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3Rhci13YXJzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1qRXlNRFF6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXItZXNzZW50aWFscyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZjUzNTRlNGYyZGU1YzJhMzI0Zjc0MDhmMDBkNmM5MTlhYmIwMmUzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16QXdOelUwTnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicHdhLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjZiMjIyYzUxYWFhOGFmNjQ1YWJiYTFkOTg0NmQ4ZmVmZjdmNTg2MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UUTFNemsyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWdncmVnYXRvci1hcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzAxOTI1OGVlMmIxZWRhZmY4YjNhOWRlNzgzMmE1OGU4MDcxNmIyNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTNOakUwTWpNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZG9ja2VyLWFuZ3VsYXItY2xpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhNTU2Y2UyY2I4MmY0MTY2NWVhNzg3ZGJkYTc2OGIxYjIyY2QwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTNOVEE0TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2RhLWxvY2FsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZjkzMDEzMzU2MjM4MTcwYjJlY2I5MTE3OTBhZGViMTM1ZjFmMGU2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazNOak16TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNvc21vc2RiIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM2ZTI2OWRhMDYwYjNiNWI1MzdjZWM1MDkwYWFjMGVlZWJlZmNkZTIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USXhNVFF4TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1uZ3J4LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FlOTVlMzc3NjliNzZlOTE2NzlhMmM5Nzk2MTY3MDNmY2NlODBlOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTFNelEyTURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c2UtYm90IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA4NTk1MzQ3YmVjZjJkYWYxNzU4NjBjY2I3NjFkOTFmMjNlOTNlMGYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTNOemMyT0RFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXdlc29tZS1hbmd1bGFyLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg1NGExNDZhYzBjODMxMWE3NmNiNGI0ZmQ5ZGJkOGQxN2MzNjYyMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTBORFF4TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWR2YW5jZWQtZGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOGI5MDZmM2EwYWFhNTU5M2ViMTY0YjQ3ZjRhNjYxNDdhODNmOTY5NiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTJOVFk1TVRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kYXRhLWxhYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MTk3NGQ1MjRhOGI3NWU1YTEyZWRiOTkxMzZjMzI1ZWVjNjIyNzg5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTRNRE0yTmpJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidGhyZWUtdnVlLXBhdHRlcm4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiY2YwMDU5NWQ2ZmMzOTAxYzgxZDE0MmUyMDQ3NDU5OWI4MTE4NzBlZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlOek13T0RBPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWV4dGVuc2lvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlYzU0MjkzYzIxMTE5OGNkMGIxYzE1MzcyNzY0MmQ3Njk1NTc4NjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlPRGMyTnpRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk1Y2Y2NTEwOTYwNDM5MGUzMDg5MzcwZDJhZDgwYzUxOTFmNDU4ZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNOall6T1RNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWludHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMyN2UyM2QzN2E2OTliNzM4MmM3NzA5Y2RhNWE4ZGY3NGExNzdjYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalUxTlRNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGFjb3MtdWkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjkzZjc5Yzc5MmQ1YTE4MmRmOWYwZDFjOThiODg4N2U5YzE3M2Y2MyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdGFjb3MtdWlcblxuQSBkZW1vIEFuZ3VsYXIgYXBwbGljYXRpb24gZm9yIFNpbW9uYSBhbmQgQnJpYW4ncyBBbmd1bGFyIGFuZCBBenVyZSBXb3Jrc2hvcFxuXG4jIyBTZXR1cCB0byBydW4gY29tcGxldGVkIGFwcFxuXG4tIGBnaXQgY2xvbmUgZ2l0QGdpdGh1Yi5jb206QW5ndWxhci1BenVyZS1Xb3Jrc2hvcC90YWNvcy11aS5naXRgXG4tIGBucG0gaWBcbi0gVXBkYXRlIGBzcmMvZW52aXJvbm1lbnRzL2Vudmlyb25tZW50LnRzYCB3aXRoIHRoZSBwcm9wZXIgVVJMJ3Ncbi0gYG5nIHNlcnZlIC0tc3NsYFxuLSBPcGVuIHlvdXIgYnJvd3NlciB0byBbaHR0cHM6Ly8xMjcuMC4wLjE6NDIwMF0oaHR0cHM6Ly8xMjcuMC4wLjE6NDIwMClcblxuIyMgV29ya3Nob3AgTW9kdWxlc1xuXG4tIFtNb2R1bGUgMDogU2V0dXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9Bbmd1bGFyLUF6dXJlLVdvcmtzaG9wL3dvcmtzaG9wLW1vZHVsZXMvYmxvYi9tYXN0ZXIvMDAtc2V0dXAubWQpXG4tIFtNb2R1bGUgMTogQXp1cmUgU3RvcmFnZSBhbmQgRGV2T3BzXShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzAxLXN0b3JhZ2UtYW5kLWRldm9wcy5tZClcbi0gW01vZHVsZSAyOiBBcHBsaWNhdGlvbiBJbnNpZ2h0cyBpbiBBbmd1bGFyXShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzAyLXVpLW1vbml0b3JpbmcubWQpXG4tIFtNb2R1bGUgMzogQXp1cmUgRnVuY3Rpb25zIChTZXJ2ZXJsZXNzKV0oaHR0cHM6Ly9naXRodWIuY29tL0FuZ3VsYXItQXp1cmUtV29ya3Nob3Avd29ya3Nob3AtbW9kdWxlcy9ibG9iL21hc3Rlci8wMy1henVyZS1mdW5jdGlvbnMubWQpXG4tIFtNb2R1bGUgNDogQXp1cmUgQ29zbW9zREJdKGh0dHBzOi8vZ2l0aHViLmNvbS9Bbmd1bGFyLUF6dXJlLVdvcmtzaG9wL3dvcmtzaG9wLW1vZHVsZXMvYmxvYi9tYXN0ZXIvMDQtYXp1cmUtY29zbW9zZGIubWQpXG4tIFtNb2R1bGUgNTogQXBwbGljYXRpb24gSW5zaWdodHMgaW4gQXp1cmUgRnVuY3Rpb25zXShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzA1LWFwaS1tb25pdG9yaW5nLm1kKVxuLSBbTW9kdWxlIDY6IEF1dGhlbnRpY2F0aW9uIGluIEF6dXJlXShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzA2LWF1dGhlbnRpY2F0aW9uLWluLWF6dXJlLm1kKVxuLSBbTW9kdWxlIDc6IEF6dXJlIFNlY3VyaXR5XShodHRwczovL2dpdGh1Yi5jb20vQW5ndWxhci1BenVyZS1Xb3Jrc2hvcC93b3Jrc2hvcC1tb2R1bGVzL2Jsb2IvbWFzdGVyLzA3LWF6dXJlLXNlY3VyaXR5Lm1kKVxuXG5JbiB0aGlzIGxhYiB5b3Ugd2lsbCBsZWFybiB0bzpcblxuKiBbQXp1cmUgQXBwIFNlcnZpY2VdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2FwcC1zZXJ2aWNlLz9XVC5tY19pZD13b3Jrc2hvcC1naXRodWItanMtdGVhbSlcbiAgICAqIENyZWF0ZSBhIEFwcCBTZXJ2aWNlIHVzaW5nIHRoZSBBenVyZSBwb3J0YWxcbiAgICAqIFNldHVwIGEgd2ViIGhvb2sgZm9yIGNvbnRpbnVvdXMgZGVwbG95bWVudCBpbiBDb250YWluZXIgUmVnaXN0cnlcblxuKiBbQXp1cmUgQ29udGFpbmVyIFJlZ2lzdHJ5XShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9jb250YWluZXItcmVnaXN0cnkvP1dULm1jX2lkPXdvcmtzaG9wLWdpdGh1Yi1qcy10ZWFtKVxuICAgICogQ3JlYXRlIGEgbmV3IENvbnRhaW5lciBSZWdpc3RyeSBcbiAgICAqIEJ1aWxkIERvY2tlciBpbWFnZSBhbmQgZGVwbG95IG1hbnVhbGx5IHRvIGNvbnRhaW5lciByZWdpc3RyeVxuICAgIFxuIyMgQXp1cmUgQ29udGFpbmVyIFJlZ2lzdHJ5XG5cbjEuIEluIHRoZSBicm93c2VyLCBuYXZpZ2F0ZSB0byB0aGUgQXp1cmUgcG9ydGFsLCBodHRwczovL3BvcnRhbC5henVyZS5jb20sIGFuZCBjcmVhdGUgYSBuZXcgQ29udGFpbmVyIFJlZ2lzdHJ5IGFjY291bnQuIFxuXG4xLiBJbiBWaXN1YWwgU3R1ZGlvIENvZGUsIGdvIHRvIHRoZSBleHRlbnNpb25zIHBhbmVsIGFuZCBpbnN0YWxsIHRoZSBEb2NrZXIgZXh0ZW5zaW9uLiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIGluc3RhbGwgaXQgZnJvbSB0aGUgW21hcmtldHBsYWNlXShodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXMvP1dULm1jX2lkPXdvcmtzaG9wLWdpdGh1Yi1qcy10ZWFtJml0ZW1OYW1lPVBldGVySmF1c292ZWMudnNjb2RlLWRvY2tlcilcblxuMS4gKipGb3JrKiogb3VyIGFwcCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Bbmd1bGFyLUF6dXJlLVdvcmtzaG9wL3RhY29zLXVpIGFuZCBzd2l0Y2ggdG8gdGhlICowMC1zdGFydCogYnJhbmNoLiBCdWlsZCBmb3IgcHJvZHVjdGlvbiBieSBydW5uaW5nIGBuZyBidWlsZCAtLXByb2RgXG5cbjIuIE9uY2UgeW91IGhhdmUgdGhlIGV4dGVuc2lvbiBpbnN0YWxsZWQgYW5kIHRoZSB0YWNvcyBwcm9qZWN0IGZvcmtlZCBjcmVhdGUgYSBmaWxlIG5hbWVzICpEb2NrZXJmaWxlKiBhbmQgcGFzdGUgaW4gdGhlIGZvbGxvd2luZzpcblxuYGBgXG5GUk9NIG5naW54OnN0YWJsZS1hbHBpbmVcbkxBQkVMIGF1dGhvcj1cIlNpbW9uYSBDb3RpblwiXG5DT1BZIC4vZGlzdC90YWNvcy11aSAvdmFyL3d3d1xuQ09QWSBuZ2lueC5jb25mIC9ldGMvbmdpbngvbmdpbnguY29uZlxuRVhQT1NFIDgwIDQ0M1xuRU5UUllQT0lOVCBbXCJuZ2lueFwiLFwiLWdcIixcImRhZW1vbiBvZmY7XCJdXG5gYGBcbjMuIE5leHQsIGNyZWF0ZSBhICpuZ2lueC5jb25mKiBmaWxlIGFuZCBwYXN0ZSBpbiB0aGUgY29udGVudHMgZnJvbSBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3RhY29zLXVpLS9ibG9iL21hc3Rlci9uZ2lueC5jb25mKSBcblxuNC4gRnJvbSB5b3VyIElERSwgcnVuICBcbmBgYFxuZG9ja2VyIGJ1aWxkIC10IDx5b3VyX2NyPi90YWNvczoxLjAgLlxuZG9ja2VyIGxvZ2luIC0tdXNlcm5hbWUgJERPQ0tFUl9VU0VSIC0tcGFzc3dvcmQgJERPQ0tFUl9QQVNTIDx5b3VyX2NyPlxuZG9ja2VyIHB1c2ggPHlvdXJfY3I+L3RhY29zOjEuMFxuYGBgXG5cbjUuIEluIHRoZSBBenVyZSBQb3J0YWwsIGdvIHRvIHlvdXIgbmV3bHkgY3JlYXRlIGNvbnRhaW5lciByZWdpc3RyeSwgKlJlcG9zaXRvcmllcyogLT4gKnRhY29zKiAtPiAqdGFncyouIENsaWNrIG9uIHRoZSB0aHJlZSBkb3RzIG5leHQgdG8gKjEuMCogYW5kIGNob29zZSBEZXBsb3kgdG8gV2ViIEFwcC4gRnJvbSB0aGVyZSBjcmVhdGUgYSBuZXcgQXBwIFNlcnZpY2UgYWNjb3VudC4gVGhpcyBlbmFibGVzIGNvbnRpbnVvdXMgZGVwbG95bWVudCBieSBjcmVhdGluZyBhIHdlYmhvb2suXG5cbjYuIE5hdmlnYXRlIHRvIHRoZSBuZXcgQXBwU2VydmljZSBhbmQgdmlzaXQgcGFnZSB0byBjaGVjayBkZXBsb3ltZW50LlxuXG43LiBOb3cgYXV0b21hdGUgdGhlIHByb2Nlc3MgYnkgYWRkaW5nIEF6dXJlIERldk9wc1xuXG4jIyBBenVyZSBEZXZvcHNcblxuMS4gSW4gVlMgQ29kZSwgZ28gdG8gdGhlIHJvb3Qgb2YgeW91ciBwcm9qZWN0LCBjcmVhdGUgYSBmaWxlIG5hbWVkICphenVyZS1waXBlbGluZXMueW1sKiBhbmQgcGFzdGUgaW4gdGhlIGNvbmZpZ3VyYXRpb24gYmVsbG93LiAqKipDb21taXQgJiBwdXNoIGNoYW5nZXMqKipcbmBgYHltbFxubmFtZTogdGFjb3NcblxucG9vbDpcbiAgdm1JbWFnZTogJ1VidW50dSAxNi4wNCdcblxudHJpZ2dlcjpcbiAgLSBtYXN0ZXJcblxuc3RlcHM6XG4gIC0gdGFzazogTm9kZVRvb2xAMFxuICAgIGlucHV0czpcbiAgICAgIHZlcnNpb25TcGVjOiAnOC54J1xuICAgIGRpc3BsYXlOYW1lOiAnSW5zdGFsbGluZyBOb2RlLmpzJ1xuXG4gIC0gc2NyaXB0OiB8XG4gICAgICBucG0gaW5zdGFsbFxuICAgICAgbnBtIHJ1biBidWlsZCAtLSAtLXByb2RcbiAgICBkaXNwbGF5TmFtZTogJ1J1bm5pbmcgbnBtIGluc3RhbGwgYW5kIGJ1aWxkJ1xuICAtIHNjcmlwdDogZG9ja2VyIGJ1aWxkIC10ICQoZG9ja2VySWQpLyQoaW1hZ2VOYW1lKSAgLlxuICAtIHNjcmlwdDogZG9ja2VyIGxvZ2luIC11ICQodXNlcikgLXAgJChwc3dkKSBzaWNvdGluLmF6dXJlY3IuaW9cbiAgLSBzY3JpcHQ6IGRvY2tlciBwdXNoICQoZG9ja2VySWQpLyQoaW1hZ2VOYW1lKVxuYGBgXG4jIyMgQnVpbGQgUGlwZWxpbmVcblxuMS4gSW4gdGhlIGJyb3dzZXIsIGdvIHRvIGh0dHA6Ly9kZXYuYXp1cmUuY29tIGFuZCBjbGljayBTaWduIGluIHRvIEF6dXJlIERldk9wcywgdXNlIHlvdXIgTWljcm9zb2Z0IGFjY291bnQgdG8gc2lnbiBpbi4gT24gdGhlIGxhbmRpbmcgcGFnZSBjbGljayAqTmV3IHByb2plY3QqLCBmaWxsIGluIHRoZSBwcm9qZWN0IG5hbWUgd2l0aCB0YWNvcy11aSBhbmQgY2xpY2sgKkNyZWF0ZSpcblxuMS4gSW4gdGhlIG5ldyBwcm9qZWN0LCBnb3QgdG8gKlBpcGVsaW5lcyogLT4gKkJ1aWxkcyogYW5kIGNsaWNrICpOZXcgUGlwZWxpbmUqLiBTZWxlY3QgR2l0aHViIGFzIHNvdXJjZSwgQXV0aG9yaXplIEdpdHViIGFuZCBjaG9vc2UgdGhlIHByb2plY3QgeW91IGZvcmtlZCBlYXJsaWVyLCBicmFuY2ggKjAwLXN0YXJ0Ki4gQ29udGludWUgYW5kIGNvbmZpZ3VyZSB0aGUgYnVpbGQgdG8gdXNlICpDb25maWd1cmF0aW9uIGFzIGNvZGUqIGFuZCBzZWxlY3QgdGhlIHltbCBmaWxlIHlvdSBjcmVhdGVkIGVhcmxpZXIuIFxuXG4yLiBHbyB0byB0aGUgdmFyaWFibGVzIHRhYiBhbmQgY3JlYXRlIG5ldyBvbmVzIGZvciBkb2NrZXJJZCwgdXNlciwgaW1hZ2VOYW1lIGFuZCBwYXNzd29yZC4gXG5cbjMuIFNhdmUgYW5kIHF1ZXVlLiBDbGljayBvbiB0aGUgYnVpbGQgbGluayB0byB2aWV3IHRoZSBpbiBwcm9ncmVzcyBwcm9qZWN0XG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1ZWFmYWZlNS1lZWY5LTRkZDAtOGQxNi1jZTM2NzlhOGQ0NGUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qY3lNamczTlRZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiTm9kZUpTV29ya3Nob3AiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODNmYmY2MzAyMmVmYjM0ODZiZTAxMDhjMDcxZDhhYjFmMjAzOTExNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpNakF6TURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1hcmNoaXRlY3R1cmUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTYzYzNlNDY0NTdlMTQxZGRhNGUwZTVmZmNkNTBiZGYxODY5ZGI4YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TTFOalkzTURjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXJ0aWNsZS1leHBsb3JlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhOGQ1OTdkMWJiOTdiMDYyY2Q0NTk1MGMzZmQyYmFkNmZjN2Q5MjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ETTNPRGswTkRjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS1oZWxsbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NDRhZjQwNzkxOGQ0YjI1YzljN2RjMzg3NGFiY2E4M2JmMTdiODMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGd5T0RJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLXJlYWN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY1NmRhYTFmOTgwZTA4MTYwY2E5ZGY4MzI3OWM4MTY1YmRjNDllNDIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGcwTURrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLW5vZGUtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NDNmYTEwYjcxZjBlNGM1NTMwNmIzNDRkOTA4NTU1ZWE4M2NiYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDMzZWU2Yi03ZGFmLTQ2ODYtODVlMC1lNDA4NDgxZWZlNzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UVTRNVE0yTVRVPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODkxOWY0ZGI2MzI3MmEyNzI0YmM2YTNjNzUyMTNmNDY1OWQ2ZWQ5OSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UWXhNemMxTWpVPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLXZ1ZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwOTRkOTEwNmYxMWRhYWFkYWNlNWMzZmI3NmY2MDcwMDA0OGZlNGNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTAzM2VlNmItN2RhZi00Njg2LTg1ZTAtZTQwODQ4MWVmZTczIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQTVOVFV3TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWY0NjE1ZDNmNTlmNTI0ZjE5ZmY0OTU4ZTcxMjIwZGM2YWFmNGI3YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjEwMzNlZTZiLTdkYWYtNDY4Ni04NWUwLWU0MDg0ODFlZmU3MyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UTXpOREUxTmpJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVzdC1hY3Rpb25zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU4MWY0NDQ4NWJhNjgzNWI1Y2UwMGJlYWQ5NWUzMjJlNjYxMGZmYjkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHRlc3QtYWN0aW9ucyIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmODM0MzI0NC0wM2EyLTQyMTItODlkYS04OTQ1ZjRkZTAwYjMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ERXdPVEU1TURNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlB1bGxUb1JlZnJlc2hDb2xvclJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRjNTRjZGU1M2E5MmExMTIyYWMyZWQxZWY4OWFiY2MzYWI5YjIwOWMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFB1bGxUb1JlZnJlc2hDb2xvclJlcHJvXG5YYW1hcmluLkZvcm1zIHJlcHJvZHVjdGlvbiBzYW1wbGUgc2hvd2luZyBSZWZyZXNoQ29udHJvbENvbG9yIGJ1ZyBvbiBpT1NcblxuIyMgUmVwcm9kdWN0aW9uIFN0ZXBzXG5cbjEuIE9wZW4gUHVsbFRvUmVmcmVzaENvbG9yUmVwcm8uc2xuXG4yLiBTZXQgUHVsbFRvUmVmcmVzaENvbG9yUmVwcm8uaU9TIGFzIHRoZSBTdGFydHVwIFByb2plY3RcbjMuIEJ1aWxkL2RlcGxveSBQdWxsVG9SZWZyZXNoQ29sb3JSZXByby5pT1MgdG8gYW4gaU9TIERldmljZVxuICAgIC0gSSBhbSB1c2luZyBpUGhvbmUgWFIgaU9TIDEyLjIgU2ltdWxhdG9yXG40LiBXYWl0IGZvciB0aGUgYXBwIGxhdW5jaCBvbiB0aGUgaU9TIGRldmljZVxuICAgIC0gV2hlbiB0aGUgYXBwIGxhdW5jaGVzLCBgTGlzdFZpZXcuQmVnaW5SZWZyZXNoKClgIGlzIHByb2dyYW1tYXRpY2FsbHkgdHJpZ2dlcmVkIGluIGBDb250ZW50UGFnZS5PbkFwcGVhcmluZygpYFxuNS4gRHVyaW5nIHRoZSBwcm9ncmFtbWF0aWMgcHVsbC10by1yZWZyZXNoLCBub3RlIHRoYXQgYFJlZnJlc2hDb250cm9sQ29sb3JgIGlzIHRoZSBkZWZhdWx0IENvbG9yLCBub3QgdGhlIHJlcXVlc3RlZCBjb2xvclxuNi4gV2FpdCBmb3IgdGhlIHByb2dyYW1tYXRpYyBwdWxsLXRvLXJlZnJlc2ggdG8gZmluaXNoXG43LiBNYW51YWxseSB0cmlnZ2VyIGEgcHVsbC10by1yZWZyZXNoIGJ5IHRhcC1hbmQtZHJhZ2dpbmcgdGhlIFVJIGZyb20gdG9wIHRvIGJvdHRvbVxuICAgIC0gRHVyaW5nIHRoZSBtYW51YWwgcmVmcmVzaCwgbm90ZSB0aGF0IGBSZWZyZXNoQ29udHJvbENvbG9yYCBpcyB0aGUgcmVxdWVzdGVkIGNvbG9yLCBgQ29sb3IuQ3lhbmBcblxuIVtSZXByb2R1Y3Rpb24gVmlkZW9dKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzU2MDY5ODE1LWExMmI0ZjgwLTVkMzktMTFlOS05NGI1LTg5OThiZGU0ZDc4Yi5naWYpXG5cblxuIyMgRW52aXJvbm1lbnRcblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE5IGZvciBNYWMgPT09XG5cblZlcnNpb24gOC4wLjIgKGJ1aWxkIDIzKVxuSW5zdGFsbGF0aW9uIFVVSUQ6IGRkZWY2YjZjLTYwYTctNDFiYi04NmZlLTQ2ZDYyN2E4NzBiNlxuXHRHVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG5cdFhhbWFyaW4uTWFjIDUuNi4wLjIgKGQxNi0wIC8gMDQwNjgyOTA5KVxuXG5cdFBhY2thZ2UgdmVyc2lvbjogNTE4MDEwMDAzXG5cbj09PSBNb25vIEZyYW1ld29yayBNREsgPT09XG5cblJ1bnRpbWU6XG5cdE1vbm8gNS4xOC4xLjMgKDIwMTgtMDgvZmRiMjZiMGE0NDUpICg2NC1iaXQpXG5cdFBhY2thZ2UgdmVyc2lvbjogNTE4MDEwMDAzXG5cbj09PSBOdUdldCA9PT1cblxuVmVyc2lvbjogNC44LjIuNTgzNVxuXG49PT0gLk5FVCBDb3JlID09PVxuXG5SdW50aW1lOiAvdXNyL2xvY2FsL3NoYXJlL2RvdG5ldC9kb3RuZXRcblJ1bnRpbWUgVmVyc2lvbnM6XG5cdDMuMC4wLXByZXZpZXczLTI3NTAzLTVcblx0My4wLjAtcHJldmlldy0yNzMyNC01XG5cdDMuMC4wLXByZXZpZXctMjcxMjItMDFcblx0Mi4yLjBcblx0Mi4yLjAtcHJldmlldzMtMjcwMTQtMDJcblx0Mi4xLjlcblx0Mi4xLjhcblx0Mi4xLjZcblx0Mi4xLjJcblx0Mi4xLjFcblx0Mi4wLjZcblx0Mi4wLjVcblx0MS4xLjEwXG5cdDEuMC4xM1xuU0RLOiAvdXNyL2xvY2FsL3NoYXJlL2RvdG5ldC9zZGsvMi4yLjEwMC9TZGtzXG5TREsgVmVyc2lvbnM6XG5cdDIuMi4xMDBcblx0Mi4xLjUwNVxuXHQyLjEuNTA0XG5cdDIuMS41MDBcblx0Mi4xLjMwMlxuXHQyLjEuMzAxXG5cdDIuMS4xMDFcblx0Mi4xLjRcblx0MS4xLjExXG5NU0J1aWxkIFNES3M6IC9MaWJyYXJ5L0ZyYW1ld29ya3MvTW9uby5mcmFtZXdvcmsvVmVyc2lvbnMvNS4xOC4xL2xpYi9tb25vL21zYnVpbGQvMTUuMC9iaW4vU2Rrc1xuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS42LjlcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IFVwZGF0ZXIgPT09XG5cblZlcnNpb246IDExXG5cbj09PSBYYW1hcmluLkFuZHJvaWQgPT09XG5cblZlcnNpb246IDkuMi4wLjUgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkFuZHJvaWQgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvQW5kcm9pZC9zZGtcblx0U3VwcG9ydGVkIEFuZHJvaWQgdmVyc2lvbnM6XG5cdFx0Ni4wIChBUEkgbGV2ZWwgMjMpXG5cdFx0Ny4wIChBUEkgbGV2ZWwgMjQpXG5cdFx0Ny4xIChBUEkgbGV2ZWwgMjUpXG5cdFx0OC4wIChBUEkgbGV2ZWwgMjYpXG5cdFx0OC4xIChBUEkgbGV2ZWwgMjcpXG5cblNESyBUb29scyBWZXJzaW9uOiAyNi4xLjFcblNESyBQbGF0Zm9ybSBUb29scyBWZXJzaW9uOiAyOC4wLjJcblNESyBCdWlsZCBUb29scyBWZXJzaW9uOiAyOC4wLjNcblxuQnVpbGQgSW5mb3JtYXRpb246IFxuTW9ubzogbW9uby9tb25vLzIwMTgtMDgtcmNANWFkMzcxZGFiMWJcbkphdmEuSW50ZXJvcDogeGFtYXJpbi9qYXZhLmludGVyb3AvZDE2LTBAYzk4NzQ4M1xuTGliWmlwU2hhcnA6IGdyZW5kZWxsby9MaWJaaXBTaGFycC9tYXN0ZXJANDRkZTMwMFxuTGliWmlwOiBuaWgtYXQvbGliemlwL3JlbC0xLTUtMUBiOTVjZjNmXG5NWEU6IHhhbWFyaW4vbXhlL3hhbWFyaW5AYjljYmI1MzVcblByb0d1YXJkOiB4YW1hcmluL3Byb2d1YXJkL21hc3RlckA5MDU4MzZkXG5TUUxpdGU6IHhhbWFyaW4vc3FsaXRlLzMuMjYuMEAzMjVlOTFhXG5YYW1hcmluLkFuZHJvaWQgVG9vbHM6IHhhbWFyaW4veGFtYXJpbi1hbmRyb2lkLXRvb2xzL2QxNi0wQDBhN2VkZDZcblxuPT09IE1pY3Jvc29mdCBNb2JpbGUgT3BlbkpESyA9PT1cblxuSmF2YSBTREs6IC9Vc2Vycy9icmFtaW4vTGlicmFyeS9EZXZlbG9wZXIvWGFtYXJpbi9qZGsvbWljcm9zb2Z0X2Rpc3Rfb3Blbmpka184LjAuMjVcbjEuOC4wLTI1XG5BbmRyb2lkIERlc2lnbmVyIEVQTCBjb2RlIGF2YWlsYWJsZSBoZXJlOlxuaHR0cHM6Ly9naXRodWIuY29tL3hhbWFyaW4vQW5kcm9pZERlc2lnbmVyLkVQTFxuXG49PT0gQW5kcm9pZCBEZXZpY2UgTWFuYWdlciA9PT1cblxuVmVyc2lvbjogMS4yLjAuMTRcbkhhc2g6IDg2ZGYyNmZcbkJyYW5jaDogcmVtb3Rlcy9vcmlnaW4vZDE2LTBcbkJ1aWxkIGRhdGU6IDIwMTktMDQtMDUgMTY6NTg6NTYgVVRDXG5cbj09PSBBcHBsZSBEZXZlbG9wZXIgVG9vbHMgPT09XG5cblhjb2RlIDEwLjIgKDE0NDkwLjEyMClcbkJ1aWxkIDEwRTEyNVxuXG49PT0gWGFtYXJpbi5NYWMgPT09XG5cblZlcnNpb246IDUuOC4wLjAgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDBhYTg0NTIxXG5CcmFuY2g6IGQxNi0wXG5CdWlsZCBkYXRlOiAyMDE5LTA0LTAyIDE2OjAxOjE5LTA0MDBcblxuPT09IFhhbWFyaW4uaU9TID09PVxuXG5WZXJzaW9uOiAxMi44LjAuMCAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogMGFhODQ1MjFcbkJyYW5jaDogZDE2LTBcbkJ1aWxkIGRhdGU6IDIwMTktMDQtMDIgMTY6MDE6MTktMDQwMFxuXG49PT0gWGFtYXJpbiBEZXNpZ25lciA9PT1cblxuVmVyc2lvbjogNC4xNy40LjQxOFxuSGFzaDogM2QwODZlODE0XG5CcmFuY2g6IHJlbW90ZXMvb3JpZ2luL2QxNi0wXG5CdWlsZCBkYXRlOiAyMDE5LTA0LTAxIDA5OjIwOjEwIFVUQ1xuXG49PT0gWGFtYXJpbiBJbnNwZWN0b3IgPT09XG5cblZlcnNpb246IDEuNC4zXG5IYXNoOiBkYjI3NTI1XG5CcmFuY2g6IDEuNC1yZWxlYXNlXG5CdWlsZCBkYXRlOiBNb24sIDA5IEp1bCAyMDE4IDIxOjIwOjE4IEdNVFxuQ2xpZW50IGNvbXBhdGliaWxpdHk6IDFcblxuPT09IEJ1aWxkIEluZm9ybWF0aW9uID09PVxuXG5SZWxlYXNlIElEOiA4MDAwMjAwMjNcbkdpdCByZXZpc2lvbjogYzU3NmJiMDA4ZGZlNTRjZGNmNTk2MjM3ZTA5NTY0ZWJkMmRhNDM0M1xuQnVpbGQgZGF0ZTogMjAxOS0wNC0wNiAxMDowNjo0NiswMFxuQnVpbGQgYnJhbmNoOiBtYXN0ZXJcblhhbWFyaW4gZXh0ZW5zaW9uczogMmM5OTY4MzA2MThlN2NiOGU4YmU5Nzk4NGQ2NDNlYjg2ZjEyMmU4ZFxuXG49PT0gT3BlcmF0aW5nIFN5c3RlbSA9PT1cblxuTWFjIE9TIFggMTAuMTQuNFxuRGFyd2luIDE4LjUuMCBEYXJ3aW4gS2VybmVsIFZlcnNpb24gMTguNS4wXG4gICAgTW9uIE1hciAxMSAyMDo0MDozMiBQRFQgMjAxOVxuICAgIHJvb3Q6eG51LTQ5MDMuMjUxLjN+My9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuPT09IEVuYWJsZWQgdXNlciBpbnN0YWxsZWQgZXh0ZW5zaW9ucyA9PT1cblxuTnVHZXQgUGFja2FnZSBNYW5hZ2VtZW50IEV4dGVuc2lvbnMgMC4xN1xuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYWM0YmMzYTUtNTM5Ny00NTRmLTgxODItY2Y4YjMyMzE5OTY5Igp9ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5USTBOalUyTWpRPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJ0YWNvcy1hcGkiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogIjZlOTBiYzQ4MDU4YjJhNTM2YTExMTVlZDc0ZjNkNjIyYjdjZGNiYTMiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIHRhY29zLWFwaVxuXG5TYW1wbGUgYXBwXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2FwaXMvYnVpbGQvc3RhdHVzL3NpbW9uYWNvLnRhY29zLWFwaSldKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2J1aWxkL2xhdGVzdD9kZWZpbml0aW9uSWQ9OCZXVC5tY19pZD10YWNvc2FwaS1naXRodWItc2ljb3RpbilcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJkMzM3YWMyNi0yMGU0LTQ1NzAtYjk0Yi00OTYyODMyM2JjNjIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ERXlNelV3TVRRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtc1NpbmdsZXRvblJlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjY2ZDQxOWZjNzEyZGJhYzRjZWNhY2MyYzI1MjY5NmE4N2RkM2I1ODUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFhhbWFyaW5Gb3Jtc1NpbmdsZXRvblJlcHJvXG5YYW1hcmluLkZvcm1zIHNhbXBsZSB0byByZXByb2R1Y2UgU3lzdGVtLk1pc3NpbmdNZXRob2RFeGNlcHRpb24gd2hlbiB1c2luZyBhIHNpbmdsZXRvbiBmb3IgQXBwbGljYXRpb24uTWFpblBhZ2VcblxuTGluayB0byBYYW1hcmluLkZvcm1zIElzc3VlOiBodHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9YYW1hcmluLkZvcm1zL2lzc3Vlcy81OTExXG5cbiFbUmVwcm9kdWN0aW9uIFZpZGVvXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy81NjA4NjU2Ny00YWRjMTA4MC01ZTBlLTExZTktODFjZS05MzcxNGYxNzVjNzYuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM2ODliYWZiLWY0ZTItNGRiOC04NTlkLWQ1ZDdiODAxYmVjYiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1qRTRNemN6IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJDb2RlQ2FtcGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjQ4YTM4Nzk2MDgzMDZhNzhmYTU0ZGVkZWU2ZWZlYzE2MDQ1OWEyNDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQTVOVFV3TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWY0NjE1ZDNmNTlmNTI0ZjE5ZmY0OTU4ZTcxMjIwZGM2YWFmNGI3YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHRcblxuQSBWdWUgQ0xJIHByZXNldCBjb25maWd1cmF0aW9uLlxuXG4jIyBSdW4gaXRcblxuWW91IHJ1biBpdCBieSBleGVjdXRpbmcgXG5cbmBgYGJhc2hcbnZ1ZSBjcmVhdGUgLS1wcmVzZXQgam9obnBhcGEvdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQgaGVsbG8tdnVlXG5gYGBcblxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxZmYwNzc0OC1kZWMwLTQxYWUtYTc4ZC04OWMzMDliY2FiM2EiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU16TTNORFExIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJraXMtcmVxdWlyZWpzLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODhjMTYyZTI3Y2U0M2E5OTQzZjM5NmViNzk5M2ZhNmM4ZjNlMjBjOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5URXpNakE0IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJqczRuZXRkZXYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjcyNzUzNzkwN2IyMGFhYTFlZGZkZDg4OTRiMGIxOTYzMDNhZmIyYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UWTFNRGcwTlRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5MWI1MmI2ODYwM2Y5ZmMzZWUxNDNkZmM0ZWVlZjI5ODIyYmIwODYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHNlcnZlcmxlc3MtZ3JhcGhxbC13b3Jrc2hvcFxuXG5JbiB0aGlzIHdvcmtzaG9wIHdlJ2xsIGJ1aWxkIGEgU2VydmVybGVzcyBHcmFwaFFMIGVuZHBvaW50IGZvciBhbiBleGlzdGluZyB2b3RpbmcgQVBJLlxuXG4jIyBzbGlkZXNcblxuW0J1aWxkIFNjYWxhYmxlIEFQSXMgVXNpbmcgR3JhcGhRTCBhbmQgU2VydmVybGVzc10oaHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvU2ltb25hQ290aW4vYnVpbGQtc2NhbGFibGUtYXBpcy11c2luZy1ncmFwaHFsLWFuZC1zZXJ2ZXJsZXNzLTE3MjMyOTE5NSlcblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBBIHJlY2VudCB2ZXJzaW9uIG9mIFtOb2RlXShodHRwczovL25vZGVqcy5vcmcvZW4vZG93bmxvYWQpICg4KylcblxuMS4gW1ZTIENvZGVdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2Rvd25sb2FkLz9XVC5tY19pZD1ncmFwaHFsd29ya3Nob3AtZ2l0aHViLXNpY290aW4pICBcblxuMS4gW0F6dXJlIEZ1bmN0aW9ucyBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtcnVuLWxvY2FsP1dULm1jX2lkPWdyYXBocWx3b3Jrc2hvcC1naXRodWItc2ljb3RpbilcblxuMS4gW0F6dXJlIEZ1bmN0aW9ucyBFeHRlbnNpb24gZm9yIFZTIENvZGVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcy8/V1QubWNfaWQ9Z3JhcGhxbHdvcmtzaG9wLWdpdGh1Yi1zaWNvdGluJml0ZW1OYW1lPW1zLWF6dXJldG9vbHMudnNjb2RlLWF6dXJlZnVuY3Rpb25zKSAgXG5cbjEuIFtGcmVlIEF6dXJlIEFjY291bnRdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9lbi11cy9mcmVlLz93dC5tY19pZD1ncmFwaHFsd29ya3Nob3AtZ2l0aHViLXNpY290aW4pXG5cbiMjIFN0ZXBzXG5cbjEuIENyZWF0ZSB5b3VyIG93biBzZXJ2aWNlcyBmb2xsb3dpbmcgc3RlcHMgb24gW3NlcnZpY2VzIHJlYWRtZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3NlcnZlcmxlc3MtZ3JhcGhxbC13b3Jrc2hvcC9ibG9iL21hc3Rlci9zZXJ2aWNlcy9SZWFkbWUubWQpXG5cbjEuIENyZWF0ZSBHcmFwaFFMIGVuZHBvaW50IGZvbGxvd2luZyBzdGVwcyBvbiBbYXBpIHJlYWRtZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL3NlcnZlcmxlc3MtZ3JhcGhxbC13b3Jrc2hvcC9ibG9iL21hc3Rlci9ncmFwaHFsLWFwaS9SZWFkbWUubWQpXG5cbjEuIEFkZCBHcmFwaGlRTCBVSSB1c2luZyBzdGVwcyBpbiBbcmVhZG1lXShodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vc2VydmVybGVzcy1ncmFwaHFsLXdvcmtzaG9wL2Jsb2IvbWFzdGVyL2dyYXBoaXFsL1JlYWRtZS5tZClcblxuIyMgRGVtbyBhcHBcblxuR3JhcGhRTCBlbmRwb2ludDogW2h0dHBzOi8vZ3JhcGhxbHBsYXlncm91bmQuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2dyYXBocWxdKGh0dHBzOi8vZ3JhcGhxbHBsYXlncm91bmQuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2dyYXBocWwpXG5cbkdyYXBoaVFMIGVuZHBvaW50OlxuW2h0dHBzOi8vZ3JhcGhxbHBsYXlncm91bmQuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2dyYXBoaXFsXShodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaGlxbClcblxuU2FtcGxlIHF1ZXJ5OlxuXG5gYGBcbnF1ZXJ5IHtcbiAgdGVhbXMge1xuICAgIGlkXG4gICAgbmFtZVxuICAgIHBvaW50c1xuICB9XG59XG5gYGBcblxuU2FtcGxlIG11dGF0aW9uOlxuXG5gYGBcbm11dGF0aW9uIHtcbiAgaW5jcmVtZW50UG9pbnRzKGlkOjIpIHtcbiAgICBpZFxuICAgIG5hbWVcbiAgICBwb2ludHNcbiAgfVxufVxuYGBgXG4tLS1cblxu8J+OiSBDb25ncmF0cyEhIFlvdSBtYWRlIGl0IC0gYnVpbHQgeW91ciB2ZXJ5IGZpcnN0IEdyYXBoUUwgZW5kcG9pbnQgb24gU2VydmVybGVzcyEg8J+OiVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjkwNjc2NDMwLTI3OTMtNDA3NC04Y2YzLWZmNjM3NTVmMjkwMSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ESXpNRE0zTlRFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlhhbWFyaW5Gb3Jtc1NpbmdsZXRvblJlcHJvLVBsdWdpbi5CYWRnZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkMDJlMjYyNTgxMWFlYmIwYzU4MTI3NGJiYTMzOTI4OTk0OWNjNGFlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBYYW1hcmluRm9ybXNTaW5nbGV0b25SZXByb1xuWGFtYXJpbi5Gb3JtcyBzYW1wbGUgdG8gcmVwcm9kdWNlIFN5c3RlbS5NaXNzaW5nTWV0aG9kRXhjZXB0aW9uIHdoZW4gdXNpbmcgYSBzaW5nbGV0b24gZm9yIEFwcGxpY2F0aW9uLk1haW5QYWdlXG5cbkxpbmsgdG8gWGFtYXJpbi5Gb3JtcyBJc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3hhbWFyaW4vWGFtYXJpbi5Gb3Jtcy9pc3N1ZXMvNTkxMVxuXG4hW1JlcHJvZHVjdGlvbiBWaWRlb10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNTYwODY1NjctNGFkYzEwODAtNWUwZS0xMWU5LTgxY2UtOTM3MTRmMTc1Yzc2LmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmZDQwZjQ1ZC1jMDQwLTQyNWEtYjZkOC00MTViYzFhMDE2ZjEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09UY3lOVEUwIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJIb3RUb3dlbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlZTM3ZjBmNDhlMmY5MGQ0NDU5YWY1MTk3ZjUwZmZhZTcyZjFmOTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qVTBPVGMxIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJQbHVyYWxzaWdodFNwYUp1bXBTdGFydEZpbmFsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjhlNTJlYmVlODQ0ZDk0YzUwNGU0MzVmODU3OGQ4ZmM4MTU5NmRlYjMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UZzRNelUyT0RNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jb2duaXRpdmUtc2VydmljZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzI4MGIwNTU5MjliNDU3N2Q5YTEzNjg3Y2FmMmY4NzZiODU2ZDQwOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQ29sbGVjdGlvbiBvZiBBenVyZSBGdW5jdGlvbnMgd3JhcHBlcnMgZm9yIEF6dXJlIENvZ25pdGl2ZSBTZXJ2aWNlcyBBUElcblxuIyMgQ29tcHV0ZXIgVmlzaW9uIEFQSVxuXG5UaGUgW0NvbXB1dGVyIFZpc2lvbiBBUEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2NvZ25pdGl2ZS1zZXJ2aWNlcy9jb21wdXRlci12aXNpb24vP3d0Lm1jX2lkPWdpdGh1Yi1yZWFkbWUtc2ljb3RpbikgcHJvdmlkZXMgc3RhdGUtb2YtdGhlLWFydCBhbGdvcml0aG1zIHRvIHByb2Nlc3MgaW1hZ2VzIGFuZCByZXR1cm4gaW5mb3JtYXRpb24uIEZvciBleGFtcGxlLCBpdCBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgaWYgYW4gaW1hZ2UgY29udGFpbnMgbWF0dXJlIGNvbnRlbnQsIG9yIGl0IGNhbiBiZSB1c2VkIHRvIGZpbmQgYWxsIHRoZSBmYWNlcyBpbiBhbiBpbWFnZS4gSXQgYWxzbyBoYXMgb3RoZXIgZmVhdHVyZXMgbGlrZSBlc3RpbWF0aW5nIGRvbWluYW50IGFuZCBhY2NlbnQgY29sb3JzLCBjYXRlZ29yaXppbmcgdGhlIGNvbnRlbnQgb2YgaW1hZ2VzLCBhbmQgZGVzY3JpYmluZyBhbiBpbWFnZSB3aXRoIGNvbXBsZXRlIEVuZ2xpc2ggc2VudGVuY2VzLiBBZGRpdGlvbmFsbHksIGl0IGNhbiBhbHNvIGludGVsbGlnZW50bHkgZ2VuZXJhdGUgaW1hZ2VzIHRodW1ibmFpbHMgZm9yIGRpc3BsYXlpbmcgbGFyZ2UgaW1hZ2VzIGVmZmVjdGl2ZWx5LlxuXG5UbyBydW4gZnVuY3Rpb25zIGluIHRoaXMgcHJvamVjdCB5b3UgbmVlZCBhIENvbXB1dGVyIFZpc2lvbiBpbnN0YW5jZS5cblxuWW91IGNhbiBjcmVhdGUgb25lIGVpdGhlciB1c2luZyB0aGUgW0F6dXJlIFBvcnRhbF0oaHR0cHM6Ly9ha2EubXMvcG9ydGFsLWdpdGh1Yikgb3IgdXNpbmcgdGhlIFtBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9jb2duaXRpdmVzZXJ2aWNlcz92aWV3PWF6dXJlLWNsaS1sYXRlc3Qmd3QubWNfaWQ9Z2l0aHViLXJlYWRtZS1zaWNvdGluKS5cblxuYGBgXG5heiBjb2duaXRpdmVzZXJ2aWNlcyBhY2NvdW50IGNyZWF0ZSAtbiBzZXJ2ZXJsZXNzLWN2cyAtZyBzZXJ2ZXJsZXNzY29nbml0aXZlc2VydmljZXMgLS1raW5kIFwiQ29tcHV0ZXJWaXNpb25cIiAtLXNrdSBGMCAtbCBXZXN0VVMyIC0teWVzXG5gYGBcblxuUmVuYW1lIGxvY2FsLnNldHRpbmdzLnNhbXBsZS5qc29uIHRvIGxvY2FsLnNldHRpbmdzLmpzb24gYW5kIHJlcGxhY2UgQVBJX1VSTCBhbmQgQVBJX0tFWSB3aXRoIHlvdXIgc2V0dGluZ3MuXG5cbllvdSBjYW4gcmV0cmlldmUgdGhlIEFQSV9LRVkgdmFsdWUgZWl0aGVyIGZyb20gdGhlIFtBenVyZSBQb3J0YWxdKGh0dHBzOi8vYWthLm1zL3BvcnRhbC1naXRodWIpLCBvbiB0aGUgS2V5cyB0YWIgb3IgdXNpbmcgdGhlIFtBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9jb2duaXRpdmVzZXJ2aWNlcz92aWV3PWF6dXJlLWNsaS1sYXRlc3Qmd3QubWNfaWQ9Z2l0aHViLXJlYWRtZS1zaWNvdGluKTpcblxuYGBgXG5heiBjb2duaXRpdmVzZXJ2aWNlcyBhY2NvdW50IGtleXMgbGlzdCAtbiBzZXJ2ZXJsZXNzLWN2cyAtZyBzZXJ2ZXJsZXNzY29nbml0aXZlc2VydmljZXNcbmBgYFxuXG5TYW1lIGZvciB0aGUgQVBJX0VORFBPSU5ULCB5b3UgY2FuIGdldCBpdCBmcm9tIHRoZSBPdmVydmlldyBwYWdlIGluIHRoZSBbQXp1cmUgUG9ydGFsXShodHRwczovL2FrYS5tcy9wb3J0YWwtZ2l0aHViKSBvciB1c2luZyB0aGUgW0F6dXJlIENMSV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvY2xpL2F6dXJlL2NvZ25pdGl2ZXNlcnZpY2VzP3ZpZXc9YXp1cmUtY2xpLWxhdGVzdCZ3dC5tY19pZD1naXRodWItcmVhZG1lLXNpY290aW4pOlxuXG5gYGBcbmF6IGNvZ25pdGl2ZXNlcnZpY2VzIGFjY291bnQgc2hvdyAtbiBzZXJ2ZXJsZXNzLWN2cyAtZyBzZXJ2ZXJsZXNzY29nbml0aXZlc2VydmljZXNcbmBgYFxuXG5JbnN0YWxsIG5wbSBkZXBlbmRlbmNpZXMgYnkgcnVubmluZyBgbnBtIGlgLiBUbyBydW4gdGhlIHByb2plY3QgaW4gVlMgQ29kZSBjbGljayBvbiB0aGUgZGVidWcgaWNvbiBhbmQgdGhlbiBjbGljayBzdGFydCBEZWJ1Z2dpbmcuIFRoaXMgd2lsbCBzdGFydCB0aGUgQXp1cmUgRnVuY3Rpb25zIHJ1bnRpbWUgYW5kIGdlbmVyYXRlIFVSTHMgb2YgdGhpcyBmb3JtIFtodHRwOi8vbG9jYWxob3N0OjcwNzEvYXBpL2FuYWx5emUtaW1hZ2VdKGh0dHA6Ly9sb2NhbGhvc3Q6NzA3MS9hcGkvYW5hbHl6ZS1pbWFnZSlcblxuIyMgVGVzdCBBUElcblxuRGVwbG95ZWQgYXBwbGljYXRpb24gYXQ6XG5cbjEuIFtBbmFseXplIEltYWdlXShodHRwczovL3NlcnZlcmxlc3Njdi5henVyZXdlYnNpdGVzLm5ldC9hcGkvYW5hbHl6ZS1pbWFnZSlcblxuMS4gW0Rlc2NyaWJlIEltYWdlXShodHRwczovL3NlcnZlcmxlc3Njdi5henVyZXdlYnNpdGVzLm5ldC9hcGkvZGVzY3JpYmUtaW1hZ2UpXG5cbjEuIFtGYWNlIERldGVjdF0oaHR0cHM6Ly9zZXJ2ZXJsZXNzY3YuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2ZhY2UtZGV0ZWN0KVxuXG4xLiBbT0NSXShodHRwczovL3NlcnZlcmxlc3Njdi5henVyZXdlYnNpdGVzLm5ldC9hcGkvb2NyKVxuXG4xLiBbVGFnIEltYWdlXShodHRwczovL3NlcnZlcmxlc3Njdi5henVyZXdlYnNpdGVzLm5ldC9hcGkvdGFnLWltYWdlKVxuXG4jIyBNb3JlIHJlc291cmNlc1xuXG4xLiBBUEkgcmVmZXJlbmNlIGRvY3VtZW50YXRpb24gW0NvbXB1dGVyIFZpc2lvbiBBUEldKGh0dHBzOi8vd2VzdHVzLmRldi5jb2duaXRpdmUubWljcm9zb2Z0LmNvbS9kb2NzL3NlcnZpY2VzLzVhZGY5OTE4MTVlMTA2MGU2MzU1YWQ0NC9vcGVyYXRpb25zLzU2ZjkxZjJlNzc4ZGFmMTRhNDk5ZTFmYS8/d3QubWNfaWQ9Z2l0aHViLXJlYWRtZS1zaWNvdGluKVxuXG4xLiBBenVyZSBDTEkgY29tbWFuZHMgZm9yIFtBenVyZSBDb2duaXRpdmUgU2VydmljZXNdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9jb2duaXRpdmVzZXJ2aWNlcz92aWV3PWF6dXJlLWNsaS1sYXRlc3Qmd3QubWNfaWQ9Z2l0aHViLXJlYWRtZS1zaWNvdGluKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQxYTYwZjExLWFmOTEtNDU3NC04M2FlLWQwOWFlYmI4ODllZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UVTRNRGszIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJ0ZWxla2luZXNpcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4NDc3MDQ5MWM5MGUzN2FkODVjNzE1NzJjM2M5MGFjYmJlZTlmN2I5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ESXpNRGN4TURjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVuaXRUZXN0QXBwVGVtcGxhdGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZDdjNjlmNmMyMzFhMTk3YTkwNTRlYjExZjBhMGUzNTI0MjZmNTdmOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgVW5pdFRlc3RBcHBUZW1wbGF0ZVxuXG5SZWNvbW1lbmRlZCBVbml0IFRlc3QgQXBwIHRlbXBsYXRlcyBmb3IgVmlzdWFsIFN0dWRpbyBmb3IgTWFjXG5cbiFbVW5pdCBUZXN0IEFwcCBUZW1wbGF0ZXNdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzU2NDQ1MzQzLWJmZTk5MzAwLTYyYjEtMTFlOS05NGZiLTRkYWYwYmVlOGI5ZS5wbmcpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYTVjNzEzOWEtM2M0ZS00Y2JkLWE1MmQtMzc1NzFhYTAyM2JmIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQXlNREUzTXpnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibm9kZWJpbmFyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImYwNjcxMDIwOGM3YTViYTY5N2ZmZjNmYWYwNjBmOTdiZTNlOGJlODkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIG5vZGViaW5hciAgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby5ub2RlYmluYXIpXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19idWlsZC9sYXRlc3Q/ZGVmaW5pdGlvbklkPTEwKSBcblxuSWYgeW91IHdhbnQgdG8gbGVhcm4gbW9yZSBhYm91dCBnZXR0aW5nIHN0YXJ0ZWQgd2l0aCBzZXJ2ZXJsZXNzIHVzaW5nIFZTIENvZGUgYW5kIHdhdGNoIGEgZGVtbyBvZiBBenVyZSBBUEkgTWFuYWdlbWVudCB5b3UgY2FuIHJlZ2lzdGVyIFtoZXJlXShodHRwczovL2luZm8ubWljcm9zb2Z0LmNvbS93dy1vbmRlbWFuZC1idWlsZC1zZXJ2ZXJsZXNzLWFwaS13aXRoLW5vZGVqcy5odG1sKSBhbmQgeW91J2xsIGdldCBhIHJlY29yZGVkIHZlcnNpb24gb2YgdGhlIHdlYmluYXIuICBcblxuIyMgRGVwbG95IHJlc291cmNlc1xuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHBzOi8vYXp1cmVkZXBsb3kubmV0L2RlcGxveWJ1dHRvbi5wbmcpXShodHRwczovL3BvcnRhbC5henVyZS5jb20vI2NyZWF0ZS9NaWNyb3NvZnQuVGVtcGxhdGUvdXJpL2h0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRnNpbW9uYWNvJTJGbm9kZWJpbmFyJTJGbWFzdGVyJTJGYXp1cmVkZXBsb3kuanNvbilcblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBBIHJlY2VudCB2ZXJzaW9uIG9mIE5vZGUgKDgrKVxuXG4xLiBWUyBDb2RlOiBbaGVyZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG93bmxvYWQvP1dULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4pICBcblxuMS4gQXp1cmUgRnVuY3Rpb25zIENMSTogW2hlcmVdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtcnVuLWxvY2FsP1dULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4pICBcblxuMS4gQXp1cmUgRnVuY3Rpb25zIEV4dGVuc2lvbiBmb3IgVlMgQ29kZTogW2hlcmVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcy8/V1QubWNfaWQ9d2ViaW5hci1naXRodWItc2ljb3RpbiZpdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgIFxuXG4xLiBBenVyZSBhY2NvdW50OiBbaHR0cHM6Ly9ha2EubXMvZnJlZV0oaHR0cHM6Ly9ha2EubXMvZnJlZSlcblxuIyMgUnVuIGxvY2FsbHlcblxuMS4gSW5zdGFsbCBhbGwgZGVwZW5kZW5jaWVzIGJ5IHJ1bm5pbmcgYG5wbSBpYFxuXG4xLiBJbiBbVlMgQ29kZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG93bmxvYWQvP1dULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4pLCBnbyB0byB0aGUgW0F6dXJlIEZ1bmN0aW9uc10oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zLz9XVC5tY19pZD13ZWJpbmFyLWdpdGh1Yi1zaWNvdGluJml0ZW1OYW1lPW1zLWF6dXJldG9vbHMudnNjb2RlLWF6dXJlZnVuY3Rpb25zKSBleHRlbnNpb24gYW5kIGNsaWNrIG9uIGBDcmVhdGUgTmV3IFByb2plY3QuLi5gIGljb24uIFRoaXMgd2lsbCBjcmVhdGUgYSBsb2NhbC5zZXR0aW5ncy5qc29uIGZpbGUgZm9yIHVzIGFuZCBjb25maWd1cmUgbG9jYWwgZGVidWdnaW5nLiAgXG5cbjEuIEluIGBsb2NhbC5zZXR0aW5ncy5qc29uYCwgc2V0dXAgeW91ciBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIGNvbm5lY3RpbmcgdG8geW91ciBkYXRhYmFzZTogXG5cbmBgYGpzb25cbntcbiAgXCJJc0VuY3J5cHRlZFwiOiBmYWxzZSxcbiAgXCJWYWx1ZXNcIjoge1xuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiOiBcIlwiLFxuICAgIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCI6IFwibm9kZVwiLFxuICAgIFwidXNlclwiOiBcInlvdXItZGItdXNlclwiLFxuICAgIFwicGFzc3dvcmRcIjogXCJ5b3VyLWRiLXBhc3N3b3JkXCIsXG4gICAgXCJwb3J0XCI6IFwieW91ci1kYi1wb3J0XCJcbiAgfVxufVxuYGBgXG5cbjEuIEluIFZTIENvZGUsIGdvIHRvIHRoZSBEZWJ1Z2dpbmcgcGFuZWwgYW5kIHJ1biBhcHBsaWNhdGlvbiBieSBjbGlraW5nIG9uIHRoZSBgU3RhcnQgZGVidWdnaW5nYCBpY29uIChzbWFsbCBwbGF5IGJ1dHRvbiBvbiB0aGUgbGVmdCBoYW5kIHNpZGUgb2YgdGhlIHRvcCBiYXIpXG5cbi0tLVxuXG48c3BhbiBjbGFzcz1cImVtb2ppLW91dGVyIGVtb2ppLXNpemVyXCI+PHNwYW4gY2xhc3M9XCJlbW9qaS1pbm5lclwiIHN0eWxlPVwiYmFja2dyb3VuZDogdXJsKGNocm9tZS1leHRlbnNpb246Ly9pbW1ocG5jbG9tZGxvaWtrcGNlZm5jbWZnamJrb2ptaC9lbW9qaS1kYXRhL3NoZWV0X2FwcGxlXzMyLnBuZyk7YmFja2dyb3VuZC1wb3NpdGlvbjoxNi4wMzk5NTI5OTY0NzQ3MzUlIDcxLjk3NDE0ODA2MTEwNDU5JTtiYWNrZ3JvdW5kLXNpemU6NTQxOC43NSUgNTQxOC43NSVcIiBkYXRhLWNvZGVwb2ludHM9XCIxZjM4OVwiPjwvc3Bhbj48L3NwYW4+IENvbmdyYXRzISEgWW91IG1hZGUgaXQgLSBidWlsdCB5b3VyIHZlcnkgZmlyc3QgZW5kcG9pbnQgb24gU2VydmVybGVzcyEgPHNwYW4gY2xhc3M9XCJlbW9qaS1vdXRlciBlbW9qaS1zaXplclwiPjxzcGFuIGNsYXNzPVwiZW1vamktaW5uZXJcIiBzdHlsZT1cImJhY2tncm91bmQ6IHVybChjaHJvbWUtZXh0ZW5zaW9uOi8vaW1taHBuY2xvbWRsb2lra3BjZWZuY21mZ2pia29qbWgvZW1vamktZGF0YS9zaGVldF9hcHBsZV8zMi5wbmcpO2JhY2tncm91bmQtcG9zaXRpb246MTYuMDM5OTUyOTk2NDc0NzM1JSA3MS45NzQxNDgwNjExMDQ1OSU7YmFja2dyb3VuZC1zaXplOjU0MTguNzUlIDU0MTguNzUlXCIgZGF0YS1jb2RlcG9pbnRzPVwiMWYzODlcIj48L3NwYW4+PC9zcGFuPlxuXG4tLS1cbkJvbnVzOiBJZiBpbnRlcmVzdGVkIHRvIGxlYXJuIG1vcmUgYWJvdXQgc2VydmVybGVzcyBtYWtlIHN1cmUgdG8gY2hlY2tvdXQgdGhlIGZyZWUgc2VsZiBndWlkZWQgY291cnNlcyBvbiBbTWljcm9zb2Z0IExlYXJuIFNlcnZlcmxlc3MgUGF0aF0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vbGVhcm4vYnJvd3NlLz9yb2xlcz1kZXZlbG9wZXImcHJvZHVjdHM9YXp1cmUtZnVuY3Rpb25zJldULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4pXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGFjYTkzNDgtMTg0NS00ZWM3LThjMjUtMTEyODBiNTRiYzQ2Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTVPVEU1Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2xpbXBzZS50b2FzdHIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjU0NzQ1NGE0NjA1MjE5ODUwMTZmYmRjMjNhMDA0NzcxMWYxZDc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXhNRGcyTVRrPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkJ1dHRvblJlbmRlcmVyU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ0NGUzOTVlMjI4ZmRjZWJlNDdjNWVhNmFlZDlkZDExMTgzYzMyZjIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEJ1dHRvblJlbmRlcmVyU2FtcGxlXG5cbkEgc2FtcGxlIFhhbWFyaW4uRm9ybXMgYXBwIHNob3dpbmcgaG93IHRvIG1ha2UgYSBCdXR0b24gQ3VzdG9tIFJlbmRlcmVyXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGIyMTE3NTUtYzIzYS00N2M3LTg4N2QtMjQyNzM2Yjk5NDI1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTBPVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidG9hc3RyLWJvd2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE2OWFhOGUzMDIxY2JmMWM2NGVhZWRlYzNiNDE4YzA0MzEzYWY5NWEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qZzVOekl3TmpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiaWduaXRlLXRoZS10b3VyLWZ1bjMwIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5MzQ2MjFkOWYzNjMwMWFmOGI0M2RiZGNmZDJkMTlmNjgxMTFhZGMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGlnbml0ZS10aGUtdG91ci1mdW4zMFxuXG5Db2RlIGZvciBJZ25pdGUgVGhlIFRvdXIgc2Vzc2lvblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjc0ZDg1MzAzLWZhNjYtNDc3NS1iYTkwLTRlODBiZTk5YjYyNiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UUXpNekkxTlRnPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkludm9rZU9uTWFpblRocmVhZEFzeW5jX1JlcHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjFlMGY5YTQ5NTRlZTM4NTdkN2JkZWE4NzAyNDhjOGUwYTY4ZWVmYzYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEludm9rZU9uTWFpblRocmVhZEFzeW5jX1JlcHJvXG5SZXByb2R1Y3Rpb24gc2FtcGxlIGZvciBYYW1hcmluLkZvcm1zLkludm9rZU9uTWFpblRocmVhZEFzeW5jXG5cbioqVXBkYXRlKipcblxuW1RoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL1hhbWFyaW4uRm9ybXMvaXNzdWVzLzY3MDUpIGhhcyBiZWVuIGZpeGVkIGluIFhhbWFyaW4uRm9ybXMgdjQuMi4wLjYwODE0Ni1wcmUxLlxuXG4jIyBSZXByb2R1Y3Rpb24gU3RlcHMsIGlPU1xuXG4xLiBPcGVuIGBJbnZva2VPbk1haW5UaHJlYWRBc3luY19SZXByby5zbG5gIGluIFZpc3VhbCBTdHVkaW8gb3IgVmlzdWFsIFN0dWRpbyBmb3IgTWFjXG4yLiBCdWlsZC9EZXBsb3kgYEludm9rZU9uTWFpblRocmVhZEFzeW5jX1JlcHJvLmlPU2AgdG8gYW4gaU9TIERldmljZSBvciBTaW11bGF0b3JcbjMuIFRhcCB0aGUgQnV0dG9uIHRpdGxlZCBgTm8gQ3Jhc2hgXG40LiBDb25maXJtIHRoZSBhbmltYXRpb24gY29tcGxldGVzIHN1Y2Nlc3NmdWxseVxuNS4gVGFwIHRoZSBCdXR0b24gdGl0bGVkIGBDcmFzaDFgXG42LiBDb25maXJtIHRoZSBhcHAgY3Jhc2hlcyB3aXRoIGBOdWxsUmVmZXJlbmNlRXhjZXB0aW9uYFxuNy4gQnVpbGQvRGVwbG95IGBJbnZva2VPbk1haW5UaHJlYWRBc3luY19SZXByby5pT1NgIHRvIGFuIGlPUyBEZXZpY2Ugb3IgU2ltdWxhdG9yXG44LiBUYXAgdGhlIEJ1dHRvbiB0aXRsZWQgYENyYXNoMmBcbjkuIENvbmZpcm0gdGhlIGFwcCBjcmFzaGVzIHdpdGggYE51bGxSZWZlcmVuY2VFeGNlcHRpb25gXG5cbiMjIFJlcHJvZHVjdGlvbiBTdGVwcywgQW5kcm9pZFxuXG4xLiBPcGVuIGBJbnZva2VPbk1haW5UaHJlYWRBc3luY19SZXByby5zbG5gIGluIFZpc3VhbCBTdHVkaW8gb3IgVmlzdWFsIFN0dWRpbyBmb3IgTWFjXG4yLiBCdWlsZC9EZXBsb3kgYEludm9rZU9uTWFpblRocmVhZEFzeW5jX1JlcHJvLkFuZHJvaWRgIHRvIGFuIGlPUyBEZXZpY2Ugb3IgU2ltdWxhdG9yXG4zLiBUYXAgdGhlIEJ1dHRvbiB0aXRsZWQgYE5vIENyYXNoYFxuNC4gQ29uZmlybSB0aGUgYW5pbWF0aW9uIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHlcbjUuIFRhcCB0aGUgQnV0dG9uIHRpdGxlZCBgQ3Jhc2gxYFxuNi4gQ29uZmlybSB0aGUgYXBwIGNyYXNoZXMgd2l0aCBgTnVsbFJlZmVyZW5jZUV4Y2VwdGlvbmBcbjcuIEJ1aWxkL0RlcGxveSBgSW52b2tlT25NYWluVGhyZWFkQXN5bmNfUmVwcm8uQW5kcm9pZGAgdG8gYW4gaU9TIERldmljZSBvciBTaW11bGF0b3JcbjguIFRhcCB0aGUgQnV0dG9uIHRpdGxlZCBgQ3Jhc2gyYFxuOS4gQ29uZmlybSB0aGUgYXBwIGNyYXNoZXMgd2l0aCBgTnVsbFJlZmVyZW5jZUV4Y2VwdGlvbmBcblxuXG4hW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjAzNzE1NjctNzQ4OGVhODAtOTlhZS0xMWU5LTgyMjgtYTFkOGRjZWU2YmM5LmdpZilcblxuIyMgRW52aXJvbm1lbnRcblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE5IGZvciBNYWMgKFByZXZpZXcpID09PVxuXG5WZXJzaW9uIDguMiBQcmV2aWV3ICg4LjIgYnVpbGQgODc0KVxuSW5zdGFsbGF0aW9uIFVVSUQ6IGNjOWU3ZjlhLWIzZjItNDA3MS04NGM0LWRkNzgxNTRkOThkZVxuXHRHVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG5cdFhhbWFyaW4uTWFjIDUuMTQuMC44MyAoZDE2LTIgLyBmMDhkNGUzZSlcblxuXHRQYWNrYWdlIHZlcnNpb246IDYwMDAwMDI5NlxuXG49PT0gTW9ubyBGcmFtZXdvcmsgTURLID09PVxuXG5SdW50aW1lOlxuXHRNb25vIDYuMC4wLjI5NiAoMjAxOS0wMi8xZTlmM2JmYmM1YSkgKDY0LWJpdClcblx0UGFja2FnZSB2ZXJzaW9uOiA2MDAwMDAyOTZcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA1LjEuMC42MDEzXG5cbj09PSAuTkVUIENvcmUgPT09XG5cblJ1bnRpbWU6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L2RvdG5ldFxuUnVudGltZSBWZXJzaW9uczpcblx0My4wLjAtcHJldmlldzYtMjc4MDQtMDFcblx0My4wLjAtcHJldmlldzUtMjc2MjYtMTVcblx0My4wLjAtcHJldmlldzMtMjc1MDMtNVxuXHQzLjAuMC1wcmV2aWV3LTI3MzI0LTVcblx0My4wLjAtcHJldmlldy0yNzEyMi0wMVxuXHQyLjIuNFxuXHQyLjIuMFxuXHQyLjIuMC1wcmV2aWV3My0yNzAxNC0wMlxuXHQyLjEuOVxuXHQyLjEuOFxuXHQyLjEuNlxuXHQyLjEuMlxuXHQyLjEuMVxuXHQyLjAuNlxuXHQyLjAuNVxuXHQxLjEuMTBcblx0MS4wLjEzXG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8zLjAuMTAwLXByZXZpZXc2LTAxMjI2NC9TZGtzXG5TREsgVmVyc2lvbnM6XG5cdDMuMC4xMDAtcHJldmlldzYtMDEyMjY0XG5cdDMuMC4xMDAtcHJldmlldzUtMDExNTY4XG5cdDIuMi4yMDNcblx0Mi4xLjUwNVxuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzYuMC4wL2xpYi9tb25vL21zYnVpbGQvQ3VycmVudC9iaW4vU2Rrc1xuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS42LjEwXG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIFByb2ZpbGVyLmFwcC9Db250ZW50cy9NYWNPUy9YYW1hcmluIFByb2ZpbGVyXG5cbj09PSBVcGRhdGVyID09PVxuXG5WZXJzaW9uOiAxMVxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSAxMC4yLjEgKDE0NDkwLjEyMilcbkJ1aWxkIDEwRTEwMDFcblxuPT09IFhhbWFyaW4gRGVzaWduZXIgPT09XG5cblZlcnNpb246IDE2LjIuMC4zMjVcbkhhc2g6IGYxMGNmYmY4M1xuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtMlxuQnVpbGQgZGF0ZTogMjAxOS0wNi0xOSAxOTowMDo0NiBVVENcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogOS40LjAuMzQgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkNvbW1pdDogeGFtYXJpbi1hbmRyb2lkL2QxNi0yLzdjY2UzMDVcbkFuZHJvaWQgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvQW5kcm9pZC9zZGtcblx0U3VwcG9ydGVkIEFuZHJvaWQgdmVyc2lvbnM6XG5cdFx0Ni4wIChBUEkgbGV2ZWwgMjMpXG5cdFx0Ny4wIChBUEkgbGV2ZWwgMjQpXG5cdFx0Ny4xIChBUEkgbGV2ZWwgMjUpXG5cdFx0OC4wIChBUEkgbGV2ZWwgMjYpXG5cdFx0OC4xIChBUEkgbGV2ZWwgMjcpXG5cblNESyBUb29scyBWZXJzaW9uOiAyNi4xLjFcblNESyBQbGF0Zm9ybSBUb29scyBWZXJzaW9uOiAyOC4wLjJcblNESyBCdWlsZCBUb29scyBWZXJzaW9uOiAyOC4wLjNcblxuQnVpbGQgSW5mb3JtYXRpb246IFxuTW9ubzogbW9uby9tb25vLzIwMTktMDJAYzZlZGFhNjJmOTRcbkphdmEuSW50ZXJvcDogeGFtYXJpbi9qYXZhLmludGVyb3AvZDE2LTJAYjJiMjYxMFxuTGliWmlwU2hhcnA6IGdyZW5kZWxsby9MaWJaaXBTaGFycC9kMTYtMkBjYWEwYzc0XG5MaWJaaXA6IG5paC1hdC9saWJ6aXAvcmVsLTEtNS0xQGI5NWNmM2ZcblByb0d1YXJkOiB4YW1hcmluL3Byb2d1YXJkL21hc3RlckA5MDU4MzZkXG5TUUxpdGU6IHhhbWFyaW4vc3FsaXRlLzMuMjcuMUA4MjEyYTJkXG5YYW1hcmluLkFuZHJvaWQgVG9vbHM6IHhhbWFyaW4veGFtYXJpbi1hbmRyb2lkLXRvb2xzL21hc3RlckA0ZjcxN2I2XG5cbj09PSBNaWNyb3NvZnQgTW9iaWxlIE9wZW5KREsgPT09XG5cbkphdmEgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vamRrL21pY3Jvc29mdF9kaXN0X29wZW5qZGtfOC4wLjI1XG4xLjguMC0yNVxuQW5kcm9pZCBEZXNpZ25lciBFUEwgY29kZSBhdmFpbGFibGUgaGVyZTpcbmh0dHBzOi8vZ2l0aHViLmNvbS94YW1hcmluL0FuZHJvaWREZXNpZ25lci5FUExcblxuPT09IEFuZHJvaWQgRGV2aWNlIE1hbmFnZXIgPT09XG5cblZlcnNpb246IDEuMi4wLjU4XG5IYXNoOiBkMDNlM2VhXG5CcmFuY2g6IHJlbW90ZXMvb3JpZ2luL2QxNi0yXG5CdWlsZCBkYXRlOiAyMDE5LTA2LTE5IDE2OjMwOjIyIFVUQ1xuXG49PT0gWGFtYXJpbi5NYWMgPT09XG5cblZlcnNpb246IDUuMTQuMC45MSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogMmYxY2M3YmJcbkJyYW5jaDogZDE2LTJcbkJ1aWxkIGRhdGU6IDIwMTktMDYtMDcgMDI6NDk6MjMtMDQwMFxuXG49PT0gWGFtYXJpbi5pT1MgPT09XG5cblZlcnNpb246IDEyLjE0LjAuOTEgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDJmMWNjN2JiXG5CcmFuY2g6IGQxNi0yXG5CdWlsZCBkYXRlOiAyMDE5LTA2LTA3IDAyOjQ5OjIyLTA0MDBcblxuPT09IFhhbWFyaW4gSW5zcGVjdG9yID09PVxuXG5WZXJzaW9uOiAxLjQuM1xuSGFzaDogZGIyNzUyNVxuQnJhbmNoOiAxLjQtcmVsZWFzZVxuQnVpbGQgZGF0ZTogTW9uLCAwOSBKdWwgMjAxOCAyMToyMDoxOCBHTVRcbkNsaWVudCBjb21wYXRpYmlsaXR5OiAxXG5cbj09PSBCdWlsZCBJbmZvcm1hdGlvbiA9PT1cblxuUmVsZWFzZSBJRDogODAyMDAwODc0XG5HaXQgcmV2aXNpb246IGU1Nzc3MGVmZTBkMmI5MmFkZTFlMWI3NWU1MjczMTYxNGU1Zjk0ODdcbkJ1aWxkIGRhdGU6IDIwMTktMDYtMjUgMTk6NDM6MzIrMDBcbkJ1aWxkIGJyYW5jaDogcmVsZWFzZS04LjItcHJldmlldzJcblhhbWFyaW4gZXh0ZW5zaW9uczogYTc0ZmIzZWI4NzE3ZmJjYjgyNTAwYjNhMTA3Njk0YWQ1MTg1YWE0OFxuXG49PT0gT3BlcmF0aW5nIFN5c3RlbSA9PT1cblxuTWFjIE9TIFggMTAuMTQuNVxuRGFyd2luIDE4LjYuMCBEYXJ3aW4gS2VybmVsIFZlcnNpb24gMTguNi4wXG4gICAgVGh1IEFwciAyNSAyMzoxNjoyNyBQRFQgMjAxOVxuICAgIHJvb3Q6eG51LTQ5MDMuMjYxLjR+Mi9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuPT09IEVuYWJsZWQgdXNlciBpbnN0YWxsZWQgZXh0ZW5zaW9ucyA9PT1cblxuTnVHZXQgUGFja2FnZSBNYW5hZ2VtZW50IEV4dGVuc2lvbnMgMC4xOVxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZmYwMDU5YjctZmMzZS00YzAwLTlhNTYtZTNlYjI4N2Q1NDE3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UUTJNelEyTWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2hlZXJ6LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNDgxODMzYzM0MDRjZDRlYmE3M2EwYjQxMDc4M2Y5OTQxYTZmNGZiZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UWXlNakExTURBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZVhhbWFyaW5HcmFwaFFMIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImFkYTA2ZTY4MDI0NDY0N2ZmYTIxYTYwOTBhNTRmMzI0NTBjN2RhM2UiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBTaW1wbGVYYW1hcmluR3JhcGhRTFxuQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCBidWlsdCBpbiBYYW1hcmluLkZvcm1zIGRlbW9uc3RyYXRpbmcgaG93IHRvIGludGVyYWN0IHdpdGggR2l0SHViJ3MgR3JhcGhRTCBBUEkgZnJvbSBhIFtYYW1hcmluLkZvcm1zXShodHRwczovL3Zpc3VhbHN0dWRpby5taWNyb3NvZnQuY29tL3hhbWFyaW4/V1QubWNfaWQ9c2ltcGxleGFtYXJpbmdyYXBocWwtZ2l0aHViLWJyYW1pbikgYXBwIHVzaW5nIFtHcmFwaFFMLkNsaWVudF0oaHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL0dyYXBoUUwuQ2xpZW50LykuXG5cbiMjIFhhbWFyaW4gKyBHcmFwaFFMIFJlY29yZGluZ1xuXG5UaGlzIGFwcCB3YXMgY3JlYXRlZCB0byBhY2NvbXBhbnkgbXkgdGFsayBvbiBYYW1hcmluICsgR3JhcGhRTC5cblxuVGhlIHNlc3Npb24gd2FzIGRlbGl2ZXJlZCBhdCBbWGFtYXJpbiBEZXZlbG9wZXIgU3VtbWl0IDIwMTldKGh0dHBzOi8vd3d3LmNvZGV0cmF2ZWxlci5pby94YW1kZXZzdW1taXQtZ3JhcGhxbC8pIGFuZCBpdHMgcmVjb3JkaW5nIGlzIGF2YWlsYWJsZSBvbiBZb3VUdWJlOiBodHRwczovL3lvdXR1LmJlL3QxY1FzZW5BbU5vP3Q9MTg1NzVcblxuWyFbWGFtYXJpbiArIEdyYXBoUUwgVmlkZW9dKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzYxMjU2NjY4LTZhOGYxNzgwLWE3MjItMTFlOS05N2FkLTgxODhlYzZlYWI4Zi5wbmcpXShodHRwczovL3lvdXR1LmJlL3QxY1FzZW5BbU5vP3Q9MTg1NzUpXG5cbiMjIERlbW9cblxuIVtBcHAgRGVtb10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjExMjM5OTUtNjk4MDkwODAtYTQ2Yi0xMWU5LTkyYzQtYzVjMDE3NGY0ZTFhLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlNDAyNDNlMi1iMGZjLTRhNDEtYTM0NC03NmJiNmRlODQ5MWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXlPVGM0TkRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzFlMjMwMmRkM2M5YmNmMWY2MTI2N2VjMTYxMzQ3YTQ0NGQ4YmY4NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgR3JhcGhRTCBBUElcblxuVGhpcyBpcyBhIEdyYXBoUUwgZW5kcG9pbnQgY2FsbGluZyB0d28gZXhpc3RpbmcgUkVTVCBhcGkgZW5kcG9pbnRzXG5cbllvdSBjYW4gZXhwbG9yZSB0aGUgZW5kcG9pbnQgd2UnbGwgYnVpbGQgYXQgW2h0dHBzOi8vZ3JhcGhxbHBsYXlncm91bmQuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2dyYXBoaXFsXShodHRwczovL2dyYXBocWxwbGF5Z3JvdW5kLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9ncmFwaGlxbClcblxuIyMgU3RlcHNcblxuSWYgeW91IGhhdmVuJ3QgYWxyZWFkeSwgbWFrZSBzdXJlIHRvIGNsb25lIHRoaXMgcmVwb3NpdG9yeS5cblxuMS4g4pqg77iPIE5hdmlnYXRlIHRvIHRoZSBwcm9qZWN0J3MgZm9sZGVyIGFuZCBvcGVuIGl0IGluIGEgKm5ldyBpbnN0YW5jZSogb2YgVlMgQ29kZVxuXG4xLiBJbnN0YWxsIGRlcGVuZGVuY2llc1xuXG5gYGBcbm5wbSBpbnN0YWxsXG5gYGBcblxuMS4gR28gdG8gKkRlYnVnKiBwYW5lbCBpbiBWUyBDb2RlIGFuZCBjbGljayBydW5cblxuMS4gVXNpbmcgW1Bvc3RtYW5dKGh0dHBzOi8vd3d3LmdldHBvc3RtYW4uY29tLykgKG9yIGFueSBSZXN0IGNsaWVudCkgbWFrZSBhIFBPU1QgcmVxdWVzdCB0byB5b3VyIEdyYXBoUUwgZW5kcG9pbnQgcnVubmluZyBpbiB5b3VyIGxvY2FsIFtodHRwOi8vbG9jYWxob3N0OjcwNzEvYXBpL2dyYXBocWxdKGh0dHA6Ly9sb2NhbGhvc3Q6NzA3MS9hcGkvZ3JhcGhxbCkgd2l0aCB0aGlzIGJvZHkgb2YgdHlwZSAqYXBwbGljYXRpb24vanNvbio6XG5cbmBgYGpzb25cbnsgXCJxdWVyeVwiOiBcInt0ZWFtc3tpZCBuYW1lIHBvaW50c319XCJ9XG5gYGBcblxuMS4gVG8gZGVwbG95IHlvdXIgZnVuY3Rpb24gdXNpbmcgVlMgQ29kZSBnbyB0byB0aGUgQXp1cmUgRnVuY3Rpb25zIGV4dGVuc2lvbi4gQ2xpY2sgdGhlIGJsdWUgYXJyb3cgYnV0dG9uIGFuZCBmb2xsb3cgcHJvbXB0IGluc3RydWN0aW9ucyB0byBlaXRoZXIgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9yIGRlcGxveSB0byBhbiBleGlzdGluZyBvbmVcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmNzNkYjI5My1hMGRiLTQzZTQtODQ0MC0yMmMzN2EzZTVlZTUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXpNRFV5TURJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYmI2MDJmN2FlYWI4YTVlMjY3ZDcyMzNiMzMwYTI0ODVlZDM3YjliYiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgR3JhcGhpUUwgaXMgYW4gaW4tYnJvd3NlciBJREUgZm9yIGV4cGxvcmluZyBHcmFwaFFMXG5cbiMjIFN0ZXBzOlxuXG4xLiBSZXBsYWNlIHRoZSBVUkwgaW4gZ3JhcGhRTEZldGNoZXIgZnVuY3Rpb24gd2l0aCB5b3VyIG93biBHcmFwaFFMIGVuZHBvaW50IFVSTCBbaHR0cHM6Ly88eW91cl9mdW5jdGlvbl91cmw+L2FwaS9ncmFwaHFsXShodHRwczovLzx5b3VyX2Z1bmN0aW9uX3VybD4vYXBpL2dyYXBocWwpXG5cbjEuIEluIHRoZSBbQXp1cmUgUG9ydGFsXShodHRwczovL2FrYS5tcy9wb3J0YWwtbmNldTE4KSBuYXZpZ2F0ZSB0byBmdW5jdGlvbnMsIGNsaWNrIG9uIHRoZSBncmFwaHFsIGZ1bmN0aW9uLiBGcm9tIHRoZXJlLCBjbGljayBvbiB0aGUgKlBsYXRmb3JtIGZlYXR1cmVzKiB0YWIgLT4gQVBJIC0+IENPUlMgYW5kIGFkZCB5b3VyIHVybCBhcyBhbGxvd2VkIG9yaWdpblxuXG4xLiBSdW4gbG9jYWxseSAtIHVzZSBhIGxvY2FsIGh0dHAgc2VydmVyIChpLmUuIGh0dHAtc2VydmVyKS4gSWYgeW91IGRvbid0IGhhdmUgb25lIGluc3RhbGxlZDpcblxuYGBgXG5ucG0gaSAtZyBodHRwLXNlcnZlclxuYGBgXG5cbjEuIElmIHlvdSB3YW50IHRvIGNvbm5lY3QgdG8geW91ciBmdW5jdGlvbiBydW5uaW5nIGxvY2FsbHksIGdvIHRvIHlvdXIgZnVuY3Rpb24ncyBsb2NhbC5zZXR0aW5ncy5qc29uIGZpbGUgYW5kIGNoYW5nZSBpdCB0byBpbmNsdWRlIENPUlMgc2V0dGluZ3M6XG5cbmBgYGpzb25cbiAgICB7XG4gICAgICAgIFwiSXNFbmNyeXB0ZWRcIjogZmFsc2UsXG4gICAgICAgIFwiVmFsdWVzXCI6IHtcbiAgICAgICAgICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiOiBcIlwiLFxuICAgICAgICAgICAgXCJGVU5DVElPTlNfV09SS0VSX1JVTlRJTUVcIjogXCJub2RlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFwiSG9zdFwiOiB7XG4gICAgICAgICAgICBcIkNPUlNcIjpcIipcIlxuICAgICAgICB9XG4gICAgfVxuYGBgXG5cbiMjIyBFeHRyYSBzdGVwc1xuXG4xLiBEZXBsb3kgdGhpcyBhcyBhIHN0YXRpYyB3ZWJzaXRlIGluIHRoZSBjbG91ZC4gWW91IGNhbiB1c2UgQXp1cmUgQmxvYiBTdG9yYWdlIGZvbGxvd2luZyBbc3RlcHMgaGVyZV0oaHR0cHM6Ly9ha2EubXMvc3RhdGljLW5jZXUxOClcblxuMS4gSW4geW91ciBmdW5jdGlvbiBhcHAgY29uZmlndXJlIHByb3hpZXMgdG8gcmVkaXJlY3QgdHJhZmZpYyB0byB5b3VyIEdyYXBoaVFMIGFwcFxuXG5gYGBqc29uXG57XG4gIFwiJHNjaGVtYVwiOiBcImh0dHA6Ly9qc29uLnNjaGVtYXN0b3JlLm9yZy9wcm94aWVzXCIsXG4gIFwicHJveGllc1wiOiB7XG4gICAgXCJncmFwaGlxbFwiOiB7XG4gICAgICBcIm1hdGNoQ29uZGl0aW9uXCI6IHtcbiAgICAgICAgXCJtZXRob2RzXCI6IFtcIkdFVFwiXSxcbiAgICAgICAgXCJyb3V0ZVwiOiBcIi9hcGkvZ3JhcGhpcWxcIlxuICAgICAgfSxcbiAgICAgIFwiYmFja2VuZFVyaVwiOiBcInlvdXJfdXJsX2hlcmVcIlxuICAgIH1cbiAgfVxufVxuYGBgXG5cbjEuIERlcGxveSB5b3VyIEdyYXBoUUwgYXBpIGZ1bmN0aW9uIGFwcCB3aXRoIHRoZSBuZXcgcHJveHkgY29uZmlndXJlZFxuXG4xLiBUZXN0IEdyYXBoaVFMIGJ5IG5hdmlnYXRpbmcgdG8geW91ciBmdW5jdGlvbiBbaHR0cHM6Ly88eW91cl9mdW5jdGlvbl91cmw+L2FwaS9ncmFwaGlxbF0oaHR0cHM6Ly88eW91cl9mdW5jdGlvbl91cmw+L2FwaS9ncmFwaGlxbClcblxuLS0tXG5cbuKaoSBDb25ncmF0cyEhIFlvdSBoYXZlIG5vdyBjb21wbGV0ZWQgYWxsIHN0ZXBzISEg4pqhXG5cbiMjIyBNb3JlIHJlc291Y2VzXG5cbjEuIFRvIGxlYXJuIG1vcmUgYWJvdXQgR3JhcGhpUUwgZ28gdG8gW0dyYXBoaVFMXShodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaGlxbClcblxuMS4gVG8gbGVhcm4gbW9yZSBhYm91dCBwcm94aWVzIGdvIHRvIFtBenVyZSBQcm94aWVzXShodHRwczovL2FrYS5tcy9wcm94aWVzLW5jZXUxOClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhOTE1MTUyYS01NjRlLTQ0NDctYWE0MS0xMjBlMGQzMTQyYjgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56QXpNRGcwTVRRPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1ncmFwaHFsLWFwaXMtcGFydDMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYTY1MjYwNTAwODkyODhhNWEwNTgxODAxNzQzNjc4YWJmOWVmYzNkNyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIlRoaXMgcHJvamVjdCB3YXMgYm9vdHN0cmFwcGVkIHdpdGggW0NyZWF0ZSBSZWFjdCBBcHBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9jcmVhdGUtcmVhY3QtYXBwKS5cblxuIyMgQXZhaWxhYmxlIFNjcmlwdHNcblxuSW4gdGhlIHByb2plY3QgZGlyZWN0b3J5LCB5b3UgY2FuIHJ1bjpcblxuIyMjIGBucG0gc3RhcnRgXG5cblJ1bnMgdGhlIGFwcCBpbiB0aGUgZGV2ZWxvcG1lbnQgbW9kZS48YnI+XG5PcGVuIFtodHRwOi8vbG9jYWxob3N0OjMwMDBdKGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCkgdG8gdmlldyBpdCBpbiB0aGUgYnJvd3Nlci5cblxuVGhlIHBhZ2Ugd2lsbCByZWxvYWQgaWYgeW91IG1ha2UgZWRpdHMuPGJyPlxuWW91IHdpbGwgYWxzbyBzZWUgYW55IGxpbnQgZXJyb3JzIGluIHRoZSBjb25zb2xlLlxuXG4jIyMgYG5wbSB0ZXN0YFxuXG5MYXVuY2hlcyB0aGUgdGVzdCBydW5uZXIgaW4gdGhlIGludGVyYWN0aXZlIHdhdGNoIG1vZGUuPGJyPlxuU2VlIHRoZSBzZWN0aW9uIGFib3V0IFtydW5uaW5nIHRlc3RzXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvcnVubmluZy10ZXN0cykgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiMjIyBgbnBtIHJ1biBidWlsZGBcblxuQnVpbGRzIHRoZSBhcHAgZm9yIHByb2R1Y3Rpb24gdG8gdGhlIGBidWlsZGAgZm9sZGVyLjxicj5cbkl0IGNvcnJlY3RseSBidW5kbGVzIFJlYWN0IGluIHByb2R1Y3Rpb24gbW9kZSBhbmQgb3B0aW1pemVzIHRoZSBidWlsZCBmb3IgdGhlIGJlc3QgcGVyZm9ybWFuY2UuXG5cblRoZSBidWlsZCBpcyBtaW5pZmllZCBhbmQgdGhlIGZpbGVuYW1lcyBpbmNsdWRlIHRoZSBoYXNoZXMuPGJyPlxuWW91ciBhcHAgaXMgcmVhZHkgdG8gYmUgZGVwbG95ZWQhXG5cblNlZSB0aGUgc2VjdGlvbiBhYm91dCBbZGVwbG95bWVudF0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vY3JlYXRlLXJlYWN0LWFwcC9kb2NzL2RlcGxveW1lbnQpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG4jIyMgYG5wbSBydW4gZWplY3RgXG5cbioqTm90ZTogdGhpcyBpcyBhIG9uZS13YXkgb3BlcmF0aW9uLiBPbmNlIHlvdSBgZWplY3RgLCB5b3UgY2Fu4oCZdCBnbyBiYWNrISoqXG5cbklmIHlvdSBhcmVu4oCZdCBzYXRpc2ZpZWQgd2l0aCB0aGUgYnVpbGQgdG9vbCBhbmQgY29uZmlndXJhdGlvbiBjaG9pY2VzLCB5b3UgY2FuIGBlamVjdGAgYXQgYW55IHRpbWUuIFRoaXMgY29tbWFuZCB3aWxsIHJlbW92ZSB0aGUgc2luZ2xlIGJ1aWxkIGRlcGVuZGVuY3kgZnJvbSB5b3VyIHByb2plY3QuXG5cbkluc3RlYWQsIGl0IHdpbGwgY29weSBhbGwgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZXMgYW5kIHRoZSB0cmFuc2l0aXZlIGRlcGVuZGVuY2llcyAoV2VicGFjaywgQmFiZWwsIEVTTGludCwgZXRjKSByaWdodCBpbnRvIHlvdXIgcHJvamVjdCBzbyB5b3UgaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVtLiBBbGwgb2YgdGhlIGNvbW1hbmRzIGV4Y2VwdCBgZWplY3RgIHdpbGwgc3RpbGwgd29yaywgYnV0IHRoZXkgd2lsbCBwb2ludCB0byB0aGUgY29waWVkIHNjcmlwdHMgc28geW91IGNhbiB0d2VhayB0aGVtLiBBdCB0aGlzIHBvaW50IHlvdeKAmXJlIG9uIHlvdXIgb3duLlxuXG5Zb3UgZG9u4oCZdCBoYXZlIHRvIGV2ZXIgdXNlIGBlamVjdGAuIFRoZSBjdXJhdGVkIGZlYXR1cmUgc2V0IGlzIHN1aXRhYmxlIGZvciBzbWFsbCBhbmQgbWlkZGxlIGRlcGxveW1lbnRzLCBhbmQgeW91IHNob3VsZG7igJl0IGZlZWwgb2JsaWdhdGVkIHRvIHVzZSB0aGlzIGZlYXR1cmUuIEhvd2V2ZXIgd2UgdW5kZXJzdGFuZCB0aGF0IHRoaXMgdG9vbCB3b3VsZG7igJl0IGJlIHVzZWZ1bCBpZiB5b3UgY291bGRu4oCZdCBjdXN0b21pemUgaXQgd2hlbiB5b3UgYXJlIHJlYWR5IGZvciBpdC5cblxuIyMgTGVhcm4gTW9yZVxuXG5Zb3UgY2FuIGxlYXJuIG1vcmUgaW4gdGhlIFtDcmVhdGUgUmVhY3QgQXBwIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2NyZWF0ZS1yZWFjdC1hcHAvZG9jcy9nZXR0aW5nLXN0YXJ0ZWQpLlxuXG5UbyBsZWFybiBSZWFjdCwgY2hlY2sgb3V0IHRoZSBbUmVhY3QgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9yZWFjdGpzLm9yZy8pLlxuXG4jIyMgQ29kZSBTcGxpdHRpbmdcblxuVGhpcyBzZWN0aW9uIGhhcyBtb3ZlZCBoZXJlOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvY29kZS1zcGxpdHRpbmdcblxuIyMjIEFuYWx5emluZyB0aGUgQnVuZGxlIFNpemVcblxuVGhpcyBzZWN0aW9uIGhhcyBtb3ZlZCBoZXJlOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvYW5hbHl6aW5nLXRoZS1idW5kbGUtc2l6ZVxuXG4jIyMgTWFraW5nIGEgUHJvZ3Jlc3NpdmUgV2ViIEFwcFxuXG5UaGlzIHNlY3Rpb24gaGFzIG1vdmVkIGhlcmU6IGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2NyZWF0ZS1yZWFjdC1hcHAvZG9jcy9tYWtpbmctYS1wcm9ncmVzc2l2ZS13ZWItYXBwXG5cbiMjIyBBZHZhbmNlZCBDb25maWd1cmF0aW9uXG5cblRoaXMgc2VjdGlvbiBoYXMgbW92ZWQgaGVyZTogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vY3JlYXRlLXJlYWN0LWFwcC9kb2NzL2FkdmFuY2VkLWNvbmZpZ3VyYXRpb25cblxuIyMjIERlcGxveW1lbnRcblxuVGhpcyBzZWN0aW9uIGhhcyBtb3ZlZCBoZXJlOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvZGVwbG95bWVudFxuXG4jIyMgYG5wbSBydW4gYnVpbGRgIGZhaWxzIHRvIG1pbmlmeVxuXG5UaGlzIHNlY3Rpb24gaGFzIG1vdmVkIGhlcmU6IGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2NyZWF0ZS1yZWFjdC1hcHAvZG9jcy90cm91Ymxlc2hvb3RpbmcjbnBtLXJ1bi1idWlsZC1mYWlscy10by1taW5pZnlcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmYTVhNjI1My00MzdhLTRhYjQtOTI3Zi04ZTc2YmE0NTA0YjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFUwTlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ3VscC1wYXR0ZXJucyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlYTZmNGY3Mzk1Yzk4MjY0M2Q3NDg5NzMwODMxMzQ1MjY1NzFlMWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qUTFNelE0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10ZXN0aW5nLXF1aWNrLXN0YXJ0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM5ZmZhMzc1NDdjNGUyYjUwMjFhMzY5NjA4Mjg1MTA2NTdjMDk5MTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56QXhORGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2VuZXJhdG9yLWhvdHRvd2VsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI2ZDUzNzYzMDFiNGJmYTEyNjExZjI5ZDY3NTU2MzdhMjQ5MzA3NDgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9ETXdPVFkyTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYmFyZGpzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZmZjY0ZTJiY2YxYjkzMTkyNWE2N2JiOTgzYjlmNThmYTU1NGZmMzUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek16TXpPREl6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVGltZXNoZWV0cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZGFhM2Q5MDg5ZmU5MmQzYzQ2ZWQ5ZTM1MTdjNzU2ZDI3M2E1MWEyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtYW5ndWxhci10eXBlc2NyaXB0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5EUXhPVEk1T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXNwbmV0NS13b3Jrc2hvcC0yMDE1IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI0MjgzZmNiNWM5Y2I0ZjY4ZDMyOTcxYmQ3MzM2Y2Y0YzZiNzMxN2YiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56RTJOVFEzT1RZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtY291cnNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjFjMGEyMDRjOWJjYTUwMzE4Mjg2NjM3ZTM3NzBhYmZiODlkMDE2MzIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICI8aDEgYWxpZ249XCJjZW50ZXJcIj5nYXRzYnktY291cnNlLXN0YXJ0ZXI8L2gxPiA8YnI+XG48cCBhbGlnbj1cImNlbnRlclwiPlxuICAgIDxpbWcgYWx0PVwicHJvamVjdCBsb2dvXCIgc3JjPVwiaHR0cHM6Ly9icmhvbHRpbWFnZXMuYmxvYi5jb3JlLndpbmRvd3MubmV0L2ltYWdlcy93b21hbi10ZWFjaGVyLnBuZ1wiIHdpZHRoPVwiMTUwXCI+XG48L3A+XG5cbjxwIGFsaWduPVwiY2VudGVyXCI+XG4gIEEgR2F0c2J5IHN0YXJ0ZXIgdG8gZ2V0IHlvdSBzdGFydGVkIGNyZWF0aW5nIGVkdWNhdGlvbmFsIG1hdGVyaWFscyB1c2luZyBNYXJrZG93blxuPC9wPlxuXG4jIyBZb3UgY2FuIHNlZSB0aGUgbGl2ZSB2ZXJzaW9uIG9mIHRoZSBjb3Vyc2UgW2hlcmVdKGh0dHBzOi8vamFtc3RhY2sxLno2LndlYi5jb3JlLndpbmRvd3MubmV0LylcblxuIyMgR2V0IFN0YXJ0ZWRcblxuMS4gYG5wbSBpbnN0YWxsIC0tZ2xvYmFsIGdhdHNieS1jbGlgIC0gbWFrZSBzdXJlIHlvdSdyZSBvbiBHYXRzYnkgdjIrXG4gICAtIFNlZSBbZG9jcyBoZXJlXShodHRwczovL25leHQuZ2F0c2J5anMub3JnL2RvY3MvKSBpZiB5b3UgbmVlZCBoZWxwXG4xLiBgZ2F0c2J5IG5ldyBjb3Vyc2Utd2Vic2l0ZSBodHRwczovL2dpdGh1Yi5jb20vYnRob2x0L2dhdHNieS1jb3Vyc2Utc3RhcnRlcmBcbjEuIGBjZCBjb3Vyc2Utd2Vic2l0ZWBcbjEuIGBucG0gcnVuIGRldmBcbjEuIE9wZW4gaHR0cDovL2xvY2FsaG9zdDo4MDAwIGluIHlvdXIgYnJvd3NlclxuXG4jIyBMZXNzb25zXG5cblRoZSBjcnV4IG9mIHRoaXMgc2l0ZSBpcyBhcmUgdGhlIGxlc3NvbnMuIFByb3ZpZGVkIGFyZSB0d28gZXhhbXBsZXMuIEVhY2ggbGVzc29uIG5lZWRzIGEgW2Zyb250bWF0dHRlcl0oaHR0cHM6Ly9naXRodWIuY29tL2dhdHNieWpzL2dhdHNieS9ibG9iL21hc3Rlci9kb2NzL2RvY3MvYWRkaW5nLW1hcmtkb3duLXBhZ2VzLm1kI25vdGUtb24tY3JlYXRpbmctbWFya2Rvd24tZmlsZXMpIGBwYXRoYCwgYG9yZGVyYCwgYW5kIGB0aXRsZWAuIEdlbmVyYWxseSB5b3Ugc2hvdWxkIG1ha2UgdGhlIGBwYXRoYCBhbmQgdGhlIGZpbGUgbmFtZSBtYXRjaCBmb3IgZWFzZSBvZiBmaW5kaW5nIGl0LlxuXG4tIGBwYXRoYCAtIG5lZWRzIGEgbGVhZGluZyBzbGFzaC4gVGhpcyB3aWxsIGJlIHNsdWcgb2YgdGhlIGxlc3NvblxuLSBgdGl0bGVgIC0gd2lsbCBiZSB0aGUgdGl0bGUgZGlzcGxheWVkIG9uIHRoZSBUYWJsZSBvZiBDb250ZW50cyBhbmQgb24gdGhlIHBhZ2UgaXRzZWxmXG4tIGBvcmRlcmAgLSB0aGUgb3JkZXIgb2Ygd2hpY2ggdGhlIGl0ZW0gc2hvdWxkIGFwcGVhciBpbiB0aGUgdGFibGUgb2YgY29udGVudHMuIFRoZSBmaXJzdCBpdGVtIHNob3VsZCBiZSBvZiBvcmRlciBgMGAuIFRoZSBzZWNvbmQgc2hvdWxkIGJlIGAxYCwgZXRjLiBNdXN0IGJlIG51bWJlcmVkIHNlcXVlbnRpYWxseSwgaS5lLiBkb24ndCBza2lwIG51bWJlcnMuXG5cbiMjIENvbmZpZ1xuXG5JbnNpZGUgb2YgYGdhdHNieS1jb25maWcuanNgIGJlIHN1cmUgdG8gZmlsbCBvdXQgdGhlIGBzaXRlTWV0YWRhdGFgIGZpZWxkcywgaW5jbHVkaW5nIGB0aXRsZWAsIGBzdWJ0aXRsZWAsIGBkZXNjcmlwdGlvbmAsIGFuZCBga2V5d29yZHNgLlxuXG4jIyBBenVyZSBQaXBlbGluZXNcblxuQXp1cmUgaGFzIGEgZnJlZS1mb3Itb3Blbi1zb3VyY2UgY29udGludW91cyBpbnRlZ3JhdGlvbiBwbGF0Zm9ybSBjYWxsZWQgW0F6dXJlIFBpcGVsaW5lc10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2VuLXVzL3NlcnZpY2VzL2Rldm9wcy9waXBlbGluZXMvP1dULm1jX2lkPWdhdHNieS1naXRodWItYnJob2x0KS4gVGhpcyBwcm9qZWN0IGlzIGFscmVhZHkgc2V0IHVwIGZvciBpdCB3aXRoIHRoZSBgYXp1cmUtcGlwZWxpbmVzLnltbGAuIEp1c3QgYWRkIHRoZSBwcm9qZWN0IHRvIFBpcGVsaW5lcyBhbmQgaXQnbGwgaW1tZWRpYXRlbHkgY29ycmVjdGx5IGJ1aWxkIHRoZSBwcm9qZWN0LiBGcm9tIHRoZXJlIHlvdSdsbCBoYXZlIGEgYnVpbGQgYXJ0aWZhY3QgdGhhdCB5b3UgY2FuIHVzZSB0byBkZXBsb3kgdG8gW0F6dXJlIFN0YXRpYyBTaXRlc10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2VuLXVzL2Jsb2cvYXp1cmUtc3RvcmFnZS1zdGF0aWMtd2ViLWhvc3RpbmctcHVibGljLXByZXZpZXcvP1dULm1jX2lkPWdhdHNieS1naXRodWItYnJob2x0KSBvciBbR2l0SHViIFBhZ2VzXShodHRwczovL3BhZ2VzLmdpdGh1Yi5jb20vKS5cblxuIyMgR2l0SHViIFBhZ2VzXG5cbklmIHlvdSBkbyB3YW50IHRvIGRlcGxveSB0byBHaXRIdWIgcGFnZXMsIG1ha2Ugc3VyZSB5b3UgYWRkIHRoZSBuYW1lIG9mIHRoZSByZXBvIHRvIHRoZSBgcGF0aFByZWZpeGAgcHJvcGVydHkgaW4gYGdhdHNieS1jb25maWcuanNgIHNvIHRoYXQgaXQgd2lsbCBjb3JyZWN0bHkgbWFrZSBhbGwgdGhlIGxpbmtzLlxuXG4jIyBFeGFtcGxlIFNpdGVzXG5cbi0gW0NvbXBsZXRlIEludHJvIHRvIFdlYiBEZXYgdjJdKGh0dHBzOi8vYnRob2x0LmdpdGh1Yi5pby9pbnRyby10by13ZWItZGV2LXYyLylcbi0gW0NvbXBsZXRlIEludHJvIHRvIFJlYWN0IHY0XShodHRwczovL2J0aG9sdC5naXRodWIuaW8vY29tcGxldGUtaW50cm8tdG8tcmVhY3QtdjQvKVxuLSBbRm91ciBTZW1lc3RlcnMgb2YgQ29tcHV0ZXIgU2NpZW5jZSBpbiBGaXZlIEhvdXJzIFBhcnQgSUldKGh0dHBzOi8vYnRob2x0LmdpdGh1Yi5pby9mb3VyLXNlbWVzdGVycy1vZi1jcy1wYXJ0LXR3by8pXG5cbiMjIExpY2Vuc2VcblxuVGhlICoqY29kZSoqIGlzIHRoaXMgcmVwbyBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlLlxuXG5JIGluY2x1ZGUgdGhlIENDLUJZLU5DLTQuMCBsaWNlbnNlIGZvciB0aGUgY29udGVudDsgdGhpcyBpcyB3aGF0IEkgcmVjb21tZW5kIHlvdSBsaWNlbnNlIHlvdXIgKipjb250ZW50KiogdW5kZXI6IGFueW9uZSBjYW4gdXNlIGFuZCBzaGFyZSB0aGUgY29udGVudCBidXQgdGhleSBjYW5ub3Qgc2VsbCBpdDsgb25seSB5b3UgY2FuLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY3NzE5ODNlLTc0YjctNGU1MS05ZjhlLWEwODRhNmQzNmFiMiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERXdOelF4T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiRVM2LU1vZHVsZXMtU3RhcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2N2Y4ZmViOThiOTQ2NDg4MmI5NTA5NjVmZjQ2YzJhYTRhZjYyNWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERTRNVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzYxZmY0ZTBkOTg2YTQ1OWM4NDE0YWVlYTZhZTBhNTcyMTE1Mzc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1URTROVEE1TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtZWxlY3Ryb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTFkYjVmZGIyODcwOTYyNzEzMDM4ZjRhZTc1YzQwYWJlNTI2OWVmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1UY3pOakV6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10b3VyLW9mLWhlcm9lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNjU5Njc3MTBlOGIxYjg3YzBlNmE0ZjE5ZWVhMmI1ZjU0ZTdjNTBlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EUTNPRFl3TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibGl0ZS1zZXJ2ZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmJjNmIwYzYzYzdhODJjMDFiN2IxMTM1NzljMzE0MDBjNDE1ZmE3NSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EZzFOakkwTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVHlwZVNjcmlwdERlbW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ4YTc2N2NmMjNkN2ViMDQ4ZDA0NDdmYjk3MTczYjczODc0ZWMwZGUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVNREU1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXIxLXNuaXBwZXRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY2ZDYyMzY0NTM0ZGRiNmZjZDNkZmVhOWQxOTQ0ZGQ1MGRmMmY0ZDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVPRGd6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXItc25pcHBldHMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMDk4OTk1N2ZmOWFlOWUxZjYyOTA0NDI0YWU3YmQ3MGM4MmY3ZTQwMyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qTXhPVFk0TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUmVhZGluZ0J1ZGRpZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjljMGQwMzQ2OTYyMTBiNjJjMzM3NDM2OWM2ODFmMDIzOTY5NGJlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9UTXdPRGM1Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci0yLWZpcnN0LWxvb2stbGF1bmNoZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTYzNzVhY2U4N2UwN2M5ZWFlNTBkMjNkMzFhMWZlZDI1MDVmZDk0ZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9Ua3dNelEzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c3RvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNzM5MjcxMTExNDU1Mzc0ZmY3ZGUxYjI1NzgxMmQ5Njk1Mjk0MTc2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EUTFOalk1T0RjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogInhhbWFyaW4tMTAxIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRkMDVkYTIyYjg3NmFhYjVkMzYwZGY1ZWI2YjgxZmUxMzhlODkxYjgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHhhbWFyaW4tMTAxXG5cbkRlbW9zIGZvciBYYW1hcmluIDEwMSBzZXJpZXNcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlYmIzMDhiZi03MmYwLTQ3NDMtYjZjZi0xZTIwZTU0ZjRiNjIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU1ESXlNRFE1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWV4YW1wbGVzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5ZjRiZjJmYzQ1NDgzODI0OGY4OWU4ODY0MmE3MjA3NTRjMTVjYTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5EWTNOekkyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmcyLWtlc3RyZWwtYXBwc2VydmVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU0OTM4NDE4NzA0NTk3YjA2MGFlNjI2OTdlNTk1YzI0YTk2NjliMWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9EQTNNVEF4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhcjItZm9yY2UiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTRkM2U4N2M4ZWZhOWUxNjcyYWY3NmQ3MDM2NTBkZmI0ODgxMzNiYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EUXpNalUwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLXBsYXkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjU1MDY4NWQ2MWQ3Y2VjZDY5MjRkYTA5ZTE0ZTM3ZjI1ODgyNWNhZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5UazFOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3RhcndhcnMtaW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI3ZWJjZjEwMDdmZTZjOTJmNzRmNGI3N2VmYmZmMjhkMGJiMGQzMzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qY3lNall6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhcldvcmtzaG9wTGFicyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0M2ZlYTVjMDM4NWU4NjQwZjliMWE1ZTE0ZjU1NGQzOTNmY2NhZjgxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01EWTFOakExTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWhvc3RlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1Yzc5MzZhY2MzOWI1MGFiMTFjNGY2YmE5ZjcyYjQ1ZDIwOWE2NTE0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UUTFOall3Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY29kZS13aXRoLXVzLWFuZ3VsYXItcXVpY2tzdGFydCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxMWUwOWQ2MDVkY2Y0ZTU5OGFmNTg0ZTc3NGFkOWRjNDc0NGU2MDVmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UazVNVGt4TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLWZhdm9yaXRlLW1vdmllcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzNjJlYzEyNTM2YmRhMWMyZGY4ZjU5NWY0MWRjYThlMGY1OGVjNDhhIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09EUTBOamcwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXp1cmUtZG9jcy1zZGstbm9kZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjEwNjViMjk2MDgwMDkzNWMwN2I1NzMwMzg0ZWFkY2I1MDdmODU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWF6dXJlLWZ1bmN0aW9ucy10b29scyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56QXdORE00TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NmJmOWE1OTkwYTI4NGYzOWZhOTI3NTA4YjZjYWZhMzQ3MGY3YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56Z3pNRGc0Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiU3RpY2tlckFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmZWMzYTZhYjk5MmFiOGFjMTI4N2JlMTMyMTY4MDY0MGMyNWMxMTQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3Rhci13YXJzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1qRXlNRFF6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXItZXNzZW50aWFscyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZjUzNTRlNGYyZGU1YzJhMzI0Zjc0MDhmMDBkNmM5MTlhYmIwMmUzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16QXdOelUwTnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicHdhLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjZiMjIyYzUxYWFhOGFmNjQ1YWJiYTFkOTg0NmQ4ZmVmZjdmNTg2MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UUTFNemsyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWdncmVnYXRvci1hcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzAxOTI1OGVlMmIxZWRhZmY4YjNhOWRlNzgzMmE1OGU4MDcxNmIyNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTNOakUwTWpNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZG9ja2VyLWFuZ3VsYXItY2xpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhNTU2Y2UyY2I4MmY0MTY2NWVhNzg3ZGJkYTc2OGIxYjIyY2QwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTNOVEE0TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2RhLWxvY2FsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZjkzMDEzMzU2MjM4MTcwYjJlY2I5MTE3OTBhZGViMTM1ZjFmMGU2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazNOak16TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNvc21vc2RiIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM2ZTI2OWRhMDYwYjNiNWI1MzdjZWM1MDkwYWFjMGVlZWJlZmNkZTIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USXhNVFF4TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1uZ3J4LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FlOTVlMzc3NjliNzZlOTE2NzlhMmM5Nzk2MTY3MDNmY2NlODBlOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTFNelEyTURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c2UtYm90IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA4NTk1MzQ3YmVjZjJkYWYxNzU4NjBjY2I3NjFkOTFmMjNlOTNlMGYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTNOemMyT0RFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXdlc29tZS1hbmd1bGFyLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg1NGExNDZhYzBjODMxMWE3NmNiNGI0ZmQ5ZGJkOGQxN2MzNjYyMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTBORFF4TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWR2YW5jZWQtZGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOGI5MDZmM2EwYWFhNTU5M2ViMTY0YjQ3ZjRhNjYxNDdhODNmOTY5NiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTBPVE0xTmpnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidmlraW5ncyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNTZiYjE3Mjc1NzRhYTNiMzhiMWRjNzg3ZDg5MmY0YTYwYWQwZWU4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTJOVFk1TVRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kYXRhLWxhYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MTk3NGQ1MjRhOGI3NWU1YTEyZWRiOTkxMzZjMzI1ZWVjNjIyNzg5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTRNRE0yTmpJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidGhyZWUtdnVlLXBhdHRlcm4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiY2YwMDU5NWQ2ZmMzOTAxYzgxZDE0MmUyMDQ3NDU5OWI4MTE4NzBlZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlOek13T0RBPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWV4dGVuc2lvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlYzU0MjkzYzIxMTE5OGNkMGIxYzE1MzcyNzY0MmQ3Njk1NTc4NjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlPRGMyTnpRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk1Y2Y2NTEwOTYwNDM5MGUzMDg5MzcwZDJhZDgwYzUxOTFmNDU4ZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNOall6T1RNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWludHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMyN2UyM2QzN2E2OTliNzM4MmM3NzA5Y2RhNWE4ZGY3NGExNzdjYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qY3lNamczTlRZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiTm9kZUpTV29ya3Nob3AiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODNmYmY2MzAyMmVmYjM0ODZiZTAxMDhjMDcxZDhhYjFmMjAzOTExNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpNakF6TURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1hcmNoaXRlY3R1cmUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTYzYzNlNDY0NTdlMTQxZGRhNGUwZTVmZmNkNTBiZGYxODY5ZGI4YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TTFOalkzTURjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXJ0aWNsZS1leHBsb3JlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhOGQ1OTdkMWJiOTdiMDYyY2Q0NTk1MGMzZmQyYmFkNmZjN2Q5MjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ETTNPRGswTkRjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS1oZWxsbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NDRhZjQwNzkxOGQ0YjI1YzljN2RjMzg3NGFiY2E4M2JmMTdiODMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGd5T0RJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLXJlYWN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY1NmRhYTFmOTgwZTA4MTYwY2E5ZGY4MzI3OWM4MTY1YmRjNDllNDIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGcwTURrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLW5vZGUtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NDNmYTEwYjcxZjBlNGM1NTMwNmIzNDRkOTA4NTU1ZWE4M2NiYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNzdjNWUwNy1iOTY5LTQyZmItYTk1NS0zNDM1YzQxOGM5ZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UVTRNVE0yTVRVPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODkxOWY0ZGI2MzI3MmEyNzI0YmM2YTNjNzUyMTNmNDY1OWQ2ZWQ5OSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UWXhNemMxTWpVPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLXZ1ZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwOTRkOTEwNmYxMWRhYWFkYWNlNWMzZmI3NmY2MDcwMDA0OGZlNGNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzc3YzVlMDctYjk2OS00MmZiLWE5NTUtMzQzNWM0MThjOWUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQTVOVFV3TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWY0NjE1ZDNmNTlmNTI0ZjE5ZmY0OTU4ZTcxMjIwZGM2YWFmNGI3YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM3N2M1ZTA3LWI5NjktNDJmYi1hOTU1LTM0MzVjNDE4YzllMCIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQXlNREUzTXpnPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJub2RlYmluYXIiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImYwNjcxMDIwOGM3YTViYTY5N2ZmZjNmYWYwNjBmOTdiZTNlOGJlODkiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIG5vZGViaW5hciAgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby5ub2RlYmluYXIpXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19idWlsZC9sYXRlc3Q/ZGVmaW5pdGlvbklkPTEwJldULm1jX2lkPW5vZGViaW5hci1naXRodWItc2ljb3RpbikgXG5cbklmIHlvdSB3YW50IHRvIGxlYXJuIG1vcmUgYWJvdXQgZ2V0dGluZyBzdGFydGVkIHdpdGggc2VydmVybGVzcyB1c2luZyBWUyBDb2RlIGFuZCB3YXRjaCBhIGRlbW8gb2YgQXp1cmUgQVBJIE1hbmFnZW1lbnQgeW91IGNhbiByZWdpc3RlciBbaGVyZV0oaHR0cHM6Ly9pbmZvLm1pY3Jvc29mdC5jb20vZGVtYW5kLWJ1aWxkLXNlcnZlcmxlc3MtYXBpLXdpdGgtbm9kZWpzLmh0bWw/V1QubWNfaWQ9bm9kZWJpbmFyLWdpdGh1Yi1zaWNvdGluKSBhbmQgeW91J2xsIGdldCBhIHJlY29yZGVkIHZlcnNpb24gb2YgdGhlIHdlYmluYXIuICBcblxuIyMgRGVwbG95IHJlc291cmNlc1xuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHBzOi8vYXp1cmVkZXBsb3kubmV0L2RlcGxveWJ1dHRvbi5wbmcpXShodHRwczovL3BvcnRhbC5henVyZS5jb20vP1dULm1jX2lkPW5vZGViaW5hci1naXRodWItc2ljb3RpbiNjcmVhdGUvTWljcm9zb2Z0LlRlbXBsYXRlL3VyaS9odHRwcyUzQSUyRiUyRnJhdy5naXRodWJ1c2VyY29udGVudC5jb20lMkZzaW1vbmFjbyUyRm5vZGViaW5hciUyRm1hc3RlciUyRmF6dXJlZGVwbG95Lmpzb24pXG5cbiMjIFByZXJlcXVpc2l0ZXNcblxuMS4gQSByZWNlbnQgdmVyc2lvbiBvZiBOb2RlICg4KylcblxuMS4gVlMgQ29kZTogW2hlcmVdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2Rvd25sb2FkLz9XVC5tY19pZD13ZWJpbmFyLWdpdGh1Yi1zaWNvdGluKSAgXG5cbjEuIEF6dXJlIEZ1bmN0aW9ucyBDTEk6IFtoZXJlXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9henVyZS1mdW5jdGlvbnMvZnVuY3Rpb25zLXJ1bi1sb2NhbD9XVC5tY19pZD13ZWJpbmFyLWdpdGh1Yi1zaWNvdGluKSAgXG5cbjEuIEF6dXJlIEZ1bmN0aW9ucyBFeHRlbnNpb24gZm9yIFZTIENvZGU6IFtoZXJlXShodHRwczovL21hcmtldHBsYWNlLnZpc3VhbHN0dWRpby5jb20vaXRlbXMvP1dULm1jX2lkPXdlYmluYXItZ2l0aHViLXNpY290aW4maXRlbU5hbWU9bXMtYXp1cmV0b29scy52c2NvZGUtYXp1cmVmdW5jdGlvbnMpICBcblxuMS4gQXp1cmUgYWNjb3VudDogW2h0dHBzOi8vYWthLm1zL2ZyZWVdKGh0dHBzOi8vYWthLm1zL2ZyZWUpXG5cbiMjIFJ1biBsb2NhbGx5XG5cbjEuIEluc3RhbGwgYWxsIGRlcGVuZGVuY2llcyBieSBydW5uaW5nIGBucG0gaWBcblxuMS4gSW4gW1ZTIENvZGVdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2Rvd25sb2FkLz9XVC5tY19pZD13ZWJpbmFyLWdpdGh1Yi1zaWNvdGluKSwgZ28gdG8gdGhlIFtBenVyZSBGdW5jdGlvbnNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcy8/V1QubWNfaWQ9d2ViaW5hci1naXRodWItc2ljb3RpbiZpdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgZXh0ZW5zaW9uIGFuZCBjbGljayBvbiBgQ3JlYXRlIE5ldyBQcm9qZWN0Li4uYCBpY29uLiBUaGlzIHdpbGwgY3JlYXRlIGEgbG9jYWwuc2V0dGluZ3MuanNvbiBmaWxlIGZvciB1cyBhbmQgY29uZmlndXJlIGxvY2FsIGRlYnVnZ2luZy4gIFxuXG4xLiBJbiBgbG9jYWwuc2V0dGluZ3MuanNvbmAsIHNldHVwIHlvdXIgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBjb25uZWN0aW5nIHRvIHlvdXIgZGF0YWJhc2U6IFxuXG5gYGBqc29uXG57XG4gIFwiSXNFbmNyeXB0ZWRcIjogZmFsc2UsXG4gIFwiVmFsdWVzXCI6IHtcbiAgICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIjogXCJcIixcbiAgICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiOiBcIm5vZGVcIixcbiAgICBcInVzZXJcIjogXCJ5b3VyLWRiLXVzZXJcIixcbiAgICBcInBhc3N3b3JkXCI6IFwieW91ci1kYi1wYXNzd29yZFwiLFxuICAgIFwicG9ydFwiOiBcInlvdXItZGItcG9ydFwiXG4gIH1cbn1cbmBgYFxuXG4xLiBJbiBWUyBDb2RlLCBnbyB0byB0aGUgRGVidWdnaW5nIHBhbmVsIGFuZCBydW4gYXBwbGljYXRpb24gYnkgY2xpa2luZyBvbiB0aGUgYFN0YXJ0IGRlYnVnZ2luZ2AgaWNvbiAoc21hbGwgcGxheSBidXR0b24gb24gdGhlIGxlZnQgaGFuZCBzaWRlIG9mIHRoZSB0b3AgYmFyKVxuXG4tLS1cblxuPHNwYW4gY2xhc3M9XCJlbW9qaS1vdXRlciBlbW9qaS1zaXplclwiPjxzcGFuIGNsYXNzPVwiZW1vamktaW5uZXJcIiBzdHlsZT1cImJhY2tncm91bmQ6IHVybChjaHJvbWUtZXh0ZW5zaW9uOi8vaW1taHBuY2xvbWRsb2lra3BjZWZuY21mZ2pia29qbWgvZW1vamktZGF0YS9zaGVldF9hcHBsZV8zMi5wbmcpO2JhY2tncm91bmQtcG9zaXRpb246MTYuMDM5OTUyOTk2NDc0NzM1JSA3MS45NzQxNDgwNjExMDQ1OSU7YmFja2dyb3VuZC1zaXplOjU0MTguNzUlIDU0MTguNzUlXCIgZGF0YS1jb2RlcG9pbnRzPVwiMWYzODlcIj48L3NwYW4+PC9zcGFuPiBDb25ncmF0cyEhIFlvdSBtYWRlIGl0IC0gYnVpbHQgeW91ciB2ZXJ5IGZpcnN0IGVuZHBvaW50IG9uIFNlcnZlcmxlc3MhIDxzcGFuIGNsYXNzPVwiZW1vamktb3V0ZXIgZW1vamktc2l6ZXJcIj48c3BhbiBjbGFzcz1cImVtb2ppLWlubmVyXCIgc3R5bGU9XCJiYWNrZ3JvdW5kOiB1cmwoY2hyb21lLWV4dGVuc2lvbjovL2ltbWhwbmNsb21kbG9pa2twY2VmbmNtZmdqYmtvam1oL2Vtb2ppLWRhdGEvc2hlZXRfYXBwbGVfMzIucG5nKTtiYWNrZ3JvdW5kLXBvc2l0aW9uOjE2LjAzOTk1Mjk5NjQ3NDczNSUgNzEuOTc0MTQ4MDYxMTA0NTklO2JhY2tncm91bmQtc2l6ZTo1NDE4Ljc1JSA1NDE4Ljc1JVwiIGRhdGEtY29kZXBvaW50cz1cIjFmMzg5XCI+PC9zcGFuPjwvc3Bhbj5cblxuLS0tXG5Cb251czogSWYgaW50ZXJlc3RlZCB0byBsZWFybiBtb3JlIGFib3V0IHNlcnZlcmxlc3MgbWFrZSBzdXJlIHRvIGNoZWNrb3V0IHRoZSBmcmVlIHNlbGYgZ3VpZGVkIGNvdXJzZXMgb24gW01pY3Jvc29mdCBMZWFybiBTZXJ2ZXJsZXNzIFBhdGhdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2xlYXJuL2Jyb3dzZS8/cm9sZXM9ZGV2ZWxvcGVyJnByb2R1Y3RzPWF6dXJlLWZ1bmN0aW9ucyZXVC5tY19pZD13ZWJpbmFyLWdpdGh1Yi1zaWNvdGluKVxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjA3M2E3NzAwLTgzNzItNGRmMi1hMDcxLTBiM2I4NjYxMGY4YyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EY3lNRFF3T0RFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNhbmNlbFRleHRUb1NwZWVjaFNhbXBsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkMTZiOTY0NGUyZWIyMDNiOTdiYmE1Y2Q5MzFjNjgwOTc3MmU3M2Q0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBDYW5jZWxUZXh0VG9TcGVlY2hTYW1wbGVcblxuQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCBkZW1vbnN0cmF0aW5nIGhvdyB0byB1c2UgYSBgQ2FuY2VsbGF0aW9uVG9rZW5gIHRvIGNhbmNlbCBgWGFtYXJpbi5Fc3NlbnRpYWxzLlRleHRUb1NwZWVjaC5TcGVha0FzeW5jYFxuXG5BIHZpZGVvIG9mIHRoZSBzYW1wbGUgaXMgYXZhaWxhYmxlIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svQ2FuY2VsVGV4dFRvU3BlZWNoU2FtcGxlL2Jsb2IvbWFzdGVyL0NhbmNlbFRleHRUb1NwZWVjaFNhbXBsZS5tb3ZcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlOWMwNDc4NS0yODQxLTRjOTItYTgwMS1jNzY3ODlmZWViNDEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56TTNNVGN4TVRZPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidHdlZXR2ZXJzZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwNWViN2IyNzMzMTg4MmY5YzY1NjM0OWY1ODM1ZWY5MmQ2ZWIwMjAwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBUd2VldHZlcnNlIHwgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby50d2VldHZlcnNlP2JyYW5jaE5hbWU9bWFzdGVyKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3NpY290aW4vc2ljb3Rpbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0yMCZicmFuY2hOYW1lPW1hc3RlcilcblxuIyMgRGVwbG95IHJlc291cmNlc1xuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHBzOi8vYXp1cmVkZXBsb3kubmV0L2RlcGxveWJ1dHRvbi5wbmcpXShodHRwczovL3BvcnRhbC5henVyZS5jb20vI2NyZWF0ZS9NaWNyb3NvZnQuVGVtcGxhdGUvdXJpL2h0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRnNpbW9uYWNvJTJGdHdlZXR2ZXJzZSUyRm1hc3RlciUyRmF6dXJlZGVwbG95Lmpzb24pXG5cbiMjIFByZXJlcXVpc2l0ZXNcblxuMS4gQSByZWNlbnQgdmVyc2lvbiBvZiBOb2RlICg4KylcblxuMS4gVlMgQ29kZTogW2hlcmVdKGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2Rvd25sb2FkLz9XVC5tY19pZD10d2VldHZlcnNlLWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBBenVyZSBGdW5jdGlvbnMgQ0xJOiBbaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2Z1bmN0aW9ucy1ydW4tbG9jYWw/V1QubWNfaWQ9dHdlZXR2ZXJzZS1naXRodWItc2ljb3RpbikgIFxuXG4xLiBBenVyZSBGdW5jdGlvbnMgRXh0ZW5zaW9uIGZvciBWUyBDb2RlOiBbaGVyZV0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zLz9XVC5tY19pZD10d2VldHZlcnNlLWdpdGh1Yi1zaWNvdGluJml0ZW1OYW1lPW1zLWF6dXJldG9vbHMudnNjb2RlLWF6dXJlZnVuY3Rpb25zKSAgXG5cbjEuIEF6dXJlIGFjY291bnQ6IFtoZXJlXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZW4tdXMvZnJlZS8/d3QubWNfaWQ9dHdlZXR2ZXJzZS1naXRodWItc2ljb3RpbilcblxuIyMgSG93IHRvIHJ1biB0aGlzXG5cbjEuIENsb25lIHRoaXMgcmVwb3NpdG9yeSBhbmQgY2QgaW50byAqdHdlZXR2ZXJzZSpcblxuMS4gQ3JlYXRlICpsb2NhbC5zZXR0aW5ncy5qc29uKiBmaWxlIGFuZCBhZGQ6XG5cbmBgYGpzb25cbntcbiAgXCJJc0VuY3J5cHRlZFwiOiBmYWxzZSxcbiAgXCJWYWx1ZXNcIjoge1xuICAgIFwiQXp1cmVXZWJKb2JzU3RvcmFnZVwiOiBcIlwiLFxuICAgIFwiRlVOQ1RJT05TX1dPUktFUl9SVU5USU1FXCI6IFwibm9kZVwiLFxuICAgIFwiQkVBUkVSX1RPS0VOXCI6XCJZT1VSLVRXSVRURVItVE9LRU4tSEVSRVwiLFxuICAgIFwiVEVYVF9BTkFMWVRJQ1NfQVBJX0tFWVwiOlwiWU9VUi1BUElfS0VZLUhFUkVcIixcbiAgICBcIlNMQUNLX0FQSV9VUkxcIjpcIllPVVItVVJMLUhFUkVcIixcbiAgfVxufVxuYGBgXG5cbjEuIFJ1biBgYGBucG0gaWBgYCBhbmQgYGBgbnBtIHN0YXJ0YGBgXG5cblxu8J+Zi/Cfj7wgSGFwcHkgY29kaW5nISDwn5mL8J+PvCIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlZjcwNGIxMS03YWNlLTQ2MTAtOTlhNy1mMGNlMzAwZjI0NjciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTROekkyT1RVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibGlua3ktbGluayIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwYTY4YWE1YTRmZGE5MzMzZWJhMjAzNTQ4M2NmZTY0NGIyMDEwNDAxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyMgVGhlIFVSTGlzdCBQcm9qZWN0XG5cbiMjIyBPdmVydmlld1xuVGhpcyBpcyBhIHJlZmVyZW5jZSBhcHBsaWNhdGlvbiBjb21wb3NlZCBvZiBhIFNQQSBmcm9udGVuZCBhbmQgU2VydmVybGVzcyBiYWNrZW5kIHdpdGggdGhlIGdvYWwgb2YgZXhwbG9yaW5nIGhvdyB0byBjcmVhdGUgYSBncmVlbmZpZWxkLCBjbG91ZCBmaXJzdCBhcHBsb2NhdGlvbi4gV2hlbiBkZXBsb3llZCwgaXQgd2lsbCBhbGxvdyB5b3UgdG8gc2F2ZSBncm91cHMgb2YgbGlua3MgYW5kIHNoYXJlIHRoZW0gd2l0aCB0aGUgd29ybGQhXG5cbiMjIyBSdW5uaW5nIExvY2FsbHlcblRPRE8hXG5cbiMjIyBEZXBsb3lpbmcgdG8gQXp1cmVcblRPRE8hXG5cbiMjIyBCdWlsdCB3aXRoXG4qKkZyb250ZW5kKipcbiogVnVlLmpzXG4qIFR5cGVTY3JpcHRcblxuKipCYWNrZW5kKipcbiogQXp1cmUgRnVuY3Rpb25zXG4qIEF6dXJlIENvc21vcyBEQlxuKiBBcHBsaWNhdGlvbiBJbnNpZ2h0c1xuKiBBcHAgU2VydmljZSBBdXRoZW50aWNhdGlvblxuKiAuTkVUIENvcmUgLyBDI1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQ2YzE3YjA2LTg0MWQtNGE4MS1iYWIwLTM0Y2ZlZDJmYWM1NSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56WTNNelV4TXpNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwYjZhZDQ3YmU1ZmQ0ODAzMzExYWUyMjEwZWY0NmQ2OGE3NjAxZGQ5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiWyFbXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL01hZGUlMjBXaXRoLUdpdGh1YiUyMFNwcmF5LWxpZ2h0Z3JleS5zdmc/c3R5bGU9Zm9yLXRoZS1iYWRnZSZsb2dvPWdpdGh1YildKGh0dHBzOi8vZ2l0aHViLmNvbS9Bbm5paGlsL2dpdGh1Yi1zcHJheSMxNTE5KSAgXG5bIVtdKGh0dHBzOi8vaS5pbWd1ci5jb20vMkRyVG4wWi5naWYpXShodHRwczovL2dpdGh1Yi5jb20vQW5uaWhpbC9naXRodWItc3ByYXkpIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjVlNWFhMWRjLTRlMTAtNDZjMS04NTc1LTFlMGQwZTI5MzRjYyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56azRNekE0TXpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVkZGl0aWZpZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODcyNWU0MmRhNmVjZDM3Y2QwNzUyYTQ2OGZlODJlNmUyYjEzM2Q1YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgUmVkZGl0aWZpZXIgfCBbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2FwaXMvYnVpbGQvc3RhdHVzL3NpbW9uYWNvLnJlZGRpdGlmaWVyP2JyYW5jaE5hbWU9bWFzdGVyKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3NpY290aW4vc2ljb3Rpbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0yNiZicmFuY2hOYW1lPW1hc3RlcilcblxuIyMgRGVwbG95IHJlc291cmNlc1xuXG5bIVtEZXBsb3kgdG8gQXp1cmVdKGh0dHBzOi8vYXp1cmVkZXBsb3kubmV0L2RlcGxveWJ1dHRvbi5wbmcpXShodHRwczovL3BvcnRhbC5henVyZS5jb20vI2NyZWF0ZS9NaWNyb3NvZnQuVGVtcGxhdGUvdXJpL2h0dHBzJTNBJTJGJTJGcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSUyRnNpbW9uYWNvJTJGcmVkZGl0aWZpZXIlMkZtYXN0ZXIlMkZhenVyZWRlcGxveS5qc29uKVxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEEgcmVjZW50IHZlcnNpb24gb2YgTm9kZSAoOCspXG5cbjEuIFZTIENvZGU6IFtoZXJlXShodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb3dubG9hZC8/V1QubWNfaWQ9cmVkZGl0Zmllci1naXRodWItc2ljb3RpbilcblxuMS4gQXp1cmUgRnVuY3Rpb25zIENMSTogW2hlcmVdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtcnVuLWxvY2FsP1dULm1jX2lkPXJlZGRpdGZpZXItZ2l0aHViLXNpY290aW4pICBcblxuMS4gQXp1cmUgRnVuY3Rpb25zIEV4dGVuc2lvbiBmb3IgVlMgQ29kZTogW2hlcmVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcy8/V1QubWNfaWQ9cmVkZGl0Zmllci1naXRodWItc2ljb3RpbiZpdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgIFxuXG4xLiBBenVyZSBhY2NvdW50OiBbaGVyZV0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2VuLXVzL2ZyZWUvP3d0Lm1jX2lkPXJlZGRpdGZpZXItZ2l0aHViLXNpY290aW4pXG5cbiMjIEhvdyB0byBydW4gdGhpc1xuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnkgYW5kIGNkIGludG8gKnNlcnZlcmxlc3MqXG5cbjEuIENyZWF0ZSAqbG9jYWwuc2V0dGluZ3MuanNvbiogZmlsZSBhbmQgYWRkOlxuXG5gYGBqc29uXG57XG4gIFwiSXNFbmNyeXB0ZWRcIjogZmFsc2UsXG4gIFwiVmFsdWVzXCI6IHtcbiAgICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIjogXCJcIixcbiAgICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiOiBcIm5vZGVcIixcbiAgICBcIlJFRERJVF9LRVlcIjogXCJZT1VSLVRPS0VOLUhFUkVcIixcbiAgfVxufVxuYGBgXG5cbj4gUmV0cmlldmUgeW91ciBSZWRkaXQgYWNjZXNzIHRva2VuIGJ5IGZvbGxvd2luZyBzdGVwcyBpbiB0aGUgKkdldCBSZWRkaXQgQXV0aG9yaXNhdGlvbiB0b2tlbiogc2VjdGlvbi5cblxuMS4gUnVuIGBgYG5wbSBpYGBgIGFuZCBgYGBucG0gc3RhcnRgYGBcblxuMS4gVG8gdGVzdCB5b3VyIGZ1bmN0aW9uLCBtYWtlIGEgUE9TVCByZXF1ZXN0IHRvIHlvdXIgZnVuY3Rpb24ncyBVUkwgW2h0dHA6Ly9sb2NhbGhvc3Q6NzA3MS9hcGkvc3VibWl0LWxpbmtdKGh0dHA6Ly9sb2NhbGhvc3Q6NzA3MS9hcGkvc3VibWl0LWxpbmspIHdpdGggYSBib2R5IHRoYXQgbG9va3MgbGlrZSB0aGlzOlxuXG5gYGBqc29uXG57XG4gICAgXCJ0aXRsZVwiOlwiVXNlIHRoaXMgKmNoZWNrbGlzdCogdG8gcmV2aWV3IHlvdXIgYXBwbGljYXRpb24gYXJjaGl0ZWN0dXJlIGZyb20gYSAqcmVzaWxpZW5jeSogc3RhbmRwb2ludDsgQXBwbGljYXRpb24gRGVzaWduLCBEYXRhIE1hbmFnZW1lbnQsIFNlY3VyaXR5LCBUZXN0aW5nICYgRGVwbG95bWVudFwiLFxuICAgIFwidXJsXCI6XCJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9hcmNoaXRlY3R1cmUvY2hlY2tsaXN0L3Jlc2lsaWVuY3lcIixcbiAgICBcInNyXCI6XCIvci9BWlVSRS9cIlxufVxuYGBgXG5cbiMjIEdldCBSZWRkaXQgQXV0aG9yaXNhdGlvbiB0b2tlblxuXG5CZWZvcmUgcmVxdWVzdGluZyBhbiBhdXRob3JpemF0aW9uIHRva2VkIHlvdSBuZWVkIHRvIGNyZWF0ZSBhbiBhcHBsaWNhdGlvbi4gSWYgeW91IGhhdmVuJ3QgZG9uZSB0aGF0IGFscmVhZHksIG1ha2Ugc3VyZSB0byBmb2xsb3cgc3RlcHMgaW4gdGhpcyBbcXVpY2sgc3RhcnQgZXhhbXBsZV0oaHR0cHM6Ly9naXRodWIuY29tL3JlZGRpdC1hcmNoaXZlL3JlZGRpdC93aWtpL09BdXRoMi1RdWljay1TdGFydC1FeGFtcGxlKS5cblxuTWFrZSByZXF1ZXN0IHRvIFtodHRwczovL3d3dy5yZWRkaXQuY29tL2FwaS92MS9hY2Nlc3NfdG9rZW5dKGh0dHBzOi8vd3d3LnJlZGRpdC5jb20vYXBpL3YxL2FjY2Vzc190b2tlbilcblxuQXV0aG9yaXphdGlvbjogQmFzaWMgQXV0aFxuVXNlcm5hbWU6IDx5b3VyX2FwcF9pZD5cblBhc3N3b3JkOiA8eW91cl9hcHBfc2VjcmV0PlxuXG5Gb3JtIERhdGE6XG5ncmFudF90eXBlOiBwYXNzd29yZFxudXNlcm5hbWU6IDx5b3VyX3JlZGRpdF91c2VybmFtZT5cbnBhc3N3b3JkOiA8eW91cl9yZWRkaXRfcGFzc3dvcmQ+XG5cbklmIGFsbCBnb2VzIHdlbGwsIHlvdSBzaG91bGQgZ2V0IGEgcmVzcG9uc2UgdGhhdCBsb29rcyBzaW1pbGFyIHRvIHRoaXM6XG5cbmBgYGpzb25cbntcbiAgICBcImFjY2Vzc190b2tlblwiOiBcIjEyMjQ1Njg0ODYtUkN3emRLTVA0emRTdDZBU2V0WnBZYTgwcXI0XCIsXG4gICAgXCJ0b2tlbl90eXBlXCI6IFwiYmVhcmVyXCIsXG4gICAgXCJleHBpcmVzX2luXCI6IDM2MDAsXG4gICAgXCJzY29wZVwiOiBcIipcIlxufVxuYGBgXG5cbvCfmYvwn4+8IEhhcHB5IGNvZGluZyEg8J+Zi/Cfj7xcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxODI1YTkwMC1iMDZjLTQwZTktYTgyYi1jMzY0YTU5YjQwZTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1URTBNREU1TkRVPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlPUzEzU2ltdWxhdG9yRW50cnlSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNzZlYWQyNzE5OTQxNWVhMGJjZGY0MGM2YjM0MmY2NmIxNGYwNGY2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBpT1MgMTMgU2ltdWxhdG9yIEVudHJ5IFJlcHJvXG5cblJlcHJvIHNhbXBsZSBkZW1vbnN0cmF0aW5nIGEgY3Jhc2ggd2hlbiBhbiBFZGl0b3Igb3IgRW50cnkgaXMgdGFwcGVkIG9uIGFuIGlQaG9uZSAxMSBTaW11bGF0b3IgcnVubmluZyBpT1MgMTMuMC5cblxuTm90ZTogVGhpcyBzYW1wbGUgcnVucyBmaW5lIG9uIGEgcGh5c2ljYWwgZGV2aWNlIHJ1bm5pbmcgaU9TIDEzLlxuXG4jIyBTdGFja3RyYWNjZVxuXG5gYGBcblN5c3RlbS5OdWxsUmVmZXJlbmNlRXhjZXB0aW9uOiBPYmplY3QgcmVmZXJlbmNlIG5vdCBzZXQgdG8gYW4gaW5zdGFuY2Ugb2YgYW4gb2JqZWN0XG4gIGF0IFhhbWFyaW4uRm9ybXMuUGxhdGZvcm0uaU9TLlBhZ2VSZW5kZXJlci5HZXRBY2Nlc3NpYmlsaXR5RWxlbWVudHMgKCkgWzB4MDAwOWNdIGluIGQ6XFxhXFwxXFxzXFxYYW1hcmluLkZvcm1zLlBsYXRmb3JtLmlPU1xcUmVuZGVyZXJzXFxQYWdlUmVuZGVyZXIuY3M6NzFcbiAgYXQgWGFtYXJpbi5Gb3Jtcy5QbGF0Zm9ybS5pT1MuUGFnZUNvbnRhaW5lci5nZXRfQWNjZXNzaWJpbGl0eUVsZW1lbnRzICgpIFsweDAwMDA4XSBpbiBkOlxcYVxcMVxcc1xcWGFtYXJpbi5Gb3Jtcy5QbGF0Zm9ybS5pT1NcXFJlbmRlcmVyc1xcUGFnZUNvbnRhaW5lci5jczozM1xuICBhdCBYYW1hcmluLkZvcm1zLlBsYXRmb3JtLmlPUy5QYWdlQ29udGFpbmVyLkFjY2Vzc2liaWxpdHlFbGVtZW50Q291bnQgKCkgWzB4MDAwMDBdIGluIGQ6XFxhXFwxXFxzXFxYYW1hcmluLkZvcm1zLlBsYXRmb3JtLmlPU1xcUmVuZGVyZXJzXFxQYWdlQ29udGFpbmVyLmNzOjY1XG4gIGF0IGF0ICh3cmFwcGVyIG1hbmFnZWQtdG8tbmF0aXZlKSBVSUtpdC5VSUFwcGxpY2F0aW9uLlVJQXBwbGljYXRpb25NYWluKGludCxzdHJpbmdbXSxpbnRwdHIsaW50cHRyKVxuICBhdCBVSUtpdC5VSUFwcGxpY2F0aW9uLk1haW4gKFN5c3RlbS5TdHJpbmdbXSBhcmdzLCBTeXN0ZW0uSW50UHRyIHByaW5jaXBhbCwgU3lzdGVtLkludFB0ciBkZWxlZ2F0ZSkgWzB4MDAwMDVdIGluIC9MaWJyYXJ5L0ZyYW1ld29ya3MvWGFtYXJpbi5pT1MuZnJhbWV3b3JrL1ZlcnNpb25zLzEzLjIuMC40Mi9zcmMvWGFtYXJpbi5pT1MvVUlLaXQvVUlBcHBsaWNhdGlvbi5jczo4NlxuICBhdCBVSUtpdC5VSUFwcGxpY2F0aW9uLk1haW4gKFN5c3RlbS5TdHJpbmdbXSBhcmdzLCBTeXN0ZW0uU3RyaW5nIHByaW5jaXBhbENsYXNzTmFtZSwgU3lzdGVtLlN0cmluZyBkZWxlZ2F0ZUNsYXNzTmFtZSkgWzB4MDAwMGVdIGluIC9MaWJyYXJ5L0ZyYW1ld29ya3MvWGFtYXJpbi5pT1MuZnJhbWV3b3JrL1ZlcnNpb25zLzEzLjIuMC40Mi9zcmMvWGFtYXJpbi5pT1MvVUlLaXQvVUlBcHBsaWNhdGlvbi5jczo2NVxuICBhdCBpT1MxM1NpbXVsYXRvckVudHJ5UmVwcm8uaU9TLkFwcGxpY2F0aW9uLk1haW4gKFN5c3RlbS5TdHJpbmdbXSBhcmdzKSBbMHgwMDAwMF0gaW4gL1VzZXJzL2JyYW1pbi9Qcm9qZWN0cy9pT1MxM1NpbXVsYXRvckVudHJ5UmVwcm8vaU9TMTNTaW11bGF0b3JFbnRyeVJlcHJvLmlPUy9NYWluLmNzOjdcbmBgYFxuXG4jIyBEZW1vXG5cbiFbRGVtbyBnaWZdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzY1ODAyODU4LWJiYWY4NDgwLWUxMzEtMTFlOS04MjliLTI0MDVjYmE5MmEyYi5naWYpXG5cbiMjIEVudmlyb25tZW50XG5cbj09PSBWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UgMjAxOSBmb3IgTWFjID09PVxuXG5WZXJzaW9uIDguMyAoYnVpbGQgMTgwNSlcbkluc3RhbGxhdGlvbiBVVUlEOiA3NjE3YjdkNC0xZjBhLTQ5MTAtOGEzOC1lMjhmOTFkMTA5OGVcblx0R1RLKyAyLjI0LjIzIChSYWxlaWdoIHRoZW1lKVxuXHRYYW1hcmluLk1hYyA1LjE2LjEuMjQgKGQxNi0zIC8gMDg4MDlmNWIpXG5cblx0UGFja2FnZSB2ZXJzaW9uOiA2MDQwMDAxOThcblxuPT09IE1vbm8gRnJhbWV3b3JrIE1ESyA9PT1cblxuUnVudGltZTpcblx0TW9ubyA2LjQuMC4xOTggKDIwMTktMDYvZmU2NGE0NzY1ZTYpICg2NC1iaXQpXG5cdFBhY2thZ2UgdmVyc2lvbjogNjA0MDAwMTk4XG5cbj09PSBYYW1hcmluIERlc2lnbmVyID09PVxuXG5WZXJzaW9uOiAxNi4zLjAuMjMwXG5IYXNoOiBiYmU1MTg2NzBcbkJyYW5jaDogcmVtb3Rlcy9vcmlnaW4vZDE2LTMteGNvZGUxMVxuQnVpbGQgZGF0ZTogMjAxOS0wOS0xNyAxODozOTozMCBVVENcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA1LjMuMC42MTkyXG5cbj09PSAuTkVUIENvcmUgU0RLID09PVxuXG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8zLjAuMTAwL1Nka3NcblNESyBWZXJzaW9uczpcblx0My4wLjEwMFxuXHQzLjAuMTAwLXJjMS0wMTQxOTBcblx0My4wLjEwMC1wcmV2aWV3OS0wMTQwMDRcblx0My4wLjEwMC1wcmV2aWV3OC0wMTM2NTZcblx0My4wLjEwMC1wcmV2aWV3Ny0wMTI4MjFcblx0My4wLjEwMC1wcmV2aWV3Ni0wMTIyNjRcblx0Mi4yLjQwMlxuXHQyLjEuNzAxXG5cdDIuMS43MDBcblx0MS4xLjE0XG5NU0J1aWxkIFNES3M6IC9MaWJyYXJ5L0ZyYW1ld29ya3MvTW9uby5mcmFtZXdvcmsvVmVyc2lvbnMvNi40LjAvbGliL21vbm8vbXNidWlsZC9DdXJyZW50L2Jpbi9TZGtzXG5cbj09PSAuTkVUIENvcmUgUnVudGltZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5SdW50aW1lIFZlcnNpb25zOlxuXHQzLjAuMFxuXHQzLjAuMC1yYzEtMTk0NTYtMjBcblx0My4wLjAtcHJldmlldzktMTk0MjMtMDlcblx0My4wLjAtcHJldmlldzctMjc5MTItMTRcblx0My4wLjAtcHJldmlldzYtMjc4MDQtMDFcblx0Mi4yLjdcblx0Mi4xLjEzXG5cdDIuMS4xMlxuXHQyLjEuMTFcblx0MS4xLjEzXG5cdDEuMC4xNlxuXG49PT0gWGFtYXJpbi5Qcm9maWxlciA9PT1cblxuVmVyc2lvbjogMS42LjExLjE2XG5Mb2NhdGlvbjogL0FwcGxpY2F0aW9ucy9YYW1hcmluIFByb2ZpbGVyLmFwcC9Db250ZW50cy9NYWNPUy9YYW1hcmluIFByb2ZpbGVyXG5cbj09PSBVcGRhdGVyID09PVxuXG5WZXJzaW9uOiAxMVxuXG49PT0gQXBwbGUgRGV2ZWxvcGVyIFRvb2xzID09PVxuXG5YY29kZSAxMS4wICgxNDkzNilcbkJ1aWxkIDExQTQyMGFcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5YYW1hcmluLk1hYyBub3QgaW5zdGFsbGVkLiBDYW4ndCBmaW5kIC9MaWJyYXJ5L0ZyYW1ld29ya3MvWGFtYXJpbi5NYWMuZnJhbWV3b3JrL1ZlcnNpb25zL0N1cnJlbnQvVmVyc2lvbi5cblxuPT09IFhhbWFyaW4uaU9TID09PVxuXG5WZXJzaW9uOiAxMy4yLjAuNDIgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkhhc2g6IDVlOGEyMDhiXG5CcmFuY2g6IGQxNi0zXG5CdWlsZCBkYXRlOiAyMDE5LTA5LTE3IDE0OjE5OjMwLTA0MDBcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogMTAuMC4wLjQzIChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5Db21taXQ6IHhhbWFyaW4tYW5kcm9pZC9kMTYtMy84YWYxY2E4XG5BbmRyb2lkIFNESzogL1VzZXJzL2JyYW1pbi9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHROb25lIGluc3RhbGxlZFxuXG5TREsgVG9vbHMgVmVyc2lvbjogMjYuMS4xXG5TREsgUGxhdGZvcm0gVG9vbHMgVmVyc2lvbjogMjkuMC4zXG5TREsgQnVpbGQgVG9vbHMgVmVyc2lvbjogMjguMC4zXG5cbkJ1aWxkIEluZm9ybWF0aW9uOiBcbk1vbm86IG1vbm8vbW9uby8yMDE5LTA2QDdhZjY0ZDFlYmU5XG5KYXZhLkludGVyb3A6IHhhbWFyaW4vamF2YS5pbnRlcm9wL2QxNi0zQDU4MzZmNThcbkxpYlppcFNoYXJwOiBncmVuZGVsbG8vTGliWmlwU2hhcnAvZDE2LTNANzFmNGE5NFxuTGliWmlwOiBuaWgtYXQvbGliemlwL3JlbC0xLTUtMUBiOTVjZjNmXG5Qcm9HdWFyZDogeGFtYXJpbi9wcm9ndWFyZC9tYXN0ZXJAOTA1ODM2ZFxuU1FMaXRlOiB4YW1hcmluL3NxbGl0ZS8zLjI3LjFAODIxMmEyZFxuWGFtYXJpbi5BbmRyb2lkIFRvb2xzOiB4YW1hcmluL3hhbWFyaW4tYW5kcm9pZC10b29scy9kMTYtM0BjYjQxMzMzXG5cbj09PSBNaWNyb3NvZnQgTW9iaWxlIE9wZW5KREsgPT09XG5cbkphdmEgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vamRrL21pY3Jvc29mdF9kaXN0X29wZW5qZGtfMS44LjAuMjVcbjEuOC4wLTI1XG5BbmRyb2lkIERlc2lnbmVyIEVQTCBjb2RlIGF2YWlsYWJsZSBoZXJlOlxuaHR0cHM6Ly9naXRodWIuY29tL3hhbWFyaW4vQW5kcm9pZERlc2lnbmVyLkVQTFxuXG49PT0gQW5kcm9pZCBTREsgTWFuYWdlciA9PT1cblxuVmVyc2lvbjogMS40LjAuNjVcbkhhc2g6IGMzM2IxMDdcbkJyYW5jaDogcmVtb3Rlcy9vcmlnaW4vZDE2LTNcbkJ1aWxkIGRhdGU6IDIwMTktMDktMTkgMjA6NDI6NDQgVVRDXG5cbj09PSBBbmRyb2lkIERldmljZSBNYW5hZ2VyID09PVxuXG5WZXJzaW9uOiAxLjIuMC4xMTVcbkhhc2g6IDcyNGVhNjlcbkJyYW5jaDogcmVtb3Rlcy9vcmlnaW4vZDE2LTNcbkJ1aWxkIGRhdGU6IDIwMTktMDktMTkgMjA6NDM6MDYgVVRDXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS40LjNcbkhhc2g6IGRiMjc1MjVcbkJyYW5jaDogMS40LXJlbGVhc2VcbkJ1aWxkIGRhdGU6IE1vbiwgMDkgSnVsIDIwMTggMjE6MjA6MTggR01UXG5DbGllbnQgY29tcGF0aWJpbGl0eTogMVxuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDgwMzAwMTgwNVxuR2l0IHJldmlzaW9uOiBkZjUwNTExY2NiMDhkNGQ4NGE1MzkzOWYxZDdmYzBiNDBjYmIwZWUxXG5CdWlsZCBkYXRlOiAyMDE5LTA5LTIwIDE2OjEwOjU1KzAwXG5CdWlsZCBicmFuY2g6IHJlbGVhc2UtOC4zXG5YYW1hcmluIGV4dGVuc2lvbnM6IGRhOGQ0NDhjZDY1ZjJjYzg3YzVlNmRjN2UyYzJjYTdiOTZkMjBjNzJcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjE0LjZcbkRhcndpbiAxOC43LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE4LjcuMFxuICAgIFR1ZSBBdWcgMjAgMTY6NTc6MTQgUERUIDIwMTlcbiAgICByb290OnhudS00OTAzLjI3MS4yfjIvUkVMRUFTRV9YODZfNjQgeDg2XzY0XG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4MWRiOWEyMC00NjcxLTRlNDEtYmExZS03M2Y0ZmJiMjJjOWYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1URXhORFl3TVRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogImlPU0xhcmdlVGl0bGVSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MDk2MTE4MzZkMTAwZTRiNzk0MzYzNjA5YTJjZjIxNDVkODZkY2FkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBpT1NMYXJnZVRpdGxlUmVwcm9cbiBBIHJlcHJvZHVjdGlvbiBkZW1vbnN0cmF0aW5nIHRoZSBpbmNvcnJlY3QgQmFyQmFja2dyb3VuZENvbG9yIHdoZW4gdXNpbmcgYE9uPGlPUz4oKS5TZXRQcmVmZXJzTGFyZ2VUaXRsZXModHJ1ZSlgXG4gXG4gIVtTYW1wbGUgR0lGXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy82NTcxMTIwNi00NDllYzEwMC1lMDQ5LTExZTktOWVhOC03ZWVjZWRmZjdkNjIuZ2lmKVxuIFxuIyMgRW52aXJvbm1lbnQgXG5cblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE5IGZvciBNYWMgPT09XG5cblZlcnNpb24gOC4zIChidWlsZCAxODA1KVxuSW5zdGFsbGF0aW9uIFVVSUQ6IDNhNDRiYjdlLWYxNjItNDQ3Mi04MjVhLWM4ZjhkMWQ2ZmQzMFxuXHRHVEsrIDIuMjQuMjMgKFJhbGVpZ2ggdGhlbWUpXG5cdFhhbWFyaW4uTWFjIDUuMTYuMS4yNCAoZDE2LTMgLyAwODgwOWY1YilcblxuXHRQYWNrYWdlIHZlcnNpb246IDYwNDAwMDE5OFxuXG49PT0gTW9ubyBGcmFtZXdvcmsgTURLID09PVxuXG5SdW50aW1lOlxuXHRNb25vIDYuNC4wLjE5OCAoMjAxOS0wNi9mZTY0YTQ3NjVlNikgKDY0LWJpdClcblx0UGFja2FnZSB2ZXJzaW9uOiA2MDQwMDAxOThcblxuPT09IFhhbWFyaW4gRGVzaWduZXIgPT09XG5cblZlcnNpb246IDE2LjMuMC4yMzBcbkhhc2g6IGJiZTUxODY3MFxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtMy14Y29kZTExXG5CdWlsZCBkYXRlOiAyMDE5LTA5LTE3IDE4OjM5OjMwIFVUQ1xuXG49PT0gTnVHZXQgPT09XG5cblZlcnNpb246IDUuMy4wLjYxOTJcblxuPT09IC5ORVQgQ29yZSBTREsgPT09XG5cblNESzogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvc2RrLzMuMC4xMDAvU2Rrc1xuU0RLIFZlcnNpb25zOlxuXHQzLjAuMTAwXG5cdDMuMC4xMDAtcmMxLTAxNDE5MFxuXHQzLjAuMTAwLXByZXZpZXc5LTAxNDAwNFxuXHQzLjAuMTAwLXByZXZpZXc4LTAxMzY1NlxuXHQzLjAuMTAwLXByZXZpZXc3LTAxMjgyMVxuXHQzLjAuMTAwLXByZXZpZXc2LTAxMjI2NFxuXHQyLjIuNDAyXG5cdDIuMS43MDFcblx0Mi4xLjcwMFxuXHQxLjEuMTRcbk1TQnVpbGQgU0RLczogL0xpYnJhcnkvRnJhbWV3b3Jrcy9Nb25vLmZyYW1ld29yay9WZXJzaW9ucy82LjQuMC9saWIvbW9uby9tc2J1aWxkL0N1cnJlbnQvYmluL1Nka3NcblxuPT09IC5ORVQgQ29yZSBSdW50aW1lID09PVxuXG5SdW50aW1lOiAvdXNyL2xvY2FsL3NoYXJlL2RvdG5ldC9kb3RuZXRcblJ1bnRpbWUgVmVyc2lvbnM6XG5cdDMuMC4wXG5cdDMuMC4wLXJjMS0xOTQ1Ni0yMFxuXHQzLjAuMC1wcmV2aWV3OS0xOTQyMy0wOVxuXHQzLjAuMC1wcmV2aWV3Ny0yNzkxMi0xNFxuXHQzLjAuMC1wcmV2aWV3Ni0yNzgwNC0wMVxuXHQyLjIuN1xuXHQyLjEuMTNcblx0Mi4xLjEyXG5cdDIuMS4xMVxuXHQxLjEuMTNcblx0MS4wLjE2XG5cbj09PSBYYW1hcmluLlByb2ZpbGVyID09PVxuXG5WZXJzaW9uOiAxLjYuMTEuMTZcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IFVwZGF0ZXIgPT09XG5cblZlcnNpb246IDExXG5cbj09PSBBcHBsZSBEZXZlbG9wZXIgVG9vbHMgPT09XG5cblhjb2RlIDExLjAgKDE0OTM2KVxuQnVpbGQgMTFBNDIwYVxuXG49PT0gWGFtYXJpbi5NYWMgPT09XG5cblhhbWFyaW4uTWFjIG5vdCBpbnN0YWxsZWQuIENhbid0IGZpbmQgL0xpYnJhcnkvRnJhbWV3b3Jrcy9YYW1hcmluLk1hYy5mcmFtZXdvcmsvVmVyc2lvbnMvQ3VycmVudC9WZXJzaW9uLlxuXG49PT0gWGFtYXJpbi5pT1MgPT09XG5cblZlcnNpb246IDEzLjIuMC40MiAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogNWU4YTIwOGJcbkJyYW5jaDogZDE2LTNcbkJ1aWxkIGRhdGU6IDIwMTktMDktMTcgMTQ6MTk6MzAtMDQwMFxuXG49PT0gWGFtYXJpbi5BbmRyb2lkID09PVxuXG5WZXJzaW9uOiAxMC4wLjAuNDMgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkNvbW1pdDogeGFtYXJpbi1hbmRyb2lkL2QxNi0zLzhhZjFjYThcbkFuZHJvaWQgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vYW5kcm9pZC1zZGstbWFjb3N4XG5cdFN1cHBvcnRlZCBBbmRyb2lkIHZlcnNpb25zOlxuXHRcdE5vbmUgaW5zdGFsbGVkXG5cblNESyBUb29scyBWZXJzaW9uOiAyNi4xLjFcblNESyBQbGF0Zm9ybSBUb29scyBWZXJzaW9uOiAyOS4wLjNcblNESyBCdWlsZCBUb29scyBWZXJzaW9uOiAyOC4wLjNcblxuQnVpbGQgSW5mb3JtYXRpb246IFxuTW9ubzogbW9uby9tb25vLzIwMTktMDZAN2FmNjRkMWViZTlcbkphdmEuSW50ZXJvcDogeGFtYXJpbi9qYXZhLmludGVyb3AvZDE2LTNANTgzNmY1OFxuTGliWmlwU2hhcnA6IGdyZW5kZWxsby9MaWJaaXBTaGFycC9kMTYtM0A3MWY0YTk0XG5MaWJaaXA6IG5paC1hdC9saWJ6aXAvcmVsLTEtNS0xQGI5NWNmM2ZcblByb0d1YXJkOiB4YW1hcmluL3Byb2d1YXJkL21hc3RlckA5MDU4MzZkXG5TUUxpdGU6IHhhbWFyaW4vc3FsaXRlLzMuMjcuMUA4MjEyYTJkXG5YYW1hcmluLkFuZHJvaWQgVG9vbHM6IHhhbWFyaW4veGFtYXJpbi1hbmRyb2lkLXRvb2xzL2QxNi0zQGNiNDEzMzNcblxuPT09IE1pY3Jvc29mdCBNb2JpbGUgT3BlbkpESyA9PT1cblxuSmF2YSBTREs6IC9Vc2Vycy9icmFtaW4vTGlicmFyeS9EZXZlbG9wZXIvWGFtYXJpbi9qZGsvbWljcm9zb2Z0X2Rpc3Rfb3Blbmpka18xLjguMC4yNVxuMS44LjAtMjVcbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBBbmRyb2lkIFNESyBNYW5hZ2VyID09PVxuXG5WZXJzaW9uOiAxLjQuMC42NVxuSGFzaDogYzMzYjEwN1xuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtM1xuQnVpbGQgZGF0ZTogMjAxOS0wOS0xOSAyMDo0Mjo0NCBVVENcblxuPT09IEFuZHJvaWQgRGV2aWNlIE1hbmFnZXIgPT09XG5cblZlcnNpb246IDEuMi4wLjExNVxuSGFzaDogNzI0ZWE2OVxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtM1xuQnVpbGQgZGF0ZTogMjAxOS0wOS0xOSAyMDo0MzowNiBVVENcblxuPT09IFhhbWFyaW4gSW5zcGVjdG9yID09PVxuXG5WZXJzaW9uOiAxLjQuM1xuSGFzaDogZGIyNzUyNVxuQnJhbmNoOiAxLjQtcmVsZWFzZVxuQnVpbGQgZGF0ZTogTW9uLCAwOSBKdWwgMjAxOCAyMToyMDoxOCBHTVRcbkNsaWVudCBjb21wYXRpYmlsaXR5OiAxXG5cbj09PSBCdWlsZCBJbmZvcm1hdGlvbiA9PT1cblxuUmVsZWFzZSBJRDogODAzMDAxODA1XG5HaXQgcmV2aXNpb246IGRmNTA1MTFjY2IwOGQ0ZDg0YTUzOTM5ZjFkN2ZjMGI0MGNiYjBlZTFcbkJ1aWxkIGRhdGU6IDIwMTktMDktMjAgMTY6MTA6NTUrMDBcbkJ1aWxkIGJyYW5jaDogcmVsZWFzZS04LjNcblhhbWFyaW4gZXh0ZW5zaW9uczogZGE4ZDQ0OGNkNjVmMmNjODdjNWU2ZGM3ZTJjMmNhN2I5NmQyMGM3MlxuXG49PT0gT3BlcmF0aW5nIFN5c3RlbSA9PT1cblxuTWFjIE9TIFggMTAuMTQuNlxuRGFyd2luIDE4LjcuMCBEYXJ3aW4gS2VybmVsIFZlcnNpb24gMTguNy4wXG4gICAgVHVlIEF1ZyAyMCAxNjo1NzoxNCBQRFQgMjAxOVxuICAgIHJvb3Q6eG51LTQ5MDMuMjcxLjJ+Mi9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImI5NDQzYzI4LWI1MzQtNDI2ZC1iOTgwLWJkZTQxNTgwNTViYiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UTTBOVEV6TnpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIk1hc3RlckRldGFpbFRhYmJlZFNlYXJjaEJhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiY2RiMTE0ZDA5ZDJjZTQ5ZWYyNzQ2MzljYmU3Y2MxZmY2MjE3ZTAxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBNYXN0ZXJEZXRhaWxUYWJiZWRTZWFyY2hCYXJcblRoaXMgaXMgYSBzYW1wbGUgYXBwIGRlbW9uc3RyYXRpbmcgaG93IHRvIGFkZCBhIFNlYXJjaEJhciB0byBhIE5hdmlnYXRpb25QYWdlIGluc2lkZSBvZiBhIFRhYmJlZFBhZ2UgaW5zaWRlIG9mIGEgTWFzdGVyRGV0YWlsUGFnZS5cblxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZnJlcmVuY2UgdGhpcyBibG9nIHBvc3QsIFwiQWRkaW5nIGEgU2VhcmNoIEJhciB0byBYYW1hcmluLkZvcm1zLk5hdmlnYXRpb25QYWdlXCI6IGh0dHBzOi8vY29kZXRyYXZlbGVyLmlvLzIwMTkvMTAvMDUvYWRkaW5nLWEtc2VhcmNoLWJhci10by14YW1hcmluLWZvcm1zLW5hdmlnYXRpb25wYWdlL1xuXG5pT1MgfCBBbmRyb2lkXG4tLS0tfC0tLS0tLS1cbiFbaU9TIFNjcmVlbnNob3RdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzY2MzM3MDIwLWVkN2JkNDgwLWU5MDMtMTFlOS05ODkxLWZhN2ViZjBmMTA3My5wbmcpIHwgIVtBbmRyb2lkIFNjcmVlbnNob3RdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzY2MzM2OTAyLWExYzkyYjAwLWU5MDMtMTFlOS04OTFiLWFjY2E1OGI0OTBlMS5wbmcpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjRjZGIyNjAtOTY4Yi00NmFiLWFiZjItNDAzYjk0YzFmNmJiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ETXhOekUzTnpFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ3JhcGhsZXNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjgyOGJlN2RiZDZlOWEwZDZkMGRiNDczZjAxY2JmODNiYTlkMTZjNTkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEdyYXBobGVzc1xuXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2FwaXMvYnVpbGQvc3RhdHVzL3NpbW9uYWNvLmdyYXBobGVzcz9icmFuY2hOYW1lPW1hc3RlcildKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2J1aWxkL2xhdGVzdD9kZWZpbml0aW9uSWQ9MjcmYnJhbmNoTmFtZT1tYXN0ZXIpXG5cbiMjIFByZXJlcXVpc2l0ZXNcblxuMS4gQSByZWNlbnQgdmVyc2lvbiBvZiBbTm9kZV0oaHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkKSAoOCspXG5cbjEuIFtBenVyZSBGdW5jdGlvbnMgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1mdW5jdGlvbnMvZnVuY3Rpb25zLXJ1bi1sb2NhbD9XVC5tY19pZD1ncmFwaHFsZXNzLWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBbRnJlZSBBenVyZSBBY2NvdW50XShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZW4tdXMvZnJlZS8/d3QubWNfaWQ9Z3JhcGhsZXNzLWdpdGh1Yi1zaWNvdGluKVxuXG5cbiMjIFNldHVwIEF6dXJlIFBpcGVsaW5lc1xuXG4xLiBDcmVhdGUgU2VydmljZSBDb25uZWN0aW9uIFxuMS4gU2V0IHZhcmlhYmxlczogUGFyYW1ldGVycy5Db25uZWN0ZWRTZXJ2aWNlTmFtZSAiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOWFkZjdiNTgtYjczNS00MTI0LTkwY2UtYjhlZjliZTExNDVkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1UUTFNemd6T0RBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkRhcmtNb2RlU3BsYXNoU2NyZWVuIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjkzYThiZWZiNzk1MDc3YjRmNjlhNmVmMzgwMWM4ZjU3N2FhNDZjYzYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1haW4iLAogICAgInJlYWRtZVRleHQiOiAiIyBEYXJrIE1vZGUgU3BsYXNoIFNjcmVlblxuXG5Ob3cgdGhhdCBpT1MgMTMgYW5kIEFuZHJvaWQgUSBzdXBwb3J0IERhcmsgTW9kZSwgd2UnbGwgd2FudCBvdXIgYXBwJ3MgU3BsYXNoIFNjcmVlbiB0byBiZSBkYXJrIHRvby4gVGhpcyBzYW1wbGUgZGVtb25zdHJhdGVzIGhvdyB0byBjcmVhdGUgYSBTcGxhc2ggU2NyZWVuIHRoYXQgaXMgZGFyayB3aGVuIERhcmsgTW9kZSBpcyBlbmFibGVkLCBidXQgc3RpbGwgbGlnaHQgd2hlbiBEYXJrIE1vZGUgaXMgZGlzYWJsZWQuXG5cbkkgcmVjZW50bHkgaW1wbGVtZW50ZWQgdGhpcyBzcGxhc2ggc2NyZWVuIGZvciBteSBhcHAsIFtQdW5kYXldKGh0dHBzOi8vbW9uZGF5cHVuZGF5LmNvbS9hcHApLCBvbiBbaU9TXShodHRwczovL2FwcHN0by5yZS91cy91WUhTYWIuaSkgYW5kIFtBbmRyb2lkXShodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9Y29tLm1pbm5pY2subW9uZGF5cHVuZGF5YXBwKS4gU2luY2UgUHVuZGF5IGlzIG5vdCBvcGVuLXNvdXJjZSwgSSBwdXQgdG9nZXRoZXIgdGhpcyBzYW1wbGUgYW5kIGFzc2VtYmxlZCBhIHdhbGt0aHJvdWdoIGRlbW9uc3RyYXRpbmcgaG93IEkgY3JlYXRlZCBQdW5kYXkncyBzcGxhc2ggc2NyZWVuLlxuXG5Zb3UgY2FuIGZpbmQgdGhlIHdhbGt0aHJvdWdoIHRvIGltcGxlbWVudCBhIERhcmsgTW9kZSBTcGxhc2ggU2NyZWVuIGhlcmU6XG5odHRwczovL2NvZGV0cmF2ZWxlci5pby8yMDE5LzEwLzExL2NyZWF0aW5nLWEtZGFyay1tb2RlLXNwbGFzaC1zY3JlZW4vXG5cblxufCBpT1MsIERhcmsgQXBwZWFyYW5jZSBFbmFibGVkIHwgaU9TIERhcmsgQXBwZWFyYW5jZSBEaXNhYmxlZCB8IEFuZHJvaWQgRGFyayBUaGVtZSBFbmFibGVkIHwgQW5kcm9pZCBEYXJrIFRoZW1lIERpc2FibGVkIHwgXG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCAhW2lPUyBTcGxhc2ggU2NyZWVuLCBEYXJrIEFwcGVhcmFuY2UgRW5hYmxlZF0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjY2ODk4MjEtNzYxYWFkODAtZWM0MS0xMWU5LThmMzktOTIxNzBlNWU4YzE2LnBuZykgfCAhW2lPUyBTcGxhc2ggU2NyZWVuLCBEYXJrIEFwcGVhcmFuY2UgRGlzYWJsZWRdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEzNTU4OTE3LzY2Njg5ODE5LTc2MWFhZDgwLWVjNDEtMTFlOS05M2U4LTdjZDdhZGRhYzUxNS5wbmcpIHwgIVtBbmRyb2lkIFNwbGFzaCBTY3JlZW4sIERhcmsgVGhlbWUgRW5hYmxlZF0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjY2ODk4MTctNzU4MjE3MDAtZWM0MS0xMWU5LThmNjItNGVlMjAwZjI3YmMzLnBuZykgfCAhW0FuZHJvaWQgU3BsYXNoIFNjcmVlbiwgRGFyayBUaGVtZSBEaXNhYmxlZF0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNjY2ODk4MTgtNzYxYWFkODAtZWM0MS0xMWU5LTkxN2ItOTU1YjRjMmU5MzFmLnBuZykgfFxuXG5cblxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0ZDI1NDY2YS02NmE3LTQwNWMtYWZiYi05MzJjMTQ3NTVmOTUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1qRTRNemN6IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJDb2RlQ2FtcGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjQ4YTM4Nzk2MDgzMDZhNzhmYTU0ZGVkZWU2ZWZlYzE2MDQ1OWEyNDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU16TTNORFExIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJraXMtcmVxdWlyZWpzLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODhjMTYyZTI3Y2U0M2E5OTQzZjM5NmViNzk5M2ZhNmM4ZjNlMjBjOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXdNekUwT1RBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiY3JlYXRlLWdyYXBobGVzcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkOGY4OWRlZTI5NDEzNjgzZTgwNDgzZDJlNDVmZmQzZGVlNDIzNzc2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBHcmFwaGxlc3NcblxuQ0xJIHRoYXQgZ2VuZXJhdGVzIHRoZSBjb2RlIHlvdSBuZWVkIGZvciBydW5uaW5nIEdyYXBocWwgd2l0aCBBenVyZSBGdW5jdGlvbnNcblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBBIHJlY2VudCB2ZXJzaW9uIG9mIFtOb2RlXShodHRwczovL25vZGVqcy5vcmcvZW4vZG93bmxvYWQpICg4KylcblxuMS4gW0F6dXJlIEZ1bmN0aW9ucyBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtcnVuLWxvY2FsP1dULm1jX2lkPWdyYXBocWxlc3MtZ2l0aHViLXNpY290aW4pXG5cbjEuIFtGcmVlIEF6dXJlIEFjY291bnRdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9lbi11cy9mcmVlLz93dC5tY19pZD1ncmFwaGxlc3MtZ2l0aHViLXNpY290aW4pXG5cbiMjIEhvdyB0byBydW4gaXRcblxuMS4gSW5zdGFsbCBwYWNrYWdlIGBgYG5wbSBpIEBzaW1vbmFjby9jcmVhdGUtZ3JhcGhsZXNzIC1nYGBgXG5cbjEuIENyZWF0ZSBuZXcgcHJvamVjdCBieSBydW5uaW5nIGBgYGNyZWF0ZS1ncmFwaGxlc3MgLS1naXQgLS1pbnN0YWxsYGBgXG5cbjEuIFJ1biBwcm9qZWN0IGBgYG5wbSBzdGFydGBgYCBcblxuIyMgTGljZW5zZVxuXG5bIVtDcmVhdGl2ZSBDb21tb25zIExpY2Vuc2VdKGh0dHA6Ly9taXJyb3JzLmNyZWF0aXZlY29tbW9ucy5vcmcvcHJlc3NraXQvYnV0dG9ucy84OHgzMS9zdmcvY2MtemVyby5zdmcpXShodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvcHVibGljZG9tYWluL3plcm8vMS4wLykiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiODI1ZGNjY2MtYTQzZC00MjBmLThkMjQtMjUxZmI5NDNhYWI0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5URXpNakE0IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJqczRuZXRkZXYiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjcyNzUzNzkwN2IyMGFhYTFlZGZkZDg4OTRiMGIxOTYzMDNhZmIyYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56TTNNVGN4TVRZPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJ0d2VldHZlcnNlIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwNWViN2IyNzMzMTg4MmY5YzY1NjM0OWY1ODM1ZWY5MmQ2ZWIwMjAwIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBUd2VldHZlcnNlIHwgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL2Rldi5henVyZS5jb20vc2ljb3Rpbi9zaWNvdGluL19hcGlzL2J1aWxkL3N0YXR1cy9zaW1vbmFjby50d2VldHZlcnNlP2JyYW5jaE5hbWU9bWFzdGVyKV0oaHR0cHM6Ly9kZXYuYXp1cmUuY29tL3NpY290aW4vc2ljb3Rpbi9fYnVpbGQvbGF0ZXN0P2RlZmluaXRpb25JZD0yMCZicmFuY2hOYW1lPW1hc3RlciZXVC5tY19pZD10d2VldHZlcnNlLWdpdGh1Yi1zaWNvdGluKVxuXG4jIyBEZXBsb3kgcmVzb3VyY2VzXG5cblshW0RlcGxveSB0byBBenVyZV0oaHR0cHM6Ly9henVyZWRlcGxveS5uZXQvZGVwbG95YnV0dG9uLnBuZyldKGh0dHBzOi8vcG9ydGFsLmF6dXJlLmNvbS8/V1QubWNfaWQ9dHdlZXR2ZXJzZS1naXRodWItc2ljb3RpbiNjcmVhdGUvTWljcm9zb2Z0LlRlbXBsYXRlL3VyaS9odHRwcyUzQSUyRiUyRnJhdy5naXRodWJ1c2VyY29udGVudC5jb20lMkZzaW1vbmFjbyUyRnR3ZWV0dmVyc2UlMkZtYXN0ZXIlMkZhenVyZWRlcGxveS5qc29uKVxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEEgcmVjZW50IHZlcnNpb24gb2YgTm9kZSAoOCspXG5cbjEuIFZTIENvZGU6IFtoZXJlXShodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9kb3dubG9hZC8/V1QubWNfaWQ9dHdlZXR2ZXJzZS1naXRodWItc2ljb3RpbilcblxuMS4gQXp1cmUgRnVuY3Rpb25zIENMSTogW2hlcmVdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtcnVuLWxvY2FsP1dULm1jX2lkPXR3ZWV0dmVyc2UtZ2l0aHViLXNpY290aW4pICBcblxuMS4gQXp1cmUgRnVuY3Rpb25zIEV4dGVuc2lvbiBmb3IgVlMgQ29kZTogW2hlcmVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcy8/V1QubWNfaWQ9dHdlZXR2ZXJzZS1naXRodWItc2ljb3RpbiZpdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgIFxuXG4xLiBBenVyZSBhY2NvdW50OiBbaGVyZV0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2VuLXVzL2ZyZWUvP3d0Lm1jX2lkPXR3ZWV0dmVyc2UtZ2l0aHViLXNpY290aW4pXG5cbiMjIEhvdyB0byBydW4gdGhpc1xuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnkgYW5kIGNkIGludG8gKnR3ZWV0dmVyc2UqXG5cbjEuIENyZWF0ZSAqbG9jYWwuc2V0dGluZ3MuanNvbiogZmlsZSBhbmQgYWRkOlxuXG5gYGBqc29uXG57XG4gIFwiSXNFbmNyeXB0ZWRcIjogZmFsc2UsXG4gIFwiVmFsdWVzXCI6IHtcbiAgICBcIkF6dXJlV2ViSm9ic1N0b3JhZ2VcIjogXCJcIixcbiAgICBcIkZVTkNUSU9OU19XT1JLRVJfUlVOVElNRVwiOiBcIm5vZGVcIixcbiAgICBcIkJFQVJFUl9UT0tFTlwiOlwiWU9VUi1UV0lUVEVSLVRPS0VOLUhFUkVcIixcbiAgICBcIlRFWFRfQU5BTFlUSUNTX0FQSV9LRVlcIjpcIllPVVItQVBJX0tFWS1IRVJFXCIsXG4gICAgXCJTTEFDS19BUElfVVJMXCI6XCJZT1VSLVVSTC1IRVJFXCIsXG4gIH1cbn1cbmBgYFxuXG4xLiBSdW4gYGBgbnBtIGlgYGAgYW5kIGBgYG5wbSBzdGFydGBgYFxuXG5cbvCfmYvwn4+8IEhhcHB5IGNvZGluZyEg8J+Zi/Cfj7wiLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTYxOTczMWMtM2Q0ZC00OTg0LTgyMmUtYTQ0N2NkMmI2ZjhjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09UY3lOVEUwIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJIb3RUb3dlbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlZTM3ZjBmNDhlMmY5MGQ0NDU5YWY1MTk3ZjUwZmZhZTcyZjFmOTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qVTBPVGMxIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJQbHVyYWxzaWdodFNwYUp1bXBTdGFydEZpbmFsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjhlNTJlYmVlODQ0ZDk0YzUwNGU0MzVmODU3OGQ4ZmM4MTU5NmRlYjMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9EVXpOemsxT0RFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYnVpbGRncmFwaGxlc3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjI0NDIzNjJjZTg1MDAzN2E3MWUyODFhMzc2ZTQ2Y2IwYTdjOWNkMSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQnVpbGQgZGVtb1xuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEEgcmVjZW50IHZlcnNpb24gb2YgW05vZGVdKGh0dHBzOi8vbm9kZWpzLm9yZy9lbi9kb3dubG9hZCkgKDgrKVxuXG4xLiBbQXp1cmUgRnVuY3Rpb25zIENMSV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2Z1bmN0aW9ucy1ydW4tbG9jYWw/V1QubWNfaWQ9YnVpbGQyMDE5LWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBbRnJlZSBBenVyZSBBY2NvdW50XShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZnJlZS8/d3QubWNfaWQ9YnVpbGQyMDE5LWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBbQXp1cmUgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9jbGkvYXp1cmUvaW5zdGFsbC1henVyZS1jbGk/dmlldz1henVyZS1jbGktbGF0ZXN0JldULm1jX2lkPWJ1aWxkMjAxOS1naXRodWItc2ljb3RpbilcblxuIyMgSG93IHRvIHJ1biB0aGlzXG5cbjEuIEluc3RhbGwgZGVwZW5kZW5jaWVzOiBgYGBucG0gaW5zdGFsbGBgYFxuXG4xLiBSdW4gbG9jYWxseTogYGBgbnBtIHN0YXJ0YGBgXG5cbjEuIEdvIHRvIFtodHRwOi8vMTI3LjAuMC4xOjgwODBdKGh0dHA6Ly8xMjcuMC4wLjE6ODA4MCkgYW5kIHJ1biBxdWVyeTpcblxuYGBganNvblxubXV0YXRpb24ge1xuICBpbmNyZW1lbnRQb2ludHMoaWQ6MSl7XG4gICAgbmFtZVxuICAgIHBvaW50c1xuICB9XG59XG5gYGBcblxuMS4gRGVwbG95IHRvIHRoZSBjbG91ZFxuXG5gYGBcbmNkIHNjcmlwdHNcbi4vZGVwbG95bWVudCA8dW5pcXVlIGFwcCBuYW1lPlxuYGBgXG5cbkhhcHB5IGNvZGluZyFcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwZDJjYTM5YS0wZjczLTQyYWItYjYxMi0zYmMyYmNmNzlmZGQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qRTBOelEwTXpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkFwcENlbnRlckF1dGhEYXRhU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMzMTYzMGE1NTE0MTUzZmI3OGNiNTZkYzZkMjMxYWZmNjI1YzA0NzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFwcCBDZW50ZXIgQXV0aCAmIERhdGEgU2FtcGxlXG5BIHNhbXBsZSBhcHAgZGVtb25zdHJhdGluZyBBcHAgQ2VudGVyIEF1dGggYW5kIEFwcCBDZW50ZXIgRGF0YSwgYnVpbHQgZm9yIGlPUyBhbmQgQW5kcm9pZCB1c2luZyBYYW1hcmluLkZvcm1zLlxuXG5KdXN0IGFib3V0IGV2ZXJ5IG1vYmlsZSBhcHAgdG9kYXkgdXNlcyBhIHJlbW90ZSBiYWNrZW5kIHRvIHN0b3JlIGRhdGEuIEJ1dCBjcmVhdGluZyBhIGJhY2tlbmQgaXMgaGFyZCAtIGl0IHJlcXVpcmVzIGV4dGVuc2l2ZSBEYXRhYmFzZSwgQVBJLCBOZXR3b3JraW5nLCBTZWN1cml0eSwgQXV0aGVudGljYXRpb24gYW5kIFNlcnZlciBrbm93bGVkZ2UuIEx1Y2tpbHksIEFwcCBDZW50ZXIgRGF0YSBtYWtlcyBpdCBlYXN5IHRvIGNyZWF0ZSBhIG1vYmlsZSBiYWNrZW5kIHdpdGggYSBmZXcgY2xpY2tzIGFuZCBhIGNvdXBsZSBsaW5lcyBvZiBjb2RlLlxuXG5odHRwczovL2NvZGV0cmF2ZWxlci5pby91cGRhdGUtZGF0YS9cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2NjYxYzRjYi0wZWRmLTQ1MzYtYTliZC05YTJmYzUxMWFhZmQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTBPVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidG9hc3RyLWJvd2VyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjE2OWFhOGUzMDIxY2JmMWM2NGVhZWRlYzNiNDE4YzA0MzEzYWY5NWEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9UQTFOVGN3TkRVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAid2VibWwiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMjUyMjliNWY2MDExNDcwYzgzNTRjMTI0NGY4ZDkxNjNkNTVhNDQwNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgV2VibWwgYmxhXG5cblxuVGhpcyBwcm9qZWN0IHdhcyBnZW5lcmF0ZWQgd2l0aCBbQW5ndWxhciBDTEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpKSB2ZXJzaW9uIDguMC4xLlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLS1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImUzOGViMmFjLTAxYTUtNDBkMi1hNzU3LTRkMzNlYzIwMzJlMiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzVPRGM1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhci1OdUdldCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhYTVlZDY1NTQyNWE0OGJiOTE5MDk4OTc3ZDc1MjAwZjY1ZjVjZjQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EZzVNams0TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci5icmVlemUuc3RvcmFnZXdpcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMjliY2JiMzMxZjBkMjk4ZDI2MDdiODM3NmIxNzllYWMwYWY2N2E5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5Ua3hNREEyT1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2MtbW9uZ28tZGF0YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzNDIyM2ZjZDAxNjE0OGJlMGEyMGFjMDhmZWNjMmI2MzIzZWVkOWZhIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EUXhNelkxTlRjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VuZC1lbWFpbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMGI3OTgyNDk5ZWI5YzIxOWU3YTNjNmRhODExMDIxYzNhYmM1NWRlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjg4NjYxOGQ0LTk3ODctNGNiNi04NDJiLWZlZTg5OTZlMjRkMyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTJPREl6TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctZGVtb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Q0YzY1MDQzYWJiZjVmMDY2YWRmZmMzYWNmMzdmOWY1OGI0NDJhMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE9ETXhOekUzTnpFPSIsCiAgIm93bmVyIjogInNpbW9uYWNvIiwKICAibmFtZSI6ICJncmFwaGxlc3MiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogIjgyOGJlN2RiZDZlOWEwZDZkMGRiNDczZjAxY2JmODNiYTlkMTZjNTkiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIEdyYXBobGVzc1xuXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2FwaXMvYnVpbGQvc3RhdHVzL3NpbW9uYWNvLmdyYXBobGVzcz9icmFuY2hOYW1lPW1hc3RlcildKGh0dHBzOi8vZGV2LmF6dXJlLmNvbS9zaWNvdGluL3NpY290aW4vX2J1aWxkL2xhdGVzdD9kZWZpbml0aW9uSWQ9MjcmYnJhbmNoTmFtZT1tYXN0ZXImV1QubWNfaWQ9Z3JhcGhsZXNzLWdpdGh1Yi1zaWNvdGluKVxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEEgcmVjZW50IHZlcnNpb24gb2YgW05vZGVdKGh0dHBzOi8vbm9kZWpzLm9yZy9lbi9kb3dubG9hZCkgKDgrKVxuXG4xLiBbQXp1cmUgRnVuY3Rpb25zIENMSV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2Z1bmN0aW9ucy1ydW4tbG9jYWw/V1QubWNfaWQ9Z3JhcGhxbGVzcy1naXRodWItc2ljb3RpbilcblxuMS4gW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2VuLXVzL2ZyZWUvP3d0Lm1jX2lkPWdyYXBobGVzcy1naXRodWItc2ljb3RpbilcblxuXG4jIyBTZXR1cCBBenVyZSBQaXBlbGluZXNcblxuMS4gQ3JlYXRlIFNlcnZpY2UgQ29ubmVjdGlvbiBcbjEuIFNldCB2YXJpYWJsZXM6IFBhcmFtZXRlcnMuQ29ubmVjdGVkU2VydmljZU5hbWUgIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImMzNjM1Mzg4LTlhMjQtNGEwZi1iMTQ3LWNjMzA3NTViZWNmYSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1EVTNNRFV5T1RjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjliZWZhYmQwMzQyODYzOGU2NjA0YzFhMTYwNTkyYjc2ZGJiNDI3YzMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICJUaGlzIHByb2plY3Qgd2FzIGJvb3RzdHJhcHBlZCB3aXRoIFtDcmVhdGUgUmVhY3QgQXBwXShodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svY3JlYXRlLXJlYWN0LWFwcCkuXG5cbiMjIEF2YWlsYWJsZSBTY3JpcHRzXG5cbkluIHRoZSBwcm9qZWN0IGRpcmVjdG9yeSwgeW91IGNhbiBydW46XG5cbiMjIyBgbnBtIHN0YXJ0YFxuXG5SdW5zIHRoZSBhcHAgaW4gdGhlIGRldmVsb3BtZW50IG1vZGUuPGJyPlxuT3BlbiBbaHR0cDovL2xvY2FsaG9zdDozMDAwXShodHRwOi8vbG9jYWxob3N0OjMwMDApIHRvIHZpZXcgaXQgaW4gdGhlIGJyb3dzZXIuXG5cblRoZSBwYWdlIHdpbGwgcmVsb2FkIGlmIHlvdSBtYWtlIGVkaXRzLjxicj5cbllvdSB3aWxsIGFsc28gc2VlIGFueSBsaW50IGVycm9ycyBpbiB0aGUgY29uc29sZS5cblxuIyMjIGBucG0gdGVzdGBcblxuTGF1bmNoZXMgdGhlIHRlc3QgcnVubmVyIGluIHRoZSBpbnRlcmFjdGl2ZSB3YXRjaCBtb2RlLjxicj5cblNlZSB0aGUgc2VjdGlvbiBhYm91dCBbcnVubmluZyB0ZXN0c10oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vY3JlYXRlLXJlYWN0LWFwcC9kb2NzL3J1bm5pbmctdGVzdHMpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG4jIyMgYG5wbSBydW4gYnVpbGRgXG5cbkJ1aWxkcyB0aGUgYXBwIGZvciBwcm9kdWN0aW9uIHRvIHRoZSBgYnVpbGRgIGZvbGRlci48YnI+XG5JdCBjb3JyZWN0bHkgYnVuZGxlcyBSZWFjdCBpbiBwcm9kdWN0aW9uIG1vZGUgYW5kIG9wdGltaXplcyB0aGUgYnVpbGQgZm9yIHRoZSBiZXN0IHBlcmZvcm1hbmNlLlxuXG5UaGUgYnVpbGQgaXMgbWluaWZpZWQgYW5kIHRoZSBmaWxlbmFtZXMgaW5jbHVkZSB0aGUgaGFzaGVzLjxicj5cbllvdXIgYXBwIGlzIHJlYWR5IHRvIGJlIGRlcGxveWVkIVxuXG5TZWUgdGhlIHNlY3Rpb24gYWJvdXQgW2RlcGxveW1lbnRdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2NyZWF0ZS1yZWFjdC1hcHAvZG9jcy9kZXBsb3ltZW50KSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cblxuIyMjIGBucG0gcnVuIGVqZWN0YFxuXG4qKk5vdGU6IHRoaXMgaXMgYSBvbmUtd2F5IG9wZXJhdGlvbi4gT25jZSB5b3UgYGVqZWN0YCwgeW91IGNhbuKAmXQgZ28gYmFjayEqKlxuXG5JZiB5b3UgYXJlbuKAmXQgc2F0aXNmaWVkIHdpdGggdGhlIGJ1aWxkIHRvb2wgYW5kIGNvbmZpZ3VyYXRpb24gY2hvaWNlcywgeW91IGNhbiBgZWplY3RgIGF0IGFueSB0aW1lLiBUaGlzIGNvbW1hbmQgd2lsbCByZW1vdmUgdGhlIHNpbmdsZSBidWlsZCBkZXBlbmRlbmN5IGZyb20geW91ciBwcm9qZWN0LlxuXG5JbnN0ZWFkLCBpdCB3aWxsIGNvcHkgYWxsIHRoZSBjb25maWd1cmF0aW9uIGZpbGVzIGFuZCB0aGUgdHJhbnNpdGl2ZSBkZXBlbmRlbmNpZXMgKFdlYnBhY2ssIEJhYmVsLCBFU0xpbnQsIGV0YykgcmlnaHQgaW50byB5b3VyIHByb2plY3Qgc28geW91IGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlbS4gQWxsIG9mIHRoZSBjb21tYW5kcyBleGNlcHQgYGVqZWN0YCB3aWxsIHN0aWxsIHdvcmssIGJ1dCB0aGV5IHdpbGwgcG9pbnQgdG8gdGhlIGNvcGllZCBzY3JpcHRzIHNvIHlvdSBjYW4gdHdlYWsgdGhlbS4gQXQgdGhpcyBwb2ludCB5b3XigJlyZSBvbiB5b3VyIG93bi5cblxuWW91IGRvbuKAmXQgaGF2ZSB0byBldmVyIHVzZSBgZWplY3RgLiBUaGUgY3VyYXRlZCBmZWF0dXJlIHNldCBpcyBzdWl0YWJsZSBmb3Igc21hbGwgYW5kIG1pZGRsZSBkZXBsb3ltZW50cywgYW5kIHlvdSBzaG91bGRu4oCZdCBmZWVsIG9ibGlnYXRlZCB0byB1c2UgdGhpcyBmZWF0dXJlLiBIb3dldmVyIHdlIHVuZGVyc3RhbmQgdGhhdCB0aGlzIHRvb2wgd291bGRu4oCZdCBiZSB1c2VmdWwgaWYgeW91IGNvdWxkbuKAmXQgY3VzdG9taXplIGl0IHdoZW4geW91IGFyZSByZWFkeSBmb3IgaXQuXG5cbiMjIExlYXJuIE1vcmVcblxuWW91IGNhbiBsZWFybiBtb3JlIGluIHRoZSBbQ3JlYXRlIFJlYWN0IEFwcCBkb2N1bWVudGF0aW9uXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvZ2V0dGluZy1zdGFydGVkKS5cblxuVG8gbGVhcm4gUmVhY3QsIGNoZWNrIG91dCB0aGUgW1JlYWN0IGRvY3VtZW50YXRpb25dKGh0dHBzOi8vcmVhY3Rqcy5vcmcvKS5cblxuIyMjIENvZGUgU3BsaXR0aW5nXG5cblRoaXMgc2VjdGlvbiBoYXMgbW92ZWQgaGVyZTogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vY3JlYXRlLXJlYWN0LWFwcC9kb2NzL2NvZGUtc3BsaXR0aW5nXG5cbiMjIyBBbmFseXppbmcgdGhlIEJ1bmRsZSBTaXplXG5cblRoaXMgc2VjdGlvbiBoYXMgbW92ZWQgaGVyZTogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vY3JlYXRlLXJlYWN0LWFwcC9kb2NzL2FuYWx5emluZy10aGUtYnVuZGxlLXNpemVcblxuIyMjIE1ha2luZyBhIFByb2dyZXNzaXZlIFdlYiBBcHBcblxuVGhpcyBzZWN0aW9uIGhhcyBtb3ZlZCBoZXJlOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvbWFraW5nLWEtcHJvZ3Jlc3NpdmUtd2ViLWFwcFxuXG4jIyMgQWR2YW5jZWQgQ29uZmlndXJhdGlvblxuXG5UaGlzIHNlY3Rpb24gaGFzIG1vdmVkIGhlcmU6IGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2NyZWF0ZS1yZWFjdC1hcHAvZG9jcy9hZHZhbmNlZC1jb25maWd1cmF0aW9uXG5cbiMjIyBEZXBsb3ltZW50XG5cblRoaXMgc2VjdGlvbiBoYXMgbW92ZWQgaGVyZTogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vY3JlYXRlLXJlYWN0LWFwcC9kb2NzL2RlcGxveW1lbnRcblxuIyMjIGBucG0gcnVuIGJ1aWxkYCBmYWlscyB0byBtaW5pZnlcblxuVGhpcyBzZWN0aW9uIGhhcyBtb3ZlZCBoZXJlOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9jcmVhdGUtcmVhY3QtYXBwL2RvY3MvdHJvdWJsZXNob290aW5nI25wbS1ydW4tYnVpbGQtZmFpbHMtdG8tbWluaWZ5XG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMDkyMDNhOGEtMTE2ZS00ZWZlLWI0YjctZDdlMmFhZGU1Mjc3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16TTNNREl3TlRjPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkxvY2FsTm90aWZpY2F0aW9uc1NhbXBsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNmJhYTIxMTE0YjI0MjI1ZWViNTFmNzFkNTY1MmEwMmE5MTNmZGJmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIiMgTG9jYWxOb3RpZmljYXRpb25zU2FtcGxlXG5BIHNhbXBsZSBpT1MgYW5kIEFuZHJvaWQgYXBwIGRlbW9uc3RyYXRpbmcgU2hpbnkuTm90aWZpY2F0aW9ucyBpbiBYYW1hcmluLkZvcm1zXG5cbnwgaU9TIHwgQW5kcm9pZCB8XG58IC0tLSB8IC0tLS0tLS0gfFxufCAhW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNzIyOTU2MjMtY2U3Yzk1MDAtMzYwYy0xMWVhLTg5OWEtNTBmZDI0YjAyMWY3LnBuZykgfCAhW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNzIyOTg5NjQtNjg5NDBiODAtMzYxNC0xMWVhLTkwMmEtZjIwY2ZhNGY3NjhhLnBuZykgfFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjk4YzAxZWMyLTdlNDMtNDJiOS04ZDdiLTRkOWMzMWRiMDIzNCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU16VTVORFV4T0RRPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlVJTW9kYWxQcmVzZW50YXRpb25TdHlsZUZvcm1TaGVldE9uQXBwZWFyaW5nUmVwcm8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMmNmOWE1OTlkZTA4YTMyMzkzZjcxYzQxNTE3ZjYzYWFmMzI5MTkyMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgVUlNb2RhbFByZXNlbnRhdGlvblN0eWxlRm9ybVNoZWV0T25BcHBlYXJpbmdSZXByb1xuXG5BIFhhbWFyaW4uRm9ybXMgc2FtcGxlIHJlcHJvZHVjaW5nIGEgYnVnIHdoZXJlIGBPbkFwcGVhcmluZ2AgZG9lcyBub3QgZmlyZSB3aXRoIGEgYFVJTW9kYWxQcmVzZW50YXRpb25TdHlsZS5Gb3JtU2hlZXRgIFBhZ2UgaXMgZGlzbWlzc2VkXG5cbiMjIFJlcHJvZHVjdGlvbiBTdGVwc1xuXG4xLiBEb3dubG9hZC9DbG9uZSB0aGlzIHJlcG9cbjIuIEluIFZpc3VhbCBTdHVkaW8sIG9wZW4gYE9uQXBwZWFyaW5nUmVwcm8uc2xuYFxuMy4gQnVpbGQvZGVwbG95IGBPbkFwcGVhcmluZ1JlcHJvLmlPU2AgdG8gYW4gaU9TIFNpbXVsYXRvciBvciBEZXZpY2VcbjQuIE9uIHRoZSBpT1MgYXBwLCBjb25maXJtIHRoZSBmb2xsb3dpbmcgYWxlcnQgYXBwZWFyczogYE9uQXBwZWFyaW5nIEZpcmVkYFxuNS4gT24gdGhlIGlPUyBhcHAsIGRpc21pc3MgdGhlIGFsZXJ0XG42LiBPbiB0aGUgaU9TIGFwcCwgY2xpY2sgdGhlIGBQdXNoIFBhZ2VgIEJ1dHRvbiB0byBwdXNoIGEgbmV3IGBDb250ZW50UGFnZWAgdmlhIGBOYXZpZ2F0aW9uLlB1c2hBc3luY2BcbjcuIE9uIHRoZSBpT1MgYXBwLCBjbGljayB0aGUgYEJhY2tgIGJ1dHRvblxuOC4gT24gdGhlIGlPUyBhcHAsIGNvbmZpcm0gdGhlIGZvbGxvd2luZyBhbGVydCBhcHBlYXJzOiBgT25BcHBlYXJpbmcgRmlyZWRgXG45LiBPbiB0aGUgaU9TIGFwcCwgZGlzbWlzcyB0aGUgYWxlcnRcbjEwLiBPbiB0aGUgaU9TIGFwcCwgY2xpY2sgdGhlIGBQdXNoIE1vZGFsIEZ1bGwgU2NyZWVuIFNoZWV0IFBhZ2VgIEJ1dHRvbiB0byBwdXNoIGEgbmV3IGBDb250ZW50UGFnZWAgdXNpbmcgYFVJTW9kYWxQcmVzZW50YXRpb25TdHlsZS5GdWxsU2NyZWVuYCB2aWEgYE5hdmlnYXRpb24uUHVzaE1vZGFsQXN5bmNgXG4xMS4gT24gdGhlIGlPUyBhcHAsIGNsaWNrIHRoZSBgQmFja2AgYnV0dG9uXG4xMi4gT24gdGhlIGlPUyBhcHAsIGNvbmZpcm0gdGhlIGZvbGxvd2luZyBhbGVydCBhcHBlYXJzOiBgT25BcHBlYXJpbmcgRmlyZWRgXG4xMy4gT24gdGhlIGlPUyBhcHAsIGRpc21pc3MgdGhlIGFsZXJ0XG4xNC4gT24gdGhlIGlPUyBhcHAsIGNsaWNrIHRoZSBgUHVzaCBNb2RhbCBGb3JtIFNoZWV0IFBhZ2VgIEJ1dHRvbiB0byBwdXNoIGEgbmV3IGBDb250ZW50UGFnZWAgdXNpbmcgYFVJTW9kYWxQcmVzZW50YXRpb25TdHlsZS5Gb3JtU2hlZXRgIHZpYSBgTmF2aWdhdGlvbi5QdXNoTW9kYWxBc3luY2BcbjE1LiBPbiB0aGUgaU9TIGFwcCwgY2xpY2sgdGhlIGBCYWNrYCBidXR0b25cbjE2LiBPbiB0aGUgaU9TIGFwcCwgY29uZmlybSB0aGUgZm9sbG93aW5nIGFsZXJ0ICpkb2VzIG5vdCogYXBwZWFyOiBgT25BcHBlYXJpbmcgRmlyZWRgXG5cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy83MzA0NjY2MS01OTM3N2M4MC0zZWI2LTExZWEtOTE2YS00OTQ0Njk5NjlkODUuZ2lmKVxuXG4jIyBFbnZpcm9ubWVudFxuXG49PT0gVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlIDIwMTkgZm9yIE1hYyA9PT1cblxuVmVyc2lvbiA4LjQuMiAoYnVpbGQgNTkpXG5JbnN0YWxsYXRpb24gVVVJRDogYTJiNmQxNzQtZTBlZS00MzhhLTllOWQtZWVjOGI4ZGQ0N2RhXG5cdEdUSysgMi4yNC4yMyAoUmFsZWlnaCB0aGVtZSlcblx0WGFtYXJpbi5NYWMgNS4xNi4xLjI1IChpc3N1ZS03NDQxLWQxNi0zLXZzbWFjIC8gODgxMTcyZTczKVxuXG5cdFBhY2thZ2UgdmVyc2lvbjogNjA2MDAwMTU1XG5cbj09PSBNb25vIEZyYW1ld29yayBNREsgPT09XG5cblJ1bnRpbWU6XG5cdE1vbm8gNi42LjAuMTU1ICgyMDE5LTA4LzI5NmE5YWZkYjI0KSAoNjQtYml0KVxuXHRQYWNrYWdlIHZlcnNpb246IDYwNjAwMDE1NVxuXG49PT0gUm9zbHluIChMYW5ndWFnZSBTZXJ2aWNlKSA9PT1cblxuMy40LjAtYmV0YTQtMTk1NjItMDUrZmY5MzBkZWM0NTY1ZTJiYzQyNGFkM2JmM2UyMmVjYjIwNTQyYzg3ZFxuXG49PT0gTnVHZXQgPT09XG5cblZlcnNpb246IDUuMy4wLjYxOTJcblxuPT09IC5ORVQgQ29yZSBTREsgPT09XG5cblNESzogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvc2RrLzMuMS4xMDEvU2Rrc1xuU0RLIFZlcnNpb25zOlxuXHQzLjEuMTAxXG5cdDMuMS4xMDBcblx0My4wLjEwMVxuXHQyLjEuODAzXG5NU0J1aWxkIFNES3M6IC9MaWJyYXJ5L0ZyYW1ld29ya3MvTW9uby5mcmFtZXdvcmsvVmVyc2lvbnMvNi42LjAvbGliL21vbm8vbXNidWlsZC9DdXJyZW50L2Jpbi9TZGtzXG5cbj09PSAuTkVUIENvcmUgUnVudGltZSA9PT1cblxuUnVudGltZTogL3Vzci9sb2NhbC9zaGFyZS9kb3RuZXQvZG90bmV0XG5SdW50aW1lIFZlcnNpb25zOlxuXHQzLjEuMVxuXHQzLjEuMFxuXHQzLjAuMVxuXHQyLjEuMTVcblx0Mi4xLjE0XG5cbj09PSBYYW1hcmluLlByb2ZpbGVyID09PVxuXG5WZXJzaW9uOiAxLjYuMTMuMTFcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IFVwZGF0ZXIgPT09XG5cblZlcnNpb246IDExXG5cbj09PSBBcHBsZSBEZXZlbG9wZXIgVG9vbHMgPT09XG5cblhjb2RlIDExLjMuMSAoMTU3MTUpXG5CdWlsZCAxMUM1MDRcblxuPT09IFhhbWFyaW4uTWFjID09PVxuXG5YYW1hcmluLk1hYyBub3QgaW5zdGFsbGVkLiBDYW4ndCBmaW5kIC9MaWJyYXJ5L0ZyYW1ld29ya3MvWGFtYXJpbi5NYWMuZnJhbWV3b3JrL1ZlcnNpb25zL0N1cnJlbnQvVmVyc2lvbi5cblxuPT09IFhhbWFyaW4uaU9TID09PVxuXG5WZXJzaW9uOiAxMy4xMC4wLjE3IChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5IYXNoOiA1ZjgwMmVmNTNcbkJyYW5jaDogeGNvZGUxMS4zXG5CdWlsZCBkYXRlOiAyMDIwLTAxLTA3IDExOjUzOjA2LTA1MDBcblxuPT09IFhhbWFyaW4gRGVzaWduZXIgPT09XG5cblZlcnNpb246IDE2LjQuMC40Nzhcbkhhc2g6IDk1ZjBhYjM2M1xuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtNFxuQnVpbGQgZGF0ZTogMjAyMC0wMS0wOCAyMzo1OTo0NiBVVENcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogMTAuMS4zLjcgKFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSlcbkNvbW1pdDogeGFtYXJpbi1hbmRyb2lkL2QxNi00L2Q2NmFlZDBcbkFuZHJvaWQgU0RLOiAvVXNlcnMvYnJhbWluL0xpYnJhcnkvRGV2ZWxvcGVyL1hhbWFyaW4vYW5kcm9pZC1zZGstbWFjb3N4XG5cdFN1cHBvcnRlZCBBbmRyb2lkIHZlcnNpb25zOlxuXHRcdDcuMCAoQVBJIGxldmVsIDI0KVxuXG5TREsgVG9vbHMgVmVyc2lvbjogMjYuMS4xXG5TREsgUGxhdGZvcm0gVG9vbHMgVmVyc2lvbjogMjkuMC41XG5TREsgQnVpbGQgVG9vbHMgVmVyc2lvbjogMjkuMC4yXG5cbkJ1aWxkIEluZm9ybWF0aW9uOiBcbk1vbm86IGZkOWYzNzlcbkphdmEuSW50ZXJvcDogeGFtYXJpbi9qYXZhLmludGVyb3AvZDE2LTRAYzRlNTY5ZlxuUHJvR3VhcmQ6IHhhbWFyaW4vcHJvZ3VhcmQvbWFzdGVyQDkwNTgzNmRcblNRTGl0ZTogeGFtYXJpbi9zcWxpdGUvMy4yOC4wQDQ2MjA0YzRcblhhbWFyaW4uQW5kcm9pZCBUb29sczogeGFtYXJpbi94YW1hcmluLWFuZHJvaWQtdG9vbHMvbWFzdGVyQDlmNGVkNGJcblxuPT09IE1pY3Jvc29mdCBNb2JpbGUgT3BlbkpESyA9PT1cblxuSmF2YSBTREs6IC9Vc2Vycy9icmFtaW4vTGlicmFyeS9EZXZlbG9wZXIvWGFtYXJpbi9qZGsvbWljcm9zb2Z0X2Rpc3Rfb3Blbmpka18xLjguMC4yNVxuMS44LjAtMjVcbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBBbmRyb2lkIFNESyBNYW5hZ2VyID09PVxuXG5WZXJzaW9uOiAxNi40LjAuOVxuSGFzaDogM2Y3MjU2ZlxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtNFxuQnVpbGQgZGF0ZTogMjAyMC0wMS0xNCAyMjoxOTowNCBVVENcblxuPT09IEFuZHJvaWQgRGV2aWNlIE1hbmFnZXIgPT09XG5cblZlcnNpb246IDE2LjQuMC4zMFxuSGFzaDogZjkxNzJlMlxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtNFxuQnVpbGQgZGF0ZTogMjAyMC0wMS0xNCAyMjoxOToyNCBVVENcblxuPT09IFhhbWFyaW4gSW5zcGVjdG9yID09PVxuXG5WZXJzaW9uOiAxLjQuM1xuSGFzaDogZGIyNzUyNVxuQnJhbmNoOiAxLjQtcmVsZWFzZVxuQnVpbGQgZGF0ZTogTW9uLCAwOSBKdWwgMjAxOCAyMToyMDoxOCBHTVRcbkNsaWVudCBjb21wYXRpYmlsaXR5OiAxXG5cbj09PSBCdWlsZCBJbmZvcm1hdGlvbiA9PT1cblxuUmVsZWFzZSBJRDogODA0MDIwMDU5XG5HaXQgcmV2aXNpb246IGViNmZjZGQ4M2EyMjc2NzhlNDg3YWE3MzNkZjNjODc0NWY1NGZhZmNcbkJ1aWxkIGRhdGU6IDIwMjAtMDEtMTcgMTI6MTI6MDIrMDBcbkJ1aWxkIGJyYW5jaDogcmVsZWFzZS04LjRcblhhbWFyaW4gZXh0ZW5zaW9uczogZWMzMmM5MDk3OGM5NGYwM2Q3MmY1MDdiMDFmNWFlZTcwOTUyY2U4N1xuXG49PT0gT3BlcmF0aW5nIFN5c3RlbSA9PT1cblxuTWFjIE9TIFggMTAuMTUuMlxuRGFyd2luIDE5LjIuMCBEYXJ3aW4gS2VybmVsIFZlcnNpb24gMTkuMi4wXG4gICAgU2F0IE5vdiAgOSAwMzo0NzowNCBQU1QgMjAxOVxuICAgIHJvb3Q6eG51LTYxNTMuNjEuMX4yMC9SRUxFQVNFX1g4Nl82NCB4ODZfNjRcblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjMxYmU1NjA5LTk1MDItNDVhNi05OGM0LTMzOWRkOWVmMWRiZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFUwTlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ3VscC1wYXR0ZXJucyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlYTZmNGY3Mzk1Yzk4MjY0M2Q3NDg5NzMwODMxMzQ1MjY1NzFlMWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qUTFNelE0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10ZXN0aW5nLXF1aWNrLXN0YXJ0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM5ZmZhMzc1NDdjNGUyYjUwMjFhMzY5NjA4Mjg1MTA2NTdjMDk5MTYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56QXhORGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2VuZXJhdG9yLWhvdHRvd2VsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI2ZDUzNzYzMDFiNGJmYTEyNjExZjI5ZDY3NTU2MzdhMjQ5MzA3NDgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9ETXdPVFkyTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYmFyZGpzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImZmZjY0ZTJiY2YxYjkzMTkyNWE2N2JiOTgzYjlmNThmYTU1NGZmMzUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek16TXpPREl6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVGltZXNoZWV0cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZGFhM2Q5MDg5ZmU5MmQzYzQ2ZWQ5ZTM1MTdjNzU2ZDI3M2E1MWEyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtYW5ndWxhci10eXBlc2NyaXB0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERXdOelF4T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiRVM2LU1vZHVsZXMtU3RhcnRlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2N2Y4ZmViOThiOTQ2NDg4MmI5NTA5NjVmZjQ2YzJhYTRhZjYyNWM2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERTRNVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzYxZmY0ZTBkOTg2YTQ1OWM4NDE0YWVlYTZhZTBhNTcyMTE1Mzc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1URTROVEE1TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtZWxlY3Ryb24iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTFkYjVmZGIyODcwOTYyNzEzMDM4ZjRhZTc1YzQwYWJlNTI2OWVmZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1UY3pOakV6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10b3VyLW9mLWhlcm9lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNjU5Njc3MTBlOGIxYjg3YzBlNmE0ZjE5ZWVhMmI1ZjU0ZTdjNTBlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EUTNPRFl3TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibGl0ZS1zZXJ2ZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNmJjNmIwYzYzYzdhODJjMDFiN2IxMTM1NzljMzE0MDBjNDE1ZmE3NSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EZzFOakkwTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVHlwZVNjcmlwdERlbW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ4YTc2N2NmMjNkN2ViMDQ4ZDA0NDdmYjk3MTczYjczODc0ZWMwZGUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UQXpNakkwTWpFPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdEh1YlJlYWRtZVJldHJpZXZlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhYTNkYzc0YzkxNDY5ZTFmZTZkMTcxNGMyZjg5ZDZhMWVjMWMyMjFiIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYWluIiwKICAgICJyZWFkbWVUZXh0IjogIjxkaXYgY2xhc3M9XCJoZWFkZXJcIiBhbGlnbj1cImNlbnRlclwiPlxuICA8aDEgYWxpZ249XCJjZW50ZXJcIj5HaXRIdWIgUmVhZG1lIFJldHJpZXZlcjwvaDE+XG48L2Rpdj5cbjxwIGFsaWduPVwiY2VudGVyXCI+XG4gIDxhIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL1RoZUNvZGVUcmF2ZWxlclwiPlxuICAgIDxpbWcgYWx0PVwiVHdpdHRlcjogVGhlQ29kZVRyYXZlbGVyXCIgc3JjPVwiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby90d2l0dGVyL2ZvbGxvdy9UaGVDb2RlVHJhdmVsZXIuc3ZnP3N0eWxlPXNvY2lhbFwiIHRhcmdldD1cIl9ibGFua1wiIC8+XG4gIDwvYT5cbjwvcD5cblxuVGhlIEdpdEh1YiBSZWFkbWUgUmV0cmlldmVyIEFQSXMgYWxsb3cgeW91IHJldHJpZXZlIHRoZSBgUkVBRE1FLm1kYCBmcm9tIGFueSBHaXRIdWIgUmVwby5cblxuIyMgR0VUIFJFQURNRVxuXG5SZXRyaWV2ZSB0aGUgYFJFQURNRS5tZGAgZmlsZSBmcm9tIGFueSBwdWJsaWMgR2l0SHViIFJlcG9zaXRvcnkuXG5cbioqUmVxdWVzdCoqXG5cblRoZSBBUEkgcmVxdWVzdCByZXF1aXJlcyB0d28gcGFyYW1ldGVyczogYG93bmVyTmFtZWAgYW5kIGByZXBvc2l0b3J5TmFtZWA6XG4tIGBvd25lck5hbWVgIGlzIHRoZSBuYW1lIG9mIHRoZSBHaXRIdWIgdXNlciB3aG8gb3ducyB0aGUgcmVwb3NpdG9yeVxuLSBgcmVwb3NpdG9yeU5hbWVgIGlzIHRoZSBuYW1lIG9mIHRoZSBHaXRIdWIgUmVwb3NpdG9yeVxuXG5Cb3RoIHZhbHVlcyBiZSBleHRyYWN0ZWQgZnJvbSB0aGUgR2l0SHViIHJlcG9zaXRvcnkncyB1cmw6XG5cbmBodHRwczovL2dpdGh1Yi5jb20ve293bmVyTmFtZX0ve3JlcG9zaXRvcnlOYW1lfWBcblxuYGBgYmFzaFxuY3VybCAtLXJlcXVlc3QgR0VUICdodHRwczovL2dpdGh1YnJlYWRtZXJldHJpZXZlci5henVyZXdlYnNpdGVzLm5ldC9hcGkvR2V0UmVhZG1lL3tvd25lck5hbWV9L3tyZXBvc2l0b3J5TmFtZX0nXG5gYGBcblxuKipSZXNwb25zZSoqXG5cbmBgYGphdmFzY3JpcHRcbntcbiAgICBcInJlYWRtZVwiOiBcInN0cmluZ1wiLFxuICAgIFwicmVwb3NpdG9yeU5hbWVcIjogXCJzdHJpbmdcIixcbiAgICBcInJlcG9zaXRvcnlPd25lclwiOiBcInN0cmluZ1wiXG59XG5gYGBcblxuIyMjIEV4YW1wbGVcblxuVG8gcmV0cmlldmUgdGhpcyByZXBvJ3MgYFJFQURNRS5tZGAsIHdlJ2xsIHVzZSB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG5cbi0gb3duZXJOYW1lOiBgYnJtaW5uaWNrYFxuLSByZXBvc2l0b3J5TmFtZTogYEdpdEh1YlJlYWRtZVJldHJpZXZlcmBcblxuYGBgYmFzaFxuY3VybCAtLXJlcXVlc3QgR0VUICdodHRwczovL2dpdGh1YnJlYWRtZXJldHJpZXZlci5henVyZXdlYnNpdGVzLm5ldC9hcGkvR2V0UmVhZG1lL2JybWlubmljay9HaXRIdWJSZWFkbWVSZXRyaWV2ZXInXG5gYGBcblxuYGBgamF2YXNjcmlwdFxue1xuICAgIFwicmVhZG1lXCI6IFwiPGRpdiBjbGFzcz1cXFwiaGVhZGVyXFxcIiBhbGlnbj1cXFwiY2VudGVyXFxcIj5cXG4gIDxoMSBhbGlnbj1cXFwiY2VudGVyXFxcIj5HaXRIdWIgUmVhZG1lIFJldHJpZXZlcjwvaDE+XFxuPC9kaXY+Li4uXCJcbiAgICBcInJlcG9zaXRvcnlOYW1lXCI6IFwiR2l0SHViUmVhZG1lUmV0cmlldmVyXCIsXG4gICAgXCJyZXBvc2l0b3J5T3duZXJcIjogXCJicm1pbm5pY2tcIlxufVxuYGBgXG5cbiMjIEdFVCBBTEwgUkVBRE1Fc1xuXG5SZXRyaWV2ZSB0aGUgYFJFQURNRS5tZGAgZmlsZSBmcm9tIGFsbCBwcml2YXRlIGFuZCBwdWJsaWMgR2l0SHViIFJlcG9zaXRvcmllcyBvd25lZCBieSB0aGUgdXNlci5cblxuKipSZXF1ZXN0KipcblxuVGhlIEFQSSByZXF1ZXN0IHJlcXVpcmVzIHR3byBwYXJhbWV0ZXJzOiBgb3duZXJOYW1lYCBhbmQgYHRva2VuYDpcbi0gYG93bmVyTmFtZWAgaXMgeW91ciBHaXRIdWIgdXNlcm5hbWUgLyBsb2dpblxuLSBgdG9rZW5gIGlzIHlvdXIgUGVyc29uYWwgQWNjZXNzIFRva2VuIFtnZW5lcmF0ZWQgYnkgZm9sbG93aW5nIHRoZXNlIHN0ZXBzXShodHRwczovL2hlbHAuZ2l0aHViLmNvbS9hcnRpY2xlcy9jcmVhdGluZy1hLXBlcnNvbmFsLWFjY2Vzcy10b2tlbi1mb3ItdGhlLWNvbW1hbmQtbGluZS8jY3JlYXRpbmctYS10b2tlbikgXG5cbmBgYGJhc2hcbmN1cmwgLS1yZXF1ZXN0IEdFVCAnaHR0cHM6Ly9naXRodWJyZWFkbWVyZXRyaWV2ZXIuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL0dldFJlYWRtZXMve293bmVyTmFtZX0ve3Rva2VufSdcbmBgYFxuXG4qKlJlc3BvbnNlKipcblxuYGBgamF2YXNjcmlwdFxuW1xuICB7XG4gICAgICBcInJlYWRtZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJyZXBvc2l0b3J5TmFtZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJyZXBvc2l0b3J5T3duZXJcIjogXCJzdHJpbmdcIlxuICB9XG4gIHtcbiAgICAgIFwicmVhZG1lXCI6IFwic3RyaW5nXCIsXG4gICAgICBcInJlcG9zaXRvcnlOYW1lXCI6IFwic3RyaW5nXCIsXG4gICAgICBcInJlcG9zaXRvcnlPd25lclwiOiBcInN0cmluZ1wiXG4gIH1cbl1cbmBgYFxuXG4jIyMgRXhhbXBsZVxuXG5UbyByZXRyaWV2ZSB0aGUgYFJFQURNRS5tZGAgZm9yIGFsbCBvZiBteSByZXBvc2l0b3JpZXMsIHdlIHdpbGwgdXNlIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbi0gb3duZXJOYW1lOiBgYnJtaW5uaWNrYFxuLSB0b2tlbjogYGRlYmRkZjEyNjExNWQ1ZjE5MzUyNmE3ZjI5ZmU5ODBlNTI1ZTQ5N2VgXG5cbj4gKipOb3RlOioqIFRoaXMgZXhhbXBsZSBpcyBub3QgdXNpbmcgYSByZWFsIHRva2VuLiBZb3UgY2FuIFtjcmVhdGUgeW91ciB0b2tlbiBieSBmb2xsb3dpbmcgdGhlc2Ugc3RlcHNdKGh0dHBzOi8vaGVscC5naXRodWIuY29tL2FydGljbGVzL2NyZWF0aW5nLWEtcGVyc29uYWwtYWNjZXNzLXRva2VuLWZvci10aGUtY29tbWFuZC1saW5lLyNjcmVhdGluZy1hLXRva2VuKS5cblxuYGBgYmFzaFxuY3VybCAtLXJlcXVlc3QgR0VUICdodHRwczovL2dpdGh1YnJlYWRtZXJldHJpZXZlci5henVyZXdlYnNpdGVzLm5ldC9hcGkvR2V0UmVhZG1lcy9icm1pbm5pY2svZGViZGRmMTI2MTE1ZDVmMTkzNTI2YTdmMjlmZTk4MGU1MjVlNDk3ZSdcbmBgYFxuXG5gYGBqYXZhc2NyaXB0XG5bXG4gIHtcbiAgICAgIFwicmVhZG1lXCI6IFwiIyBBc3luY0F3YWl0QmVzdFByYWN0aWNlc1xcblxcblshW0J1aWxkIFN0YXR1c10oaHR0cHM6Ly9icm1pbm5pY2sudmlzdWFsc3R1ZGlvLmNvbS9Bc3luY0F3YWl0QmVzdFByYWN0aWNlcy9fYXBpcy9idWlsZC9zdGF0dXMvQXN5bmNBd2FpdEJlc3RQcmFjdGljZXMtLk5FVCUyMERlc2t0b3AtQ0kpXShodHRwczovL2JybWlubmljay52aXN1YWxzdHVkaW8uY29tL0FzeW5jQXdhaXRCZXN0UHJhY3RpY2VzL19idWlsZC9sYXRlc3Q/ZGVmaW5pdGlvbklkPTUpXFxuXFxuLi4uXCIsXG4gICAgICBcInJlcG9zaXRvcnlOYW1lXCI6IFwiQXN5bmNBd2FpdEJlc3RQcmFjdGljZXNcIixcbiAgICAgIFwicmVwb3NpdG9yeU93bmVyXCI6IFwiYnJtaW5uaWNrXCJcbiAgfVxuICB7XG4gICAgICBcInJlYWRtZVwiOiBcIjxkaXYgY2xhc3M9XFxcImhlYWRlclxcXCIgYWxpZ249XFxcImNlbnRlclxcXCI+XFxuICA8aDEgYWxpZ249XFxcImNlbnRlclxcXCI+R2l0VHJlbmRzOiBHaXRIdWIgSW5zaWdodHM8L2gxPlxcbjwvZGl2PlxcbjxwIGFsaWduPVxcXCJjZW50ZXJcXFwiPlxcbiAgPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9HaXRUcmVuZHNBcHBcXFwiPlxcbi4uLlwiLFxuICAgICAgXCJyZXBvc2l0b3J5TmFtZVwiOiBcIkdpdFRyZW5kc1wiLFxuICAgICAgXCJyZXBvc2l0b3J5T3duZXJcIjogXCJicm1pbm5pY2tcIlxuICB9XG4gIHtcbiAgICAgIFwicmVhZG1lXCI6IFwiPGRpdiBjbGFzcz1cXFwiaGVhZGVyXFxcIiBhbGlnbj1cXFwiY2VudGVyXFxcIj5cXG4gIDxoMSBhbGlnbj1cXFwiY2VudGVyXFxcIj5HaXRIdWIgUmVhZG1lIFJldHJpZXZlcjwvaDE+XFxuPC9kaXY+Li4uXCIsXG4gICAgICBcInJlcG9zaXRvcnlOYW1lXCI6IFwiR2l0SHViUmVhZG1lUmV0cmlldmVyXCIsXG4gICAgICBcInJlcG9zaXRvcnlPd25lclwiOiBcImJybWlubmlja1wiXG4gIH1cbl1cbmBgYFxuXG5cbiMjIFJlc291cmNlc1xuXG5DbG91ZCBCYWNrZW5kXG4tIFsuTkVUIENvcmVdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2RvdG5ldC9jb3JlLz9XVC5tY19pZD1naXRodWJyZWFkbWVyZXRyaWV2ZXItZ2l0aHViLWJyYW1pbikgLSBhbiBbb3Blbi1zb3VyY2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9kb3RuZXQvY29yZSksIGdlbmVyYWwtcHVycG9zZSBkZXZlbG9wbWVudCBwbGF0Zm9ybSBtYWludGFpbmVkIGJ5IE1pY3Jvc29mdCBhbmQgdGhlIC5ORVQgY29tbXVuaXR5IG9uIFtHaXRIdWJdKGh0dHBzOi8vZ2l0aHViLmNvbS9kb3RuZXQvY29yZSlcbi0gW0F6dXJlIEZ1bmN0aW9uc10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvYXp1cmUtZnVuY3Rpb25zLz9XVC5tY19pZD1naXRodWJyZWFkbWVyZXRyaWV2ZXItZ2l0aHViLWJyYW1pbikgLSBhIHNlcnZlcmxlc3MgY29tcHV0ZSBzZXJ2aWNlIHRoYXQgbGV0cyB5b3UgcnVuIGV2ZW50LXRyaWdnZXJlZCBjb2RlIHdpdGhvdXQgaGF2aW5nIHRvIGV4cGxpY2l0bHkgcHJvdmlzaW9uIG9yIG1hbmFnZSBpbmZyYXN0cnVjdHVyZVxuLSBbQXp1cmUgRnVuY3Rpb25zIERlcGVuZGVuY3kgSW5qZWN0aW9uXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1mdW5jdGlvbnMvZnVuY3Rpb25zLWRvdG5ldC1kZXBlbmRlbmN5LWluamVjdGlvbj9XVC5tY19pZD1naXRodWJyZWFkbWVyZXRyaWV2ZXItZ2l0aHViLWJyYW1pbikgLSBBenVyZSBGdW5jdGlvbnMgc3VwcG9ydHMgdGhlIGRlcGVuZGVuY3kgaW5qZWN0aW9uIChESSkgc29mdHdhcmUgZGVzaWduIHBhdHRlcm4sIHdoaWNoIGlzIGEgdGVjaG5pcXVlIHRvIGFjaGlldmUgW0ludmVyc2lvbiBvZiBDb250cm9sIChJb0MpXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9kb3RuZXQvc3RhbmRhcmQvbW9kZXJuLXdlYi1hcHBzLWF6dXJlLWFyY2hpdGVjdHVyZS9hcmNoaXRlY3R1cmFsLXByaW5jaXBsZXM/V1QubWNfaWQ9Z2l0aHVicmVhZG1lcmV0cmlldmVyLWdpdGh1Yi1icmFtaW4jZGVwZW5kZW5jeS1pbnZlcnNpb24pIGJldHdlZW4gY2xhc3NlcyBhbmQgdGhlaXIgZGVwZW5kZW5jaWVzXG4tIFtQb2xseSArIEh0dHBDbGllbnRGYWN0b3J5XShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9kb3RuZXQvYXJjaGl0ZWN0dXJlL21pY3Jvc2VydmljZXMvaW1wbGVtZW50LXJlc2lsaWVudC1hcHBsaWNhdGlvbnMvaW1wbGVtZW50LWh0dHAtY2FsbC1yZXRyaWVzLWV4cG9uZW50aWFsLWJhY2tvZmYtcG9sbHk/V1QubWNfaWQ9Z2l0aHVicmVhZG1lcmV0cmlldmVyLWdpdGh1Yi1icmFtaW4pIC0gdGhlIHJlY29tbWVuZGVkIGFwcHJvYWNoIGZvciByZXRyaWVzIHdpdGggZXhwb25lbnRpYWwgYmFja29mZiBpcyB0byB0YWtlIGFkdmFudGFnZSBvZiBtb3JlIGFkdmFuY2VkIC5ORVQgbGlicmFyaWVzXG4tIFtSZWZpdCArIEh0dHBDbGllbnRGYWN0b3J5XShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9hc3BuZXQvY29yZS9mdW5kYW1lbnRhbHMvaHR0cC1yZXF1ZXN0cz9XVC5tY19pZD1naXRodWJyZWFkbWVyZXRyaWV2ZXItZ2l0aHViLWJyYW1pbiNnZW5lcmF0ZWQtY2xpZW50cykgLSBgSUh0dHBDbGllbnRGYWN0b3J5YCBjYW4gYmUgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIHRoaXJkLXBhcnR5IGxpYnJhcmllcyBzdWNoIGFzIFJlZml0XG5cbiMjIEF1dGhvclxuXG7wn5GkICoqQnJhbmRvbiBNaW5uaWNrKipcblxuLSAgIFR3aXR0ZXI6IFtAVGhlQ29kZVRyYXZlbGVyXShodHRwczovL3R3aXR0ZXIuY29tL1RoZUNvZGVUcmF2ZWxlcilcbi0gICBCbG9nOiBodHRwczovL2NvZGV0cmF2ZWxlci5pb1xuLSAgIEdpdGh1YjogW0Bicm1pbm5pY2tdKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2spXG5cbiMjIFNob3cgeW91ciBzdXBwb3J0XG5cbuKtkO+4jyBbU3RhciB0aGUgR2l0SHViIFJlcG9dKGh0dHBzOi8vZ2l0aHViLmNvbS9icm1pbm5pY2svR2l0SHViUmVhZG1lUmV0cmlldmVyLykgPGJyLz5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxMDI0NzQxNC1kOWEwLTQwY2UtODg0Ny03YjczZDNiOGI3M2YiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVNREU1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXIxLXNuaXBwZXRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY2ZDYyMzY0NTM0ZGRiNmZjZDNkZmVhOWQxOTQ0ZGQ1MGRmMmY0ZDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qVXdPRFV4TmpjPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2VydmVybGVzcy1jaGFsbGVuZ2VzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQwNTI2OWNlMGEwZjM4ODNkMGE3ODJiNDMyNzM4MDU1ODY1YWM3MDciLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIDI1IERheXMgb2Ygc2VydmVybGVzc1xuXG5UaGlzIHJlcG9zaXRvcnkgaGFzIG5vdyBhIG5ldyBob21lIGF0IFtodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3NlcnZlcmxlc3MtY2hhbGxlbmdlc10oaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9zZXJ2ZXJsZXNzLWNoYWxsZW5nZXMpIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImMzY2FiZWY2LWUzNDQtNDZlZi04Zjg1LWQ0MTc1YWRmZDUzZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5URTBNVEEzTlRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkNvbGxlY3Rpb25WaWV3Rm9vdGVyUmVmcmVzaFZpZXdSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyMGVjZjMwZjc3NTVlYjRmMTllZGUxZjdhYjA2YjNlMTM5NTRkNGQ5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBDb2xsZWN0aW9uVmlld0Zvb3RlclJlZnJlc2hWaWV3UmVwcm9cbiBSZXByb2R1Y3Rpb24gc2FtcGxlIGZvciBgWGFtYXJpbi5Gb3Jtcy5Db2xsZWN0aW9uVmlld2AgYnVnLlxuIFxuIFdoZW4gYSBgRm9vdGVyYCBpcyBhZGRlZCB0byBhIGBDb2xsZWN0aW9uVmlld2AgaW5zaWRlIG9mIGEgYFJlZnJlc2hWaWV3YCwgdGhlIFJlZnJlc2ggSW5kaWNhdG9yIGlzIG5vIGxvbmdlciB2aXNpYmxlXG4gXG4gIyMgUmVwcm9kdWN0aW9uIFN0ZXBzXG4gXG4xLiBEb3dubG9hZCAvIENsb25lIHRoaXMgcmVwb1xuMi4gSW4gVmlzdWFsIFN0dWRpbywgb3BlbiBDb2xsZWN0aW9uVmlld0Zvb3RlclJlZnJlc2hWaWV3UmVwcm8uc2xuXG4zLiBCdWlsZCAvIGRlcGxveSBDb2xsZWN0aW9uVmlld0Zvb3RlclJlZnJlc2hWaWV3UmVwcm8uaU9TIHRvIGFuIGlPUyBTaW11bGF0b3Igb3IgRGV2aWNlXG40LiBPbiB0aGUgaU9TIEFwcCwgc2VsZWN0IGBDb2xsZWN0aW9uVmlldyB3aXRob3V0IEZvb3RlcmBcbjUuIE9uIHRoZSBObyBGb290ZXIgcGFnZSwgY29uZmlybSB0aGUgUmVmcmVzaCBJbmRpY2F0b3IgaXMgdmlzaWJsZVxuNi4gT24gdGhlIE5vIEZvb3RlciBwYWdlLCBhZnRlciB0aGUgbGlzdCBoYXMgZmluaXNoZWQgcmVmcmVzaGluZywgcHVsbC10by1yZWZyZXNoIG9uIHRoZSBsaXN0XG43LiBPbiB0aGUgTm8gRm9vdGVyIHBhZ2UsIGNvbmZpcm0gdGhlIFJlZnJlc2ggSW5kaWNhdG9yIGlzIHZpc2libGVcbjguIE9uIHRoZSBObyBGb290ZXIgcGFnZSwgY2xpY2sgdGhlIGJhY2sgYnV0dG9uXG45LiBPbiB0aGUgaU9TIEFwcCwgc2VsZWN0IGBDb2xsZWN0aW9uVmlldyB3aXRoIEZvb3RlcmBcbjEwLiBPbiB0aGUgV2l0aCBGb290ZXIgcGFnZSwgY29uZmlybSB0aGUgUmVmcmVzaCBJbmRpY2F0b3IgaXMgbm90IHZpc2libGVcbjExLiBPbiB0aGUgV2l0aCBGb290ZXIgcGFnZSwgYWZ0ZXIgdGhlIGxpc3QgaGFzIGZpbmlzaGVkIHJlZnJlc2hpbmcsIHB1bGwtdG8tcmVmcmVzaCBvbiB0aGUgbGlzdFxuMTIuIE9uIHRoZSBXaXRoIEZvb3RlciBwYWdlLCBjb25maXJtIHRoZSB2ZXJ0aWNhbCBsaXN0IGFsaWdubWVudCBoYXMgc2hpZnRlZCBhYm92ZSB0aGUgbmF2aWdhdGlvbiBiYXJcblxuXG4hW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvNzc5NTU2NTItNmIwNjE5MDAtNzI4NS0xMWVhLThkMGItYzZhOGMxNjU3ZDMyLmdpZilcblxuIyMgRW52aXJvbm1lbnRcblxuPT09IFZpc3VhbCBTdHVkaW8gRW50ZXJwcmlzZSAyMDE5IGZvciBNYWMgKFByZXZpZXcpID09PVxuXG5WZXJzaW9uIDguNiBQcmV2aWV3ICg4LjYgYnVpbGQgMzQzNylcbkluc3RhbGxhdGlvbiBVVUlEOiBhNDRkNDIwNC04OTgzLTQ2M2UtYjVkZi1iNDJjYTZlZWE2ZDRcblx0R1RLKyAyLjI0LjIzIChSYWxlaWdoIHRoZW1lKVxuXHRYYW1hcmluLk1hYyA2LjE4LjAuMjEgKGQxNi02IC8gYTg3ZDYzYzA2KVxuXG5cdFBhY2thZ2UgdmVyc2lvbjogNjEwMDAwMDk1XG5cbj09PSBNb25vIEZyYW1ld29yayBNREsgPT09XG5cblJ1bnRpbWU6XG5cdE1vbm8gNi4xMC4wLjk1ICgyMDE5LTEyL2YyMzc5ZjJkNjY1KSAoNjQtYml0KVxuXHRQYWNrYWdlIHZlcnNpb246IDYxMDAwMDA5NVxuXG49PT0gUm9zbHluIChMYW5ndWFnZSBTZXJ2aWNlKSA9PT1cblxuMy42LjAtMi4yMDE2NC40KzkyM2I0YmRiYmQzMzMwNzQ1NjQ2NGY0YzkwMjIyYTYxYWYyNzg5NzJcblxuPT09IE51R2V0ID09PVxuXG5WZXJzaW9uOiA1LjQuMC42MzE1XG5cbj09PSAuTkVUIENvcmUgU0RLID09PVxuXG5TREs6IC91c3IvbG9jYWwvc2hhcmUvZG90bmV0L3Nkay8zLjEuMjAwL1Nka3NcblNESyBWZXJzaW9uczpcblx0My4xLjIwMFxuXHQzLjEuMTAyXG5cdDMuMC4xMDFcblx0Mi4xLjgwM1xuTVNCdWlsZCBTREtzOiAvTGlicmFyeS9GcmFtZXdvcmtzL01vbm8uZnJhbWV3b3JrL1ZlcnNpb25zLzYuMTAuMC9saWIvbW9uby9tc2J1aWxkL0N1cnJlbnQvYmluL1Nka3NcblxuPT09IC5ORVQgQ29yZSBSdW50aW1lID09PVxuXG5SdW50aW1lOiAvdXNyL2xvY2FsL3NoYXJlL2RvdG5ldC9kb3RuZXRcblJ1bnRpbWUgVmVyc2lvbnM6XG5cdDUuMC4wLXByZXZpZXcuMS4yMDEyMC41XG5cdDMuMS4yXG5cdDMuMS4xXG5cdDMuMS4wXG5cdDMuMC4xXG5cdDIuMS4xNlxuXHQyLjEuMTVcblx0Mi4xLjE0XG5cbj09PSBYYW1hcmluLlByb2ZpbGVyID09PVxuXG5WZXJzaW9uOiAxLjYuMTMuMTFcbkxvY2F0aW9uOiAvQXBwbGljYXRpb25zL1hhbWFyaW4gUHJvZmlsZXIuYXBwL0NvbnRlbnRzL01hY09TL1hhbWFyaW4gUHJvZmlsZXJcblxuPT09IFVwZGF0ZXIgPT09XG5cblZlcnNpb246IDExXG5cbj09PSBBcHBsZSBEZXZlbG9wZXIgVG9vbHMgPT09XG5cblhjb2RlIDExLjQgKDE2MTM0KVxuQnVpbGQgMTFFMTQ2XG5cbj09PSBYYW1hcmluLk1hYyA9PT1cblxuWGFtYXJpbi5NYWMgbm90IGluc3RhbGxlZC4gQ2FuJ3QgZmluZCAvTGlicmFyeS9GcmFtZXdvcmtzL1hhbWFyaW4uTWFjLmZyYW1ld29yay9WZXJzaW9ucy9DdXJyZW50L1ZlcnNpb24uXG5cbj09PSBYYW1hcmluLmlPUyA9PT1cblxuVmVyc2lvbjogMTMuMTguMC4yMSAoVmlzdWFsIFN0dWRpbyBFbnRlcnByaXNlKVxuSGFzaDogYTg3ZDYzYzA2XG5CcmFuY2g6IGQxNi02XG5CdWlsZCBkYXRlOiAyMDIwLTAzLTAyIDExOjE3OjA1LTA1MDBcblxuPT09IFhhbWFyaW4gRGVzaWduZXIgPT09XG5cblZlcnNpb246IDE2LjYuMC4yNjdcbkhhc2g6IGZhMjdkYzdjZVxuQnJhbmNoOiByZW1vdGVzL29yaWdpbi9kMTYtNlxuQnVpbGQgZGF0ZTogMjAyMC0wMy0xOSAyMDoyNjoxNCBVVENcblxuPT09IFhhbWFyaW4uQW5kcm9pZCA9PT1cblxuVmVyc2lvbjogMTAuMy4wLjMzIChWaXN1YWwgU3R1ZGlvIEVudGVycHJpc2UpXG5Db21taXQ6IHhhbWFyaW4tYW5kcm9pZC9kMTYtNi9lOWZhOGM0XG5BbmRyb2lkIFNESzogL1VzZXJzL2JyYW1pbi9MaWJyYXJ5L0RldmVsb3Blci9YYW1hcmluL2FuZHJvaWQtc2RrLW1hY29zeFxuXHRTdXBwb3J0ZWQgQW5kcm9pZCB2ZXJzaW9uczpcblx0XHQ3LjAgKEFQSSBsZXZlbCAyNClcblxuU0RLIFRvb2xzIFZlcnNpb246IDI2LjEuMVxuU0RLIFBsYXRmb3JtIFRvb2xzIFZlcnNpb246IDI5LjAuNVxuU0RLIEJ1aWxkIFRvb2xzIFZlcnNpb246IDI5LjAuMlxuXG5CdWlsZCBJbmZvcm1hdGlvbjogXG5Nb25vOiBkOTA2NjVhXG5KYXZhLkludGVyb3A6IHhhbWFyaW4vamF2YS5pbnRlcm9wL2QxNi02QDJjYWIzNWNcblByb0d1YXJkOiB4YW1hcmluL3Byb2d1YXJkL21hc3RlckA5MDU4MzZkXG5TUUxpdGU6IHhhbWFyaW4vc3FsaXRlLzMuMzEuMUA0OTIzMmJjXG5YYW1hcmluLkFuZHJvaWQgVG9vbHM6IHhhbWFyaW4veGFtYXJpbi1hbmRyb2lkLXRvb2xzL2QxNi02QGJmYjY2ZjNcblxuPT09IE1pY3Jvc29mdCBNb2JpbGUgT3BlbkpESyA9PT1cblxuSmF2YSBTREs6IC9Vc2Vycy9icmFtaW4vTGlicmFyeS9EZXZlbG9wZXIvWGFtYXJpbi9qZGsvbWljcm9zb2Z0X2Rpc3Rfb3Blbmpka18xLjguMC4yNVxuMS44LjAtMjVcbkFuZHJvaWQgRGVzaWduZXIgRVBMIGNvZGUgYXZhaWxhYmxlIGhlcmU6XG5odHRwczovL2dpdGh1Yi5jb20veGFtYXJpbi9BbmRyb2lkRGVzaWduZXIuRVBMXG5cbj09PSBBbmRyb2lkIFNESyBNYW5hZ2VyID09PVxuXG5WZXJzaW9uOiAxNi42LjAuNDZcbkhhc2g6IGY2YmZhN2JcbkJyYW5jaDogcmVtb3Rlcy9vcmlnaW4vZDE2LTZcbkJ1aWxkIGRhdGU6IDIwMjAtMDMtMTMgMDA6MTM6MzAgVVRDXG5cbj09PSBBbmRyb2lkIERldmljZSBNYW5hZ2VyID09PVxuXG5WZXJzaW9uOiAxNi42LjAuNzVcbkhhc2g6IDQ1MDljNTNcbkJyYW5jaDogcmVtb3Rlcy9vcmlnaW4vZDE2LTZcbkJ1aWxkIGRhdGU6IDIwMjAtMDMtMTMgMDA6MTM6NTIgVVRDXG5cbj09PSBYYW1hcmluIEluc3BlY3RvciA9PT1cblxuVmVyc2lvbjogMS40LjNcbkhhc2g6IGRiMjc1MjVcbkJyYW5jaDogMS40LXJlbGVhc2VcbkJ1aWxkIGRhdGU6IE1vbiwgMDkgSnVsIDIwMTggMjE6MjA6MTggR01UXG5DbGllbnQgY29tcGF0aWJpbGl0eTogMVxuXG49PT0gQnVpbGQgSW5mb3JtYXRpb24gPT09XG5cblJlbGVhc2UgSUQ6IDgwNjAwMzQzN1xuR2l0IHJldmlzaW9uOiBiNmUyM2EyN2MxOGEzZTZmOGViNjIwZmYxODE0ZmI3NmIzZjQ3OTIxXG5CdWlsZCBkYXRlOiAyMDIwLTAzLTIwIDExOjM5OjQwLTA0XG5CdWlsZCBicmFuY2g6IHJlbGVhc2UtOC42XG5YYW1hcmluIGV4dGVuc2lvbnM6IGI2ZTIzYTI3YzE4YTNlNmY4ZWI2MjBmZjE4MTRmYjc2YjNmNDc5MjFcblxuPT09IE9wZXJhdGluZyBTeXN0ZW0gPT09XG5cbk1hYyBPUyBYIDEwLjE1LjRcbkRhcndpbiAxOS40LjAgRGFyd2luIEtlcm5lbCBWZXJzaW9uIDE5LjQuMFxuICAgIFdlZCBNYXIgIDQgMjI6Mjg6NDAgUFNUIDIwMjBcbiAgICByb290OnhudS02MTUzLjEwMS42fjE1L1JFTEVBU0VfWDg2XzY0IHg4Nl82NFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiQnJhbmRvbiBNaW5uaWNrIiwKICAgICJVc2VyTmFtZSI6ICJicm1pbm5pY2siLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImJyYW1pbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOGU1OGFkZDktNGJkNi00NWJjLThjYjctNmZlYTFmNjFjNDQ0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qTXhPVFk0TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUmVhZGluZ0J1ZGRpZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjljMGQwMzQ2OTYyMTBiNjJjMzM3NDM2OWM2ODFmMDIzOTY5NGJlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9UTXdPRGM1Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci0yLWZpcnN0LWxvb2stbGF1bmNoZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTYzNzVhY2U4N2UwN2M5ZWFlNTBkMjNkMzFhMWZlZDI1MDVmZDk0ZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qYzNNREUxTlRBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiMjVkYXlzb2ZzZXJ2ZXJsZXNzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjAzNTBiYjJjYzUyYzRmMjVmNzM4ZjY4OGU2NjAzODk0NWJmN2M3YzMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIDI1ZGF5c29mc2VydmVybGVzc1xuXG4xLiBJbiB0aGUgQXp1cmUgUG9ydGFsOlxuQ3JlYXRlIGEgZnVuY3Rpb24gYXBwIHdoaWNoIHlvdSB3aWxsIHVzZSBpbiB0aGUgbmV4dCBzdGVwc1xuVW5kZXIgdGhlIGFzc29jaWF0ZWQgc3RvcmFnZSBhY2NvdW50IGZvciB0aGUgZnVuY3Rpb24gY3JlYXRlIGEgY29udGFpbmVyIG5hbWVkIGBqb2tlc2BcblxuMS4gQ2xvbmUgcmVwb1xuYGBgYmFzaFxuZ2l0IGNsb25lIGdpdEBnaXRodWIuY29tOnNpbW9uYWNvLzI1ZGF5c29mc2VydmVybGVzcy5naXRcbmNkIDI1ZGF5c29mc2VydmVybGVzc1xubnB4IGZ1bmMgYXp1cmUgZnVuY3Rpb25hcHAgcHVibGlzaCA8eW91ci1mdW5jdGlvbi1uYW1lPiAtLXB5dGhvblxuYGBgXG5cbjEuIFRyYWluIHRoZSBtb2RlbCB0aGF0IHlvdSB3aWxsIHVwbG9hZCB0byB0aGUgY3JlYXRlZCBzdG9yYWdlIGNvbnRhaW5lclxuYGBgYmFzaFxucHl0aG9uMy43IC1tIHZlbnYgLnZlbnZcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbnBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQgICMgaW5zaWRlIHRoZSAyNWRheXNvZnNlcnZlcmxlc3MgZm9sZGVyXG5weXRob24gY3JlYXRlX21vZGVsLnB5ICAgICAgICAjIHRyYWlucyB0aGUgbW9kZWwgZm9yIHRoYXQgeW91IHdpbGwgdXNlIGZvciB5b3VyIEFQSVxuYGBgXG5cbjEuIEdvIHRvIHRoZSBzdG9yYWdlIHNlY3Rpb24gaW4gdGhlIGF6dXJlIHBvcnRhbCBhbmQgdXBsb2FkIHRoZSByZXN1bHRpbmcgYHRleHRnZW5ybm5fd2VpZ2h0cy5oZGY1YFxuXG4xLiBUaGlzIHNob3VsZCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiB0byBleGVjdXRlLiBJZiBldmVyeXRoaW5nIGhhcyB3b3JrZWQgdGhlbiB5b3Ugc2hvdWxkIHNlZSBubyBlcnJvcnMgaW4gdGhlIExpdmUgTWV0cmljcyBzdHJlYW0uXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDQwMGM5NWUtM2NjZC00MWEzLTgyNTUtMzUyMDBhMTExNzE4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9Ua3dNelEzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c3RvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyNzM5MjcxMTExNDU1Mzc0ZmY3ZGUxYjI1NzgxMmQ5Njk1Mjk0MTc2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU1ESXlNRFE1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWV4YW1wbGVzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg5ZjRiZjJmYzQ1NDgzODI0OGY4OWU4ODY0MmE3MjA3NTRjMTVjYTgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU5EWTNOekkyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmcyLWtlc3RyZWwtYXBwc2VydmVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjU0OTM4NDE4NzA0NTk3YjA2MGFlNjI2OTdlNTk1YzI0YTk2NjliMWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU9EQTNNVEF4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhcjItZm9yY2UiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTRkM2U4N2M4ZWZhOWUxNjcyYWY3NmQ3MDM2NTBkZmI0ODgxMzNiYSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5EUXpNalUwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLXBsYXkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjU1MDY4NWQ2MWQ3Y2VjZDY5MjRkYTA5ZTE0ZTM3ZjI1ODgyNWNhZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5UazFOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3RhcndhcnMtaW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI3ZWJjZjEwMDdmZTZjOTJmNzRmNGI3N2VmYmZmMjhkMGJiMGQzMzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UUTFOall3Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY29kZS13aXRoLXVzLWFuZ3VsYXItcXVpY2tzdGFydCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxMWUwOWQ2MDVkY2Y0ZTU5OGFmNTg0ZTc3NGFkOWRjNDc0NGU2MDVmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM05UazVNVGt4TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaW9zLWZhdm9yaXRlLW1vdmllcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIzNjJlYzEyNTM2YmRhMWMyZGY4ZjU5NWY0MWRjYThlMGY1OGVjNDhhIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09EUTBOamcwTUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXp1cmUtZG9jcy1zZGstbm9kZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjEwNjViMjk2MDgwMDkzNWMwN2I1NzMwMzg0ZWFkY2I1MDdmODU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWF6dXJlLWZ1bmN0aW9ucy10b29scyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56QXdORE00TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NmJmOWE1OTkwYTI4NGYzOWZhOTI3NTA4YjZjYWZhMzQ3MGY3YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56Z3pNRGc0Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiU3RpY2tlckFwcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJmZWMzYTZhYjk5MmFiOGFjMTI4N2JlMTMyMTY4MDY0MGMyNWMxMTQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3Rhci13YXJzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1qRXlNRFF6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXItZXNzZW50aWFscyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhZjUzNTRlNGYyZGU1YzJhMzI0Zjc0MDhmMDBkNmM5MTlhYmIwMmUzIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16QXdOelUwTnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicHdhLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZjZiMjIyYzUxYWFhOGFmNjQ1YWJiYTFkOTg0NmQ4ZmVmZjdmNTg2MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UUTFNemsyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWdncmVnYXRvci1hcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzAxOTI1OGVlMmIxZWRhZmY4YjNhOWRlNzgzMmE1OGU4MDcxNmIyNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTNOakUwTWpNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZG9ja2VyLWFuZ3VsYXItY2xpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhNTU2Y2UyY2I4MmY0MTY2NWVhNzg3ZGJkYTc2OGIxYjIyY2QwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UUTJNekExTVRFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic2NoZWR1bGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjI1NDI1NGUxNDBhNjUxNGIwZWJjYWE4ZWVjMGU3YTE4ZDc3ODBjZjkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFNjaGVkdWxlclxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gOC4zLjIxLlxuXG4jIyBEZXZlbG9wbWVudCBzZXJ2ZXJcblxuUnVuIGBuZyBzZXJ2ZWAgZm9yIGEgZGV2IHNlcnZlci4gTmF2aWdhdGUgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9gLiBUaGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSByZWxvYWQgaWYgeW91IGNoYW5nZSBhbnkgb2YgdGhlIHNvdXJjZSBmaWxlcy5cblxuIyMgQ29kZSBzY2FmZm9sZGluZ1xuXG5SdW4gYG5nIGdlbmVyYXRlIGNvbXBvbmVudCBjb21wb25lbnQtbmFtZWAgdG8gZ2VuZXJhdGUgYSBuZXcgY29tcG9uZW50LiBZb3UgY2FuIGFsc28gdXNlIGBuZyBnZW5lcmF0ZSBkaXJlY3RpdmV8cGlwZXxzZXJ2aWNlfGNsYXNzfGd1YXJkfGludGVyZmFjZXxlbnVtfG1vZHVsZWAuXG5cbiMjIEJ1aWxkXG5cblJ1biBgbmcgYnVpbGRgIHRvIGJ1aWxkIHRoZSBwcm9qZWN0LiBUaGUgYnVpbGQgYXJ0aWZhY3RzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZGlzdC9gIGRpcmVjdG9yeS4gVXNlIHRoZSBgLS1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG5cbiMjIFJ1bm5pbmcgdW5pdCB0ZXN0c1xuXG5SdW4gYG5nIHRlc3RgIHRvIGV4ZWN1dGUgdGhlIHVuaXQgdGVzdHMgdmlhIFtLYXJtYV0oaHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvKS5cblxuIyMgUnVubmluZyBlbmQtdG8tZW5kIHRlc3RzXG5cblJ1biBgbmcgZTJlYCB0byBleGVjdXRlIHRoZSBlbmQtdG8tZW5kIHRlc3RzIHZpYSBbUHJvdHJhY3Rvcl0oaHR0cDovL3d3dy5wcm90cmFjdG9ydGVzdC5vcmcvKS5cblxuIyMgRnVydGhlciBoZWxwXG5cblRvIGdldCBtb3JlIGhlbHAgb24gdGhlIEFuZ3VsYXIgQ0xJIHVzZSBgbmcgaGVscGAgb3IgZ28gY2hlY2sgb3V0IHRoZSBbQW5ndWxhciBDTEkgUkVBRE1FXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9ibG9iL21hc3Rlci9SRUFETUUubWQpLlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjNhY2M0MmExLTUyZWEtNDQyZS05OTg4LTIyYzkxMWMwYmI4ZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTNOVEE0TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiY2RhLWxvY2FsZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1ZjkzMDEzMzU2MjM4MTcwYjJlY2I5MTE3OTBhZGViMTM1ZjFmMGU2IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5USTBNekUzTURnPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZHVyYWJsZWRheXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMWEyYTk0OTA2OTkwMjFhYTY2ZjY1YjFhOTc3MDVlNGVjODc2Y2M4MiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIjxoMSBhbGlnbj1cImNlbnRlclwiPldlbGNvbWUgdG8gRHVyYWJsZSBEYXlzIPCfkYs8L2gxPlxuPHA+XG4gIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28vZHVyYWJsZWRheXMvYmxvYi9tYXN0ZXIvTElDRU5TRVwiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgIDxpbWcgYWx0PVwiTGljZW5zZTogTUlUXCIgc3JjPVwiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9MaWNlbnNlLU1JVC15ZWxsb3cuc3ZnXCIgLz5cbiAgPC9hPlxuICA8YSBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9zaW1vbmFfY290aW5cIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICA8aW1nIGFsdD1cIlR3aXR0ZXI6IHNpbW9uYV9jb3RpblwiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vdHdpdHRlci9mb2xsb3cvc2ltb25hX2NvdGluLnN2Zz9zdHlsZT1zb2NpYWxcIiAvPlxuICA8L2E+XG48L3A+XG5cbj4gMzAgRGF5cyBvZiBEdXJhYmxlIGNoYWxsZW5nZVxuXG5UbyBsZWFybiBtb3JlIGFib3V0IER1cmFibGUgRnVuY3Rpb25zIGNoZWNrb3V0IHRoaXMgW292ZXJ2aWV3XShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1mdW5jdGlvbnMvZHVyYWJsZS8/V1QubWNfaWQ9ZHVyYWJsZWRheXMtZ2l0aHViLXNpY290aW4pXG5cbjEuIFNjaGVkdWxlciBBUEkgaW1wbGVtZW50ZWQgdXNpbmcgRHVyYWJsZSBGdW5jdGlvbnMgW1RpbWVyc10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2R1cmFibGUvZHVyYWJsZS1mdW5jdGlvbnMtdGltZXJzP3RhYnM9amF2YXNjcmlwdCZXVC5tY19pZD1kdXJhYmxlZGF5cy1naXRodWItc2ljb3RpbilcblxuMS4gSW1wbGVtZW50IFthdXRvbWF0aWMgcmV0cnkgb24gZmFpbHVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2R1cmFibGUvZHVyYWJsZS1mdW5jdGlvbnMtZXJyb3ItaGFuZGxpbmc/dGFicz1qYXZhc2NyaXB0I2F1dG9tYXRpYy1yZXRyeS1vbi1mYWlsdXJlJldULm1jX2lkPWR1cmFibGVkYXlzLWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBTdGF0dXMgQVBJIGltcGxlbWVudGVkIHVzaW5nIFtIVFRQIHRyaWdnZXJdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtYmluZGluZ3MtaHR0cC13ZWJob29rP1dULm1jX2lkPWR1cmFibGVkYXlzLWdpdGh1Yi1zaWNvdGluKSBhbmQgW1RhYmxlIFN0b3JhZ2VdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL2F6dXJlLWZ1bmN0aW9ucy9mdW5jdGlvbnMtYmluZGluZ3Mtc3RvcmFnZS10YWJsZT90YWJzPWphdmFzY3JpcHQmV1QubWNfaWQ9ZHVyYWJsZWRheXMtZ2l0aHViLXNpY290aW4jaW5wdXQpXG5cbiMjIEF1dGhvclxuXG7wn5GkICoqU2ltb25hIENvdGluKipcblxuLSBUd2l0dGVyOiBbQHNpbW9uYV9jb3Rpbl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9zaW1vbmFfY290aW4pXG4tIEdpdGh1YjogW0BzaW1vbmFjb10oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvKVxuXG4jIyDwn6SdIENvbnRyaWJ1dGluZ1xuXG5Db250cmlidXRpb25zLCBpc3N1ZXMgYW5kIGZlYXR1cmUgcmVxdWVzdHMgYXJlIHdlbGNvbWUhPGJyIC8+RmVlbCBmcmVlIHRvIGNoZWNrIFtpc3N1ZXMgcGFnZV0oaHR0cHM6Ly9naXRodWIuY29tL3NpbW9uYWNvL2R1cmFibGVkYXlzL2lzc3VlcykuXG5cbiMjIFNob3cgeW91ciBzdXBwb3J0XG5cbkdpdmUgYSDirZDvuI8gaWYgdGhpcyBwcm9qZWN0IGhlbHBlZCB5b3UhXG5cbiMjIPCfk50gTGljZW5zZVxuXG5Db3B5cmlnaHQgwqkgMjAyMCBbU2ltb25hIENvdGluXShodHRwczovL2dpdGh1Yi5jb20vc2ltb25hY28pLjxiciAvPlxuVGhpcyBwcm9qZWN0IGlzIFtNSVRdKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjby9kdXJhYmxlZGF5cy9ibG9iL21hc3Rlci9MSUNFTlNFKSBsaWNlbnNlZC5cblxuLS0tXG5cbl9UaGlzIFJFQURNRSB3YXMgZ2VuZXJhdGVkIHdpdGgg4p2k77iPIGJ5IFtyZWFkbWUtbWQtZ2VuZXJhdG9yXShodHRwczovL2dpdGh1Yi5jb20va2VmcmFuYWJnL3JlYWRtZS1tZC1nZW5lcmF0b3IpX1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImM3NmRiMTcyLWI4MWMtNDJiMC05N2VlLTBmZmMyYTExYmU4MSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5URXdOamMwTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiYXp1cmUtc3RhcnR1cHMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNTdjOTVlMThiZmI0NTU1OWU2YzM0MjZmZDJkYWFkMjU2NWIzNWViMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQXdlc29tZSByZXNvdXJjZXMgZm9yIHN0YXJ0dXBzXG5cbiMjIOKYge+4jyBGcmVlIENsb3VkIFNlcnZpY2VzXG5cbkF6dXJlIEZyZWUgU2VydmljZXMg4oCTIFttYWluIHBhZ2VdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9mcmVlP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKSAmIFtGQVFdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS9mcmVlL2ZyZWUtYWNjb3VudC1mYXEvP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKS4gRmV3IG5vdGFibGUgc2VydmljZXM6XG5cbjEuIENvZ25pdGl2ZSBBUElzIGZvciBidWlsZGluZyBpbnRlbGxpZ2VudCBhcHBsaWNhdGlvbnMgd2l0aCBbQXp1cmUgQ29nbml0aXZlIFNlcnZpY2VzXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vc2VydmljZXMvY29nbml0aXZlLXNlcnZpY2VzLz9XVC5tY19pZD1wYXJ0bmVycy1naXRodWItc2ljb3RpbilcblxuMS4gR2xvYmFsbHkgZGlzdHJpYnV0ZWQsIG11bHRpLW1vZGVsIGRhdGFiYXNlIHdpdGggW0F6dXJlIENvc21vcyBEQl0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL3VwZGF0ZXMvYXp1cmUtY29zbW9zLWRiLWZyZWUtdGllci1pcy1ub3ctYXZhaWxhYmxlLz9XVC5tY19pZD1wYXJ0bmVycy1naXRodWItc2ljb3RpbilcblxuMS4gU2VydmVybGVzcyBGdW5jdGlvbnMgd2l0aCBbQXp1cmUgRnVuY3Rpb25zXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1mdW5jdGlvbnMvP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKVxuXG4xLiBDb250aW51b3VzIEludGVncmF0aW9uIGFuZCBDb250aW5vdXMgRGVsaXZlcnkgKENJQ0QpIHdpdGggW0F6dXJlIERldk9wc10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL3NlcnZpY2VzL2Rldm9wcy8/V1QubWNfaWQ9cGFydG5lcnMtZ2l0aHViLXNpY290aW4pXG5cbjEuIChDb250YWluZXJzKSBbQXp1cmUgS3ViZXJuZXRlcyBTZXJ2aWNlXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vc2VydmljZXMva3ViZXJuZXRlcy1zZXJ2aWNlLz9XVC5tY19pZD1wYXJ0bmVycy1naXRodWItc2ljb3RpbilcblxuIyMg8J+nsCBGcmVlIFRvb2xzXG5cbjEuIE9ubGluZSBjb2xsYWJvcmF0aW9uIHdpdGggW1ZTIENvZGUgTGl2ZSBTaGFyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vdmlzdWFsc3R1ZGlvL2xpdmVzaGFyZS9xdWlja3N0YXJ0L2Jyb3dzZXItam9pbj9XVC5tY19pZD1wYXJ0bmVycy1naXRodWItc2ljb3RpbilcblxuMS4gQXV0b21hdGVkIFdvcmtmbG93cyB3aXRoIFtHaXRodWIgQWN0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL2ZlYXR1cmVzL2FjdGlvbnMpXG5cbjEuIFBhY2thZ2UgUmVnaXN0cnkgd2l0aCBbR2l0aHViIFBhY2thZ2VzXShodHRwczovL2dpdGh1Yi5jb20vZmVhdHVyZXMvcGFja2FnZXMpXG5cbiMjIPCfk5ogTGVhcm5pbmdcblxuMS4gW0Rlc2lnbmluZyBEaXN0cmlidXRlZCBTeXN0ZW1zXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vcmVzb3VyY2VzL2Rlc2lnbmluZy1kaXN0cmlidXRlZC1zeXN0ZW1zP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKSBieSBCcmVuZGFuIEJ1cm5zLCBjb2ZvdW5kZXIgb2YgdGhlIEt1YmVybmV0ZXMgcHJvamVjdFxuXG4xLiBbQXp1cmUgU2VydmVybGVzcyBDb29rYm9va10oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL3Jlc291cmNlcy9henVyZS1zZXJ2ZXJsZXNzLWNvbXB1dGluZy1jb29rYm9vay8/V1QubWNfaWQ9cGFydG5lcnMtZ2l0aHViLXNpY290aW4pXG5cbjEuIFtQbHVyYWxzaWdodCBjb3Vyc2VzIG9uIEF6dXJlXShodHRwczovL3d3dy5wbHVyYWxzaWdodC5jb20vcGFydG5lcnMvbWljcm9zb2Z0L2F6dXJlKVxuXG4xLiBbTWljcm9zb2Z0IExlYXJuXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9sZWFybi9icm93c2UvP1dULm1jX2lkPXBhcnRuZXJzLWdpdGh1Yi1zaWNvdGluKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjE0ZmQyNGMzLTBhYmYtNDYxOS1iM2ZjLTBiYzIyYTBkNGVjMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazNOak16TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNvc21vc2RiIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjM2ZTI2OWRhMDYwYjNiNWI1MzdjZWM1MDkwYWFjMGVlZWJlZmNkZTIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USXhNVFF4TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1uZ3J4LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FlOTVlMzc3NjliNzZlOTE2NzlhMmM5Nzk2MTY3MDNmY2NlODBlOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTFNelEyTURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c2UtYm90IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA4NTk1MzQ3YmVjZjJkYWYxNzU4NjBjY2I3NjFkOTFmMjNlOTNlMGYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTNOemMyT0RFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXdlc29tZS1hbmd1bGFyLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg1NGExNDZhYzBjODMxMWE3NmNiNGI0ZmQ5ZGJkOGQxN2MzNjYyMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTBORFF4TWpjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWR2YW5jZWQtZGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOGI5MDZmM2EwYWFhNTU5M2ViMTY0YjQ3ZjRhNjYxNDdhODNmOTY5NiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qTTBPVE0xTmpnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidmlraW5ncyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNTZiYjE3Mjc1NzRhYTNiMzhiMWRjNzg3ZDg5MmY0YTYwYWQwZWU4IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTJOVFk1TVRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kYXRhLWxhYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1MTk3NGQ1MjRhOGI3NWU1YTEyZWRiOTkxMzZjMzI1ZWVjNjIyNzg5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qUTRNRE0yTmpJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidGhyZWUtdnVlLXBhdHRlcm4iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiY2YwMDU5NWQ2ZmMzOTAxYzgxZDE0MmUyMDQ3NDU5OWI4MTE4NzBlZCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlOek13T0RBPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWV4dGVuc2lvbiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlYzU0MjkzYzIxMTE5OGNkMGIxYzE1MzcyNzY0MmQ3Njk1NTc4NjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlPRGMyTnpRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk1Y2Y2NTEwOTYwNDM5MGUzMDg5MzcwZDJhZDgwYzUxOTFmNDU4ZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNOall6T1RNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWludHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMyN2UyM2QzN2E2OTliNzM4MmM3NzA5Y2RhNWE4ZGY3NGExNzdjYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qY3lNamczTlRZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiTm9kZUpTV29ya3Nob3AiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODNmYmY2MzAyMmVmYjM0ODZiZTAxMDhjMDcxZDhhYjFmMjAzOTExNSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpNakF6TURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1hcmNoaXRlY3R1cmUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTYzYzNlNDY0NTdlMTQxZGRhNGUwZTVmZmNkNTBiZGYxODY5ZGI4YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16TTFOalkzTURjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXJ0aWNsZS1leHBsb3JlciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhOGQ1OTdkMWJiOTdiMDYyY2Q0NTk1MGMzZmQyYmFkNmZjN2Q5MjlmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ETTNPRGswTkRjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS1oZWxsbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NDRhZjQwNzkxOGQ0YjI1YzljN2RjMzg3NGFiY2E4M2JmMTdiODMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGd5T0RJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLXJlYWN0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY1NmRhYTFmOTgwZTA4MTYwY2E5ZGY4MzI3OWM4MTY1YmRjNDllNDIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGcwTURrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLW5vZGUtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NDNmYTEwYjcxZjBlNGM1NTMwNmIzNDRkOTA4NTU1ZWE4M2NiYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NTY3ZDVhZC00MzA4LTRjMjgtOWFmMC0yODIyOTQ4ZjQwMWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UVTRNVE0yTVRVPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLWFuZ3VsYXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODkxOWY0ZGI2MzI3MmEyNzI0YmM2YTNjNzUyMTNmNDY1OWQ2ZWQ5OSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UWXhNemMxTWpVPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLXZ1ZSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwOTRkOTEwNmYxMWRhYWFkYWNlNWMzZmI3NmY2MDcwMDA0OGZlNGNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTU2N2Q1YWQtNDMwOC00YzI4LTlhZjAtMjgyMjk0OGY0MDFkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQTVOVFV3TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWY0NjE1ZDNmNTlmNTI0ZjE5ZmY0OTU4ZTcxMjIwZGM2YWFmNGI3YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU1NjdkNWFkLTQzMDgtNGMyOC05YWYwLTI4MjI5NDhmNDAxZCIKfQ==ewogICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4OTAwM2NiZS1lOWQ2LTQ4YmEtOWUwMS03ZWIyNmQwNThkMWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qRTROalF5TXpZPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIlNpbXBsZUNTaGFycE1hcmt1cCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0NmIwYjZhMjg0Y2MwNDZmZTJjODcwZThiYmUxNzAzOWUwZWM1ZjM1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBTaW1wbGUgQyMgTWFya3VwXG4gQSBYYW1hcmluLkZvcm1zIGFwcCBkZW1vbnN0cmF0aW5nIFtDIyBNYXJrdXAgRXh0ZW5zaW9uc10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20veGFtYXJpbi94YW1hcmluLWZvcm1zL3VzZXItaW50ZXJmYWNlL2NzaGFycC1tYXJrdXAvP1dULm1jX2lkPVNpbXBsZUNTaGFycE1hcmt1cC1naXRodWItYnJhbWluKSwgYSBuZXcgd2F5IHRvIGNyZWF0ZSBmbHVlbnQgWGFtYXJpbi5Gb3JtcyBVSXMgaW4gQyMuXG4gXG5UaGlzIHNhbXBsZSB3YXMgY3JlYXRlZCBsaXZlIGR1cmluZyB0aGUgW0NvbG9nbmUgWGFtYXJpbiBVc2VyIEdyb3VwIG9uIDA2IE1heSAyMDIwXShodHRwczovL2NvZGV0cmF2ZWxlci5pby9jb2xvZ25lLWNzaGFycC11aS8pOlxuXG48cCBhbGlnbj1cImNlbnRlclwiPlxuICA8YSBocmVmPVwiaHR0cHM6Ly90ZWNobmljYWx2aWRlb3NzdG9yYWdlLmJsb2IuY29yZS53aW5kb3dzLm5ldC9hc3NldC1lODc4YTVlNi1jYjQ1LTQ4YjItYjQ0NC1jNGU5ZTJmYjdiYTkvQ3JlYXRpbmclMjBVSXMlMjBpbiUyMENTaGFycC5tcDQ/c3Y9MjAxNy0wNC0xNyZzcj1jJnNpPTMxOGU3NTI0LTY3MDItNDM0My05ZWUyLWQ5MmVkNjI4OTEwYyZzaWc9TTdHWE43S3UxUGZndVJZNWtUdkY4T2hpUDRFRkYyUWw0b0lwN2lheW51byUzRCZzdD0yMDIwLTA1LTA3VDIwJTNBMTElM0E1N1omc2U9MjEyMC0wNS0wN1QyMCUzQTExJTNBNTdaXCI+XG4gICAgPGltZyBzcmM9XCJodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy84MTIyNTc2OS1hMTJlNmIwMC04ZjllLTExZWEtODkxMy1kYjQzYzM5ZGRmMTIucG5nXCIgaGVpZ2h0PVwiMjUwXCIvPiBcbiA8L2E+XG48L3A+XG4gXG58IFhhbWFyaW4uRm9ybXMgQyMgVUkgfCBEZW1vIHxcbnwgLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0gfFxufCAhW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvODEyMjI3NDYtYTUwYmJlODAtOGY5OS0xMWVhLTk1MDEtY2M3OTQ0MjFmOWM4LnBuZykgfCAhW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvODEyMjMwNjUtMzg0NGY0MDAtOGY5YS0xMWVhLTk5NDctZGIzMzliYTdlODZkLmdpZikgfFxuXG4jIyMgQyMgTWFya3VwIFNhbXBsZSBBcHBzXG5cbi0gW0dpdFRyZW5kc10oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9HaXRUcmVuZHMpIC0gQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCB0byBtb25pdG9yIHRoZSB2aWV3cyBhbmQgY2xvbmVzIG9mIHlvdXIgR2l0SHViIHJlcG9zLiBBdmFpbGFibGUgb24gdGhlIGlPUyBBcHAgU3RvcmUgJiBHb29nbGUgUGxheSBTdG9yZS5cbi0gW1hhbUNvbnZlcnRlcl0oaHR0cHM6Ly9naXRodWIuY29tL2JybWlubmljay9YYW1Db252ZXJ0ZXIpIC0gQW4gaU9TIGFuZCBBbmRyb2lkIGFwcCBjcmVhdGVkIGluIFhhbWFyaW4uRm9ybXMgdXNpbmcgXG5cbiMjIyBMZWFybiBNb3JlXG5cbi0gW0MjIE1hcmt1cCBFeHRlbnNpb25zXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS94YW1hcmluL3hhbWFyaW4tZm9ybXMvdXNlci1pbnRlcmZhY2UvY3NoYXJwLW1hcmt1cC8/V1QubWNfaWQ9U2ltcGxlQ1NoYXJwTWFya3VwLWdpdGh1Yi1icmFtaW4pXG4tIFtNb2JpbGUgQmxhem9yIEJpbmRpbmdzXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9tb2JpbGUtYmxhem9yLWJpbmRpbmdzLz9XVC5tY19pZD1TaW1wbGVDU2hhcnBNYXJrdXAtZ2l0aHViLWJyYW1pbilcbi0gW0NvbWV0XShodHRwczovL2dpdGh1Yi5jb20vQ2xhbmNleS9Db21ldClcbi0gW09yaWdpbmFsIENTaGFycEZvck1hcmt1cCBieSBWaW5jZW50IEhvb2dlbmRvb3JuXShodHRwczovL2dpdGh1Yi5jb20vVmluY2VudEgtTmV0L0NTaGFycEZvck1hcmt1cClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3OWE5NTAxZC02NDJkLTQ5Y2UtOTE2NS04ZjAxYWRhNmU1ODIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qSTVNRGMxTnpBPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkdpdFN0YXR1cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyMTA3ODA2YTY4ZjA3ZGVjZjgwNTYxNzI0ZTJiODM5YTUzMjkxMGY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBHaXRTdGF0dXNcbkFuIGlPUyBhbmQgQW5kcm9pZCBhcHAgdG8gcmV0cmlldmUgdGhlIGN1cnJlbnQgR2l0SHViIEFQSSBSYXRlIExpbWl0IHN0YXR1c1xuXG5HaXRIdWIgQVBJcyBoYXZlIGEgcmF0ZS1saW1pdCBvZiA1MDAwIHJlcXVlc3RzIHBlciB1c2VyIHBlciBob3VyLiBUaGlzIGFwcCBjYW4gYmUgdXNlZCB0byB1bmRlcnN0YW5kIHVzZXJzJyBjdXJyZW50IEdpdEh1YiBBUEkgUmF0ZSBMaW1pdCBzdGF0dXMuXG5cbk1vcmUgSW5mb3JtYXRpb24gb24gR2l0SHViIEFQSSBSYXRlIExpbWl0aW5nOiBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzLyNyYXRlLWxpbWl0aW5nXG5cbjxpbWcgc3JjPVwiaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvODE1ODI4MDUtNGUyMTMzMDAtOTM2NS0xMWVhLTlmYTctZGFhMDUzYTFmZjdkLmpwZWdcIiBoZWlnaHQ9XCI2MDBcIiAvPlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImU1ZmIyZjg5LTgyZWMtNDY1Yi04MWRiLWQ4MTYxNjkwNmMzOCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UUTJOVFl5T1RrPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYWR2YW5jZWQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYWUwNDkyMjIzZGJhOWMzY2JkODFlNDMzMWZmZmExNzM0NGRiM2MwOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgZ29vZHJlYWRzLXYyIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImI5ZTNlMGM5LWZhYWYtNDA0Ni1iY2MzLWI4Yjg5NzBhYzRmOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qYzJOekV6TkRNPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIkV4cGFuZGVyU2FtcGxlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4OWMxODYzYTI0NGJmYWIwNzE2NDRmODFjOTQxZmQxNzAzN2NmYWQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEV4cGFuZGVyU2FtcGxlXG5BIGRlbW9uc3RyYXRpb24gb2YgWGFtYXJpbi5Gb3Jtcy5FeHBhbmRlclxuXG4hW10oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTM1NTg5MTcvODMxODIwNjEtOWQ0M2MzODAtYTBkYS0xMWVhLTlmMDAtOWVjMWI4MjMwMDFkLmdpZilcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJCcmFuZG9uIE1pbm5pY2siLAogICAgIlVzZXJOYW1lIjogImJybWlubmljayIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiYnJhbWluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhYTJiZDRiYy01ZGIwLTRkM2EtOGU0Zi0xMjY4YzQwYTJjYjgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UazFPVGMwTnpBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAibW9uZGF5cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0OGZhZTFjZWQ0NDMwN2JmOGUyNGJlNjgzOTBjNjdmMzkwNTFjMWFmIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBtb25kYXlzXG5cbj4gTXkgc3dlZXQgTnV4dC5qcyBwcm9qZWN0XG5cbiMjIEJ1aWxkIFNldHVwXG5cbmBgYGJhc2hcbiMgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiQgbnBtIGluc3RhbGxcblxuIyBzZXJ2ZSB3aXRoIGhvdCByZWxvYWQgYXQgbG9jYWxob3N0OjMwMDBcbiQgbnBtIHJ1biBkZXZcblxuIyBidWlsZCBmb3IgcHJvZHVjdGlvbiBhbmQgbGF1bmNoIHNlcnZlclxuJCBucG0gcnVuIGJ1aWxkXG4kIG5wbSBydW4gc3RhcnRcblxuIyBnZW5lcmF0ZSBzdGF0aWMgcHJvamVjdFxuJCBucG0gcnVuIGdlbmVyYXRlXG5gYGBcblxuRm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGhvdyB0aGluZ3Mgd29yaywgY2hlY2sgb3V0IFtOdXh0LmpzIGRvY3NdKGh0dHBzOi8vbnV4dGpzLm9yZykuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzcyNWMzMjYtMWRjYy00NTUyLWI1NWUtZTMxMWEzNGEwMWYxIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5UZzNPRFExTmpBPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAic3Bpcml0ZG9nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjRjMDRiYTQ4ZWU5ZDhjZjFhMDNiZDE0YjgyYzg4MjRlNGJkYjg0MWIiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICI8aDEgYWxpZ249XCJjZW50ZXJcIj5XZWxjb21lIHRvIFNwaXJpdCBEb2cg8J+RizwvaDE+XG5cbjxpbWcgYWx0PVwiTGljZW5zZTogTUlUXCIgc3JjPVwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbW9uYWNvL3NwaXJpdGRvZy9tYXN0ZXIvYXNzZXRzL3BhcmtzJTI2cmVjLnBuZz90b2tlbj1BQU1BSUVBVUoyUzJLQlBCVTJBVVhPSzZWVjZIUVwiIC8+XG48cD5cbiAgPGEgaHJlZj1cIiNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICA8aW1nIGFsdD1cIkxpY2Vuc2U6IE1JVFwiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvTGljZW5zZS1NSVQteWVsbG93LnN2Z1wiIC8+XG4gIDwvYT5cbiAgPGEgaHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vc2ltb25hX2NvdGluXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgPGltZyBhbHQ9XCJUd2l0dGVyOiBzaW1vbmFfY290aW5cIiBzcmM9XCJodHRwczovL2ltZy5zaGllbGRzLmlvL3R3aXR0ZXIvZm9sbG93L3NpbW9uYV9jb3Rpbi5zdmc/c3R5bGU9c29jaWFsXCIgLz5cbiAgPC9hPlxuPC9wPlxuXG4jIyBBdXRob3Jcblxu8J+RpCAqKlNpbW9uYSBDb3RpbioqXG5cbi0gV2Vic2l0ZTogaHR0cHM6Ly90d2l0dGVyLmNvbS9zaW1vbmFfY290aW5cbi0gVHdpdHRlcjogW0BzaW1vbmFfY290aW5dKGh0dHBzOi8vdHdpdHRlci5jb20vc2ltb25hX2NvdGluKVxuLSBHaXRodWI6IFtAc2ltb25hY29dKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW1vbmFjbylcblxuIyMgU2hvdyB5b3VyIHN1cHBvcnRcblxuR2l2ZSBhIOKtkO+4jyBpZiB0aGlzIHByb2plY3QgaGVscGVkIHlvdSFcblxuLS0tXG5cbl9UaGlzIFJFQURNRSB3YXMgZ2VuZXJhdGVkIHdpdGgg4p2k77iPIGJ5IFtyZWFkbWUtbWQtZ2VuZXJhdG9yXShodHRwczovL2dpdGh1Yi5jb20va2VmcmFuYWJnL3JlYWRtZS1tZC1nZW5lcmF0b3IpX1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjE2MDU3MjkxLTg0OTItNDM4Ny04YTIwLTRhMTJjYjYwNmU4MiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5Ua3lOakUzTVRNPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidHVlc2RheXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNDhhZDcxODAxZmNhNmJlZDE3NGFiNDNhMzgzNjZhYTFiM2E2MDA0YSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdHVlc2RheXNcblxuPiBNeSB0aXB0b3AgTnV4dC5qcyBwcm9qZWN0XG5cbiMjIEJ1aWxkIFNldHVwXG5cbmBgYGJhc2hcbiMgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiQgbnBtIGluc3RhbGxcblxuIyBzZXJ2ZSB3aXRoIGhvdCByZWxvYWQgYXQgbG9jYWxob3N0OjMwMDBcbiQgbnBtIHJ1biBkZXZcblxuIyBidWlsZCBmb3IgcHJvZHVjdGlvbiBhbmQgbGF1bmNoIHNlcnZlclxuJCBucG0gcnVuIGJ1aWxkXG4kIG5wbSBydW4gc3RhcnRcblxuIyBnZW5lcmF0ZSBzdGF0aWMgcHJvamVjdFxuJCBucG0gcnVuIGdlbmVyYXRlXG5gYGBcblxuRm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uIG9uIGhvdyB0aGluZ3Mgd29yaywgY2hlY2sgb3V0IFtOdXh0LmpzIGRvY3NdKGh0dHBzOi8vbnV4dGpzLm9yZykuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNmJjZWYxN2YtMWE5YS00MGNkLTgzNTQtMTc2NjAyZmQwOTQ4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qazBOVFk0TlRJPSIsCiAgICAib3duZXIiOiAiYnJtaW5uaWNrIiwKICAgICJuYW1lIjogIldlYkF1dGhlbnRpY2F0b3JSZXBybyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkOTRiOGMxOGU0MjUwY2I2ZjJkNjVlMTE2Zjk1ZjQ1NmIxOWMzNGViIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBXZWJBdXRoZW50aWNhdG9yUmVwcm9cblxuT24gQW5kcm9pZCwgd2hlbiBgWGFtYXJpbi5Fc3NlbnRpYWxzLldlYkF1dGhlbnRpY2F0b3IuQXV0aGVudGljYXRlQXN5bmNgIHJldHVybnMgZnJvbSBhIHN1Y2Nlc3NmdWwgYXV0aGVudGljYXRpb24sIGl0IGFsd2F5cyB0aHJvd3MgYFN5c3RlbS5UaHJlYWRpbmcuVGFza3MuVGFza0NhbmNlbGVkRXhjZXB0aW9uYDpcblxuKipOb3RlOioqIFRoaXMgYEV4Y2VwdGlvbmAgZG9lcyBub3QgaGFwcGVuIG9uIGlPU1xuXG5gYGBiYXNoXG5bbW9uby1ydF0gW0VSUk9SXSBGQVRBTCBVTkhBTkRMRUQgRVhDRVBUSU9OOiBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzLlRhc2tDYW5jZWxlZEV4Y2VwdGlvbjogQSB0YXNrIHdhcyBjYW5jZWxlZC5cblttb25vLXJ0XSAgIGF0ICh3cmFwcGVyIGR5bmFtaWMtbWV0aG9kKSBBbmRyb2lkLlJ1bnRpbWUuRHluYW1pY01ldGhvZE5hbWVDb3VudGVyLjEoaW50cHRyLGludHB0cilcblttb25vLXJ0XSAgIGF0ICh3cmFwcGVyIG5hdGl2ZS10by1tYW5hZ2VkKSBBbmRyb2lkLlJ1bnRpbWUuRHluYW1pY01ldGhvZE5hbWVDb3VudGVyLjEoaW50cHRyLGludHB0cilcbmBgYFxuXG4jIyBSZXByb2R1Y2l0b24gU3RlcHNcblxuMS4gRG93bmxvYWQvQ2xvbmUgdGhpcyByZXBvXG4yLiBJbiBWaXN1YWwgU3R1ZGlvLCBvcGVuIGBXZWJBdXRoZW50aWNhdG9yUmVwcm8uc2xuYFxuMy4gSW4gVmlzdWFsIFN0dWRpbywgc2V0IHRoZSBzdGFydHVwIHByb2plY3QgdG8gV2ViQXV0aGVudGljYXRvci5BbmRyb2lkXG40LiBJbiBWaXN1YWwgU3R1ZGlvLCBidWlsZC9kZXBsb3kgV2ViQXV0aGVudGljYXRvci5BbmRyb2lkIHRvIGFuIEFuZHJvaWQgRGV2aWNlL0VtdWxhdG9yIFxuNS4gT24gdGhlIEFuZHJvaWQgZGV2aWNlLCBjbGljayBgQ29ubmVjdCB0byBHaXRIdWJgXG42LiBPbiB0aGUgQW5kcm9pZCBkZXZpY2UsIGNvbm5lY3QgdXNpbmcgeW91ciBHaXRIdWIgdXNlcm5hbWUvcGFzc3dvcmRcbjcuIENvbmZpcm0gV2ViQXV0aGVudGljYXRvci5BbmRyb2lkIGNyYXNoZXMgd2l0aCBgU3lzdGVtLlRocmVhZGluZy5UYXNrcy5UYXNrQ2FuY2VsZWRFeGNlcHRpb25gXG5cbiFbXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMzU1ODkxNy84MzgwNzM0Mi1jN2FiZjg4MC1hNjY3LTExZWEtOWFjNS05NjJhYmI2ZWYwNWQuZ2lmKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkJyYW5kb24gTWlubmljayIsCiAgICAiVXNlck5hbWUiOiAiYnJtaW5uaWNrIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJicmFtaW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImI0Yzg3M2QzLWE4OTktNDI1ZC1hYWE2LTM0NGVhZGM0OTBjNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU16TTNORFExIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJraXMtcmVxdWlyZWpzLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODhjMTYyZTI3Y2U0M2E5OTQzZjM5NmViNzk5M2ZhNmM4ZjNlMjBjOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogImtpcy1yZXF1aXJlanMtZGVtb1xuPT09PT09PT09PT09PT09PT09XG5cbktlZXAgSXQgU2ltcGxlIFJlcXVpcmVKUyBEZW1vLiAgU2hvd3Mgc2ltcGxlIGRlbW8gb2YgaG93IHRvIHVzZSByZXF1aXJlLmpzLlxuXG4jI092ZXJ2aWV3XG5UaGlzIGRlbW8gY29udGFpbnMgMiBzZXBhcmF0ZSBodG1sIGZpbGVzLCBlYWNoIHdpdGggdGhlaXIgb3duIHNjcmlwdHMgZm9sZGVyLiBPbmUgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgaG93IHRvIHdyaXRlIHRoZSBjb2RlIHdpdGhvdXQgcmVxdWlyZS5qcy4gVGhlIG90aGVyIHNob3dzIGhvdyB0byBhZGQgcmVxdWlyZS5qcy4gVGhlIHB1cnBvc2UgaXMgdG8gZXhwbGFpbiBob3cgdG8gdXNlIHJlcXVpcmUuanMgZm9yIGRlcGVuZGVuY3kgcmVzb2x1dGlvbi4gXG5cblxuIyNXaXRob3V0IFJlcXVpcmVKU1xuVGhlIGZpcnN0IGV4YW1wbGUgKGluZGV4MS5odG1sKSBoYXMgMyBKYXZhU2NyaXB0IGZpbGVzIHVzaW5nIHRoZSBSZXZlYWxpbmcgTW9kdWxlIFBhdHRlcm4gKE1vZHVsZSBQYXR0ZXJuIHdvcmtzIGZpbmUgdG9vKS4gVGhlIGRlcGVuZGVuY2llcyBhcmUgYXMgZm9sbG93czpcblxuLSBtYWluLmpzIGRlcGVuZHMgb24gYWxlcnRlci5qc1xuLSBhbGVydGVyLmpzIGRlcGVuZHMgb24gZGFhdGFzZXJ2aWNlLmpzXG5cbkxvYWQgb3JkZXIgaXMgaW1wb3J0YW50IGhlcmUsIGFuZCBjYW4gZWFzaWx5IGJlIGJyb2tlbi5cblxuIyNXaXRoIFJlcXVpcmVKU1xuVGhlIHNlY29uZCBleGFtcGxlIChpbmRleDIuaHRtbCkgdXNlcyByZXF1aXJlLmpzIHRvIGxvYWQgdGhlIHNjcmlwdHMuIEl0IHNvbHZlcyB0aGUgcHJvYmxlbSBhbmQgaGFzIHRoZXNlIHJvbGVzOlxuXG4tIHN0YXJ0cyB3aXRoIGEga2lja29mZiBzY3JpcHQgKG1haW4uanMpXG4tIGxvYWRzIHRoZXJlc3Qgb2YgdGhlIHNjcmlwdHMgYXMgdGhleSBhcmUgbmVlZGVkICh3aGVuIGRlcGVuZGVuY2llcyBjYWxsIG9uIHRoZW0pXG5cbiMjV2l0aCBSZXF1aXJlSlMgYW5kIDNyZCBQYXJ0eSBEZXBlbmRlbmNpZXNcblRoZSB0aGlyZCBleGFtcGxlIChpbmRleDMuaHRtbCkgdXNlcyByZXF1aXJlLmpzIHRvIGxvYWQgdGhlIHNjcmlwdHMgd2hpbGUganF1ZXJ5IGlzIGFsc28gaW50cm9kdWNlZCBhcyBhIGRlcGVuZGVuY3kuIFxuXG5cbiMjTW9yZVxuUmVsYXRlZCB0b3BpY3M6IERlcGVuZGVuY3kgSW5qZWN0aW9uIChESSksIFJldmVhbGluZyBNb2R1bGUgUGF0dGVybiwgTW9kdWxlIFBhdHRlcm4sIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhlY3V0aW9uIChJSUZFKSwgYW5kIFNlcnZpY2UgTG9jYXRvciBQYXR0ZXJuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYmFjNWI2NWItZWRmNi00YzIyLThlMWMtMTU5Y2Q2ZjFkZTJhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTFPVEUzTWpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAiZ29vZHJlYWRzLXY0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0MjNmMjQzNzQ0NzM2OGJmMTU1NTI3ZmVlOWZhMDEyY2ZjZjkzMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGdvb2RyZWFkcy12MiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlYWZmMzMwNi02ZjJjLTRhOTQtODQ0Mi1jMzM0MGQ2NDU3NjciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWTNNek0wTmpVPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYWR2YW5jZWQtY291cnNlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQwODM0NTIyYzE5MWQxMDYxNTQzMGEzOTJjMDM1NGQzNjViZmM4Y2QiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGdvb2RyZWFkcy12MiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxNDIyYzE3Mi1hOGQxLTQzNjQtODAxYS1jY2M2MTc4MjU5ZDIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UVTRNRGszIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJ0ZWxla2luZXNpcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4NDc3MDQ5MWM5MGUzN2FkODVjNzE1NzJjM2M5MGFjYmJlZTlmN2I5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyB0ZWxla2luZXNpc1xuKip0ZWxla2luZXNpcy5qcyoqIGlzIGEgSmF2YVNjcmlwdCBsaWJyYXJ5IHRoYXQgaGVscHMgeW91IHdyaXRlIGNvZGUgYnkganVzdCB0aGlua2luZyBpdCEgV29ya3MgZ3JlYXQgd2l0aCB2YW5pbGxhLmpzXG5cbiMjIyBUaGlzIGlzIGFuIEFwcmlsIEZvb2xzIERheSBqb2tlIC4uLiBsZWF2ZSB5b3VyIHNpZ2hzIGF0IHRoZSBkb29yLiBJdCBmdWxseSBlbnRlcnRhaW5lZCBteSBjaGlsZHJlbiA6KVxuXG5cbkZvciBtb3JlIHNlZSAoaHR0cDovL3d3dy5qb2hucGFwYS5uZXQvYmVzdC1qYXZhc2NyaXB0LWxpYnJhcnktZXZlci8pXG5cbj4gXCJUaGlua1wiIGNvZGUgYW5kIGl0IHdyaXRlcyBpdHNlbGYhXG5cbiMjIEN1cnJlbnQgVmVyc2lvblxuMS4wLjAtcHJlXG5cbiMjIFF1aWNrIHN0YXJ0XG5cbiMjIyAzIEVhc3kgU3RlcHNcbjEuIExpbmsgdG8gdGVsZWtpbmVzaXMuanMgYDxzY3JpcHQgc3JjPVwidGVsZWtpbmVzaXMuanNcIj48L3NjcmlwdD5gXG5cbjIuIFRoaW5rIGFib3V0IHlvdXIgY29kZVxuXG4zLiBXYXRjaCBpdCB3cml0ZSBpdHNlbGYhXG5cbiMjIEF1dGhvclxuKipKb2huIFBhcGEqKlxuXG4rIGh0dHA6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGFcblxuIyMgQ29weXJpZ2h0XG5Db3B5cmlnaHQgwqkgMjAxMyBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vSm9obl9QYXBhKS5cblxuIyMgTGljZW5zZSBcbnRvYXN0ciBpcyB1bmRlciBNSVQgbGljZW5zZSAtIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjJiZjY2YmMxLWJjNDUtNGVhNi04OGUxLThlYzBmNWFjYzNjOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU56RXdNVFk0TURFPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVkaXJlY3RzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjc5YWUyZTNkYjUxYjIxODEyNGFiMmY5NDA5MzQ4M2ZiMmU5MzIwN2IiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHJlZGlyZWN0c1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIlNpbW9uYSBDb3RpbiIsCiAgICAiVXNlck5hbWUiOiAic2ltb25hY28iLAogICAgIk1pY3Jvc29mdEFsaWFzIjogInNpY290aW4iCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQ3MzU1YzgyLTgyOGMtNDEwMS1iOWY4LTYwMTI3MGVhZDQ1NSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTVPVEU1Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2xpbXBzZS50b2FzdHIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjU0NzQ1NGE0NjA1MjE5ODUwMTZmYmRjMjNhMDA0NzcxMWYxZDc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIkdsaW1wc2UuVG9hc3RyIFBsdWdpblxuPT09PT09PT09PT09XG5cblNvdXJjZSBjb2RlIGZvciB0aGUgR2xpbXBzZS5Ub2FzdHIgcGx1Z2luIGZvciBpbnRlZ3JhdGluZyB0b2FzdHIgZGlhZ25vc3RpY3MgaW50byBHbGltcHNlXG5cbiMjIEN1cnJlbnQgVmVyc2lvblxuMC4yLjBcblxuIyMgRGVtb1xuRGVtbyBjYW4gYmUgZm91bmQgW2hlcmVdKGh0dHA6Ly9Db2RlU2V2ZW4uZ2l0aHViLmNvbS90b2FzdHIpXG5cbiMjIFVzYWdlXG5MaW5rIHRvIGpxdWVyeSwgdG9hc3RyLmNzcywgdG9hc3RyLmpzLCBnbGltcHNlLmpzIGFuZCBnbGltcHNlLnRvYXN0ci5qc1xuXG5cdDxzY3JpcHQgc3JjPVwianF1ZXJ5LmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwidG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwiZ2xpbXBzZS5qc1wiPjwvc2NyaXB0PlxuXHQ8c2NyaXB0IHNyYz1cImdsaW1wc2UudG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cblVzZSB0b2FzdHIgXG5cblx0JChmdW5jdGlvbigpeyBcblx0XHR0b2FzdHIuaW5mbygndGVzdGluZycpOyBcblx0fSkoKTtcblxuQ2xpY2sgdGhlIEcgaWNvbiBpbiB0aGUgYm90dG9tIHJpZ2h0IG9mIHlvdXIgYnJvd3NlciBhbmQgZW5qb3khXG5cbiFbXShodHRwOi8vam9obnBhcGEubmV0L3dwLWNvbnRlbnQvaW1hZ2VzL2dsaW1wc2UudG9hc3RyLnBuZylcblxuXG4jIyBEZXBlbmRlbmNpZXNcblJlcXVpcmVzICBbdG9hc3RyXShodHRwOi8vanBhcGEubWUvYzd0b2FzdHIpIDEuMy4xK1xuXG4jI1Jlc291cmNlc1xuLSBbZ2xpbXBzZSBwcm90b2NvbHNdKGh0dHA6Ly9nZXRnbGltcHNlLmNvbS9Qcm90b2NvbClcbi0gW2dsaW1wc2UgY2xpZW50IHNhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9HbGltcHNlL0dsaW1wc2UvYmxvYi9tYXN0ZXIvc291cmNlL0dsaW1wc2UuSmF2YVNjcmlwdC90ZXN0X2NsaWVudC5odG1sI0wxMDEtTDEyMSlcblxuIyMgQXV0aG9yXG4qKkpvaG4gUGFwYSoqXG5cblR3aXR0ZXI6IFtAam9obl9wYXBhXShodHRwOi8vdHdpdHRlci5jb20vSm9obl9QYXBhKVxuXG4jIyBDb3B5cmlnaHRcbkNvcHlyaWdodCDCqSAyMDEzIFtKb2huIFBhcGFdKGh0dHA6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGEpLlxuXG4jIyBMaWNlbnNlIFxuZ2xpbXBzZS50b2FzdHIgaXMgdW5kZXIgW01JVCBsaWNlbnNlXShodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocCkiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyNTE3OTU3Yy01YmI0LTQ0YWEtODg0MC03NzQ5NGZhZGY2YTMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIlBsdXJhbHNpZ2h0LUNDLUFuZ3VsYXItQnJlZXplLUV4dHJhXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5TdXBwb3J0aW5nIGZpbGVzIGZvciB0aGUgUGx1cmFsc2lnaHQgXCJTUEEgd2l0aCBBbmd1bGFyIGFuZCBCcmVlemVcIiBjb3Vyc2UgYnkgSm9obiBQYXBhLiBcblxuVGhlIGZpbGVzIGluY2x1ZGVkIGluIHRoaXMgcmVwb3NpdG9yeSBhcmUgaW50ZW5kZWQgdG8gaGVscCBzdHJlYW1saW5lIHRoZSBsZWFybmluZyBwcm9jZXNzIG9mIHRoZSBQbHVyYWxzaWdodCBjb3Vyc2UgU1BBIHdpdGggQW5ndWxhciBhbmQgQnJlZXplLiBEdXJpbmcgdGhlIGNvdXJzZSB5b3Ugd2lsbCBjcmVhdGUgdGhlIFdlYiBwcm9qZWN0IGZyb20gc2NyYXRjaFxuYW5kIGNyZWF0ZSB0aGUgYXBwIGxvZ2ljIHVzaW5nIEphdmFTY3JpcHQuIFRoZSBjb3Vyc2Ugd2lsbCBhc2sgeW91IHRvIGFkZCBzdXBwb3J0aW5nIGZpbGVzIChmb3VuZCBoZXJlKSB0byBqdW1wLXN0YXJ0IHRoZSBwcm9jZXNzIGFuZCBrZWVwIHlvdSBmb2N1c2VkIG9uIHRoZSBjb3JlIG1hdGVyaWFsIG9mIEFuZ3VsYXIgYW5kIEJyZWV6ZS5cblxuPiBUaXA6IElmIHlvdSBhcmUgdGFraW5nIG15IGNvdXJzZSBhbmQgeW91IGVuY291bnRlciBhbiBlcnJvciB3aGVuIGJ1aWxkaW5nIHRoZSBwcm9qZWN0IGFmdGVyIGluc3RhbGxpbmcgSG90VG93ZWwuQW5ndWxhci5CcmVlemUgcmVsYXRlZCB0byBkbGwgdmVyc2lvbnMsIHlvdSBtYXkgd2FudCB0byB0cnkgdGhlIGxhdGVzdCBwYWNrYWdlIHZlcnNpb25zLiBSdW4gdGhlc2UgdXBkYXRlcyB1c2luZyB0aGUgTnVHZXQgUGFja2FnZSBNYW5hZ2VyXG5cbmBgYFxuVXBkYXRlLVBhY2thZ2UgQnJlZXplLlNlcnZlci5Db250ZXh0UHJvdmlkZXIuRUY2XG5cblVwZGF0ZS1QYWNrYWdlIEJyZWV6ZS5TZXJ2ZXIuV2ViQXBpMlxuXG5VcGRhdGUtUGFja2FnZSBCcmVlemUuQ2xpZW50XG5cblVwZGF0ZS1QYWNrYWdlIE5ld3RvbnNvZnQuSnNvblxuYGBgXG5cbiMjIFNjcmF0Y2hcbiAtIERhdGEgbGF5ZXIgd3JpdHRlbiBpbiBDIyBhbmQgLk5FVFxuIC0gTW9kZWwgbGlicmFyeSB3cml0dGVuIGluIEMjIGFuZCAuTkVUXG4gLSBDb250ZW50IGZvbGRlciB3aXRoIGFzc2V0cyBpbmNsdWRpbmcgQ1NTIGFuZCBJbWFnZXNcbiBcbiMjIExpdG11cyBUZXN0XG4gLSBUaGlzIGlzIGp1c3QgdG8gaGVscCBmb2xrcyBhbG9uZ1xuIC0gQ29udGFpbnMgYSBydW5uaW5nIHNvbHV0aW9uIGFmdGVyIHVzaW5nIHRoZSBjb250ZW50cyBpbiB0aGUgc2NyYXRjaCBmb2xkZXIgYW5kIHJ1bm5pbmcgdGhlIDIgTnVHZXQgY29tbWFuZHMgYmVsb3c6XG5cbiBgYGBcbiAgaW5zdGFsbC1wYWNrYWdlIEVudGl0eUZyYW1ld29yay5TcWxTZXJ2ZXJDb21wYWN0XG4gIGluc3RhbGwtcGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyLkJyZWV6ZVxuIGBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzNDNkY2RkOC0zZjMxLTQwMTktYmI2Mi02YjZlOTI0ZWEyOWYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRPVFkzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiSG90VG93ZWwtQW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMThlZTkxN2ZmNTk2NTgwY2M1YmU5OTdmNjIyNTMxNWFmNjZmNmIwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBIb3QgVG93ZWwgQW5ndWxhciBTUEEgVGVtcGxhdGUgI1xuXG4+IEhvdCBUb3dlbDogQmVjYXVzZSB5b3UgZG9uJ3Qgd2FudCB0byBnbyB0byB0aGUgU1BBIHdpdGhvdXQgb25lIVxuXG5XYW50IHRvIGJ1aWxkIGEgU1BBIGJ1dCBjYW4ndCBkZWNpZGUgd2hlcmUgdG8gc3RhcnQ/IFVzZSBIb3QgVG93ZWwgQW5ndWxhciBhbmQgaW4gc2Vjb25kcyB5b3UnbGwgaGF2ZSBhIFNQQSBhbmQgYWxsIHRoZSB0b29scyB5b3UgbmVlZCB0byBidWlsZCBvbiBpdCEgXG5cbiFbXShodHRwOi8vd3d3LmpvaG5wYXBhLm5ldC93cC1jb250ZW50L3VwbG9hZHMvMjAxMy8wOS9Ib3RUb3dlbC1ORy1QcmV2aWV3LnBuZylcblxuSG90IFRvd2VsIEFuZ3VsYXIgY3JlYXRlcyBhIGdyZWF0IHN0YXJ0aW5nIHBvaW50IGZvciBidWlsZGluZyBhIFNpbmdsZSBQYWdlIEFwcGxpY2F0aW9uIChTUEEpLiBPdXQgb2YgdGhlIGJveCBpdCBwcm92aWRlcyBhIG1vZHVsYXIgc3RydWN0dXJlIGZvciB5b3VyIGNvZGUsIHZpZXcgbmF2aWdhdGlvbiwgZGF0YSBiaW5kaW5nLCBzZXBhcmF0aW9uIG9mIHNlcnZpY2VzLCBhbmQgc2ltcGxlIGJ1dCBlbGVnYW50IHN0eWxpbmcuIEhvdCBUb3dlbCBwcm92aWRlcyBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGJ1aWxkIGEgU1BBLCBzbyB5b3UgY2FuIGZvY3VzIG9uIHlvdXIgYXBwLCBub3QgdGhlIHBsdW1iaW5nLlxuXG4+IExlYXJuIG1vcmUgYWJvdXQgYnVpbGRpbmcgYSBTUEEgZnJvbSBbSm9obiBQYXBhJ3MgdmlkZW9zLCB0dXRvcmlhbHMgYW5kIFBsdXJhbHNpZ2h0IGNvdXJzZXNdKGh0dHA6Ly9qb2hucGFwYS5uZXQvc3BhKS5cblxuIyMgSW5zdGFsbGluZyB2aWEgdGhlIE51R2V0IFBhY2thZ2UgIyNcbkhvdCBUb3dlbCBBbmd1bGFyIGlzIGEgTnVHZXQgcGFja2FnZSB0aGF0IGF1Z21lbnRzIGFuIGV4aXN0aW5nIGVtcHR5IEFTUC5ORVQgcHJvamVjdC4gSnVzdCBpbnN0YWxsIHVzaW5nIE51R2V0IGFuZCB0aGVuIHJ1biFcblxuICAgIEluc3RhbGwtUGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyXG5cbiMjIEhvdyBEbyBJIEJ1aWxkIE9uIEhvdCBUb3dlbD8gIyNcblNpbXBseSBzdGFydCBhZGRpbmcgY29kZSEgXG5cbjEuIEFkZCB5b3VyIG93biBzZXJ2ZXItc2lkZSBjb2RlLCBzdWNoIGFzIEVudGl0eSBGcmFtZXdvcmsgYW5kIFdlYiBBUEkgKHdoaWNoIHJlYWxseSBzaGluZXMgd2l0aCBCcmVlemUuanMpXG4yLiBBZGQgdmlld3MgYW5kIGNvbnRyb2xsZXJzXG4zLiBVcGRhdGUgdGhlIG5hdmlnYXRpb24gcm91dGVzIGluIGBjb25maWcucm91dGVzLmpzYFxuXG4jIyBBZGQgUmljaCBEYXRhIHdpdGggQnJlZXplICMjXG5BZGQgcmljaCBkYXRhIGZlYXR1cmVzIHVzaW5nIEJyZWV6ZSB0byBIb3QgVG93ZWwgQW5ndWxhciwgdmlhIE51R2V0LlxuXG4gICAgSW5zdGFsbC1QYWNrYWdlIEhvdFRvd2VsLkFuZ3VsYXIuQnJlZXplXG5cbiMjIFJlc291cmNlcyAjI1xuXG4rIFtTUEEgUmVzb3VyY2VzXShodHRwOi8vam9obnBhcGEubmV0L3NwYSlcbisgW0hvdCBUb3dlbCBBbmd1bGFyIG9uIEdpdEh1Yl0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL0hvdFRvd2VsLU5HKVxuKyBbSG90IFRvd2VsIEFuZ3VsYXIgb24gTnVHZXRdIChodHRwOi8vbnVnZXQub3JnL3BhY2thZ2VzL0hvdFRvd2VsLUFuZ3VsYXIpXG5cbiMjIEhvdCBUb3dlbCBBbmd1bGFyIGZvciBhbnkgRW52aXJvbm1lbnQgXG4rIFtIb3QgVG93ZWwgQW5ndWxhciBTZWVkL1N0YXJ0ZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9uZy1kZW1vcy90cmVlL21hc3Rlci9ob3R0b3dlbClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU4NjJlNmQ5LTljM2YtNDhkMy05NDY3LWU1YjkwMzJlZTY3MSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzVPRGM1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhci1OdUdldCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhYTVlZDY1NTQyNWE0OGJiOTE5MDk4OTc3ZDc1MjAwZjY1ZjVjZjQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiQW5ndWxhci1OdUdldFxuPT09PT09PT09PT09PVxuXG5Bbmd1bGFySlMgTnVHZXQgcGFja2FnZSBjcmVhdGlvbi5cblxuQnkgU2NvdHQgSGFuc2VsbWFuIGFuZCBKb2huIFBhcGFcblxuKlRoYW5rcyB0byBTY290dCBmb3IgdGhlIGF1dG9tYXRpb24qXG5cbkEgc2VyaWVzIG9mIEFuZ3VsYXIgTnVHZXQgcGFja2FnZXMsIHdpdGggdGhlIHBoaWxvc3BoeSBvZiAnMSBQYWNrYWdlIFBlciBNb2R1bGUnLiBcblxuIyMjV2h5PyBcblxuQmVjYXVzZSB0aGUgQW5ndWxhckpTIHBhY2thZ2UgKHdoaWNoIGlzIGF3ZXNvbWUpIGlzIGEgc3VwZXIgcGFja2FnZSB3aXRoIGV2ZXJ5dGhpbmcuIEFuZCBzb21ldGltZXMgeW91IGRvIG5vdCB3YW50IGV2ZXJ5dGhpbmcuXG5cbiMjIFBhY2thZ2VzXG5cbi0gQW5ndWxhckpTLkNvcmUgKGFsbCBwYWNrYWdlcyBiZWxvdyBkZXBlbmQgb24gdGhpcyBvbmUpXG4tIEFuZ3VsYXJKUy5Db29raWVzXG4tIEFuZ3VsYXJKUy5BbmltYXRlXG4tIEFuZ3VsYXJKUy5BcmlhXG4tIEFuZ3VsYXJKUy5Mb2NhbGUgKG5vdCBhbiBhbmd1bGFyIG1vZHVsZSwgYnV0IHJhdGhlciBhbGwgdGhlIGkxOG4gZmlsZXMpXG4tIEFuZ3VsYXJKUy5Mb2FkZXJcbi0gQW5ndWxhckpTLk1lc3NhZ2VzXG4tIEFuZ3VsYXJKUy5SZXNvdXJjZVxuLSBBbmd1bGFySlMuUm91dGVcbi0gQW5ndWxhckpTLlNhbml0aXplXG4tIEFuZ3VsYXJKUy5Ub3VjaFxuXG4jIyBSdW5uaW5nIE5vZGUgYW5kIE5QTSBvbiBXaW5kb3dzXG5cbi0gY2hvY28gaW5zdGFsbCBub2RlanNcbi0gY2hvY28gaW5zdGFsbCBub2RlanMuaW5zdGFsbFxuLSBjaG9jbyBpbnN0YWxsIHB5dGhvbiAtdmVyc2lvbiAyLjcuMlxuXG4tIG5wbSB1cGdyYWRlIG9uIHdpbmRvd3Ncblx0LSBodHRwczovL2dpdGh1Yi5jb20vbnBtL25wbS93aWtpL1Ryb3VibGVzaG9vdGluZyN1cGdyYWRpbmctb24td2luZG93c1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZThlODc4ODItZDUwYi00NDA0LWEyMjctNjc4MWEwYzAwYzU0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EZzVNams0TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci5icmVlemUuc3RvcmFnZXdpcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMjliY2JiMzMxZjBkMjk4ZDI2MDdiODM3NmIxNzllYWMwYWY2N2E5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiYW5ndWxhci5icmVlemUuc3RvcmFnZVdpcFxuPT09PT09PT09PT09XG5cblNhdmUgV29yayBpbiBQcm9ncmVzcyB0byBMb2NhbCBTdG9yYWdlIGZvciBBbmd1bGFyIGFuZCBCcmVlemUgYXBwcy5cblxuQXMgc2VlbiBvbiBbQnVpbGRpbmcgQXBwcyB3aXRoIEFuZ3VsYXIgYW5kIEJyZWV6ZV0oaHR0cDovL2pwYXBhLm1lL3NwYW5neikgb24gUGx1cmFsc2lnaHRcblxuXG5WZXJzaW9uIDEuMC4wXG5cbiMjIE51R2V0XG5HZXQgW0FuZ3VsYXIuQnJlZXplLlN0b3JhZ2VXSVBdKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9Bbmd1bGFyLkJyZWV6ZS5TdG9yYWdlV0lQKSBmcm9tIE51R2V0XG5cbiAgICBpbnN0YWxsLXBhY2thZ2UgQW5ndWxhci5CcmVlemUuU3RvcmFnZVdJUFxuXG5cbiMjU2V0dXBcbiAgICAvLyBBZGQgbmd6V2lwIHRvIHlvdXIgbW9kdWxlIGRlcGVuZGVuY2llcy5cbiAgICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsnbmd6V2lwJ10pO1xuXG4jIyMgYHpTdG9yYWdlQ29uZmlnUHJvdmlkZXJgIENvbmZpZ3VyYXRpb25cblxuICAgIGFwcC5jb25maWcoWyd6U3RvcmFnZUNvbmZpZ1Byb3ZpZGVyJywgZnVuY3Rpb24gKGNmZykge1xuICAgICAgICBjZmcuY29uZmlnID0ge1xuICAgICAgICAgICAgLy8gTXVzdCBzZXQgdGhlc2VcbiAgICAgICAgICAgIGtleTogJ1lvdXJBcHBOYW1lJywgLy8gSWRlbnRpZmllciBmb3IgdGhlIGFwcFxuICAgICAgICAgICAgd2lwS2V5OiAnWW91ckFwcE5hbWUuV0lQJywgLy8gSWRlbnRpZmVyIGZvciB0aGUgYXBwJ3MgXG4gICAgICAgICAgICB2ZXJzaW9uOiAnMS4xLjAnLCAvLyBZb3VyIGFwcCdzIHZlcnNpb24gXG5cbiAgICAgICAgICAgIC8vIFRoZXNlIGFyZSBkZWZhdWx0ZWQsIGJ1dCBjYW4gYmUgb3ZlcnJpZGVuXG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSwgLy8gZW5hYmxlIExvY2FsIFN0b3JhZ2UgKFdJUCBpcyBhbHdheXMgZW5hYmxlZClcbiAgICAgICAgICAgIGV2ZW50czogeyAvLyBuYW1lcyBvZiBldmVudHMgdGhhdCBXSVAgd2lsbCBmaXJlXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdzdG9yZS5lcnJvcicsXG4gICAgICAgICAgICAgICAgc3RvcmVDaGFuZ2VkOiAnc3RvcmUuY2hhbmdlZCcsXG4gICAgICAgICAgICAgICAgd2lwQ2hhbmdlZDogJ3dpcC5jaGFuZ2VkJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFwcEVycm9yUHJlZml4OiAnW25neldpcF0gJywgLy8gb3B0aW9uYWwgcHJlZml4IGZvciBhbnkgZXJyb3IgbWVzc2FnZXNcbiAgICAgICAgICAgIG5ld0d1aWQ6IGJyZWV6ZS5jb3JlLmdldFV1aWQgLy8gR1VJRCBmdW5jdGlvbiBnZW5lcmF0b3JcbiAgICAgICAgfTtcbiAgICB9XSk7XG5cblxuIyNBUEkgVXNhZ2VcblxuIyMjQVBJIGZvciBgelN0b3JhZ2VXaXBgIHNlcnZpY2VcblxuICAgIC8vIEluaXRpYWxpemUgc3RvcmFnZSB3aXRoIGEgQnJlZXplIEVudGl0eU1hbmFnZXJcbiAgICB6U3RvcmFnZVdpcC5pbml0KGVudGl0eU1hbmFnZXIpXG4gICAgXG4gICAgLy8gQ2xlYXIgYWxsIFdJUCBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICB6U3RvcmFnZVdpcC5jbGVhckFsbFdpcCgpXG5cbiAgICAvLyBTdG9yZSAxIGVudGl0eSBpbiBsb2NhbCBzdG9yYWdlLiBQYXNzIGluIHRoZSB3aXAga2V5LCBlbnRpdHlOYW1lLCBhbmQgYSBkZXNjcmlwdGlvbi5cbiAgICAvLyByb3V0ZVN0YXRlIGlzIHRoZSBuYW1lIG9mIHRoZSByb3V0ZSAoYWZ0ZXIgdGhlIGhhc2gpIGZvciB0aGUgdmlldyB3aGVyZSB0aGlzIGVudGl0eSBtYXkgYmUgdmlld2VkLlxuICAgIC8vIHJvdXRlU3RhdGUgZGVmYXVsdHMgdG8gZW50aXR5TmFtZS50b0xvd2VyY2FzZSgpIFxuICAgIHZhciBrZXkgPSB6U3RvcmFnZVdpcC5zdG9yZVdpcEVudGl0eShlbnRpdHksIGtleSwgZW50aXR5TmFtZSwgZGVzY3JpcHRpb24sIHJvdXRlU3RhdGUpXG5cbiAgICAvLyBSZW1vdmUgMSBlbnRpdHkgZnJvbSBsb2NhbCBzdG9yYWdlLCBieSBpdHMgV0lQIGtleVxuICAgIHpTdG9yYWdlV2lwLnJlbW92ZVdpcEVudGl0eShrZXkpXG5cbiAgICAvLyBMb2FkIDEgZW50aXR5IGludG8gQnJlZXplJ3MgRW50aXR5TWFuYWdlclxuICAgIC8vIGZyb20gbG9jYWwgc3RvcmFnZSwgYnkgaXRzIFdJUCBrZXlcbiAgICB6U3RvcmFnZVdpcC5sb2FkV2lwRW50aXR5KGtleSlcblxuICAgIC8vIEZpbmQgMSBlbnRpdHkgZnJvbSBsb2NhbCBzdG9yYWdlLCBieSBpdHMgZW50aXR5TmFtZSBhbmQgaWRcbiAgICB2YXIgd2lwS2V5ID0gelN0b3JhZ2VXaXAuZmluZFdpcEtleUJ5RW50aXR5SWQoZW50aXR5TmFtZSwgaWQpXG5cbiAgICAvLyBHZXQgc3VtbWFyeSBpbmZvcm1hdGlvbiBmb3IgYWxsIFdJUCBpbiBsb2NhbCBzdG9yYWdlXG4gICAgdmFyIHdpcFN1bW1hcnkgPSB6U3RvcmFnZVdpcC5nZXRXaXBTdW1tYXJ5KClcblxuXG4jIyNBUEkgZm9yIGB6U3RvcmFnZWAgc2VydmljZVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBzdG9yYWdlIHdpdGggYSBCcmVlemUgRW50aXR5TWFuYWdlclxuICAgIHpTdG9yYWdlLmluaXQoZW50aXR5TWFuYWdlcilcblxuICAgIC8vIERpY3Rpb25hcnkgZnVuY3Rpb24gdG8gc2V0IGlmIGEga2V5IHZhbHVlIGlzIGxvYWRlZCBcbiAgICB6U3RvcmFnZS5hcmVJdGVtc0xvYWRlZChrZXksIHZhbHVlKVxuICAgIC8vIERpY3Rpb25hcnkgZnVuY3Rpb24gdG8gZ2V0IGlmIGEga2V5IHZhbHVlIGlzIGxvYWRlZCBcbiAgICB2YXIgdmFsdWUgPSB6U3RvcmFnZS5hcmVJdGVtc0xvYWRlZChrZXkpXG5cbiAgICAvLyBDbGVhciBhbGwgbG9jYWwgc3RvcmFnZSwgaW5jbHVkaW5nIFdJUCB0b29cbiAgICB6U3RvcmFnZS5jbGVhcigpXG5cbiAgICAvLyBMb2FkIGFsbCBvZiB0aGUgZW50aXRpZXMgZm9ybSBsb2NhbCBzdG9yYWdlIFxuICAgIC8vIGludG8gQnJlZXplJ3MgRW50aXR5TWFuYWdlclxuICAgIHpTdG9yYWdlLmxvYWQoKVxuXG4gICAgLy8gU2F2ZSBhbGwgb2YgdGhlIEJyZWV6ZSBFbnRpdHlNYW5hZ2VyJ3MgZW50aXRpZXMgXG4gICAgLy8gdG8gbG9jYWwgc3RvcmFnZVxuICAgIHpTdG9yYWdlLnNhdmUoKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMWVmNGI0MDEtYjAxZS00MDhjLWJhNTgtZTM1YTljOWUyYmI5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTJPREl6TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctZGVtb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Q0YzY1MDQzYWJiZjVmMDY2YWRmZmMzYWNmMzdmOWY1OGI0NDJhMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIm5nLWRlbW9zXG49PT09PT09PVxuVmFyaWV0eSBvZiBhbmd1bGFyIGRlbW9zIGFyZSBjb250YWluZWQgaGVyZWluLlxuXG4+Kk9waW5pb25hdGVkIEFuZ3VsYXJKUyBzdHlsZSBndWlkZSBmb3IgdGVhbXMgYnkgW0Bqb2huX3BhcGFdKC8vdHdpdHRlci5jb20vam9obl9wYXBhKSpcblxuPk1vcmUgZGV0YWlscyBhYm91dCB0aGUgc3R5bGVzIGFuZCBwYXR0ZXJucyB1c2VkIGluIHRoZXNlIGFwcHMgY2FuIGJlIGZvdW5kIGluIG15IFtBbmd1bGFySlMgU3R5bGUgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyanMtc3R5bGVndWlkZSkgYW5kIG15ICoqQW5ndWxhckpTIFBhdHRlcm5zOiBDbGVhbiBDb2RlKiooY29taW5nIHNvb24pIGNvdXJzZSBhdCBbUGx1cmFsc2lnaHRdKGh0dHA6Ly9wbHVyYWxzaWdodC5jb20vdHJhaW5pbmcvQXV0aG9ycy9EZXRhaWxzL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuIFxuXG5cbiMjIGdydW50LWd1bHBcbkRlbW9uc3RyYXRlcyB1c2Ugb2YgZ3J1bnQgYW5kIGd1bHAgd2l0aCBhbiBhbmd1bGFyIGFwcC5cblxuLSBncnVudFxuLSBndWxwXG5cbiMjIGhvdHRvd2VsXG5TdGFydGVyIHRlbXBsYXRlIGZvciBBbmd1bGFyIGFwcHMuIEFsbCBjbGllbnQgc2lkZSBqYXZhc2NyaXB0IHVzaW5nIEFuZ3VsYXIgZm9yIHJvdXRpbmcsIGFuaW1hdGlvbiwgYW5kIGJhc2ljIENTUyB0aGVtaW5nLlxuXG4jIyBtb2R1bGFyXG5EZW1vbnN0cmF0ZXMgaG93IHRvIGRpc3RyaWJ1dGUgYW4gYXBwIGFjcm9zcyBzZXZlcmFsIG1vZHVsZXMsIGluY2x1ZGluZyBoYW5kbGluZyB0aGUgcm91dGluZywgdGVzdGluZywgZ3VscCBhdXRvbWF0aW9uIGFuZCBtb3JlLlxuXG4jIyBjYy1ibWVhblxuTGFyZ2VyIGFwcCBydW5uaW5nIGEgZmljdGl0aW91cyBldmVudCBuYW1lZCBcIkNvZGVDYW1wZXJcIi5cblxuIyNuZy0xLjMgcGxheWdyb3VuZFxuU2ltcGxlIGRlbW9zIGZvciBuZyAxLjMgZmVhdHVyZXMuXG5cbi0gbmctbW9kZWwtb3B0aW9ucz1cInsgZGVib3VuY2U6IDEwMDAsIHVwZGF0ZU9uOiAnYmx1cicgfVwiXG5cbiMjIG5nLWp3dFxuSlNPTiBXZWIgVG9rZW5zIChKV1QpIGluIGFuIEFuZ3VsYXJKUyBhcHAsIHRvIGRlbW9uc3RyYXRlIGhvdyB0byB1c2UgdGhlIEpXVCBmb3IgcmVzdHJpY3RpbmcgQVBJIGFjY2Vzcy5cblxuIyMgcXVpY2tzdGFydFxuU2ltcGxlIEFuZ3VsYXIgZGVtb3NcblxuLSBkYXRhIGJpbmRpbmdcbi0gcm91dGluZ1xuLSByZXBlYXRcbi0gZmlsdGVyXG4tICRodHRwXG4tIHNlcnZpY2UvZmFjdG9yeSBcblxuIyMgdG9kby16dW1vXG5EZW1vbnN0cmF0ZXMgaG93IHRvIHRhbGsgdG8gQXp1cmUgTW9iaWxlIFNlcnZpY2VzIHZpYSBhIHNpbmdsZSB0b2RvIGxpc3QuXG5cbi0gQ2hhbmdlc2V0cyBhbmQgY2hhbmdlIHN0YXRlIChBZGRlZCwgRGVsZXRlZCwgVWRwYXRlZClcbi0gVGFsa2luZyBBenVyZSBNb2JpbGUgU2VydmljZXNcbi0gU2F2aW5nIGNoYW5nZXNldHMgdG8gbG9jYWwgc3RvcmFnZVxuLSBIYW5kIHdyaXR0ZW4gbWV0YWRhdGEgZm9yIGJyZWV6ZVxuXG4jIyB6LW1ldGFkYXRhXG5UaHJvd3MgYSBzd2l0Y2ggZnJvbSB1c2luZyBXZWIgQVBJIC8gRUYgbWV0YWRhdGEgdG8gdXNpbmcgaGFuZCB3cml0dGVuIGNsaWVudCBzaWRlIG1ldGFkYXRhXG5cbi0gVG9nZ2xlIGJldHdlZW4gRUYgbWV0YWRhdGEgYW5kIGhhbmQgd3JpdHRlbiBtZXRhZGF0YSBmb3IgYnJlZXplXG5cbiMjIFp6YVxuUGl6emEgb3JkZXJpbmcgc2VydmljZSB1c2luZyBNRUFOIHN0YWNrLiBEYXRhIGlzIHN0cnVjdHVyZWQgaW4gYSBkb2N1bWVudCBmYXNoaW9uLCBub3QgU1FMIHNob3ZlZCBpbiBNb25nb0RCLlxuXG4tIG5vZGUuanNcbi0gbW9uZ29kYiB1c2luZyB0cnVlIGRvY3VtZW50IHN0cnVjdHVyZVxuLSBleHByZXNzXG4tIGJyZWV6ZVxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjY0MWYwNDEzLTVjM2EtNDQ2Zi1hZDNhLWZkYTAzNDA1ZTFjNiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiI0FuZ3VsYXJKUyBQYXR0ZXJucyBUZXN0aW5nIC0gRGVtb1xuRGVtb25zdHJhdGVzIEFuZ3VsYXIgdGVzdGluZ1xuXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9qb2hucGFwYS9uZy1wYXR0ZXJucy10ZXN0aW5nLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2pvaG5wYXBhL25nLXBhdHRlcm5zLXRlc3RpbmcpXG5cbj4qT3BpbmlvbmF0ZWQgQW5ndWxhckpTIHN0eWxlIGd1aWRlIGZvciB0ZWFtcyBieSBbQGpvaG5fcGFwYV0oLy90d2l0dGVyLmNvbS9qb2huX3BhcGEpKlxuXG4+TW9yZSBkZXRhaWxzIGFib3V0IHRoZSBzdHlsZXMgYW5kIHBhdHRlcm5zIHVzZWQgaW4gdGhpcyBhcHAgY2FuIGJlIGZvdW5kIGluIG15IFtBbmd1bGFySlMgU3R5bGUgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyanMtc3R5bGVndWlkZSkgYW5kIG15ICoqQW5ndWxhckpTIFBhdHRlcm5zOiBDbGVhbiBDb2RlKiooY29taW5nIHNvb24pIGNvdXJzZSBhdCBbUGx1cmFsc2lnaHRdKGh0dHA6Ly9wbHVyYWxzaWdodC5jb20vdHJhaW5pbmcvQXV0aG9ycy9EZXRhaWxzL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG4+IFxuIyMgU2xpZGVzXG5cblRoZSBzbGlkZXMgZm9yIFdhcmQncyB0YWxrIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgcHJvamVjdCBhcmUgYXZhaWxhYmxlIG9uIGdvb2dsZSBkb2NzLlxuXG5bU2VlIHRoZSBzbGlkZXNdKGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kLzEzN2xnTE10ZmxXM3E0U0JLcnJqVmdpdVNBaTZHQzE5VDRtTlZveC00a1Y4L3ByZXNlbnQpXG5cbiMjIFRPRE9cbjEuIFN0cnVjdHVyZSB3aWxsIGhhdmUgc3BlY3Mgc2lkZSBieSBzaWRlIHdpdGggY29kZSwgZXhjZXB0IGNyb3NzIGN1dHRpbmcgdGVzdHNcbjIuIFJlbW92ZSBleHRyYW5lb3VzIGNvZGUgdW5yZWxhdGVkIHRvIHRlc3RzXG4zLiBBZGQgdWktcm91dGVyXG40LiBSZXZpc2UgZnJvbSBhdmVuZ2Vyc1xuXG4jIyBTdHJ1Y3R1cmVcblx0L2J1aWxkIFx0KGNyZWF0ZWQgb24gdGhlIGZseSlcblx0L2d1bHBcdFxuXHQvc3JjXG5cdFx0L2NsaWVudFxuXHRcdFx0L2FwcFxuXHRcdFx0L2NvbnRlbnRcblx0XHRcdC90ZXN0XG5cdFx0L3NlcnZlclxuXHRcdFx0L2RhdGFcblx0XHRcdC9yb3V0ZXNcblx0XG5cbiMjIEluc3RhbGxpbmcgTm9kZS5qcyBhbmQgQm93ZXIgUGFja2FnZXNcbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBucG0gaW5zdGFsbGBcblxuPkRvIG5vdCBiZSBhbGFybWVkIGJ5IHRoZSBvY2Nhc2lvbmFsIHNlYSBvZiByZWQgY29tcGxhaW5pbmcgYWJvdXRcbnRoZSBpbmFiaWxpdHkgdG8gcmUtYnVpbGQgc29tZSBsaWJyYXJ5LiBZb3UgY2FuIGlnbm9yZSB0aGVzZSB3YXJuaW5nc1xuYmVjYXVzZSB3ZSBhbHdheXMgdXNlIHRoZSBwcmUtYnVpbHQgbGlicmFyaWVzIHRoYXQgd2VyZSBzaGlwcGVkIHdpdGhcbnRoZSBwYWNrYWdlLlxuXG4jIyBDbGVhbmluZyBcbk92ZXIgdGltZSB5b3UgbWlnaHQgYWNjdW11bGF0ZSBzb21lIG9sZCBsaWJyYXJpZXMuXG5cbkl0IGRvZXNuJ3QgaHVydCB0byBvY2Nhc2lvbmFsbHkgY2xlYXIgdGhlIGRlY2tzIGJ5IGRlbGV0aW5nIHRoZVxuXCJib3dlclxcX2NvbXBvbmVudHNcIiBhbmQgXCJub2RlXFxfbW9kdWxlc1wiIGZvbGRlcnMgYW5kIHJlLWluc3RhbGxpbmdcbndpdGggYG5wbSBpbnN0YWxsYC5cblxuIyMgSW5zdGFsbGluZyBCb3dlciBQYWNrYWdlc1xuYG5wbSBpbnN0YWxsYCB3aWxsIGluc3RhbGwgdGhlc2UgdG9vLCBidXQgeW91IGNhbiBkbyBpdCBtYW51YWxseS5cbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBib3dlciBpbnN0YWxsYFxuXG5cbiMjIFRlc3RpbmdcblRoZXJlIGFyZSB0d28gd2F5cyB0byB0ZXN0OiBpbiB0aGUgYnJvd3NlciBhbmQgd2l0aCBrYXJtYVxuXG4jIyMgVGVzdGluZyBpbiB0aGUgYnJvd3NlclxuXG4qIE9wZW4gYSBjb21tYW5kIG9yIHRlcm1pbmFsIHdpbmRvdy5cblxuKiBXaXRoIGJyb3dzZXItc3luYyBcbiAgICAqIGluIHNwZWNzLmh0bWwsIGNvbW1lbnQgb3V0IGBtb2NoYS5jaGVja0xlYWtzKClgIC8vIGZhbHNlIGxlYWsgcmVwb3J0IGZyb20gYnJvd3NlciBzeW5jXG4gICAgKiBydW4gYGd1bHAgc2VydmUtc3BlY3NgPGJyLz48YnIvPlxuXG4qIFdpdGhvdXQgYnJvd3Nlci1zeW5jIFxuICAgICogcnVuIGBndWxwIHNlcnZlLXNwZWNzIC0tbm9zeW5jYFxuXHQqIG9wZW4gYSBicm93c2VyIHRvIGBsb2NhbGhvc3Q6NzIwMi9zcGVjcy5odG1sYFxuXHQqIGJyb3dzaW5nIHRvIGBsb2NhbGhvc3Q6NzIwMmAgcnVucyB0aGUgYXBwPGJyLz48YnIvPlxuXG4qIFRvIHN0b3AsIGVpdGhlciBcIkN0cmwtQ1wiIGFuZCBhbnN3ZXIgdGhlIHByb21wdCB3aXRoIFwiWVwiIG9yIGp1c3QgY2xvc2UgdGhlIHdpbmRvdy5cblxuIyMjIFRlc3Rpbmcgd2l0aCBrYXJtYVxuKiBPcGVuIGEgY29tbWFuZCBvciB0ZXJtaW5hbCB3aW5kb3cuXG5cbiogVG8ganVzdCB0aGUgdW5pdCB0ZXN0cywgdHlwZSBgZ3VscCBhdXRvdGVzdGAgXG5cbiogVG8gcnVuIGJvdGggdW5pdCBhbmQgbWlkd2F5IHRlc3RzIChzcGlucyB1cCBhIGRldiBzZXJ2ZXIpLCB0eXBlIGBndWxwIGF1dG90ZXN0IC0tc3RhcnRTZXJ2ZXJzYFxuXG5UZXN0aW5nIHVzZXMga2FybWEsIG1vY2hhLCBjaGFpLCBzaW5vbiwgbmdNaWR3YXlUZXN0ZXIgbGlicmFyaWVzLlxuXG4+XCJhdXRvdGVzdFwiIHN0YXJ0cyB0aGUgdGVzdHMgYW5kIHN0YXlzIGFsaXZlLCB3YXRjaGluZyBmb3IgZmlsZSBjaGFuZ2VzLiBUeXBlIFwidGVzdFwiIGluc3RlYWQgaWYgeW91IG9ubHkgd2FudCB0byBydW4gdGhlIHRlc3RzIG9uY2UgYW5kIHRoZW4gZXhpdC5cblxuKiBUbyBzdG9wLCBlaXRoZXIgXCJDdHJsLUNcIiBhbmQgYW5zd2VyIHRoZSBwcm9tcHQgd2l0aCBcIllcIiBvciBqdXN0IGNsb3NlIHRoZSB3aW5kb3cuXG5cbiMjIFJ1bm5pbmcgdGhlIGFwcFxuUnVucyBsb2NhbGx5LCBubyBkYXRhYmFzZSByZXF1aXJlZC5cblxuIyMjIERldiBCdWlsZHNcblRoZSBkZXYgYnVpbGQgZG9lcyBub3Qgb3B0aW1pemUgdGhlIGRlcGxveWVkIGNvZGUuIEl0IHNpbXBseSBydW5zIGl0IGluIHBsYWNlLiBZb3UgY2FuIHJ1biBhIGRldiBidWlsZCBpbiBtdWx0aXBsZSB3YXlzLlxuXG4jIyMjT3B0aW9uIDEgLSBTZXJ2ZVxuVHlwZSBgZ3VscCBzZXJ2ZS1kZXZgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuIyMjI09wdGlvbiAyIC0gU2VydmUgYW5kIERlYnVnIE5vZGVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnYCBhbmQgYnJvd3NlIHRvIGBodHRwOi8vbG9jYWxob3N0OjcyMDJgIGZvciB0aGUgY2xpZW50IGFuZCBgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlYnVnP3BvcnQtNTg1OGAgdG8gZGVidWcgdGhlIHNlcnZlci5cblxuIyMjI09wdGlvbiAzIC0gU2VydmUgYW5kIERlYnVnIE5vZGUgQnJlYWtpbmcgb24gMXN0IExpbmVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnLWJya2AgYW5kIGJyb3dzZSB0byBgaHR0cDovL2xvY2FsaG9zdDo3MjAyYCBmb3IgdGhlIGNsaWVudCBhbmQgYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9kZWJ1Zz9wb3J0LTU4NThgIHRvIGRlYnVnIHRoZSBzZXJ2ZXIuXG5cbiMjIyBTdGFnaW5nIEJ1aWxkXG5UaGUgc3RhZ2luZyBidWlsZCBpcyBhbiBvcHRpbWl6ZWQgYnVpbGQuIFR5cGUgYGd1bHAgc2VydmUtc3RhZ2VgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuVGhlIG9wdGltaXphdGlvbnMgYXJlIHBlcmZvcm1lZCBieSB0aGUgZ3VscCB0YXNrcyBhbmQgaW5jbHVkZSB0aGUgZm9sbG93aW5nIGxpc3QuIFNlZSB0aGUgYGd1bHBmaWxlLmpzYCBmb3IgZGV0YWlsc1xuXG4tIGpzaGludFxuLSBwcmVwYXJpbmcgQW5ndWxhcidzIHRlbXBsYXRlY2FjaGUgZm9yIGh0bWwgdGVtcGxhdGVzXG4tIGNvbmNhdCB0YXNrIHRvIGJ1bmRsZSBjc3MgYW5kIGpzLCBzZXBhcmF0ZWx5XG4tIEFuZ3VsYXIgZGVwZW5kZW5jeSBpbmplY3Rpb24gYW5ub3RhdGlvbnMgdXNpbmcgbmdBbm5vdGF0ZVxuLSB1Z2xpZnkgdG8gbWluaWZ5IGFuZCBtYW5nbGUgamF2YXNjcmlwdFxuLSBzb3VyY2UgbWFwc1xuLSBjc3MgYXV0b3ByZWZpeGVyIGZvciB2ZW5kb3IgcHJlZml4ZXNcbi0gbWluaWZ5IGNzc1xuLSBvcHRpbWl6ZSBpbWFnZXNcbi0gaW5kZXguaHRtbCBpbmplY3Rpb24gZm9yIHNjcmlwdHMgYW5kIGxpbmtzXG4tIGRlcGxveWluZyBhbGwganMsIGNzcywgaW1hZ2VzLCBmb250cywgYW5kIGluZGV4Lmh0bWxcblxuIyMgSG93IFRoZSBBcHAgV29ya3NcblRoZSBhcHAgaXMgcXVpdGUgc2ltcGxlIGFuZCBoYXMgMiBtYWluIHJvdXRlczpcbi0gZGFzaGJvYXJkXG4tIGF2ZW5nZXJzIGxpc3RcblxuIyMjIFRoZSBNb2R1bGVzXG5UaGUgYXBwIGhhcyA0IGZlYXR1cmUgbW9kdWxlcyBhbmQgZGVwZW5kcyBvbiBhIHNlcmllcyBvZiBleHRlcm5hbCBtb2R1bGVzIGFuZCBjdXN0b20gYnV0IGNyb3NzLWFwcCBtb2R1bGVzXG5cblx0YXBwIC0tPiBbXG5cdCAgICAgICAgYXBwLmF2ZW5nZXJzLFxuXHQgICAgICAgIGFwcC5kYXNoYm9hcmQsXG5cdCAgICAgICAgYXBwLmxheW91dCxcblx0ICAgICAgICBhcHAud2lkZ2V0cyxcblx0XHRcdGFwcC5jb3JlIC0tPiBbXG5cdFx0XHRcdG5nQW5pbWF0ZSxcblx0XHRcdFx0bmdSb3V0ZSxcblx0XHRcdFx0bmdTYW5pdGl6ZSxcblx0XHRcdFx0YmxvY2tzLmV4Y2VwdGlvbixcblx0XHRcdFx0YmxvY2tzLmxvZ2dlcixcblx0XHRcdFx0YmxvY2tzLnJvdXRlclxuXHRcdFx0XVxuXHQgICAgXVxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjcwOWQ2OTg0LTZmM2MtNDhlNC1iYzcxLTExOWFkNWIxMTJmYyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgU3R5bGUgR3VpZGVcblxuIyMgVmVyc2lvbnNcblRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBBbmd1bGFyLCBhbmQgdGh1cyB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgb2YgdGhlIGd1aWRlLiBDaG9vc2UgeW91ciBndWlkZSBhcHByb3ByaWF0ZWx5LlxuXG4jIyMgQW5ndWxhciAxIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMSBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMS9SRUFETUUubWQpLlxuXG4jIyMgQW5ndWxhciAyIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMiBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMi9SRUFETUUubWQpLlxuXG4jIyBBbmd1bGFyIFRlYW0gRW5kb3JzZWRcblNwZWNpYWwgdGhhbmtzIHRvIElnb3IgTWluYXIsIGxlYWQgb24gdGhlIEFuZ3VsYXIgdGVhbSwgZm9yIHJldmlld2luZywgY29udHJpYnV0aW5nIGZlZWRiYWNrLCBhbmQgZW50cnVzdGluZyBtZSB0byBzaGVwaGVyZCB0aGlzIGd1aWRlLlxuXG4jIyBQdXJwb3NlXG4qT3BpbmlvbmF0ZWQgQW5ndWxhciBzdHlsZSBndWlkZSBmb3IgdGVhbXMgYnkgW0Bqb2huX3BhcGFdKC8vdHdpdHRlci5jb20vam9obl9wYXBhKSpcblxuSWYgeW91IGFyZSBsb29raW5nIGZvciBhbiBvcGluaW9uYXRlZCBzdHlsZSBndWlkZSBmb3Igc3ludGF4LCBjb252ZW50aW9ucywgYW5kIHN0cnVjdHVyaW5nIEFuZ3VsYXIgYXBwbGljYXRpb25zLCB0aGVuIHN0ZXAgcmlnaHQgaW4uIFRoZXNlIHN0eWxlcyBhcmUgYmFzZWQgb24gbXkgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZSB3aXRoIFtBbmd1bGFyXSgvL2FuZ3VsYXJqcy5vcmcpLCBwcmVzZW50YXRpb25zLCBbUGx1cmFsc2lnaHQgdHJhaW5pbmcgY291cnNlc10oaHR0cDovL2FwcC5wbHVyYWxzaWdodC5jb20vYXV0aG9yL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG5cblRoZSBwdXJwb3NlIG9mIHRoaXMgc3R5bGUgZ3VpZGUgaXMgdG8gcHJvdmlkZSBndWlkYW5jZSBvbiBidWlsZGluZyBBbmd1bGFyIGFwcGxpY2F0aW9ucyBieSBzaG93aW5nIHRoZSBjb252ZW50aW9ucyBJIHVzZSBhbmQsIG1vcmUgaW1wb3J0YW50bHksIHdoeSBJIGNob29zZSB0aGVtLlxuXG4+SWYgeW91IGxpa2UgdGhpcyBndWlkZSwgY2hlY2sgb3V0IG15IFtBbmd1bGFyIFBhdHRlcm5zOiBDbGVhbiBDb2RlXShodHRwOi8vanBhcGEubWUvbmdjbGVhbikgY291cnNlIGF0IFBsdXJhbHNpZ2h0IHdoaWNoIGlzIGEgY29tcGFuaW9uIHRvIHRoaXMgZ3VpZGUuXG5cbiAgWyFbQW5ndWxhciBQYXR0ZXJuczogQ2xlYW4gQ29kZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS9tYXN0ZXIvYTEvYXNzZXRzL25nLWNsZWFuLWNvZGUtYmFubmVyLnBuZyldKGh0dHA6Ly9qcGFwYS5tZS9uZ2NsZWFuKVxuXG4jIyBDb21tdW5pdHkgQXdlc29tZW5lc3MgYW5kIENyZWRpdFxuTmV2ZXIgd29yayBpbiBhIHZhY3V1bS4gSSBmaW5kIHRoYXQgdGhlIEFuZ3VsYXIgY29tbXVuaXR5IGlzIGFuIGluY3JlZGlibGUgZ3JvdXAgd2hvIGFyZSBwYXNzaW9uYXRlIGFib3V0IHNoYXJpbmcgZXhwZXJpZW5jZXMuIE1hbnkgb2YgbXkgc3R5bGVzIGhhdmUgYmVlbiBmcm9tIHRoZSBtYW55IHBhaXIgcHJvZ3JhbW1pbmcgc2Vzc2lvbnMgW1dhcmQgQmVsbF0oaHR0cHM6Ly90d2l0dGVyLmNvbS93YXJkYmVsbCkgYW5kIEkgaGF2ZSBoYWQuIE15IG1vc3QgZXhjZWxsZW50IGZyaWVuZCBXYXJkIGhhcyBoZWxwZWQgaW5mbHVlbmNlIHRoZSB1bHRpbWF0ZSBldm9sdXRpb24gb2YgdGhlc2UgZ3VpZGVzLlxuXG4jIyBDb250cmlidXRpbmdcbk9wZW4gYW4gaXNzdWUgZmlyc3QgdG8gZGlzY3VzcyBwb3RlbnRpYWwgY2hhbmdlcy9hZGRpdGlvbnMuIElmIHlvdSBoYXZlIHF1ZXN0aW9ucyB3aXRoIHRoZSBndWlkZSwgZmVlbCBmcmVlIHRvIGxlYXZlIHRoZW0gYXMgaXNzdWVzIGluIHRoZSByZXBvc2l0b3J5LiBJZiB5b3UgZmluZCBhIHR5cG8sIGNyZWF0ZSBhIHB1bGwgcmVxdWVzdC4gVGhlIGlkZWEgaXMgdG8ga2VlcCB0aGUgY29udGVudCB1cCB0byBkYXRlIGFuZCB1c2UgZ2l0aHVi4oCZcyBuYXRpdmUgZmVhdHVyZSB0byBoZWxwIHRlbGwgdGhlIHN0b3J5IHdpdGggaXNzdWVzIGFuZCBQUuKAmXMsIHdoaWNoIGFyZSBhbGwgc2VhcmNoYWJsZSB2aWEgZ29vZ2xlLiBXaHk/IEJlY2F1c2Ugb2RkcyBhcmUgaWYgeW91IGhhdmUgYSBxdWVzdGlvbiwgc29tZW9uZSBlbHNlIGRvZXMgdG9vISBZb3UgY2FuIGxlYXJuIG1vcmUgaGVyZSBhdCBhYm91dCBob3cgdG8gY29udHJpYnV0ZS5cblxuKkJ5IGNvbnRyaWJ1dGluZyB0byB0aGlzIHJlcG9zaXRvcnkgeW91IGFyZSBhZ3JlZWluZyB0byBtYWtlIHlvdXIgY29udGVudCBhdmFpbGFibGUgc3ViamVjdCB0byB0aGUgbGljZW5zZSBvZiB0aGlzIHJlcG9zaXRvcnkuKlxuXG4jIyMgUHJvY2Vzc1xuICAgIDEuIERpc2N1c3MgdGhlIGNoYW5nZXMgaW4gYSBHaXRIdWIgaXNzdWUuXG4gICAgMi4gT3BlbiBhIFB1bGwgUmVxdWVzdCwgcmVmZXJlbmNlIHRoZSBpc3N1ZSwgYW5kIGV4cGxhaW4gdGhlIGNoYW5nZSBhbmQgd2h5IGl0IGFkZHMgdmFsdWUuXG4gICAgMy4gVGhlIFB1bGwgUmVxdWVzdCB3aWxsIGJlIGV2YWx1YXRlZCBhbmQgZWl0aGVyIG1lcmdlZCBvciBkZWNsaW5lZC5cblxuIyMgTGljZW5zZVxuXG5fdGxkcjsgVXNlIHRoaXMgZ3VpZGUuIEF0dHJpYnV0aW9ucyBhcmUgYXBwcmVjaWF0ZWQuX1xuXG4jIyMgQ29weXJpZ2h0XG5cbkNvcHlyaWdodCAoYykgMjAxNC0yMDE2IFtKb2huIFBhcGFdKGh0dHA6Ly9qb2hucGFwYS5uZXQpXG5cbiMjIyAoVGhlIE1JVCBMaWNlbnNlKVxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG5hIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbidTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG5FWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbk1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG5DTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcblNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4qKltCYWNrIHRvIHRvcF0oI2FuZ3VsYXItc3R5bGUtZ3VpZGUpKipcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjVjNzQ5MzdlLThjNjgtNGFhZS1iY2MxLWU3NDk3MGRlMjYzZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1ndWxwXG5Zb3UndmUgYnVpbHQgeW91ciBKYXZhU2NyaXB0IGFwcGxpY2F0aW9uIGJ1dCBob3cgZG8geW91IGF1dG9tYXRlIHRlc3RpbmcsIGNvZGUgYW5hbHlzaXMsIHJ1bm5pbmcgaXQgbG9jYWxseSBvciBkZXBsb3lpbmcgaXQ/IFRoZXNlIHJlZHVuZGFudCB0YXNrcyBjYW4gY29uc3VtZSB2YWx1YWJsZSB0aW1lIGFuZCByZXNvdXJjZXMuIFN0b3Agd29ya2luZyBzbyBoYXJkIGFuZCB0YWtlIGFkdmFudGFnZSBvZiBKYXZhU2NyaXB0IHRhc2sgYXV0b21hdGlvbiB1c2luZyBHdWxwIHRvIHN0cmVhbWxpbmUgdGhlc2UgdGFza3MgYW5kIGdpdmUgeW91IGJhY2sgbW9yZSB0aW1lIGluIHRoZSBkYXkuIFN0dWR5aW5nIHRoaXMgcmVwbyBjYW4gaGVscCBjbGFyaWZ5IGhvdyBHdWxwIHdvcmtzLCBqdW1wLXN0YXJ0IHRhc2sgYXV0b21hdGlvbiB3aXRoIEd1bHAsIGZpbmQgYW5kIHJlc29sdmUgaXNzdWVzIGZhc3RlciwgYW5kIGJlIGEgbW9yZSBwcm9kdWN0aXZlLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuLSBJbnN0YWxsIE5vZGVcblx0LSBvbiBPU1ggaW5zdGFsbCBbaG9tZSBicmV3XShodHRwOi8vYnJldy5zaC8pIGFuZCB0eXBlIGBicmV3IGluc3RhbGwgbm9kZWBcblx0LSBvbiBXaW5kb3dzIGluc3RhbGwgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBcbiAgICAtIFJlYWQgaGVyZSBmb3Igc29tZSBbdGlwcyBvbiBXaW5kb3dzXShodHRwOi8vanBhcGEubWUvd2lubm9kZSlcbiAgICAtIG9wZW4gY29tbWFuZCBwcm9tcHQgYXMgYWRtaW5pc3RyYXRvclxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzLmluc3RhbGxgXG4tIE9uIE9TWCB5b3UgY2FuIGFsbGV2aWF0ZSB0aGUgbmVlZCB0byBydW4gYXMgc3VkbyBieSBbZm9sbG93aW5nIHRoZXNlIGluc3RydWN0aW9uc10oaHR0cDovL2pwYXBhLm1lL25vbW9yZXN1ZG8pLiBJIGhpZ2hseSByZWNvbW1lbmQgdGhpcyBzdGVwIG9uIE9TWFxuLSBPcGVuIHRlcm1pbmFsXG4tIFR5cGUgYG5wbSBpbnN0YWxsIC1nIG5vZGUtaW5zcGVjdG9yIGJvd2VyIGd1bHBgXG5cbiMjIFF1aWNrIFN0YXJ0XG5QcmlvciB0byB0YWtpbmcgdGhlIGNvdXJzZSwgY2xvbmUgdGhpcyByZXBvIGFuZCBydW4gdGhlIGNvbnRlbnQgbG9jYWxseVxuYGBgYmFzaFxuJCBucG0gaW5zdGFsbFxuJCBib3dlciBpbnN0YWxsXG4kIG5wbSBzdGFydFxuYGBgXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImE1M2EwM2FjLWMzOTAtNDFiZi1hNjI3LWQ2YTc0OGE2MmI0YiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1uZy10ZXN0aW5nXG5UQkQ6IFdoYXQgaXMgdGhpc1xuXG4jIyBJbnN0YWxsXG5cbiogY2xvbmUgZnJvbSBnaXRodWIgb3IgZG93bmxvYWQgaXRcbiogYG5wbSBpbnN0YWxsYFxuXG4jIyBSdW5cbiogbGF1bmNoIHNlcnZlciBpbiB0ZXJtaW5hbC9jb21tYW5kIHdpbmRvdzogYG5vZGUgc3JjL3NlcnZlci9hcHAuanNgXG4qIEZvciBhcHAsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi8+XG4qIEZvciBtaW5Nb2NoYS5odG1sLCBicm93c2UgdG86IDxodHRwOi8vbG9jYWxob3N0OjcyNzIvbWluTW9jaGEuaHRtbD5cbiogRm9yIHNwZWNzLmh0bWwsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi9zcGVjcy5odG1sPlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiY2Y3MTU5ODUtMDc2OC00Y2Y3LWJmZDUtOTdhNDI0MzcyZTc0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtYW5ndWxhci10eXBlc2NyaXB0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cDovL2NoYW5uZWw5Lm1zZG4uY29tL0V2ZW50cy9CdWlsZC8yMDE1LzMtNjgwKSBwcmVzZW50ZWQgYnkgRXJpY2ggR2FtbWEsIENocmlzIERpYXMgYW5kIEpvaG4gUGFwYS5cblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBJbnN0YWxsIFtOb2RlLmpzXShodHRwOi8vbm9kZWpzLm9yZykgXG4gLSBvbiBPU1ggdXNlIFtob21lYnJld10oaHR0cDovL2JyZXcuc2gpIGBicmV3IGluc3RhbGwgbm9kZWBcbiAtIG9uIFdpbmRvd3MgdXNlIFtjaG9jb2xhdGV5XShodHRwczovL2Nob2NvbGF0ZXkub3JnLykgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuXG4yLiBJbnN0YWxsIFllb21hbiBgbnBtIGluc3RhbGwgLWcgeW9gXG5cbjMuIEluc3RhbGwgdGhlc2UgTlBNIHBhY2thZ2VzIGdsb2JhbGx5XG5cbiAgICBgYGBiYXNoXG4gICAgbnBtIGluc3RhbGwgLWcgYm93ZXIgZ3VscCBub2RlbW9uXG4gICAgYGBgXG5cbiAgICA+UmVmZXIgdG8gdGhlc2UgW2luc3RydWN0aW9ucyBvbiBob3cgdG8gbm90IHJlcXVpcmUgc3Vkb10oaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9ndWlkZXMvYmxvYi9tYXN0ZXIvbnBtLWdsb2JhbC13aXRob3V0LXN1ZG8ubWQpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIzYWE2NDkzZS02NTg5LTQwMmEtYmY5YS1hZDU4M2MxYWFhZWMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERTRNVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzYxZmY0ZTBkOTg2YTQ1OWM4NDE0YWVlYTZhZTBhNTcyMTE1Mzc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgcGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXNcblZTIENvZGUgc2FtcGxlcyBmb3IgUGx1cmFsc2lnaHQgY291cnNlIG9uIENvZGVcblxuRm9yIG1vc3Qgc2FtcGxlcyB5b3Ugd2lsbCBuZWVkIHRoZXNlIGdsb2JhbCBucG0gcGFja2FnZXMgdG8gYmUgaW5zdGFsbGVkLlxuXG5gYGBqYXZhc2NyaXB0XG5ucG0gaW5zdGFsbCBncnVudC1jbGkgZ3VscCBib3dlciB0eXBlc2NyaXB0IGJhYmVsIC1nXG5gYGBcblxuIyMgYXNwIHBsYXlcbkFTUC5ORVQgNSBzYW1wbGUgYXBwbGljYXRpb24uIENyZWF0ZWQgZnJvbSB0aGUgYXNwLm5ldCBnZW5lcmF0b3JcblxuRmlyc3QgbWFrZSBzdXJlIHlvdSBpbnN0YWxsIEFTUC5ORVQgNSBhbmQgRE5YXG5cbiMjIGFuZ3VsYXIyZml2ZW1pbnV0ZXNcbkFuZ3VsYXIgMiBzYW1wbGUgYXBwbGljYXRpb24uXG5cblJ1biBhIHN0YXRpYyBzZXJ2ZXIgaW4gdGhlIHJvb3RcblxuYGBgamF2YXNjcmlwdFxuY2QgYW5ndWxhcjJmaXZlbWludXRlc1xuc3NcbmBgYFxuXG4jIyBjb2RlIHBsYXlcbkphdmFTY3JpcHQgKEVTNSkgc2FtcGxlIGFwcGxpY2F0aW9uLiBDcmVhdGVkIGZyb20gdGhlIEhvdCBUb3dlbCBnZW5lcmF0b3IuXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBjb2RlcGxheVxubnBtIGluc3RhbGxcbmJvd2VyIGluc3RhbGxcbmBgYFxuXG5UbyBydW4gaXRcblxuYGBgamF2YXNjcmlwdFxuZ3VscCBzZXJ2ZS1kZXZcbmBgYFxuXG4jIyBlczYgcGxheVxuSmF2YVNjcmlwdCAoRVM2KSBzYW1wbGUgYXBwbGljYXRpb24uXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBlczZwbGF5XG5ucG0gaW5zdGFsbFxuYm93ZXIgaW5zdGFsbFxuYGBgXG5cblRvIHJ1biBpdFxuXG5gYGBqYXZhc2NyaXB0XG5ndWxwIHNlcnZlLWRldlxuYGBgXG5cbiMjIGdydW50cHJvamVjdFxuR3J1bnQgZmlsZSBzYW1wbGUgYXBwbGljYXRpb24uXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBncnVudHByb2plY3Rcbm5wbSBpbnN0YWxsXG5gYGBcblxuVG8gcnVuIGl0XG5cbmBgYGphdmFzY3JpcHRcbmdydW50IGdydW50LWhpbnRcbmBgYFxuXG4jIyB0cyBwbGF5XG5UeXBlU2NyaXB0IHNhbXBsZSBhcHBsaWNhdGlvbi5cblxuR2V0IGFsbCBjb2RlXG5cbmBgYGphdmFzY3JpcHRcbmNkIHRzcGxheVxubnBtIGluc3RhbGxcbmJvd2VyIGluc3RhbGxcbmBgYFxuXG5UbyBydW4gaXRcblxuYGBgamF2YXNjcmlwdFxuZ3VscCBzZXJ2ZS1kZXZcbmBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlNTQ1YWQyNC0yZTNkLTQzMTEtOTc4ZS1iZjkxZDkzMDRmNDYiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJob3R0b3dlbC1hbmd1bGFyLXR5cGVzY3JpcHQiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbTo4MC9FdmVudHMvQnVpbGQvMjAxNS8zLTY4MD9XVC5tY19pZD1ob3R0b3dlbGFuZ3VsYXJ0eXBlc2NyaXB0LWdpdGh1Yi1qb3BhcGEpIHByZXNlbnRlZCBieSBFcmljaCBHYW1tYSwgQ2hyaXMgRGlhcyBhbmQgSm9obiBQYXBhLlxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEluc3RhbGwgW05vZGUuanNdKGh0dHA6Ly9ub2RlanMub3JnKSBcbiAtIG9uIE9TWCB1c2UgW2hvbWVicmV3XShodHRwOi8vYnJldy5zaCkgYGJyZXcgaW5zdGFsbCBub2RlYFxuIC0gb24gV2luZG93cyB1c2UgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBgY2hvY28gaW5zdGFsbCBub2RlanNgXG5cbjIuIEluc3RhbGwgWWVvbWFuIGBucG0gaW5zdGFsbCAtZyB5b2BcblxuMy4gSW5zdGFsbCB0aGVzZSBOUE0gcGFja2FnZXMgZ2xvYmFsbHlcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaW5zdGFsbCAtZyBib3dlciBndWxwIG5vZGVtb25cbiAgICBgYGBcblxuICAgID5SZWZlciB0byB0aGVzZSBbaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBub3QgcmVxdWlyZSBzdWRvXShodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2d1aWRlcy9ibG9iL21hc3Rlci9ucG0tZ2xvYmFsLXdpdGhvdXQtc3Vkby5tZClcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwYmFmODI5Mi00MmU3LTRjYWQtYjE2Mi1lZjI2YzA0MDM1MDIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EZzFOakkwTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVHlwZVNjcmlwdERlbW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ4YTc2N2NmMjNkN2ViMDQ4ZDA0NDdmYjk3MTczYjczODc0ZWMwZGUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFR5cGVTY3JpcHQgRXhhbXBsZXNcblxuIyMgUnVubmluZyB0aGUgQXBwbGljYXRpb25cblxuMS4gSW5zdGFsbCBOb2RlLmpzIGZyb20gaHR0cDovL25vZGVqcy5vcmdcblxuMS4gUnVuIGBucG0gaW5zdGFsbGAgXG5cbjEuIFJ1biBgbnBtIHN0YXJ0YCB0byBjb21waWxlIHRoZSBUeXBlU2NyaXB0IGFuZCBzdGFydCB0aGUgc2VydmVyIFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYTM3MTM1N2UtMTJhZC00ZGFjLTgwYTAtYTFhNDE4YmNlNzQ1Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVNREU1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXIxLXNuaXBwZXRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY2ZDYyMzY0NTM0ZGRiNmZjZDNkZmVhOWQxOTQ0ZGQ1MGRmMmY0ZDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgMSBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0IFNuaXBwZXRzIGZvciBWUyBDb2RlXG5cblRoaXMgZXh0ZW5zaW9uIGZvciBWaXN1YWwgU3R1ZGlvIENvZGUgYWRkcyBzbmlwcGV0cyBmb3IgQW5ndWxhciAxIGZvciBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0LlxuXG4hW1VzZSBFeHRlbnNpb25dKGltYWdlcy91c2UtZXh0ZW5zaW9uLmdpZilcblxuIyMgVXNhZ2VcblxuVHlwZSBwYXJ0IG9mIGEgc25pcHBldCwgcHJlc3MgYGVudGVyYCwgYW5kIHRoZSBzbmlwcGV0IHVuZm9sZHMuXG5cbkphdmFTY3JpcHQgU25pcHBldHNcblxuYGBgamF2YXNjcmlwdFxubmcxY29tcG9uZW50OyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29tcG9uZW50XG5uZzFjb250cm9sbGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29udHJvbGxlclxubmcxZGlyZWN0aXZlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZGlyZWN0aXZlXG5uZzFmYWN0b3J5OyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZmFjdG9yeVxubmcxbW9kdWxlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgbW9kdWxlXG5uZzFzZXJ2aWNlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgc2VydmljZVxubmcxZmlsdGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZmlsdGVyXG5gYGBcblxuVHlwZVNjcmlwdCBTbmlwcGV0c1xuXG5gYGB0eXBlc2NyaXB0XG5uZzFjb250cm9sbGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29udHJvbGxlclxubmcxc2VydmljZTsgLy8gY3JlYXRlcyBhbiBBbmd1bGFyIHNlcnZpY2Vcbm5nMW1vZHVsZTsgLy8gY3JlYXRlcyBhbiBBbmd1bGFyIG1vZHVsZVxuYGBgXG5cbkFsdGVybmF0aXZlbHksIHByZXNzIGBDdHJsYCtgU3BhY2VgIChXaW5kb3dzLCBMaW51eCkgb3IgYENtZGArYFNwYWNlYCAoT1NYKSB0byBhY3RpdmF0ZSBzbmlwcGV0cyBmcm9tIHdpdGhpbiB0aGUgZWRpdG9yLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuMS4gSW5zdGFsbCBWaXN1YWwgU3R1ZGlvIENvZGUgMC4xMC4xIG9yIGhpZ2hlclxuMi4gTGF1bmNoIENvZGVcbjMuIEZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBgQ3RybGAtYFNoaWZ0YC1gUGAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYC1gU2hpZnRgLWBQYCAoT1NYKVxuNC4gU2VsZWN0IGBJbnN0YWxsIEV4dGVuc2lvbmBcbjUuIENob29zZSB0aGUgZXh0ZW5zaW9uXG42LiBSZWxvYWQgVmlzdWFsIFN0dWRpbyBDb2RlXG5cbiFbSW5zdGFsbCBFeHRlbnNpb25dKGltYWdlcy9pbnN0YWxsLWV4dGVuc2lvbi5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMDgwNzdkNy1kM2JiLTQxYjItYWViNS1lMWU3MDAxOTRhODEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01EWTFOakExTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWhvc3RlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1Yzc5MzZhY2MzOWI1MGFiMTFjNGY2YmE5ZjcyYjQ1ZDIwOWE2NTE0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyRmlyc3RMb29rSG9zdGVkXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiA2LjAuNy5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC0tcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjNkZmM4YzYxLTJiZGYtNGY1Yi1iMjhlLTY2ZDE1YjhlNWY3NyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qY3lNall6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhcldvcmtzaG9wTGFicyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0M2ZlYTVjMDM4NWU4NjQwZjliMWE1ZTE0ZjU1NGQzOTNmY2NhZjgxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIGFuZCBUeXBlU2NyaXB0IFdvcmtzaG9wIExhYnNcblxuVGhlc2UgbGFicyBhcmUgdXNlZCBpbiB3b3Jrc2hvcHMgSSBjb25kdWN0IGF0IHZhcmlvdXMgY29uZmVyZW5jZXMuXG5cbkNvcHlyaWdodCAyMDE4IFdhaGxpbiBDb25zdWx0aW5nIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNTcwNTkwNzUtYWFiZC00MDRiLWI4OGYtMTk4OTg4YWVkYTk2Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBFdmVudFZpZXdDbGlcblxuQW5ndWxhciBEZW1vIHdpdGggYSBMaXR0bGUgYml0IG9mIGEgbG90IG9mIGZlYXR1cmVzXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5wbSBydW4gc3RhcnQtbmdgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQzMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIFJlc291cmNlc1xuXG4tIEdldCBbVlMgQ29kZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vP3d0Lm1jX2lkPWFuZ3VsYXJldmVudHZpZXdjbGktZ2l0aHViLWpvcGFwYSlcbi0gR2V0IHRoZSBWUyBDb2RlIFtBbmd1bGFyIEVzc2VudGlhbHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyLWVzc2VudGlhbHMmd3QubWNfaWQ9YW5ndWxhcmV2ZW50dmlld2NsaS1naXRodWItam9wYXBhKVxuLSBHZXQgdGhlIFZTIENvZGUgW0FuZ3VsYXIgU25pcHBldHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyMiZ3dC5tY19pZD1hbmd1bGFyZXZlbnR2aWV3Y2xpLWdpdGh1Yi1qb3BhcGEpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0ZWUwOWI2MS1iMjE0LTRjOWUtYTA1Ni0wOGMzNTY0NjlmMjQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvKVxuXG5bVHJ5IEF6dXJlIEZ1bmN0aW9ucyBQbGF5Z3JvdW5kXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vdHJ5L2FwcC1zZXJ2aWNlL2Z1bmN0aW9ucy8pXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyYWZlN2UzMC1kNzMwLTQ4MDctODVjMi01MTM0NzFlYWM5YmIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWF6dXJlLWZ1bmN0aW9ucy10b29scyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgaW5zdGVhZC5cblxuIyMgRmVhdHVyZXNcblRoaXMgZXh0ZW5zaW9uIGZvciBWaXN1YWwgU3R1ZGlvIENvZGUgaW5jbHVkZXM6XG5cbi0gSlNPTiBJbnRlbGxpc2Vuc2UgZm9yIGBob3N0Lmpzb25gLCBgZnVuY3Rpb24uanNvbmAgYW5kIGBwcm94aWVzLmpzb25gXG4tIFNuaXBwZXRzIGZvciBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0IGZ1bmN0aW9uc1xuXG4+IFdlJ2xsIGFkZCBvdGhlciBmZWF0dXJlcyBpbiBmdXR1cmUgdmVyc2lvbnNcblxuYGBgamF2YXNjcmlwdFxuLy8gSmF2YVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgSmF2YVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuYGBgamF2YXNjcmlwdFxuLy8gVHlwZVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgVHlwZVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuIyMjIEpTT04gU2NoZW1hIEludGVsbGlzZW5zZVxuIVtKU09OIFNjaGVtYV0oaW1hZ2VzL2pzb24tc2NoZW1hLWZ1bmN0aW9uLmdpZilcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChtYWNPUykgdG8gYWN0aXZhdGUgaW50ZWxsaXNlbnNlIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjExLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChtYWNPUylcbjQuIFNlbGVjdCBgSW5zdGFsbCBFeHRlbnNpb25gXG41LiBDaG9vc2UgdGhlIGV4dGVuc2lvblxuNi4gUmVsb2FkIFZpc3VhbCBTdHVkaW8gQ29kZVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMzNlOTQ4ZWYtNDYyNC00YjVhLThlMDYtNGQ5ZmE5ZmZmYmZiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56QXdORE00TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NmJmOWE1OTkwYTI4NGYzOWZhOTI3NTA4YjZjYWZhMzQ3MGY3YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBPbmUgV2l0aCBBbmd1bGFyXG5cbkZpbmQgdGhlIFtBenVyZSBGdW5jdGlvbnMgU2VydmVybGVzcyBBUEkgZm9yIHRoaXMgYXBwIGxvY2F0ZWQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXItYXBpKS5cblxuYGBgYmFzaFxuZ2l0IGNsb25lIGdpdEBnaXRodWIuY29tOmpvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXIuZ2l0IG9uZVxuY2Qgb25lXG5ucG0gaW5zdGFsbFxuYGBgXG5cbkRpc2NhcmQgdGhlIGAuZ2l0YCBmb2xkZXJcblxuYGBgYmFzaFxucm0gLXJmIC5naXQgICMgT1MvWCAoYmFzaClcbnJkIC5naXQgL1MvUSAjIHdpbmRvd3NcbmBgYFxuXG4jIyBEb2NrZXJcblxuLSBJbnN0YWxsIGFuZCBydW4gW0RvY2tlcl0oaHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9jb21tdW5pdHktZWRpdGlvbilcblxuIyMjIERvY2tlciBDb21wb3NlXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIHVwIC1kIC0tYnVpbGRcbm9wZW4gaHR0cDovL2xvY2FsaG9zdDo0MjAwXG5gYGBcblxuIyMjIERvY2tlciBDb21wb3NlIHdpdGggRGVidWdnaW5nXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIC1mIGRvY2tlci1jb21wb3NlLmRlYnVnLnltbCB1cCAtZCAtLWJ1aWxkXG5vcGVuIGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMFxuYGBgXG5cbk9wZW4gVlMgQ29kZSwgbGF1bmNoIHRoZSBgRG9ja2VyOiBBdHRhY2ggdG8gTm9kZWAgZGVidWdnaW5nIHByb2ZpbGVcblxuIyMjIERvY2tlciBSdW5cblxuYGBgYmFzaFxuZG9ja2VySW1hZ2U9b25lLXdpdGgtYW5ndWxhclxucG9ydD00MjAwXG5cbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAkcG9ydDozMDAwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1Y2QzMzJlNy1hNWE2LTRiNTctYTI1My1mZjhmYzdhZWNlYTciCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJvbmUtd2l0aC1hbmd1bGFyLWFwaSIsCiAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvP1dULm1jX2lkPW9uZXdpdGhhbmd1bGFyYXBpLWdpdGh1Yi1qb3BhcGEpXG5cbltUcnkgQXp1cmUgRnVuY3Rpb25zIFBsYXlncm91bmRdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS90cnkvYXBwLXNlcnZpY2UvZnVuY3Rpb25zLz9XVC5tY19pZD1vbmV3aXRoYW5ndWxhcmFwaS1naXRodWItam9wYXBhKVxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjk4NmI2NWM2LTU0YzYtNDAxMC1hODgwLWVmOGQ3ZjE5N2VmYiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBQUk9KRUNUIE5BTUVcblxuLi4uXG5cbiMjIFRhYmxlIE9mIENvbnRlbnRzXG5cbi0gW0ZlYXR1cmVzXSgjZmVhdHVyZXMpXG4tIFtRdWlja1N0YXJ0XSgjcXVpY2tzdGFydClcbi0gW1JlcXVpcmVtZW50c10oI3JlcXVpcmVtZW50cylcbi0gW0luc3RhbGxhdGlvbl0oI2luc3RhbGxhdGlvbilcbi0gW0RlbW9dKCNkZW1vKVxuXG4jIyBGZWF0dXJlc1xuXG5UaGlzIHByb2plY3QgZnJhbWV3b3JrIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXM6XG5cbiMjIFF1aWNrU3RhcnRcblxuMS5cbjIuXG4zLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuKGlkZWFsbHkgdmVyeSBzaG9ydCwgaWYgYW55KVxuXG4tXG5cbiMjIEluc3RhbGxhdGlvblxuXG4oaWRlYWxseSB2ZXJ5IHNob3J0KVxuXG4tXG5cbiMjIERlbW9cblxuQSBkZW1vIGFwcCBpcyBpbmNsdWRlZCB0byBzaG93IGhvdyB0byB1c2UgdGhlIHByb2plY3QuXG5cblRvIHJ1biB0aGUgZGVtbywgZm9sbG93IHRoZXNlIHN0ZXBzOlxuXG4jIyBSZXNvdXJjZXNcblxuLVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzA3MjU5NzYtYjQ2MS00OTFhLWFkYzctZmRlYzE3YjdmNWQxIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3Rhci13YXJzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaSlcblxuTG9naW5cblxuYGBgYmFzaFxuYXogbG9naW5cbmBgYFxuXG5DcmVhdGUgYSBwbGFjZSB0byBsb2dpY2FsbHV5IHN0b3JlIGV2ZXJ5dGhpbmcgKHJlc291cmNlIGdyb3VwKVxuXG5gYGBiYXNoXG5heiBncm91cCBjcmVhdGUgLW4gUGFwYVN0YXJXYXJzQXBpR3JvdXAgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBzdG9yYWdlIHJlc291cmNlIGZvciB0aGUgRnVuY3Rpb24gQXBwXG5cbmBgYGJhc2hcbmF6IHN0b3JhZ2UgYWNjb3VudCBjcmVhdGUgLW4gcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtZyBQYXBhU3RhcldhcnNBcGlHcm91cCAtLXNrdSBTdGFuZGFyZF9MUlMgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogZnVuY3Rpb25hcHAgY3JlYXRlIC1uIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC1zIHBhcGFzdGFyd2Fyc2FwaXN0b3JhZ2UgLWMgZWFzdHVzXG5gYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImMxYjlhOTEzLTJlN2MtNDcwYy05OWFiLTc4OWYzN2JhYTNhZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEV4cGlyZVxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS4wLjEuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5CZWZvcmUgcnVubmluZyB0aGUgdGVzdHMgbWFrZSBzdXJlIHlvdSBhcmUgc2VydmluZyB0aGUgYXBwIHZpYSBgbmcgc2VydmVgLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2Y2VlMTAzYS1hNjczLTRiY2QtOTU4Ny0zOTczMDg0MDhiZWEiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJ2c2NvZGUtYXp1cmUtZnVuY3Rpb25zLXRvb2xzIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucyZXVC5tY19pZD12c2NvZGVhenVyZWZ1bmN0aW9uc3Rvb2xzLWdpdGh1Yi1qb3BhcGEpIGluc3RlYWQuXG5cbiMjIEZlYXR1cmVzXG5UaGlzIGV4dGVuc2lvbiBmb3IgVmlzdWFsIFN0dWRpbyBDb2RlIGluY2x1ZGVzOlxuXG4tIEpTT04gSW50ZWxsaXNlbnNlIGZvciBgaG9zdC5qc29uYCwgYGZ1bmN0aW9uLmpzb25gIGFuZCBgcHJveGllcy5qc29uYFxuLSBTbmlwcGV0cyBmb3IgSmF2YVNjcmlwdCBhbmQgVHlwZVNjcmlwdCBmdW5jdGlvbnNcblxuPiBXZSdsbCBhZGQgb3RoZXIgZmVhdHVyZXMgaW4gZnV0dXJlIHZlcnNpb25zXG5cbmBgYGphdmFzY3JpcHRcbi8vIEphdmFTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIEphdmFTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbmBgYGphdmFzY3JpcHRcbi8vIFR5cGVTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIFR5cGVTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbiMjIyBKU09OIFNjaGVtYSBJbnRlbGxpc2Vuc2VcbiFbSlNPTiBTY2hlbWFdKGltYWdlcy9qc29uLXNjaGVtYS1mdW5jdGlvbi5naWYpXG5cbkFsdGVybmF0aXZlbHksIHByZXNzIGBDdHJsYCtgU3BhY2VgIChXaW5kb3dzLCBMaW51eCkgb3IgYENtZGArYFNwYWNlYCAobWFjT1MpIHRvIGFjdGl2YXRlIGludGVsbGlzZW5zZSBmcm9tIHdpdGhpbiB0aGUgZWRpdG9yLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuMS4gSW5zdGFsbCBWaXN1YWwgU3R1ZGlvIENvZGUgMS4xMS4wIG9yIGhpZ2hlclxuMi4gTGF1bmNoIENvZGVcbjMuIEZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBgQ3RybGAtYFNoaWZ0YC1gUGAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYC1gU2hpZnRgLWBQYCAobWFjT1MpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb25cbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMGY0ZWU4MC1kYmFiLTRjYmUtYmJmZS00ZjcxMzVhNDY2NzMiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJzdGFyLXdhcnMtYXBpIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaT9XVC5tY19pZD1zdGFyd2Fyc2FwaS1naXRodWItam9wYXBhKVxuXG5Mb2dpblxuXG5gYGBiYXNoXG5heiBsb2dpblxuYGBgXG5cbkNyZWF0ZSBhIHBsYWNlIHRvIGxvZ2ljYWxsdXkgc3RvcmUgZXZlcnl0aGluZyAocmVzb3VyY2UgZ3JvdXApXG5cbmBgYGJhc2hcbmF6IGdyb3VwIGNyZWF0ZSAtbiBQYXBhU3RhcldhcnNBcGlHcm91cCAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogc3RvcmFnZSBhY2NvdW50IGNyZWF0ZSAtbiBwYXBhc3RhcndhcnNhcGlzdG9yYWdlIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC0tc2t1IFN0YW5kYXJkX0xSUyAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIEZ1bmN0aW9uIEFwcFxuXG5gYGBiYXNoXG5heiBmdW5jdGlvbmFwcCBjcmVhdGUgLW4gLWcgUGFwYVN0YXJXYXJzQXBpR3JvdXAgLXMgcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtYyBlYXN0dXNcbmBgYFxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjk5ZTBjYmM2LTg2ZDQtNGEyNC1hMDlhLTRiNGJiNzZiMDIwNiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBWUyBDb2RlIEV4dGVuc2lvbiBmb3IgUFdBIFRvb2xpbmdcblZTIENvZGUgRXh0ZW5zaW9uIGZvciBQV0EgVG9vbHNcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHNuaXBwZXRzIGFuZCBKU09OIHNjaGVtYSBmb3IgYSBgbWFuaWZlc3QuanNvbmAgZm9yIGNyZWF0aW5nIFByb2dyZXNzaXZlIFdlYiBBcHBzIChQV0EpLlxuXG4qKlRISVMgSVMgQU4gQUxQSEEgVkVSU0lPTioqXG5cbiFbVXNlIEV4dGVuc2lvbl0oaW1hZ2VzL2luamVjdC1wcmVjYWNoZS5naWYpXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzXG5cbiMjIFVzYWdlXG5UeXBlIHBhcnQgb2YgYSBzbmlwcGV0LCBwcmVzcyBgZW50ZXJgLCBhbmQgdGhlIHNuaXBwZXQgdW5mb2xkcy5cblxuIyMjIEphdmFTY3JpcHQgLyBUeXBlU2NyaXB0IFNuaXBwZXRzXG5gYGBqYXZhc2NyaXB0XG5wd2EtY3VzdG9tLXNlcnZpY2Utd29ya2VyICAgICAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB3b3JrZXIgZmlsZSB3aGljaCBjYW4gYmUgZXh0ZW5kZWRcbnB3YS1yZWdpc3RlciAgICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiB0aGF0IHJlZ2lzdGVycyB0aGUgc2VydmljZSB3b3JrZXJcbmBgYFxuXG4jIyMgSmF2YVNjcmlwdCBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxuLy8gSGVscGZ1bCBmb3IgYnVpbGQgcHJvY2Vzc2VzIHRoYXQgZ2VuZXJhdGUgc2VydmljZSB3b3JrZXIgY29kZVxucHdhLWluamVjdC1wcmVjYWNoZSAgICAgICAgICAgICAgIC8vIGluamVjdCBwcmVjYWNoZSBsaXN0IGludG8gc2VydmljZSB3b3JrZXJcbnB3YS1nZW5lcmF0ZS1zZXJ2aWNlLXdvcmtlciAgICAgICAvLyBnZW5lcmF0ZSBhIHNlcnZpY2Ugd29ya2VyIHdpdGggYSBwcmVjYWNoZSBtYW5pZmVzdFxuXG4vLyBFdmVudCBsaXN0ZW5lcnNcbnB3YS1ldmVudC1wdXNoICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgcHVzaFxucHdhLWV2ZW50LXN5bmMgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBzeW5jXG5wd2EtZXZlbnQtbm90aWZpY2F0aW9uY2xpY2sgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIG5vdGlmaWNhdGlvbmNsaWNrXG5wd2EtZXZlbnQtcHVzaHN1YnNjcmlwdGlvbmNoYW5nZSAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIHB1c2hzdWJzY3JpcHRpb25jaGFuZ2VcbnB3YS1ldmVudC1sb2FkICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgbG9hZFxucHdhLWV2ZW50LWFjdGl2YXRlICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBhY3RpdmF0ZVxucHdhLWV2ZW50LWluc3RhbGwgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBpbnN0YWxsXG5wd2EtZXZlbnQtZmV0Y2ggICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIGZldGNoXG5gYGBcblxuIyMjIEhUTUwgU25pcHBldHNcbmBgYGphdmFzY3JpcHRcbnB3YS1tYW5pZmVzdC1saW5rICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGhlIGxpbmsgdG8gdGhlIG1hbmlmZXN0Lmpzb25cbnB3YS1hcHBsZS1tb2JpbGUtd2ViLWNhcGFibGUgICAgICAvLyBhZGQgdGhlIG1ldGEgdGFnIGZvciBhcHBsZSBtb2JpbGUgd2ViIGNhcGFibGVcbmBgYFxuXG4jIyMgSlNPTiBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxucHdhLW1hbmlmZXN0ICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgY29udGVudHMgb2YgYG1hbmlmZXN0Lmpzb25gXG5gYGBcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChPU1gpIHRvIGFjdGl2YXRlIHNuaXBwZXRzIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjEwLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChPU1gpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb24gYFBXQS1Ub29sc2BcbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcblxuIyMgVHJ5IGl0IE91dFxuXG5MZXQncyB0YWtlIGEgUFdBIGZvciBhIHNwaW4uIFVzaW5nIHRoZSBBbmd1bGFyIENMSSwgbGV0J3MgZ2VuZXJhdGUgYSBuZXcgYXBwIGFuZCBhZGQgUFdBIGZlYXR1cmVzLlxuXG5CZWZvcmUgd2UgYmVnaW4sIGluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJIGFuZCBsaXRlLXNlcnZlciwgaWYgeW91IGhhdmVuJ3QgYWxyZWFkeSBkb25lIHNvLCBieSBydW5uaW5nIGBucG0gaSBAYW5ndWxhci9jbGkgbGl0ZS1zZXJ2ZXIgLWdgXG5cbjEuIENyZWF0ZSBhbiBBbmd1bGFyIGFwcCB3aXRoIGBuZyBuZXcgbXktYXBwIC0tcm91dGluZ2AgYW5kIG9wZW4gdGhlIGFwcCBpbiBWUyBDb2RlXG4xLiBDcmVhdGUgYHNyYy9tYW5pZmVzdC5qc29uYFxuMS4gVXNlIHRoZSBgcHdhLW1hbmlmZXN0YCBzbmlwcGV0XG4xLiBPcGVuIGBzcmMvaW5kZXguaHRtbGAgYW5kIHVzZSB0aGUgYHB3YS1tYW5pZmVzdC1saW5rYCBzbmlwcGV0IChpbiB0aGUgPGhlYWQ+PC9oZWFkPiBlbGVtZW50KVxuMS4gVXNlIHRoZSBwd2EtYXBwbGUtbW9iaWxlLXdlYi1jYXBhYmxlIHNuaXBwZXQgKGluIHRoZSA8aGVhZD48L2hlYWQ+IGVsZW1lbnQpXG4xLiBDcmVhdGUgYGdlbmVyYXRlLXN3LmpzYFxuMS4gUnVuIGBjZCBteS1hcHBgIGFuZCB0aGVuIGBucG0gaSB3b3JrYm94LWJ1aWxkYCAoYWRkIC0tc2F2ZSBpZiB5b3UncmUgdXNpbmcgbnBtIDwgNS54KVxuMS4gVXNlIHRoZSBwd2EtZ2VuZXJhdGUtc2VydmljZS13b3JrZXIgaW4gYGdlbmVyYXRlLXN3LmpzYFxuMS4gQWRkIFwibWFuaWZlc3QuanNvblwiIHRvIHRoZSBgYXBwc1swXS5hc3NldHNgIGFycmF5IGluIGAuYW5ndWxhci1jbGkuanNvbmBcbjEuIE9wZW4gYHNyYy9hcHAvbWFpbi50c2AgYW5kIHJ1biBgcHdhLXJlZ2lzdGVyYCBhdCB0aGUgYm90dG9tXG4xLiBDYWxsIGAudGhlbigoKSA9PiByZWdpc3RlclNlcnZpY2VXb3JrZXIoKSk7YCBhZnRlciBib290c3RyYXBwaW5nXG4xLiBSdW4gYG5nIGJ1aWxkIC0tcHJvZCAmJiBub2RlIGdlbmVyYXRlLXN3LmpzICYmIGNkIGRpc3QgJiYgbGl0ZS1zZXJ2ZXJgXG5cbioqTm93IHRlc3QgaXQhKipcblxuWW91ciBhcHAgc2hvdWxkIGJlIHJ1bm5pbmcgaW4gdGhlIGJyb3dzZXIuIE9wZW4gdGhlIGRldmVsb3BlciB0b29scywgZ28gdG8gdGhlIGBBcHBsaWNhdGlvbmAgdGFiLCBhbmQgc2VsZWN0IGBTZXJ2aWNlIFdvcmtlcnNgLiBJbnNwZWN0IHRoZSBzZXJ2aWNlIHdvcmtlciwgYW5kIHRyeSB0byBnbyBvZmZsaW5lIGFuZCByZWZyZXNoLlxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjNjI0YmYyMy00OTQ1LTRhZmEtYjU3YS1mYTA2Y2I3ZWUyYTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UUTFNemsyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWdncmVnYXRvci1hcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzAxOTI1OGVlMmIxZWRhZmY4YjNhOWRlNzgzMmE1OGU4MDcxNmIyNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgYWdncmVnYXRvciBhcHBcblxuYGBgYmFzaFxuYXogbG9naW5cbmBgYFxuXG5DcmVhdGUgYSBwbGFjZSB0byBsb2dpY2FsbHkgc3RvcmUgZXZlcnl0aGluZyAocmVzb3VyY2UgZ3JvdXApXG5cbmBgYGJhc2hcbmF6IGdyb3VwIGNyZWF0ZSAtbiBQYXBhU3RhcldhcnNBcGlHcm91cCAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogc3RvcmFnZSBhY2NvdW50IGNyZWF0ZSAtbiBwYXBhc3RhcndhcnNhcGlzdG9yYWdlIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC0tc2t1IFN0YW5kYXJkX0xSUyAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIEZ1bmN0aW9uIEFwcFxuXG5gYGBiYXNoXG5heiBmdW5jdGlvbmFwcCBjcmVhdGUgLW4gLWcgUGFwYVN0YXJXYXJzQXBpR3JvdXAgLXMgcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtYyBlYXN0dXNcbmBgYFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNzc4N2FlMTYtMDRjMS00ZjNhLThkMmEtNGEzMmVlZjE3NTdkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5ieSBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vam9obl9wYXBhKVxuXG5Zb3UgY2FuIFt3YXRjaCBtZSBidWlsZCB0aGUgYXBwIGFzIHBhcnQgb2YgbXkgc2VyaWVzIGhlcmVdKGh0dHBzOi8vam9obnBhcGEubmV0L2FuZ3VsYXItY29zbW9zZGItMS8pXG5cbllvdSBjYW4gW3ZpZXcgYWxsIHZpZGVvcyB0b2dldGhlciBoZXJlXSgvVklERU9TLm1kKVxuXG5bTGVhcm4gbW9yZSBhYm91dCBkZXZlbG9waW5nIE5vZGUuanMgYXBwcyB3aXRoIEF6dXJlJ3MgY2xvdWQgc2VydmljZXMgaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbm9kZWpzL2F6dXJlKVxuXG4jIyBEb2NrZXJcblxuQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlckltYWdlPWFuZ3VsYXItY29zbW9zZGJcbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAzMDAwOjgwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIFJlcXVpcmVtZW50c1xuXG4xLiBJbnN0YWxsIHRoZSBBbmd1bGFyIENMSVxuXG4gICAgYGBgYmFzaFxuICAgIG5wbSBpbnN0YWxsIC1nIEBhbmd1bGFyL2NsaVxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBbQXp1cmUgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9jbGkvYXp1cmUvaW5zdGFsbC1henVyZS1jbGkpXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnlcblxuICAgIGBgYGJhc2hcbiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIuZ2l0XG4gICAgY2QgYW5ndWxhci1jb3Ntb3NkYlxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBucG0gcGFja2FnZXNcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaVxuICAgIGBgYFxuXG4xLiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgZXhhbXBsZS1lbnZpcm9ubWVudC5qc2AgZmlsZSB0byBgZW52aXJvbm1lbnQuanNgIGluIHRoZSBgc2VydmVyL2Vudi9gIGZvbGRlciBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUga2V5LCBhbmQgcG9ydCB3aXRoIHlvdXIgc3BlY2lmaWMgY29uZmlndXJhdGlvbi5cblxuICAgIGBgYGphdmFzY3JpcHRcbiAgICAvLyBzZXJ2ZXIvZW52L2Vudmlyb25tZW50LmpzXG4gICAgY29uc3QgY29zbW9zUG9ydCA9IDEyMzQ7IC8vIHJlcGxhY2Ugd2l0aCB5b3VyIHBvcnRcbiAgICBjb25zdCBkYk5hbWUgPSAneW91ci1jb3Ntb3MtZGItbmFtZS1nb2VzLWhlcmUnO1xuICAgIGNvbnN0IGtleSA9ICd5b3VyLWtleS1nb2VzLWhlcmUnO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBjb3Ntb3NQb3J0LFxuICAgICAgZGJOYW1lLFxuICAgICAga2V5XG4gICAgfTtcbiAgICBgYGBcblxuIyMgUnVubmluZyB0aGUgYXBwXG5cbjEuIEJ1aWxkIHRoZSBBbmd1bGFyIGFwcFxuXG4gICAgYGBgYmFzaFxuICAgIG5nIGJ1aWxkXG4gICAgYGBgXG5cbjEuIExhdW5jaCB0aGUgc2VydmVyXG5cbiAgICBgYGBiYXNoXG4gICAgbm9kZSBzcmMvc2VydmVyL2luZGV4LmpzXG4gICAgYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gaHR0cDovL2xvY2FsaG9zdDozMDAwXG5cbiMjIFByb2JsZW1zIG9yIFN1Z2dlc3Rpb25zXG5cbltPcGVuIGFuIGlzc3VlIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyLWNvc21vcy9pc3N1ZXMpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlN2VmMDBjZC05ZjBlLTRiMTMtODIyZS01YzlhN2E3MTQ1ODQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTNOakUwTWpNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZG9ja2VyLWFuZ3VsYXItY2xpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhNTU2Y2UyY2I4MmY0MTY2NWVhNzg3ZGJkYTc2OGIxYjIyY2QwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIERvY2tlcmZpbGUgd2l0aCBBbmd1bGFyIENMSVxuXG5Ob2RlIDguMTIgKyBBbmd1bGFyIENMSSA2LjIuMCtcblxuRmluZCBbdGhlIGltYWdlIGhlcmVdKGh0dHBzOi8vaHViLmRvY2tlci5jb20vci9qb2hucGFwYS9hbmd1bGFyLWNsaS8pXG5cblB1bGxpbmcgdGhlIGltYWdlXG5cbmBgYGJhc2hcbmRvY2tlciBwdWxsIGpvaG5wYXBhL2FuZ3VsYXItY2xpXG5gYGBcblxuVXNpbmcgdGhlIGltYWdlIGluIGEgYERvY2tlcmZpbGVgXG5cbmBgYGJhc2hcbkZST00gam9obnBhcGEvYW5ndWxhci1jbGlcbmBgYFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNWQ2MDdiYjAtMWQzNC00MmE2LTgyYzAtODljMGIwYTljNGQyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFdpbnRlciBpcyBDb21pbmdcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHRoZW1lcyB0aXRsZWQgXCJXaW50ZXIgaXMgQ29taW5nXCIuIFRoZXJlIGFyZSBkYXJrLCBkYXJrIHdpdGggbm8gaXRhbGljcywgYW5kIGxpZ2h0IHRoZW1lcy5cblxuPiBJIHBlcnNvbmFsbHkgdXNlIHRoZSBkYXJrIHRoZW1lcyBmb3IgbW9zdCBvY2Nhc2lvbnMsIGJ1dCBmaW5kIHRoZSBsaWdodCB0aGVtZSBnb29kIG9uIHNvbWUgZGltbWVyIHByb2plY3RvcnMgd2hlbiBJIHByZXNlbnQuXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzLlxuXG5UaGUgdGhlbWVzIGFsc28gc3VwcG9ydCBhbiBpdGFsaWNpemVkIHZlcnNpb24sIHdpdGggZm9udHMgdGhhdCBzdXBwb3J0cyBjdXJzaXZlIGl0YWxpY2l6ZWQgZm9udHMuXG5cbiMjIERhcmsgQmx1ZSBUaGVtZVxuXG4qKkRhcmsgQmx1ZSBIVE1MKipcbiFbSFRNTF0oaW1hZ2VzL2RhcmstYmx1ZS1odG1sLnBuZylcblxuKipEYXJrIEJsdWUgSmF2YVNjcmlwdCoqXG4hW0phdmFTY3JpcHRdKGltYWdlcy9kYXJrLWJsdWUtanMucG5nKVxuXG4qKkRhcmsgQmx1ZSBUeXBlU2NyaXB0KipcbiFbVHlwZVNjcmlwdF0oaW1hZ2VzL2RhcmstYmx1ZS10cy5wbmcpXG5cbioqRGFyayBCbHVlIFNDU1MqKlxuIVtTQ1NTXShpbWFnZXMvZGFyay1ibHVlLXNjc3MucG5nKVxuXG4jIyBEYXJrIEJsYWNrIFRoZW1lXG5cbioqRGFyayBCbGFjayBKYXZhU2NyaXB0KipcbiFbRGFyayBCbGFjayBUaGVtZV0oaW1hZ2VzL2RhcmstanMucG5nKVxuXG4jIyBMaWdodCBUaGVtZVxuXG4qKkxpZ2h0IEphdmFTY3JpcHQqKlxuIVtMaWdodCBUaGVtZV0oaW1hZ2VzL2xpZ2h0LWpzLnBuZylcblxuIyMgVXNhZ2VcblxuU2VsZWN0IHRoZSB0aGVtZSBhbmQgZ28hXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBPcGVuICoqRXh0ZW5zaW9ucyoqIHNpZGViYXIgcGFuZWwgaW4gVmlzdWFsIFN0dWRpbyBDb2RlLiBgVmlldyDihpIgRXh0ZW5zaW9uc2BcbjEuIFNlYXJjaCBmb3IgYFdpbnRlciBpcyBDb21pbmdgXG4xLiBDbGljayAqKkluc3RhbGwqKlxuMS4gQ2xpY2sgKipSZWxvYWQqKlxuMS4gRmlsZSA+IFByZWZlcmVuY2VzID4gQ29sb3IgVGhlbWUgPiAqKldpbnRlciBpcyBDb21pbmcgKERhcmsgQmx1ZSkqKlxuMS4gT3B0aW9uYWw6IFVzZSB0aGUgcmVjb21tZW5kZWQgc2V0dGluZ3MgYmVsb3cgZm9yIGJlc3QgZXhwZXJpZW5jZVxuXG4jIyBSZWNvbW1lbmRlZCBTZXR0aW5nc1xuXG5gYGBqc1xue1xuICBcImVkaXRvci5hdXRvSW5kZW50XCI6IFwiZnVsbFwiLFxuICBcImVkaXRvci5jdXJzb3JCbGlua2luZ1wiOiBcInNvbGlkXCIsXG4gIFwiZWRpdG9yLmN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uXCI6IHRydWUsXG4gIFwiZWRpdG9yLmN1cnNvclN0eWxlXCI6IFwibGluZVwiLFxuICBcImVkaXRvci5mb250U2l6ZVwiOiAxNixcbiAgXCJlZGl0b3IuZm9udEZhbWlseVwiOiBcIkRhbmsgTW9ubywgRmlyYSBDb2RlLCBJbmNvbnNvbGF0YVwiLFxuICBcImVkaXRvci5mb250TGlnYXR1cmVzXCI6IHRydWUsXG4gIFwiZWRpdG9yLmZvcm1hdE9uUGFzdGVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IuZm9ybWF0T25UeXBlXCI6IGZhbHNlLFxuICBcImVkaXRvci5mb3JtYXRPblNhdmVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IubGV0dGVyU3BhY2luZ1wiOiAwLjMsXG4gIFwiZWRpdG9yLmxpbmVIZWlnaHRcIjogMjUsXG4gIFwiZWRpdG9yLm1pbmltYXAuZW5hYmxlZFwiOiBmYWxzZSxcbiAgXCJlZGl0b3IubXVsdGlDdXJzb3JNb2RpZmllclwiOiBcImN0cmxDbWRcIixcbiAgXCJlZGl0b3Iuc3VnZ2VzdFNlbGVjdGlvblwiOiBcImZpcnN0XCIsXG4gIFwiZWRpdG9yLnRhYkNvbXBsZXRpb25cIjogXCJvblwiLFxuICBcImVkaXRvci50YWJTaXplXCI6IDIsXG4gIFwiZWRpdG9yLndvcmRXcmFwXCI6IFwib25cIixcbiAgXCJmaWxlcy5hdXRvU2F2ZVwiOiBcImFmdGVyRGVsYXlcIixcbiAgXCJmaWxlcy5hdXRvU2F2ZURlbGF5XCI6IDEwMDAsXG4gIFwic2VhcmNoLnNob3dMaW5lTnVtYmVyc1wiOiB0cnVlLFxuICBcIndvcmtiZW5jaC5pY29uVGhlbWVcIjogXCJtYXRlcmlhbC1pY29uLXRoZW1lXCIsXG4gIFwid29ya2JlbmNoLmNvbG9yQ3VzdG9taXphdGlvbnNcIjoge30sXG4gIFwid29ya2JlbmNoLmNvbG9yVGhlbWVcIjogXCJXaW50ZXIgaXMgQ29taW5nIChEYXJrIEJsdWUpXCIsXG4gIFwiemVuTW9kZS5jZW50ZXJMYXlvdXRcIjogZmFsc2UsXG59XG5gYGBcblxuIyMgRm9udHNcblxuSSBhbSB1c2luZyBhIHBhaWQgZm9udCB0aXRsZWQgKipEYW5rIE1vbm8qKi4gKipPcGVyYXRvciBNb25vKiogaXMgYWxzbyBhIHBhaWQgZm9udCB0aGF0IGlzIGF3ZXNvbWUuIElmIHlvdSBkbyBub3QgaGF2ZSB0aGVzZSBmb250cywgdXNlIHlvdXIgZmF2b3JpdGUgZm9udC4gKipGaXJhIENvZGUqKiBpcyBhIGZyZWUgb25lIHRoYXQgd29ya3Mgd2VsbCB0b28uXG5cbiMjIEZlZWRiYWNrXG5cbklmIHlvdSBoYXZlIHN1Z2dlc3Rpb25zLCBwbGVhc2UgW29wZW4gYW4gaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvaXNzdWVzKSBvciBiZXR0ZXIgeWV0LCBhIFtwdWxsIHJlcXVlc3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvcHVsbHMpLlxuXG5CZSBuaWNlLlxuXG4jIyBDcmVkaXRzXG5cbkNyZWRpdCB3aGVyZSBjcmVkaXQgaXMgZHVlIC4uLiB0aGlzIHRoZW1lIHdhcyBpbnNwaXJlZCBieSB0aGUgdGhlbWVzIFZpc3VhbCBTdHVkaW8gRGFyayssIE1vbm9rYWkgYW5kIFtEdXN0aW4gU2FuZGVyJ3MgdGhlbWUgZm9yIFwiQW4gT2xkIEhvcGVcIl0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWR1c3RpbnNhbmRlcnMuYW4tb2xkLWhvcGUtdGhlbWUtdnNjb2RlKS4gQ3VzdG9tIENTUyBpbnNwaXJlZCBieSBbV2VzIEJvc10oaHR0cHM6Ly90d2l0dGVyLmNvbS93ZXNib3MpLiBCbHVlIGJhY2tncm91bmQgZm9yIHRoZSBEYXJrIHRoZW0gaW5zcGlyZWQgYnkgW1NhcmFoIERyYXNuZXJdKGh0dHBzOi8vdHdpdHRlci5jb20vc2FyYWhfZWRvKSdzIFtOaWdodCBPd2wgdGhlbWVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1zZHJhcy5uaWdodC1vd2wpXG5cbiMjIEF1dGhvcnNcblxuQXV0aG9yZWQgYnkgW0pvaG4gUGFwYV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9qb2huX3BhcGEpXG5cbkxpZ2h0IHRoZW1lIGNvLWF1dGhvcmVkIGJ5IFtCcmlhbiBDbGFya10oaHR0cHM6Ly90d2l0dGVyLmNvbS9fY2xhcmtpbylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImY2MDI4OGFkLTdmOWUtNDY4Yi1iYzkyLTQ4ZmQ0NDBkYWZkNiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWhlcm9lc1xuXG5BIENvc21vcyBEQiwgRXhwcmVzcy5qcywgVnVlLCBhbmQgTm9kZS5qcyBhcHBcblxuIyMgRmVhdHVyZXNcblxuVGhpcyBwcm9qZWN0IGZyYW1ld29yayBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGZlYXR1cmVzOlxuXG4qIFZ1ZS5qc1xuKiBOb2RlLmpzXG4qIEV4cHJlc3NcbiogTW9uZ29vc2UgQVBJXG4qIENvbm5lY3RpbmcgdG8gTW9uZ29EQiBvciBDb3Ntb3NEQlxuKiBCdWlsZGluZywgRGVidWdnaW5nLCBEZXBsb3lpbmcgd2l0aCBEb2NrZXJcblxuIyMgR2V0dGluZyBTdGFydGVkXG5cbiMjIyBQcmVyZXF1aXNpdGVzXG5cbk5vZGUuanMgd2l0aCBucG1cblxuIyMjIEluc3RhbGxhdGlvblxuXG5gYGAgYmFzaFxuZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92dWUtaGVyb2VzLmdpdFxuY2QgdnVlLWhlcm9lc1xubnBtIGluc3RhbGxcbmBgYFxuXG4jIyMgRGF0YWJhc2Ugc2V0dGluZ3NcblxuKiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgLmVudi5leGFtcGxlLmpzYCBmaWxlIHRvIGAuZW52YCBpbiB0aGUgcm9vdCBmb2xkZXIgYW5kIHVwZGF0ZSBpdCB3aXRoIHlvdXIgQ29zbW9zIERCIHNldHRpbmdzLiBSZXBsYWNlIHRoZSBhY2NvdW50TmFtZSwgZGF0YWJhc2VOYW1lLCBrZXksIGFuZCBwb3J0IHdpdGggeW91ciBzcGVjaWZpYyBjb25maWd1cmF0aW9uLlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIFNFUlZFUl9QT1JUPTMwMDFcbiAgICBQVUJMSUNXRUI9Li9zZXJ2ZXIvd3d3XG4gICAgQ09TTU9TREJfQUNDT1VOVD15b3VyX2Nvc21vc19hY2NvdW50XG4gICAgQ09TTU9TREJfREI9eW91cl9jb3Ntb3NfZGJcbiAgICBDT1NNT1NEQl9LRVk9eW91cl9jb3Ntb3Nfa2V5XG4gICAgQ09TTU9TREJfUE9SVD0xMDI1NVxuICAgIGBgYFxuXG4jIyMgUXVpY2tzdGFydFxuXG5UaGlzIHdpbGwgYnVpbGQgdGhlIGFwcCBhbmQgcnVuIHRoZSBkZXYgc2VydmVyIGZvciBWdWUgYW5kIFdlYlBhY2suIFRoZSBOb2RlIGV4cHJlc3Mgc2VydmVyIHdpbGwgbGF1bmNoIGFuZCBXZWJQYWNrIHdpbGwgcHJveHkgdGhlIGNhbGxzIGZyb20gdGhlIGJyb3dzZXIgdG8gdGhlIEFQSSBpbiBleHByZXNzLiBJdCB3aWxsIGFsc28gYW5kIHByZXBhcmUgaXQgZm9yIGxvY2FsIGRlYnVnZ2luZy5cblxuYGBgIGJhc2hcbiMgYnVpbGQgZm9yIHByb2R1Y3Rpb24gd2l0aCBtaW5pZmljYXRpb25cbm5wbSBydW4gYnVpbGRcblxuIyBzZXJ2ZSBvbiBodHRwOi8vbG9jYWxob3N0OjgwODBcbiMgYW5kIHJ1biB0aGUgYXBpIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMVxubnBtIHJ1biBkZWJ1Z1xuYGBgXG5cbiMjIyBMb2NhbCBQcm9kIEJ1aWxkXG5cblRoaXMgd2lsbCBidWlsZCB0aGUgYXBwIGFuZCBsYXVuY2ggdmlhIHRoZSBOb2RlLmpzIGV4cHJlc3Mgc2VydmVyLlxuXG5gYGBiYXNoXG4jIGJ1aWxkIGZvciBwcm9kdWN0aW9uIHdpdGggbWluaWZpY2F0aW9uXG5ucG0gcnVuIGJ1aWxkXG5cbiMgcnVuIHRoZSBub2RlIHNlcnZlclxubnBtIHN0YXJ0XG5gYGBcblxuIyMjIERvY2tlclxuXG5CdWlsZCB0aGUgaW1hZ2UgYW5kIHJ1biBjb250YWluZXIuXG5cbmBgYCBiYXNoXG5ucG0gcnVuIGRvY2tlci11cFxuYGBgXG5cbkJ1aWxkIHRoZSBpbWFnZSBhbmQgcnVuIGNvbnRhaW5lciBmb3IgbG9jYWwgZGVidWdnaW5nLlxuXG5gYGAgYmFzaFxubnBtIHJ1biBkb2NrZXItdXAtZGVidWdcbmBgYCIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjM0M2Q0MDM0LTcxNWEtNDIxMS05MjdmLWE1YTBjOGU0NDFkZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHZ1ZS1ndWlkZVxuXG5BIHNlcmllcyBvZiBpbnRyb2R1Y3Rvcnkgc2FtcGxlcyB1c2luZyBWdWUuanMsIGFzIHNlZW4gaW4gdGhlaXIgZG9jcy4gPGh0dHBzOi8vdnVlanMub3JnLz4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhNDhlYzhjMy03MzU1LTQ5OTUtOGJkNS02MTIxMjk5NTc3ZWEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNOall6T1RNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWludHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMyN2UyM2QzN2E2OTliNzM4MmM3NzA5Y2RhNWE4ZGY3NGExNzdjYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHZ1ZS1pbnRyb1xuXG4jIyBQcm9qZWN0IHNldHVwXG5gYGBcbm5wbSBpbnN0YWxsXG5gYGBcblxuIyMjIENvbXBpbGVzIGFuZCBob3QtcmVsb2FkcyBmb3IgZGV2ZWxvcG1lbnRcbmBgYFxubnBtIHJ1biBzZXJ2ZVxuYGBgXG5cbiMjIyBDb21waWxlcyBhbmQgbWluaWZpZXMgZm9yIHByb2R1Y3Rpb25cbmBgYFxubnBtIHJ1biBidWlsZFxuYGBgXG5cbiMjIyBMaW50cyBhbmQgZml4ZXMgZmlsZXNcbmBgYFxubnBtIHJ1biBsaW50XG5gYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjExNTU2Y2EzLWY5NDctNDZlMS05MDliLTQ4OGExNWE5NzVmYiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpNakF6TURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1hcmNoaXRlY3R1cmUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTYzYzNlNDY0NTdlMTQxZGRhNGUwZTVmZmNkNTBiZGYxODY5ZGI4YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQW5ndWxhciBBcmNoaXRlY3R1cmVcblxuVGhpcyBjb2RlIHNhbXBsZSBkZW1vbnN0cmF0ZXMgZGlmZmVyZW50IEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGNvbmNlcHRzLiBJdCdzIHVzZWQgaW4gdGhlIEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGFuZCBCZXN0IFByYWN0aWNlcyB2aWRlbyBjb3Vyc2Ugb24gUGx1cmFsc2lnaHQgKGh0dHBzOi8vd3d3LnBsdXJhbHNpZ2h0LmNvbS9jb3Vyc2VzL2FuZ3VsYXItYXJjaGl0ZWN0dXJlLWJlc3QtcHJhY3RpY2VzKSBhbmQgaW4gdGhlIEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGFuZCBCZXN0IFByYWN0aWNlcyBpbnN0cnVjdG9yLWxlZCB0cmFpbmluZyBjb3Vyc2UgKGh0dHBzOi8vY29kZXdpdGhkYW4uY29tL3Byb2R1Y3RzL2FuZ3VsYXItYXJjaGl0ZWN0dXJlKS4gXG5cbiMjIFJ1bm5pbmcgdGhlIEFwcGxpY2F0aW9uXG5cbjEuIEluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJOiBgbnBtIGluc3RhbGwgLWcgQGFuZ3VsYXIvY2xpYFxuXG4xLiBPcGVuIHRoZSBgZGVtb3NgIGZvbGRlciBhbmQgcnVuIGBucG0gaW5zdGFsbGBcblxuMS4gUnVuIGBuZyBzZXJ2ZSAtb2AgaW4gdGhlIGBkZW1vc2AgZm9sZGVyIHRvIHN0YXJ0IHRoZSBzZXJ2ZXIgYW5kIGxhdW5jaCB0aGUgYXBwXG5cbiMjIEFkZGl0aW9uYWwgRGVtb3NcblxuMS4gQ2xvbmluZyAtIFJ1biB0aGUgcHJvamVjdCBpbiB0aGUgYGNsb25pbmdgIGZvbGRlclxuMS4gSW5wdXQvT3V0cHV0IFByb3BlcnRpZXMgLSBSdW4gdGhlIHByb2plY3QgaW4gdGhlIGBpbnB1dC1vdXRwdXQtZGVtb2AgcHJvamVjdFxuMS4gU2hhcmVkIExpYnJhcnkgLSBSdW4gdGhlIHByb2plY3QgaW4gdGhlIGBzaGFyZWQtbGlicmFyeS1leGFtcGxlYCBwcm9qZWN0XG4xLiBTdGF0ZSBNYW5hZ2VtZW50IC0gT3BlbiB0aGUgYHN0YXRlLW1hbmFnZW1lbnRgIGZvbGRlciBhbmQgcnVuIHRoZSBOZ1J4LCBuZ3J4LWRhdGEsIG9yIE9ic2VydmFibGUgU3RvcmUgcHJvamVjdHNcblxuIyMgVGhlIEFuZ3VsYXIgSnVtcFN0YXJ0IEFwcGxpY2F0aW9uXG5cbllvdSBjYW4gZmluZCBhbiBleGFtcGxlIG9mIGFuIGFwcGxpY2F0aW9uIHRoYXQgZm9sbG93cyB0aGUgcnVsZXMgaW4gdGhpcyBjb3Vyc2UgYXQgaHR0cHM6Ly9naXRodWIuY29tL0RhbldhaGxpbi9Bbmd1bGFyLUp1bXBTdGFydFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYzc5OTlhZTctNzI4Ny00ZmYwLTllNzUtMWQ1YjFlMTdlOTU0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ETTNPRGswTkRjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS1oZWxsbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NDRhZjQwNzkxOGQ0YjI1YzljN2RjMzg3NGFiY2E4M2JmMTdiODMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBOb2RlIEhlbGxvIFdvcmxkXG5cblNpbXBsZSBub2RlLmpzIGFwcCB0aGF0IHNlcnZlcnMgXCJoZWxsbyB3b3JsZFwiXG5cbkdyZWF0IGZvciB0ZXN0aW5nIHNpbXBsZSBkZXBsb3ltZW50cyB0byB0aGUgY2xvdWRcblxuIyMgUnVuIEl0XG5cbmBucG0gc3RhcnRgXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyMTRhODAzZS00MWIxLTRlOTQtYjYxOS00ZTgzYTIxZWY4NDEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBub2RlLXRzXG5cblNpbXBsZSBOb2RlIGFuZCB0eXBlU2NyaXB0IGFwcFxuXG4jIyBRdWljayBTdGFydFxuXG4xLiBgbnBtIGluc3RhbGxgXG4yLiBgbnBtIHJ1biBzZXJ2ZS1kZWJ1Z2BcblxuIyMgSW5jbHVkZWRcblxuLSBiYXNpYyBgdHNjb25maWcuanNvbmBcbi0gbnBtIHNjcmlwdHMgdG8gaGVscCBidWlsZCwgcnVuLCB3YXRjaCwgYW5kIGRlYnVnXG4tIGNvbmN1cnJlbnRseSwgdHMtbm9kZSwgdHMtbGludCwgdHlwZXNjcmlwdCBmb3IgaGVscGluZyB3aXRoIGJ1aWxkc1xuLSB0eXBlcyBmb3Igbm9kZSB3aXRoIEB0eXBlcy9ub2RlXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJiOGVkNDZkMC0zMjkwLTQ2MjQtODY4Ny0yM2YyNGFhNzAyNzUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQTVOVFV3TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWY0NjE1ZDNmNTlmNTI0ZjE5ZmY0OTU4ZTcxMjIwZGM2YWFmNGI3YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHRcblxuQSBWdWUgQ0xJIHByZXNldCBjb25maWd1cmF0aW9uLlxuXG4jIyBSdW4gaXRcblxuWW91IHJ1biBpdCBieSBleGVjdXRpbmcgXG5cbmBgYGJhc2hcbnZ1ZSBjcmVhdGUgLS1wcmVzZXQgam9obnBhcGEvdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQgaGVsbG8tdnVlXG5gYGBcblxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5ZGQ1NWIwOS00ZmNiLTQ1ODgtOGY0NS1jZGY3N2RkNDk4ZjgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU16TTNORFExIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJraXMtcmVxdWlyZWpzLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODhjMTYyZTI3Y2U0M2E5OTQzZjM5NmViNzk5M2ZhNmM4ZjNlMjBjOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogImtpcy1yZXF1aXJlanMtZGVtb1xuPT09PT09PT09PT09PT09PT09XG5cbktlZXAgSXQgU2ltcGxlIFJlcXVpcmVKUyBEZW1vLiAgU2hvd3Mgc2ltcGxlIGRlbW8gb2YgaG93IHRvIHVzZSByZXF1aXJlLmpzLlxuXG4jI092ZXJ2aWV3XG5UaGlzIGRlbW8gY29udGFpbnMgMiBzZXBhcmF0ZSBodG1sIGZpbGVzLCBlYWNoIHdpdGggdGhlaXIgb3duIHNjcmlwdHMgZm9sZGVyLiBPbmUgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgaG93IHRvIHdyaXRlIHRoZSBjb2RlIHdpdGhvdXQgcmVxdWlyZS5qcy4gVGhlIG90aGVyIHNob3dzIGhvdyB0byBhZGQgcmVxdWlyZS5qcy4gVGhlIHB1cnBvc2UgaXMgdG8gZXhwbGFpbiBob3cgdG8gdXNlIHJlcXVpcmUuanMgZm9yIGRlcGVuZGVuY3kgcmVzb2x1dGlvbi4gXG5cblxuIyNXaXRob3V0IFJlcXVpcmVKU1xuVGhlIGZpcnN0IGV4YW1wbGUgKGluZGV4MS5odG1sKSBoYXMgMyBKYXZhU2NyaXB0IGZpbGVzIHVzaW5nIHRoZSBSZXZlYWxpbmcgTW9kdWxlIFBhdHRlcm4gKE1vZHVsZSBQYXR0ZXJuIHdvcmtzIGZpbmUgdG9vKS4gVGhlIGRlcGVuZGVuY2llcyBhcmUgYXMgZm9sbG93czpcblxuLSBtYWluLmpzIGRlcGVuZHMgb24gYWxlcnRlci5qc1xuLSBhbGVydGVyLmpzIGRlcGVuZHMgb24gZGFhdGFzZXJ2aWNlLmpzXG5cbkxvYWQgb3JkZXIgaXMgaW1wb3J0YW50IGhlcmUsIGFuZCBjYW4gZWFzaWx5IGJlIGJyb2tlbi5cblxuIyNXaXRoIFJlcXVpcmVKU1xuVGhlIHNlY29uZCBleGFtcGxlIChpbmRleDIuaHRtbCkgdXNlcyByZXF1aXJlLmpzIHRvIGxvYWQgdGhlIHNjcmlwdHMuIEl0IHNvbHZlcyB0aGUgcHJvYmxlbSBhbmQgaGFzIHRoZXNlIHJvbGVzOlxuXG4tIHN0YXJ0cyB3aXRoIGEga2lja29mZiBzY3JpcHQgKG1haW4uanMpXG4tIGxvYWRzIHRoZXJlc3Qgb2YgdGhlIHNjcmlwdHMgYXMgdGhleSBhcmUgbmVlZGVkICh3aGVuIGRlcGVuZGVuY2llcyBjYWxsIG9uIHRoZW0pXG5cbiMjV2l0aCBSZXF1aXJlSlMgYW5kIDNyZCBQYXJ0eSBEZXBlbmRlbmNpZXNcblRoZSB0aGlyZCBleGFtcGxlIChpbmRleDMuaHRtbCkgdXNlcyByZXF1aXJlLmpzIHRvIGxvYWQgdGhlIHNjcmlwdHMgd2hpbGUganF1ZXJ5IGlzIGFsc28gaW50cm9kdWNlZCBhcyBhIGRlcGVuZGVuY3kuIFxuXG5cbiMjTW9yZVxuUmVsYXRlZCB0b3BpY3M6IERlcGVuZGVuY3kgSW5qZWN0aW9uIChESSksIFJldmVhbGluZyBNb2R1bGUgUGF0dGVybiwgTW9kdWxlIFBhdHRlcm4sIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhlY3V0aW9uIChJSUZFKSwgYW5kIFNlcnZpY2UgTG9jYXRvciBQYXR0ZXJuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZTQ3MWFlMGYtNzJkOC00ODFiLWEyZmUtMDVjMjRmMmFkZjZkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1qRTRNemN6IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJDb2RlQ2FtcGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjQ4YTM4Nzk2MDgzMDZhNzhmYTU0ZGVkZWU2ZWZlYzE2MDQ1OWEyNDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICJDb2RlQ2FtcGVyXG49PT09PT09PT09IgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYTc1NDQzNmQtOTAxNi00ZjE0LThlMWMtODQzODFlYzkwYjhjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qVTBPVGMxIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJQbHVyYWxzaWdodFNwYUp1bXBTdGFydEZpbmFsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjhlNTJlYmVlODQ0ZDk0YzUwNGU0MzVmODU3OGQ4ZmM4MTU5NmRlYjMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICJTUEEgSnVtcFN0YXJ0XG49PT09PT09PT09PT1cblxuU291cmNlIGNvZGUgZm9yIHRoZSBTUEEgSnVtcFN0YXJ0IFBsdXJhbHNpZ2h0IGNvdXJzZSBhdCBodHRwOi8vanBhcGEubWUvc3BhanNwc1xuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjYTJlNmRhZS02MzkwLTRmMTEtYjk1MC00N2VmNmRiOGNkNmIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTVPVEU1Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2xpbXBzZS50b2FzdHIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjU0NzQ1NGE0NjA1MjE5ODUwMTZmYmRjMjNhMDA0NzcxMWYxZDc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIkdsaW1wc2UuVG9hc3RyIFBsdWdpblxuPT09PT09PT09PT09XG5cblNvdXJjZSBjb2RlIGZvciB0aGUgR2xpbXBzZS5Ub2FzdHIgcGx1Z2luIGZvciBpbnRlZ3JhdGluZyB0b2FzdHIgZGlhZ25vc3RpY3MgaW50byBHbGltcHNlXG5cbiMjIEN1cnJlbnQgVmVyc2lvblxuMC4yLjBcblxuIyMgRGVtb1xuRGVtbyBjYW4gYmUgZm91bmQgW2hlcmVdKGh0dHA6Ly9Db2RlU2V2ZW4uZ2l0aHViLmNvbS90b2FzdHIpXG5cbiMjIFVzYWdlXG5MaW5rIHRvIGpxdWVyeSwgdG9hc3RyLmNzcywgdG9hc3RyLmpzLCBnbGltcHNlLmpzIGFuZCBnbGltcHNlLnRvYXN0ci5qc1xuXG5cdDxzY3JpcHQgc3JjPVwianF1ZXJ5LmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwidG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwiZ2xpbXBzZS5qc1wiPjwvc2NyaXB0PlxuXHQ8c2NyaXB0IHNyYz1cImdsaW1wc2UudG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cblVzZSB0b2FzdHIgXG5cblx0JChmdW5jdGlvbigpeyBcblx0XHR0b2FzdHIuaW5mbygndGVzdGluZycpOyBcblx0fSkoKTtcblxuQ2xpY2sgdGhlIEcgaWNvbiBpbiB0aGUgYm90dG9tIHJpZ2h0IG9mIHlvdXIgYnJvd3NlciBhbmQgZW5qb3khXG5cbiFbXShodHRwOi8vam9obnBhcGEubmV0L3dwLWNvbnRlbnQvaW1hZ2VzL2dsaW1wc2UudG9hc3RyLnBuZylcblxuXG4jIyBEZXBlbmRlbmNpZXNcblJlcXVpcmVzICBbdG9hc3RyXShodHRwOi8vanBhcGEubWUvYzd0b2FzdHIpIDEuMy4xK1xuXG4jI1Jlc291cmNlc1xuLSBbZ2xpbXBzZSBwcm90b2NvbHNdKGh0dHA6Ly9nZXRnbGltcHNlLmNvbS9Qcm90b2NvbClcbi0gW2dsaW1wc2UgY2xpZW50IHNhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9HbGltcHNlL0dsaW1wc2UvYmxvYi9tYXN0ZXIvc291cmNlL0dsaW1wc2UuSmF2YVNjcmlwdC90ZXN0X2NsaWVudC5odG1sI0wxMDEtTDEyMSlcblxuIyMgQXV0aG9yXG4qKkpvaG4gUGFwYSoqXG5cblR3aXR0ZXI6IFtAam9obl9wYXBhXShodHRwOi8vdHdpdHRlci5jb20vSm9obl9QYXBhKVxuXG4jIyBDb3B5cmlnaHRcbkNvcHlyaWdodCDCqSAyMDEzIFtKb2huIFBhcGFdKGh0dHA6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGEpLlxuXG4jIyBMaWNlbnNlIFxuZ2xpbXBzZS50b2FzdHIgaXMgdW5kZXIgW01JVCBsaWNlbnNlXShodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocCkiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0YWJhYzI0MS00ZGFmLTQ2NmItOTU4Yi1kNzEwN2VlNjQwOTAiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIlBsdXJhbHNpZ2h0LUNDLUFuZ3VsYXItQnJlZXplLUV4dHJhXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5TdXBwb3J0aW5nIGZpbGVzIGZvciB0aGUgUGx1cmFsc2lnaHQgXCJTUEEgd2l0aCBBbmd1bGFyIGFuZCBCcmVlemVcIiBjb3Vyc2UgYnkgSm9obiBQYXBhLiBcblxuVGhlIGZpbGVzIGluY2x1ZGVkIGluIHRoaXMgcmVwb3NpdG9yeSBhcmUgaW50ZW5kZWQgdG8gaGVscCBzdHJlYW1saW5lIHRoZSBsZWFybmluZyBwcm9jZXNzIG9mIHRoZSBQbHVyYWxzaWdodCBjb3Vyc2UgU1BBIHdpdGggQW5ndWxhciBhbmQgQnJlZXplLiBEdXJpbmcgdGhlIGNvdXJzZSB5b3Ugd2lsbCBjcmVhdGUgdGhlIFdlYiBwcm9qZWN0IGZyb20gc2NyYXRjaFxuYW5kIGNyZWF0ZSB0aGUgYXBwIGxvZ2ljIHVzaW5nIEphdmFTY3JpcHQuIFRoZSBjb3Vyc2Ugd2lsbCBhc2sgeW91IHRvIGFkZCBzdXBwb3J0aW5nIGZpbGVzIChmb3VuZCBoZXJlKSB0byBqdW1wLXN0YXJ0IHRoZSBwcm9jZXNzIGFuZCBrZWVwIHlvdSBmb2N1c2VkIG9uIHRoZSBjb3JlIG1hdGVyaWFsIG9mIEFuZ3VsYXIgYW5kIEJyZWV6ZS5cblxuPiBUaXA6IElmIHlvdSBhcmUgdGFraW5nIG15IGNvdXJzZSBhbmQgeW91IGVuY291bnRlciBhbiBlcnJvciB3aGVuIGJ1aWxkaW5nIHRoZSBwcm9qZWN0IGFmdGVyIGluc3RhbGxpbmcgSG90VG93ZWwuQW5ndWxhci5CcmVlemUgcmVsYXRlZCB0byBkbGwgdmVyc2lvbnMsIHlvdSBtYXkgd2FudCB0byB0cnkgdGhlIGxhdGVzdCBwYWNrYWdlIHZlcnNpb25zLiBSdW4gdGhlc2UgdXBkYXRlcyB1c2luZyB0aGUgTnVHZXQgUGFja2FnZSBNYW5hZ2VyXG5cbmBgYFxuVXBkYXRlLVBhY2thZ2UgQnJlZXplLlNlcnZlci5Db250ZXh0UHJvdmlkZXIuRUY2XG5cblVwZGF0ZS1QYWNrYWdlIEJyZWV6ZS5TZXJ2ZXIuV2ViQXBpMlxuXG5VcGRhdGUtUGFja2FnZSBCcmVlemUuQ2xpZW50XG5cblVwZGF0ZS1QYWNrYWdlIE5ld3RvbnNvZnQuSnNvblxuYGBgXG5cbiMjIFNjcmF0Y2hcbiAtIERhdGEgbGF5ZXIgd3JpdHRlbiBpbiBDIyBhbmQgLk5FVFxuIC0gTW9kZWwgbGlicmFyeSB3cml0dGVuIGluIEMjIGFuZCAuTkVUXG4gLSBDb250ZW50IGZvbGRlciB3aXRoIGFzc2V0cyBpbmNsdWRpbmcgQ1NTIGFuZCBJbWFnZXNcbiBcbiMjIExpdG11cyBUZXN0XG4gLSBUaGlzIGlzIGp1c3QgdG8gaGVscCBmb2xrcyBhbG9uZ1xuIC0gQ29udGFpbnMgYSBydW5uaW5nIHNvbHV0aW9uIGFmdGVyIHVzaW5nIHRoZSBjb250ZW50cyBpbiB0aGUgc2NyYXRjaCBmb2xkZXIgYW5kIHJ1bm5pbmcgdGhlIDIgTnVHZXQgY29tbWFuZHMgYmVsb3c6XG5cbiBgYGBcbiAgaW5zdGFsbC1wYWNrYWdlIEVudGl0eUZyYW1ld29yay5TcWxTZXJ2ZXJDb21wYWN0XG4gIGluc3RhbGwtcGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyLkJyZWV6ZVxuIGBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2MmNkZDdjYS1hMWFmLTRkMzItYTEyMi03NTA2YTI5ZDFjYWQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRPVFkzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiSG90VG93ZWwtQW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMThlZTkxN2ZmNTk2NTgwY2M1YmU5OTdmNjIyNTMxNWFmNjZmNmIwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBIb3QgVG93ZWwgQW5ndWxhciBTUEEgVGVtcGxhdGUgI1xuXG4+IEhvdCBUb3dlbDogQmVjYXVzZSB5b3UgZG9uJ3Qgd2FudCB0byBnbyB0byB0aGUgU1BBIHdpdGhvdXQgb25lIVxuXG5XYW50IHRvIGJ1aWxkIGEgU1BBIGJ1dCBjYW4ndCBkZWNpZGUgd2hlcmUgdG8gc3RhcnQ/IFVzZSBIb3QgVG93ZWwgQW5ndWxhciBhbmQgaW4gc2Vjb25kcyB5b3UnbGwgaGF2ZSBhIFNQQSBhbmQgYWxsIHRoZSB0b29scyB5b3UgbmVlZCB0byBidWlsZCBvbiBpdCEgXG5cbiFbXShodHRwOi8vd3d3LmpvaG5wYXBhLm5ldC93cC1jb250ZW50L3VwbG9hZHMvMjAxMy8wOS9Ib3RUb3dlbC1ORy1QcmV2aWV3LnBuZylcblxuSG90IFRvd2VsIEFuZ3VsYXIgY3JlYXRlcyBhIGdyZWF0IHN0YXJ0aW5nIHBvaW50IGZvciBidWlsZGluZyBhIFNpbmdsZSBQYWdlIEFwcGxpY2F0aW9uIChTUEEpLiBPdXQgb2YgdGhlIGJveCBpdCBwcm92aWRlcyBhIG1vZHVsYXIgc3RydWN0dXJlIGZvciB5b3VyIGNvZGUsIHZpZXcgbmF2aWdhdGlvbiwgZGF0YSBiaW5kaW5nLCBzZXBhcmF0aW9uIG9mIHNlcnZpY2VzLCBhbmQgc2ltcGxlIGJ1dCBlbGVnYW50IHN0eWxpbmcuIEhvdCBUb3dlbCBwcm92aWRlcyBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGJ1aWxkIGEgU1BBLCBzbyB5b3UgY2FuIGZvY3VzIG9uIHlvdXIgYXBwLCBub3QgdGhlIHBsdW1iaW5nLlxuXG4+IExlYXJuIG1vcmUgYWJvdXQgYnVpbGRpbmcgYSBTUEEgZnJvbSBbSm9obiBQYXBhJ3MgdmlkZW9zLCB0dXRvcmlhbHMgYW5kIFBsdXJhbHNpZ2h0IGNvdXJzZXNdKGh0dHA6Ly9qb2hucGFwYS5uZXQvc3BhKS5cblxuIyMgSW5zdGFsbGluZyB2aWEgdGhlIE51R2V0IFBhY2thZ2UgIyNcbkhvdCBUb3dlbCBBbmd1bGFyIGlzIGEgTnVHZXQgcGFja2FnZSB0aGF0IGF1Z21lbnRzIGFuIGV4aXN0aW5nIGVtcHR5IEFTUC5ORVQgcHJvamVjdC4gSnVzdCBpbnN0YWxsIHVzaW5nIE51R2V0IGFuZCB0aGVuIHJ1biFcblxuICAgIEluc3RhbGwtUGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyXG5cbiMjIEhvdyBEbyBJIEJ1aWxkIE9uIEhvdCBUb3dlbD8gIyNcblNpbXBseSBzdGFydCBhZGRpbmcgY29kZSEgXG5cbjEuIEFkZCB5b3VyIG93biBzZXJ2ZXItc2lkZSBjb2RlLCBzdWNoIGFzIEVudGl0eSBGcmFtZXdvcmsgYW5kIFdlYiBBUEkgKHdoaWNoIHJlYWxseSBzaGluZXMgd2l0aCBCcmVlemUuanMpXG4yLiBBZGQgdmlld3MgYW5kIGNvbnRyb2xsZXJzXG4zLiBVcGRhdGUgdGhlIG5hdmlnYXRpb24gcm91dGVzIGluIGBjb25maWcucm91dGVzLmpzYFxuXG4jIyBBZGQgUmljaCBEYXRhIHdpdGggQnJlZXplICMjXG5BZGQgcmljaCBkYXRhIGZlYXR1cmVzIHVzaW5nIEJyZWV6ZSB0byBIb3QgVG93ZWwgQW5ndWxhciwgdmlhIE51R2V0LlxuXG4gICAgSW5zdGFsbC1QYWNrYWdlIEhvdFRvd2VsLkFuZ3VsYXIuQnJlZXplXG5cbiMjIFJlc291cmNlcyAjI1xuXG4rIFtTUEEgUmVzb3VyY2VzXShodHRwOi8vam9obnBhcGEubmV0L3NwYSlcbisgW0hvdCBUb3dlbCBBbmd1bGFyIG9uIEdpdEh1Yl0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL0hvdFRvd2VsLU5HKVxuKyBbSG90IFRvd2VsIEFuZ3VsYXIgb24gTnVHZXRdIChodHRwOi8vbnVnZXQub3JnL3BhY2thZ2VzL0hvdFRvd2VsLUFuZ3VsYXIpXG5cbiMjIEhvdCBUb3dlbCBBbmd1bGFyIGZvciBhbnkgRW52aXJvbm1lbnQgXG4rIFtIb3QgVG93ZWwgQW5ndWxhciBTZWVkL1N0YXJ0ZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9uZy1kZW1vcy90cmVlL21hc3Rlci9ob3R0b3dlbClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjVmNGI3OGU4LWY2ODUtNDhhMi1hMTc0LTY2MGI5MTk5NzZjMCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzVPRGM1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhci1OdUdldCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhYTVlZDY1NTQyNWE0OGJiOTE5MDk4OTc3ZDc1MjAwZjY1ZjVjZjQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiQW5ndWxhci1OdUdldFxuPT09PT09PT09PT09PVxuXG5Bbmd1bGFySlMgTnVHZXQgcGFja2FnZSBjcmVhdGlvbi5cblxuQnkgU2NvdHQgSGFuc2VsbWFuIGFuZCBKb2huIFBhcGFcblxuKlRoYW5rcyB0byBTY290dCBmb3IgdGhlIGF1dG9tYXRpb24qXG5cbkEgc2VyaWVzIG9mIEFuZ3VsYXIgTnVHZXQgcGFja2FnZXMsIHdpdGggdGhlIHBoaWxvc3BoeSBvZiAnMSBQYWNrYWdlIFBlciBNb2R1bGUnLiBcblxuIyMjV2h5PyBcblxuQmVjYXVzZSB0aGUgQW5ndWxhckpTIHBhY2thZ2UgKHdoaWNoIGlzIGF3ZXNvbWUpIGlzIGEgc3VwZXIgcGFja2FnZSB3aXRoIGV2ZXJ5dGhpbmcuIEFuZCBzb21ldGltZXMgeW91IGRvIG5vdCB3YW50IGV2ZXJ5dGhpbmcuXG5cbiMjIFBhY2thZ2VzXG5cbi0gQW5ndWxhckpTLkNvcmUgKGFsbCBwYWNrYWdlcyBiZWxvdyBkZXBlbmQgb24gdGhpcyBvbmUpXG4tIEFuZ3VsYXJKUy5Db29raWVzXG4tIEFuZ3VsYXJKUy5BbmltYXRlXG4tIEFuZ3VsYXJKUy5BcmlhXG4tIEFuZ3VsYXJKUy5Mb2NhbGUgKG5vdCBhbiBhbmd1bGFyIG1vZHVsZSwgYnV0IHJhdGhlciBhbGwgdGhlIGkxOG4gZmlsZXMpXG4tIEFuZ3VsYXJKUy5Mb2FkZXJcbi0gQW5ndWxhckpTLk1lc3NhZ2VzXG4tIEFuZ3VsYXJKUy5SZXNvdXJjZVxuLSBBbmd1bGFySlMuUm91dGVcbi0gQW5ndWxhckpTLlNhbml0aXplXG4tIEFuZ3VsYXJKUy5Ub3VjaFxuXG4jIyBSdW5uaW5nIE5vZGUgYW5kIE5QTSBvbiBXaW5kb3dzXG5cbi0gY2hvY28gaW5zdGFsbCBub2RlanNcbi0gY2hvY28gaW5zdGFsbCBub2RlanMuaW5zdGFsbFxuLSBjaG9jbyBpbnN0YWxsIHB5dGhvbiAtdmVyc2lvbiAyLjcuMlxuXG4tIG5wbSB1cGdyYWRlIG9uIHdpbmRvd3Ncblx0LSBodHRwczovL2dpdGh1Yi5jb20vbnBtL25wbS93aWtpL1Ryb3VibGVzaG9vdGluZyN1cGdyYWRpbmctb24td2luZG93c1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMjQ1MmJkZTYtZTgwZS00MzJjLTg2NTYtOTU1NDFmYmZjOGZiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EZzVNams0TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci5icmVlemUuc3RvcmFnZXdpcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMjliY2JiMzMxZjBkMjk4ZDI2MDdiODM3NmIxNzllYWMwYWY2N2E5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiYW5ndWxhci5icmVlemUuc3RvcmFnZVdpcFxuPT09PT09PT09PT09XG5cblNhdmUgV29yayBpbiBQcm9ncmVzcyB0byBMb2NhbCBTdG9yYWdlIGZvciBBbmd1bGFyIGFuZCBCcmVlemUgYXBwcy5cblxuQXMgc2VlbiBvbiBbQnVpbGRpbmcgQXBwcyB3aXRoIEFuZ3VsYXIgYW5kIEJyZWV6ZV0oaHR0cDovL2pwYXBhLm1lL3NwYW5neikgb24gUGx1cmFsc2lnaHRcblxuXG5WZXJzaW9uIDEuMC4wXG5cbiMjIE51R2V0XG5HZXQgW0FuZ3VsYXIuQnJlZXplLlN0b3JhZ2VXSVBdKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9Bbmd1bGFyLkJyZWV6ZS5TdG9yYWdlV0lQKSBmcm9tIE51R2V0XG5cbiAgICBpbnN0YWxsLXBhY2thZ2UgQW5ndWxhci5CcmVlemUuU3RvcmFnZVdJUFxuXG5cbiMjU2V0dXBcbiAgICAvLyBBZGQgbmd6V2lwIHRvIHlvdXIgbW9kdWxlIGRlcGVuZGVuY2llcy5cbiAgICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsnbmd6V2lwJ10pO1xuXG4jIyMgYHpTdG9yYWdlQ29uZmlnUHJvdmlkZXJgIENvbmZpZ3VyYXRpb25cblxuICAgIGFwcC5jb25maWcoWyd6U3RvcmFnZUNvbmZpZ1Byb3ZpZGVyJywgZnVuY3Rpb24gKGNmZykge1xuICAgICAgICBjZmcuY29uZmlnID0ge1xuICAgICAgICAgICAgLy8gTXVzdCBzZXQgdGhlc2VcbiAgICAgICAgICAgIGtleTogJ1lvdXJBcHBOYW1lJywgLy8gSWRlbnRpZmllciBmb3IgdGhlIGFwcFxuICAgICAgICAgICAgd2lwS2V5OiAnWW91ckFwcE5hbWUuV0lQJywgLy8gSWRlbnRpZmVyIGZvciB0aGUgYXBwJ3MgXG4gICAgICAgICAgICB2ZXJzaW9uOiAnMS4xLjAnLCAvLyBZb3VyIGFwcCdzIHZlcnNpb24gXG5cbiAgICAgICAgICAgIC8vIFRoZXNlIGFyZSBkZWZhdWx0ZWQsIGJ1dCBjYW4gYmUgb3ZlcnJpZGVuXG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSwgLy8gZW5hYmxlIExvY2FsIFN0b3JhZ2UgKFdJUCBpcyBhbHdheXMgZW5hYmxlZClcbiAgICAgICAgICAgIGV2ZW50czogeyAvLyBuYW1lcyBvZiBldmVudHMgdGhhdCBXSVAgd2lsbCBmaXJlXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdzdG9yZS5lcnJvcicsXG4gICAgICAgICAgICAgICAgc3RvcmVDaGFuZ2VkOiAnc3RvcmUuY2hhbmdlZCcsXG4gICAgICAgICAgICAgICAgd2lwQ2hhbmdlZDogJ3dpcC5jaGFuZ2VkJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFwcEVycm9yUHJlZml4OiAnW25neldpcF0gJywgLy8gb3B0aW9uYWwgcHJlZml4IGZvciBhbnkgZXJyb3IgbWVzc2FnZXNcbiAgICAgICAgICAgIG5ld0d1aWQ6IGJyZWV6ZS5jb3JlLmdldFV1aWQgLy8gR1VJRCBmdW5jdGlvbiBnZW5lcmF0b3JcbiAgICAgICAgfTtcbiAgICB9XSk7XG5cblxuIyNBUEkgVXNhZ2VcblxuIyMjQVBJIGZvciBgelN0b3JhZ2VXaXBgIHNlcnZpY2VcblxuICAgIC8vIEluaXRpYWxpemUgc3RvcmFnZSB3aXRoIGEgQnJlZXplIEVudGl0eU1hbmFnZXJcbiAgICB6U3RvcmFnZVdpcC5pbml0KGVudGl0eU1hbmFnZXIpXG4gICAgXG4gICAgLy8gQ2xlYXIgYWxsIFdJUCBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICB6U3RvcmFnZVdpcC5jbGVhckFsbFdpcCgpXG5cbiAgICAvLyBTdG9yZSAxIGVudGl0eSBpbiBsb2NhbCBzdG9yYWdlLiBQYXNzIGluIHRoZSB3aXAga2V5LCBlbnRpdHlOYW1lLCBhbmQgYSBkZXNjcmlwdGlvbi5cbiAgICAvLyByb3V0ZVN0YXRlIGlzIHRoZSBuYW1lIG9mIHRoZSByb3V0ZSAoYWZ0ZXIgdGhlIGhhc2gpIGZvciB0aGUgdmlldyB3aGVyZSB0aGlzIGVudGl0eSBtYXkgYmUgdmlld2VkLlxuICAgIC8vIHJvdXRlU3RhdGUgZGVmYXVsdHMgdG8gZW50aXR5TmFtZS50b0xvd2VyY2FzZSgpIFxuICAgIHZhciBrZXkgPSB6U3RvcmFnZVdpcC5zdG9yZVdpcEVudGl0eShlbnRpdHksIGtleSwgZW50aXR5TmFtZSwgZGVzY3JpcHRpb24sIHJvdXRlU3RhdGUpXG5cbiAgICAvLyBSZW1vdmUgMSBlbnRpdHkgZnJvbSBsb2NhbCBzdG9yYWdlLCBieSBpdHMgV0lQIGtleVxuICAgIHpTdG9yYWdlV2lwLnJlbW92ZVdpcEVudGl0eShrZXkpXG5cbiAgICAvLyBMb2FkIDEgZW50aXR5IGludG8gQnJlZXplJ3MgRW50aXR5TWFuYWdlclxuICAgIC8vIGZyb20gbG9jYWwgc3RvcmFnZSwgYnkgaXRzIFdJUCBrZXlcbiAgICB6U3RvcmFnZVdpcC5sb2FkV2lwRW50aXR5KGtleSlcblxuICAgIC8vIEZpbmQgMSBlbnRpdHkgZnJvbSBsb2NhbCBzdG9yYWdlLCBieSBpdHMgZW50aXR5TmFtZSBhbmQgaWRcbiAgICB2YXIgd2lwS2V5ID0gelN0b3JhZ2VXaXAuZmluZFdpcEtleUJ5RW50aXR5SWQoZW50aXR5TmFtZSwgaWQpXG5cbiAgICAvLyBHZXQgc3VtbWFyeSBpbmZvcm1hdGlvbiBmb3IgYWxsIFdJUCBpbiBsb2NhbCBzdG9yYWdlXG4gICAgdmFyIHdpcFN1bW1hcnkgPSB6U3RvcmFnZVdpcC5nZXRXaXBTdW1tYXJ5KClcblxuXG4jIyNBUEkgZm9yIGB6U3RvcmFnZWAgc2VydmljZVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBzdG9yYWdlIHdpdGggYSBCcmVlemUgRW50aXR5TWFuYWdlclxuICAgIHpTdG9yYWdlLmluaXQoZW50aXR5TWFuYWdlcilcblxuICAgIC8vIERpY3Rpb25hcnkgZnVuY3Rpb24gdG8gc2V0IGlmIGEga2V5IHZhbHVlIGlzIGxvYWRlZCBcbiAgICB6U3RvcmFnZS5hcmVJdGVtc0xvYWRlZChrZXksIHZhbHVlKVxuICAgIC8vIERpY3Rpb25hcnkgZnVuY3Rpb24gdG8gZ2V0IGlmIGEga2V5IHZhbHVlIGlzIGxvYWRlZCBcbiAgICB2YXIgdmFsdWUgPSB6U3RvcmFnZS5hcmVJdGVtc0xvYWRlZChrZXkpXG5cbiAgICAvLyBDbGVhciBhbGwgbG9jYWwgc3RvcmFnZSwgaW5jbHVkaW5nIFdJUCB0b29cbiAgICB6U3RvcmFnZS5jbGVhcigpXG5cbiAgICAvLyBMb2FkIGFsbCBvZiB0aGUgZW50aXRpZXMgZm9ybSBsb2NhbCBzdG9yYWdlIFxuICAgIC8vIGludG8gQnJlZXplJ3MgRW50aXR5TWFuYWdlclxuICAgIHpTdG9yYWdlLmxvYWQoKVxuXG4gICAgLy8gU2F2ZSBhbGwgb2YgdGhlIEJyZWV6ZSBFbnRpdHlNYW5hZ2VyJ3MgZW50aXRpZXMgXG4gICAgLy8gdG8gbG9jYWwgc3RvcmFnZVxuICAgIHpTdG9yYWdlLnNhdmUoKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYjhlYjlkMjMtMWIwYS00NTI0LWE1NzUtNmEyNGI0MGI4Mzg3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTJPREl6TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctZGVtb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Q0YzY1MDQzYWJiZjVmMDY2YWRmZmMzYWNmMzdmOWY1OGI0NDJhMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIm5nLWRlbW9zXG49PT09PT09PVxuVmFyaWV0eSBvZiBhbmd1bGFyIGRlbW9zIGFyZSBjb250YWluZWQgaGVyZWluLlxuXG4+Kk9waW5pb25hdGVkIEFuZ3VsYXJKUyBzdHlsZSBndWlkZSBmb3IgdGVhbXMgYnkgW0Bqb2huX3BhcGFdKC8vdHdpdHRlci5jb20vam9obl9wYXBhKSpcblxuPk1vcmUgZGV0YWlscyBhYm91dCB0aGUgc3R5bGVzIGFuZCBwYXR0ZXJucyB1c2VkIGluIHRoZXNlIGFwcHMgY2FuIGJlIGZvdW5kIGluIG15IFtBbmd1bGFySlMgU3R5bGUgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyanMtc3R5bGVndWlkZSkgYW5kIG15ICoqQW5ndWxhckpTIFBhdHRlcm5zOiBDbGVhbiBDb2RlKiooY29taW5nIHNvb24pIGNvdXJzZSBhdCBbUGx1cmFsc2lnaHRdKGh0dHA6Ly9wbHVyYWxzaWdodC5jb20vdHJhaW5pbmcvQXV0aG9ycy9EZXRhaWxzL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuIFxuXG5cbiMjIGdydW50LWd1bHBcbkRlbW9uc3RyYXRlcyB1c2Ugb2YgZ3J1bnQgYW5kIGd1bHAgd2l0aCBhbiBhbmd1bGFyIGFwcC5cblxuLSBncnVudFxuLSBndWxwXG5cbiMjIGhvdHRvd2VsXG5TdGFydGVyIHRlbXBsYXRlIGZvciBBbmd1bGFyIGFwcHMuIEFsbCBjbGllbnQgc2lkZSBqYXZhc2NyaXB0IHVzaW5nIEFuZ3VsYXIgZm9yIHJvdXRpbmcsIGFuaW1hdGlvbiwgYW5kIGJhc2ljIENTUyB0aGVtaW5nLlxuXG4jIyBtb2R1bGFyXG5EZW1vbnN0cmF0ZXMgaG93IHRvIGRpc3RyaWJ1dGUgYW4gYXBwIGFjcm9zcyBzZXZlcmFsIG1vZHVsZXMsIGluY2x1ZGluZyBoYW5kbGluZyB0aGUgcm91dGluZywgdGVzdGluZywgZ3VscCBhdXRvbWF0aW9uIGFuZCBtb3JlLlxuXG4jIyBjYy1ibWVhblxuTGFyZ2VyIGFwcCBydW5uaW5nIGEgZmljdGl0aW91cyBldmVudCBuYW1lZCBcIkNvZGVDYW1wZXJcIi5cblxuIyNuZy0xLjMgcGxheWdyb3VuZFxuU2ltcGxlIGRlbW9zIGZvciBuZyAxLjMgZmVhdHVyZXMuXG5cbi0gbmctbW9kZWwtb3B0aW9ucz1cInsgZGVib3VuY2U6IDEwMDAsIHVwZGF0ZU9uOiAnYmx1cicgfVwiXG5cbiMjIG5nLWp3dFxuSlNPTiBXZWIgVG9rZW5zIChKV1QpIGluIGFuIEFuZ3VsYXJKUyBhcHAsIHRvIGRlbW9uc3RyYXRlIGhvdyB0byB1c2UgdGhlIEpXVCBmb3IgcmVzdHJpY3RpbmcgQVBJIGFjY2Vzcy5cblxuIyMgcXVpY2tzdGFydFxuU2ltcGxlIEFuZ3VsYXIgZGVtb3NcblxuLSBkYXRhIGJpbmRpbmdcbi0gcm91dGluZ1xuLSByZXBlYXRcbi0gZmlsdGVyXG4tICRodHRwXG4tIHNlcnZpY2UvZmFjdG9yeSBcblxuIyMgdG9kby16dW1vXG5EZW1vbnN0cmF0ZXMgaG93IHRvIHRhbGsgdG8gQXp1cmUgTW9iaWxlIFNlcnZpY2VzIHZpYSBhIHNpbmdsZSB0b2RvIGxpc3QuXG5cbi0gQ2hhbmdlc2V0cyBhbmQgY2hhbmdlIHN0YXRlIChBZGRlZCwgRGVsZXRlZCwgVWRwYXRlZClcbi0gVGFsa2luZyBBenVyZSBNb2JpbGUgU2VydmljZXNcbi0gU2F2aW5nIGNoYW5nZXNldHMgdG8gbG9jYWwgc3RvcmFnZVxuLSBIYW5kIHdyaXR0ZW4gbWV0YWRhdGEgZm9yIGJyZWV6ZVxuXG4jIyB6LW1ldGFkYXRhXG5UaHJvd3MgYSBzd2l0Y2ggZnJvbSB1c2luZyBXZWIgQVBJIC8gRUYgbWV0YWRhdGEgdG8gdXNpbmcgaGFuZCB3cml0dGVuIGNsaWVudCBzaWRlIG1ldGFkYXRhXG5cbi0gVG9nZ2xlIGJldHdlZW4gRUYgbWV0YWRhdGEgYW5kIGhhbmQgd3JpdHRlbiBtZXRhZGF0YSBmb3IgYnJlZXplXG5cbiMjIFp6YVxuUGl6emEgb3JkZXJpbmcgc2VydmljZSB1c2luZyBNRUFOIHN0YWNrLiBEYXRhIGlzIHN0cnVjdHVyZWQgaW4gYSBkb2N1bWVudCBmYXNoaW9uLCBub3QgU1FMIHNob3ZlZCBpbiBNb25nb0RCLlxuXG4tIG5vZGUuanNcbi0gbW9uZ29kYiB1c2luZyB0cnVlIGRvY3VtZW50IHN0cnVjdHVyZVxuLSBleHByZXNzXG4tIGJyZWV6ZVxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQ0Nzk4OTZlLTM3YTMtNDkwNy1hYzNiLTk5ZGU5ZTE3ZjMxZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgU3R5bGUgR3VpZGVcblxuIyMgVmVyc2lvbnNcblRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBBbmd1bGFyLCBhbmQgdGh1cyB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgb2YgdGhlIGd1aWRlLiBDaG9vc2UgeW91ciBndWlkZSBhcHByb3ByaWF0ZWx5LlxuXG4jIyMgQW5ndWxhciAxIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMSBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMS9SRUFETUUubWQpLlxuXG4jIyMgQW5ndWxhciAyIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMiBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMi9SRUFETUUubWQpLlxuXG4jIyBBbmd1bGFyIFRlYW0gRW5kb3JzZWRcblNwZWNpYWwgdGhhbmtzIHRvIElnb3IgTWluYXIsIGxlYWQgb24gdGhlIEFuZ3VsYXIgdGVhbSwgZm9yIHJldmlld2luZywgY29udHJpYnV0aW5nIGZlZWRiYWNrLCBhbmQgZW50cnVzdGluZyBtZSB0byBzaGVwaGVyZCB0aGlzIGd1aWRlLlxuXG4jIyBQdXJwb3NlXG4qT3BpbmlvbmF0ZWQgQW5ndWxhciBzdHlsZSBndWlkZSBmb3IgdGVhbXMgYnkgW0Bqb2huX3BhcGFdKC8vdHdpdHRlci5jb20vam9obl9wYXBhKSpcblxuSWYgeW91IGFyZSBsb29raW5nIGZvciBhbiBvcGluaW9uYXRlZCBzdHlsZSBndWlkZSBmb3Igc3ludGF4LCBjb252ZW50aW9ucywgYW5kIHN0cnVjdHVyaW5nIEFuZ3VsYXIgYXBwbGljYXRpb25zLCB0aGVuIHN0ZXAgcmlnaHQgaW4uIFRoZXNlIHN0eWxlcyBhcmUgYmFzZWQgb24gbXkgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZSB3aXRoIFtBbmd1bGFyXSgvL2FuZ3VsYXJqcy5vcmcpLCBwcmVzZW50YXRpb25zLCBbUGx1cmFsc2lnaHQgdHJhaW5pbmcgY291cnNlc10oaHR0cDovL2FwcC5wbHVyYWxzaWdodC5jb20vYXV0aG9yL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG5cblRoZSBwdXJwb3NlIG9mIHRoaXMgc3R5bGUgZ3VpZGUgaXMgdG8gcHJvdmlkZSBndWlkYW5jZSBvbiBidWlsZGluZyBBbmd1bGFyIGFwcGxpY2F0aW9ucyBieSBzaG93aW5nIHRoZSBjb252ZW50aW9ucyBJIHVzZSBhbmQsIG1vcmUgaW1wb3J0YW50bHksIHdoeSBJIGNob29zZSB0aGVtLlxuXG4+SWYgeW91IGxpa2UgdGhpcyBndWlkZSwgY2hlY2sgb3V0IG15IFtBbmd1bGFyIFBhdHRlcm5zOiBDbGVhbiBDb2RlXShodHRwOi8vanBhcGEubWUvbmdjbGVhbikgY291cnNlIGF0IFBsdXJhbHNpZ2h0IHdoaWNoIGlzIGEgY29tcGFuaW9uIHRvIHRoaXMgZ3VpZGUuXG5cbiAgWyFbQW5ndWxhciBQYXR0ZXJuczogQ2xlYW4gQ29kZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS9tYXN0ZXIvYTEvYXNzZXRzL25nLWNsZWFuLWNvZGUtYmFubmVyLnBuZyldKGh0dHA6Ly9qcGFwYS5tZS9uZ2NsZWFuKVxuXG4jIyBDb21tdW5pdHkgQXdlc29tZW5lc3MgYW5kIENyZWRpdFxuTmV2ZXIgd29yayBpbiBhIHZhY3V1bS4gSSBmaW5kIHRoYXQgdGhlIEFuZ3VsYXIgY29tbXVuaXR5IGlzIGFuIGluY3JlZGlibGUgZ3JvdXAgd2hvIGFyZSBwYXNzaW9uYXRlIGFib3V0IHNoYXJpbmcgZXhwZXJpZW5jZXMuIE1hbnkgb2YgbXkgc3R5bGVzIGhhdmUgYmVlbiBmcm9tIHRoZSBtYW55IHBhaXIgcHJvZ3JhbW1pbmcgc2Vzc2lvbnMgW1dhcmQgQmVsbF0oaHR0cHM6Ly90d2l0dGVyLmNvbS93YXJkYmVsbCkgYW5kIEkgaGF2ZSBoYWQuIE15IG1vc3QgZXhjZWxsZW50IGZyaWVuZCBXYXJkIGhhcyBoZWxwZWQgaW5mbHVlbmNlIHRoZSB1bHRpbWF0ZSBldm9sdXRpb24gb2YgdGhlc2UgZ3VpZGVzLlxuXG4jIyBDb250cmlidXRpbmdcbk9wZW4gYW4gaXNzdWUgZmlyc3QgdG8gZGlzY3VzcyBwb3RlbnRpYWwgY2hhbmdlcy9hZGRpdGlvbnMuIElmIHlvdSBoYXZlIHF1ZXN0aW9ucyB3aXRoIHRoZSBndWlkZSwgZmVlbCBmcmVlIHRvIGxlYXZlIHRoZW0gYXMgaXNzdWVzIGluIHRoZSByZXBvc2l0b3J5LiBJZiB5b3UgZmluZCBhIHR5cG8sIGNyZWF0ZSBhIHB1bGwgcmVxdWVzdC4gVGhlIGlkZWEgaXMgdG8ga2VlcCB0aGUgY29udGVudCB1cCB0byBkYXRlIGFuZCB1c2UgZ2l0aHVi4oCZcyBuYXRpdmUgZmVhdHVyZSB0byBoZWxwIHRlbGwgdGhlIHN0b3J5IHdpdGggaXNzdWVzIGFuZCBQUuKAmXMsIHdoaWNoIGFyZSBhbGwgc2VhcmNoYWJsZSB2aWEgZ29vZ2xlLiBXaHk/IEJlY2F1c2Ugb2RkcyBhcmUgaWYgeW91IGhhdmUgYSBxdWVzdGlvbiwgc29tZW9uZSBlbHNlIGRvZXMgdG9vISBZb3UgY2FuIGxlYXJuIG1vcmUgaGVyZSBhdCBhYm91dCBob3cgdG8gY29udHJpYnV0ZS5cblxuKkJ5IGNvbnRyaWJ1dGluZyB0byB0aGlzIHJlcG9zaXRvcnkgeW91IGFyZSBhZ3JlZWluZyB0byBtYWtlIHlvdXIgY29udGVudCBhdmFpbGFibGUgc3ViamVjdCB0byB0aGUgbGljZW5zZSBvZiB0aGlzIHJlcG9zaXRvcnkuKlxuXG4jIyMgUHJvY2Vzc1xuICAgIDEuIERpc2N1c3MgdGhlIGNoYW5nZXMgaW4gYSBHaXRIdWIgaXNzdWUuXG4gICAgMi4gT3BlbiBhIFB1bGwgUmVxdWVzdCwgcmVmZXJlbmNlIHRoZSBpc3N1ZSwgYW5kIGV4cGxhaW4gdGhlIGNoYW5nZSBhbmQgd2h5IGl0IGFkZHMgdmFsdWUuXG4gICAgMy4gVGhlIFB1bGwgUmVxdWVzdCB3aWxsIGJlIGV2YWx1YXRlZCBhbmQgZWl0aGVyIG1lcmdlZCBvciBkZWNsaW5lZC5cblxuIyMgTGljZW5zZVxuXG5fdGxkcjsgVXNlIHRoaXMgZ3VpZGUuIEF0dHJpYnV0aW9ucyBhcmUgYXBwcmVjaWF0ZWQuX1xuXG4jIyMgQ29weXJpZ2h0XG5cbkNvcHlyaWdodCAoYykgMjAxNC0yMDE2IFtKb2huIFBhcGFdKGh0dHA6Ly9qb2hucGFwYS5uZXQpXG5cbiMjIyAoVGhlIE1JVCBMaWNlbnNlKVxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG5hIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbidTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG5FWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbk1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG5DTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcblNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4qKltCYWNrIHRvIHRvcF0oI2FuZ3VsYXItc3R5bGUtZ3VpZGUpKipcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjlhMzJlYTdmLTE1Y2QtNDk4NC04YWQ0LTFjOTJjMzRiMTA1YSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiI0FuZ3VsYXJKUyBQYXR0ZXJucyBUZXN0aW5nIC0gRGVtb1xuRGVtb25zdHJhdGVzIEFuZ3VsYXIgdGVzdGluZ1xuXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9qb2hucGFwYS9uZy1wYXR0ZXJucy10ZXN0aW5nLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2pvaG5wYXBhL25nLXBhdHRlcm5zLXRlc3RpbmcpXG5cbj4qT3BpbmlvbmF0ZWQgQW5ndWxhckpTIHN0eWxlIGd1aWRlIGZvciB0ZWFtcyBieSBbQGpvaG5fcGFwYV0oLy90d2l0dGVyLmNvbS9qb2huX3BhcGEpKlxuXG4+TW9yZSBkZXRhaWxzIGFib3V0IHRoZSBzdHlsZXMgYW5kIHBhdHRlcm5zIHVzZWQgaW4gdGhpcyBhcHAgY2FuIGJlIGZvdW5kIGluIG15IFtBbmd1bGFySlMgU3R5bGUgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyanMtc3R5bGVndWlkZSkgYW5kIG15ICoqQW5ndWxhckpTIFBhdHRlcm5zOiBDbGVhbiBDb2RlKiooY29taW5nIHNvb24pIGNvdXJzZSBhdCBbUGx1cmFsc2lnaHRdKGh0dHA6Ly9wbHVyYWxzaWdodC5jb20vdHJhaW5pbmcvQXV0aG9ycy9EZXRhaWxzL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG4+IFxuIyMgU2xpZGVzXG5cblRoZSBzbGlkZXMgZm9yIFdhcmQncyB0YWxrIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgcHJvamVjdCBhcmUgYXZhaWxhYmxlIG9uIGdvb2dsZSBkb2NzLlxuXG5bU2VlIHRoZSBzbGlkZXNdKGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kLzEzN2xnTE10ZmxXM3E0U0JLcnJqVmdpdVNBaTZHQzE5VDRtTlZveC00a1Y4L3ByZXNlbnQpXG5cbiMjIFRPRE9cbjEuIFN0cnVjdHVyZSB3aWxsIGhhdmUgc3BlY3Mgc2lkZSBieSBzaWRlIHdpdGggY29kZSwgZXhjZXB0IGNyb3NzIGN1dHRpbmcgdGVzdHNcbjIuIFJlbW92ZSBleHRyYW5lb3VzIGNvZGUgdW5yZWxhdGVkIHRvIHRlc3RzXG4zLiBBZGQgdWktcm91dGVyXG40LiBSZXZpc2UgZnJvbSBhdmVuZ2Vyc1xuXG4jIyBTdHJ1Y3R1cmVcblx0L2J1aWxkIFx0KGNyZWF0ZWQgb24gdGhlIGZseSlcblx0L2d1bHBcdFxuXHQvc3JjXG5cdFx0L2NsaWVudFxuXHRcdFx0L2FwcFxuXHRcdFx0L2NvbnRlbnRcblx0XHRcdC90ZXN0XG5cdFx0L3NlcnZlclxuXHRcdFx0L2RhdGFcblx0XHRcdC9yb3V0ZXNcblx0XG5cbiMjIEluc3RhbGxpbmcgTm9kZS5qcyBhbmQgQm93ZXIgUGFja2FnZXNcbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBucG0gaW5zdGFsbGBcblxuPkRvIG5vdCBiZSBhbGFybWVkIGJ5IHRoZSBvY2Nhc2lvbmFsIHNlYSBvZiByZWQgY29tcGxhaW5pbmcgYWJvdXRcbnRoZSBpbmFiaWxpdHkgdG8gcmUtYnVpbGQgc29tZSBsaWJyYXJ5LiBZb3UgY2FuIGlnbm9yZSB0aGVzZSB3YXJuaW5nc1xuYmVjYXVzZSB3ZSBhbHdheXMgdXNlIHRoZSBwcmUtYnVpbHQgbGlicmFyaWVzIHRoYXQgd2VyZSBzaGlwcGVkIHdpdGhcbnRoZSBwYWNrYWdlLlxuXG4jIyBDbGVhbmluZyBcbk92ZXIgdGltZSB5b3UgbWlnaHQgYWNjdW11bGF0ZSBzb21lIG9sZCBsaWJyYXJpZXMuXG5cbkl0IGRvZXNuJ3QgaHVydCB0byBvY2Nhc2lvbmFsbHkgY2xlYXIgdGhlIGRlY2tzIGJ5IGRlbGV0aW5nIHRoZVxuXCJib3dlclxcX2NvbXBvbmVudHNcIiBhbmQgXCJub2RlXFxfbW9kdWxlc1wiIGZvbGRlcnMgYW5kIHJlLWluc3RhbGxpbmdcbndpdGggYG5wbSBpbnN0YWxsYC5cblxuIyMgSW5zdGFsbGluZyBCb3dlciBQYWNrYWdlc1xuYG5wbSBpbnN0YWxsYCB3aWxsIGluc3RhbGwgdGhlc2UgdG9vLCBidXQgeW91IGNhbiBkbyBpdCBtYW51YWxseS5cbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBib3dlciBpbnN0YWxsYFxuXG5cbiMjIFRlc3RpbmdcblRoZXJlIGFyZSB0d28gd2F5cyB0byB0ZXN0OiBpbiB0aGUgYnJvd3NlciBhbmQgd2l0aCBrYXJtYVxuXG4jIyMgVGVzdGluZyBpbiB0aGUgYnJvd3NlclxuXG4qIE9wZW4gYSBjb21tYW5kIG9yIHRlcm1pbmFsIHdpbmRvdy5cblxuKiBXaXRoIGJyb3dzZXItc3luYyBcbiAgICAqIGluIHNwZWNzLmh0bWwsIGNvbW1lbnQgb3V0IGBtb2NoYS5jaGVja0xlYWtzKClgIC8vIGZhbHNlIGxlYWsgcmVwb3J0IGZyb20gYnJvd3NlciBzeW5jXG4gICAgKiBydW4gYGd1bHAgc2VydmUtc3BlY3NgPGJyLz48YnIvPlxuXG4qIFdpdGhvdXQgYnJvd3Nlci1zeW5jIFxuICAgICogcnVuIGBndWxwIHNlcnZlLXNwZWNzIC0tbm9zeW5jYFxuXHQqIG9wZW4gYSBicm93c2VyIHRvIGBsb2NhbGhvc3Q6NzIwMi9zcGVjcy5odG1sYFxuXHQqIGJyb3dzaW5nIHRvIGBsb2NhbGhvc3Q6NzIwMmAgcnVucyB0aGUgYXBwPGJyLz48YnIvPlxuXG4qIFRvIHN0b3AsIGVpdGhlciBcIkN0cmwtQ1wiIGFuZCBhbnN3ZXIgdGhlIHByb21wdCB3aXRoIFwiWVwiIG9yIGp1c3QgY2xvc2UgdGhlIHdpbmRvdy5cblxuIyMjIFRlc3Rpbmcgd2l0aCBrYXJtYVxuKiBPcGVuIGEgY29tbWFuZCBvciB0ZXJtaW5hbCB3aW5kb3cuXG5cbiogVG8ganVzdCB0aGUgdW5pdCB0ZXN0cywgdHlwZSBgZ3VscCBhdXRvdGVzdGAgXG5cbiogVG8gcnVuIGJvdGggdW5pdCBhbmQgbWlkd2F5IHRlc3RzIChzcGlucyB1cCBhIGRldiBzZXJ2ZXIpLCB0eXBlIGBndWxwIGF1dG90ZXN0IC0tc3RhcnRTZXJ2ZXJzYFxuXG5UZXN0aW5nIHVzZXMga2FybWEsIG1vY2hhLCBjaGFpLCBzaW5vbiwgbmdNaWR3YXlUZXN0ZXIgbGlicmFyaWVzLlxuXG4+XCJhdXRvdGVzdFwiIHN0YXJ0cyB0aGUgdGVzdHMgYW5kIHN0YXlzIGFsaXZlLCB3YXRjaGluZyBmb3IgZmlsZSBjaGFuZ2VzLiBUeXBlIFwidGVzdFwiIGluc3RlYWQgaWYgeW91IG9ubHkgd2FudCB0byBydW4gdGhlIHRlc3RzIG9uY2UgYW5kIHRoZW4gZXhpdC5cblxuKiBUbyBzdG9wLCBlaXRoZXIgXCJDdHJsLUNcIiBhbmQgYW5zd2VyIHRoZSBwcm9tcHQgd2l0aCBcIllcIiBvciBqdXN0IGNsb3NlIHRoZSB3aW5kb3cuXG5cbiMjIFJ1bm5pbmcgdGhlIGFwcFxuUnVucyBsb2NhbGx5LCBubyBkYXRhYmFzZSByZXF1aXJlZC5cblxuIyMjIERldiBCdWlsZHNcblRoZSBkZXYgYnVpbGQgZG9lcyBub3Qgb3B0aW1pemUgdGhlIGRlcGxveWVkIGNvZGUuIEl0IHNpbXBseSBydW5zIGl0IGluIHBsYWNlLiBZb3UgY2FuIHJ1biBhIGRldiBidWlsZCBpbiBtdWx0aXBsZSB3YXlzLlxuXG4jIyMjT3B0aW9uIDEgLSBTZXJ2ZVxuVHlwZSBgZ3VscCBzZXJ2ZS1kZXZgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuIyMjI09wdGlvbiAyIC0gU2VydmUgYW5kIERlYnVnIE5vZGVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnYCBhbmQgYnJvd3NlIHRvIGBodHRwOi8vbG9jYWxob3N0OjcyMDJgIGZvciB0aGUgY2xpZW50IGFuZCBgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlYnVnP3BvcnQtNTg1OGAgdG8gZGVidWcgdGhlIHNlcnZlci5cblxuIyMjI09wdGlvbiAzIC0gU2VydmUgYW5kIERlYnVnIE5vZGUgQnJlYWtpbmcgb24gMXN0IExpbmVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnLWJya2AgYW5kIGJyb3dzZSB0byBgaHR0cDovL2xvY2FsaG9zdDo3MjAyYCBmb3IgdGhlIGNsaWVudCBhbmQgYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9kZWJ1Zz9wb3J0LTU4NThgIHRvIGRlYnVnIHRoZSBzZXJ2ZXIuXG5cbiMjIyBTdGFnaW5nIEJ1aWxkXG5UaGUgc3RhZ2luZyBidWlsZCBpcyBhbiBvcHRpbWl6ZWQgYnVpbGQuIFR5cGUgYGd1bHAgc2VydmUtc3RhZ2VgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuVGhlIG9wdGltaXphdGlvbnMgYXJlIHBlcmZvcm1lZCBieSB0aGUgZ3VscCB0YXNrcyBhbmQgaW5jbHVkZSB0aGUgZm9sbG93aW5nIGxpc3QuIFNlZSB0aGUgYGd1bHBmaWxlLmpzYCBmb3IgZGV0YWlsc1xuXG4tIGpzaGludFxuLSBwcmVwYXJpbmcgQW5ndWxhcidzIHRlbXBsYXRlY2FjaGUgZm9yIGh0bWwgdGVtcGxhdGVzXG4tIGNvbmNhdCB0YXNrIHRvIGJ1bmRsZSBjc3MgYW5kIGpzLCBzZXBhcmF0ZWx5XG4tIEFuZ3VsYXIgZGVwZW5kZW5jeSBpbmplY3Rpb24gYW5ub3RhdGlvbnMgdXNpbmcgbmdBbm5vdGF0ZVxuLSB1Z2xpZnkgdG8gbWluaWZ5IGFuZCBtYW5nbGUgamF2YXNjcmlwdFxuLSBzb3VyY2UgbWFwc1xuLSBjc3MgYXV0b3ByZWZpeGVyIGZvciB2ZW5kb3IgcHJlZml4ZXNcbi0gbWluaWZ5IGNzc1xuLSBvcHRpbWl6ZSBpbWFnZXNcbi0gaW5kZXguaHRtbCBpbmplY3Rpb24gZm9yIHNjcmlwdHMgYW5kIGxpbmtzXG4tIGRlcGxveWluZyBhbGwganMsIGNzcywgaW1hZ2VzLCBmb250cywgYW5kIGluZGV4Lmh0bWxcblxuIyMgSG93IFRoZSBBcHAgV29ya3NcblRoZSBhcHAgaXMgcXVpdGUgc2ltcGxlIGFuZCBoYXMgMiBtYWluIHJvdXRlczpcbi0gZGFzaGJvYXJkXG4tIGF2ZW5nZXJzIGxpc3RcblxuIyMjIFRoZSBNb2R1bGVzXG5UaGUgYXBwIGhhcyA0IGZlYXR1cmUgbW9kdWxlcyBhbmQgZGVwZW5kcyBvbiBhIHNlcmllcyBvZiBleHRlcm5hbCBtb2R1bGVzIGFuZCBjdXN0b20gYnV0IGNyb3NzLWFwcCBtb2R1bGVzXG5cblx0YXBwIC0tPiBbXG5cdCAgICAgICAgYXBwLmF2ZW5nZXJzLFxuXHQgICAgICAgIGFwcC5kYXNoYm9hcmQsXG5cdCAgICAgICAgYXBwLmxheW91dCxcblx0ICAgICAgICBhcHAud2lkZ2V0cyxcblx0XHRcdGFwcC5jb3JlIC0tPiBbXG5cdFx0XHRcdG5nQW5pbWF0ZSxcblx0XHRcdFx0bmdSb3V0ZSxcblx0XHRcdFx0bmdTYW5pdGl6ZSxcblx0XHRcdFx0YmxvY2tzLmV4Y2VwdGlvbixcblx0XHRcdFx0YmxvY2tzLmxvZ2dlcixcblx0XHRcdFx0YmxvY2tzLnJvdXRlclxuXHRcdFx0XVxuXHQgICAgXVxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImUyZGY4ZThhLWIxYzktNDVlOS1hNjYwLTM4YTg2NGI4OGE3ZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1uZy10ZXN0aW5nXG5UQkQ6IFdoYXQgaXMgdGhpc1xuXG4jIyBJbnN0YWxsXG5cbiogY2xvbmUgZnJvbSBnaXRodWIgb3IgZG93bmxvYWQgaXRcbiogYG5wbSBpbnN0YWxsYFxuXG4jIyBSdW5cbiogbGF1bmNoIHNlcnZlciBpbiB0ZXJtaW5hbC9jb21tYW5kIHdpbmRvdzogYG5vZGUgc3JjL3NlcnZlci9hcHAuanNgXG4qIEZvciBhcHAsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi8+XG4qIEZvciBtaW5Nb2NoYS5odG1sLCBicm93c2UgdG86IDxodHRwOi8vbG9jYWxob3N0OjcyNzIvbWluTW9jaGEuaHRtbD5cbiogRm9yIHNwZWNzLmh0bWwsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi9zcGVjcy5odG1sPlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNmJkNzZmODUtMWI0ZC00YWJiLThlZmItMTBjMTM3NDQ0YmE3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1ndWxwXG5Zb3UndmUgYnVpbHQgeW91ciBKYXZhU2NyaXB0IGFwcGxpY2F0aW9uIGJ1dCBob3cgZG8geW91IGF1dG9tYXRlIHRlc3RpbmcsIGNvZGUgYW5hbHlzaXMsIHJ1bm5pbmcgaXQgbG9jYWxseSBvciBkZXBsb3lpbmcgaXQ/IFRoZXNlIHJlZHVuZGFudCB0YXNrcyBjYW4gY29uc3VtZSB2YWx1YWJsZSB0aW1lIGFuZCByZXNvdXJjZXMuIFN0b3Agd29ya2luZyBzbyBoYXJkIGFuZCB0YWtlIGFkdmFudGFnZSBvZiBKYXZhU2NyaXB0IHRhc2sgYXV0b21hdGlvbiB1c2luZyBHdWxwIHRvIHN0cmVhbWxpbmUgdGhlc2UgdGFza3MgYW5kIGdpdmUgeW91IGJhY2sgbW9yZSB0aW1lIGluIHRoZSBkYXkuIFN0dWR5aW5nIHRoaXMgcmVwbyBjYW4gaGVscCBjbGFyaWZ5IGhvdyBHdWxwIHdvcmtzLCBqdW1wLXN0YXJ0IHRhc2sgYXV0b21hdGlvbiB3aXRoIEd1bHAsIGZpbmQgYW5kIHJlc29sdmUgaXNzdWVzIGZhc3RlciwgYW5kIGJlIGEgbW9yZSBwcm9kdWN0aXZlLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuLSBJbnN0YWxsIE5vZGVcblx0LSBvbiBPU1ggaW5zdGFsbCBbaG9tZSBicmV3XShodHRwOi8vYnJldy5zaC8pIGFuZCB0eXBlIGBicmV3IGluc3RhbGwgbm9kZWBcblx0LSBvbiBXaW5kb3dzIGluc3RhbGwgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBcbiAgICAtIFJlYWQgaGVyZSBmb3Igc29tZSBbdGlwcyBvbiBXaW5kb3dzXShodHRwOi8vanBhcGEubWUvd2lubm9kZSlcbiAgICAtIG9wZW4gY29tbWFuZCBwcm9tcHQgYXMgYWRtaW5pc3RyYXRvclxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzLmluc3RhbGxgXG4tIE9uIE9TWCB5b3UgY2FuIGFsbGV2aWF0ZSB0aGUgbmVlZCB0byBydW4gYXMgc3VkbyBieSBbZm9sbG93aW5nIHRoZXNlIGluc3RydWN0aW9uc10oaHR0cDovL2pwYXBhLm1lL25vbW9yZXN1ZG8pLiBJIGhpZ2hseSByZWNvbW1lbmQgdGhpcyBzdGVwIG9uIE9TWFxuLSBPcGVuIHRlcm1pbmFsXG4tIFR5cGUgYG5wbSBpbnN0YWxsIC1nIG5vZGUtaW5zcGVjdG9yIGJvd2VyIGd1bHBgXG5cbiMjIFF1aWNrIFN0YXJ0XG5QcmlvciB0byB0YWtpbmcgdGhlIGNvdXJzZSwgY2xvbmUgdGhpcyByZXBvIGFuZCBydW4gdGhlIGNvbnRlbnQgbG9jYWxseVxuYGBgYmFzaFxuJCBucG0gaW5zdGFsbFxuJCBib3dlciBpbnN0YWxsXG4kIG5wbSBzdGFydFxuYGBgXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImYxNDEyNzkxLWVjOWEtNDNlZS1iYzczLTRjZGE1OWM0YmE5MCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtYW5ndWxhci10eXBlc2NyaXB0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cDovL2NoYW5uZWw5Lm1zZG4uY29tL0V2ZW50cy9CdWlsZC8yMDE1LzMtNjgwKSBwcmVzZW50ZWQgYnkgRXJpY2ggR2FtbWEsIENocmlzIERpYXMgYW5kIEpvaG4gUGFwYS5cblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBJbnN0YWxsIFtOb2RlLmpzXShodHRwOi8vbm9kZWpzLm9yZykgXG4gLSBvbiBPU1ggdXNlIFtob21lYnJld10oaHR0cDovL2JyZXcuc2gpIGBicmV3IGluc3RhbGwgbm9kZWBcbiAtIG9uIFdpbmRvd3MgdXNlIFtjaG9jb2xhdGV5XShodHRwczovL2Nob2NvbGF0ZXkub3JnLykgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuXG4yLiBJbnN0YWxsIFllb21hbiBgbnBtIGluc3RhbGwgLWcgeW9gXG5cbjMuIEluc3RhbGwgdGhlc2UgTlBNIHBhY2thZ2VzIGdsb2JhbGx5XG5cbiAgICBgYGBiYXNoXG4gICAgbnBtIGluc3RhbGwgLWcgYm93ZXIgZ3VscCBub2RlbW9uXG4gICAgYGBgXG5cbiAgICA+UmVmZXIgdG8gdGhlc2UgW2luc3RydWN0aW9ucyBvbiBob3cgdG8gbm90IHJlcXVpcmUgc3Vkb10oaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9ndWlkZXMvYmxvYi9tYXN0ZXIvbnBtLWdsb2JhbC13aXRob3V0LXN1ZG8ubWQpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlODE1YWFlNi04NGZjLTQwOTUtODA1OC0xMmM2NGE0OTk1OTkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERTRNVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzYxZmY0ZTBkOTg2YTQ1OWM4NDE0YWVlYTZhZTBhNTcyMTE1Mzc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgcGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXNcblZTIENvZGUgc2FtcGxlcyBmb3IgUGx1cmFsc2lnaHQgY291cnNlIG9uIENvZGVcblxuRm9yIG1vc3Qgc2FtcGxlcyB5b3Ugd2lsbCBuZWVkIHRoZXNlIGdsb2JhbCBucG0gcGFja2FnZXMgdG8gYmUgaW5zdGFsbGVkLlxuXG5gYGBqYXZhc2NyaXB0XG5ucG0gaW5zdGFsbCBncnVudC1jbGkgZ3VscCBib3dlciB0eXBlc2NyaXB0IGJhYmVsIC1nXG5gYGBcblxuIyMgYXNwIHBsYXlcbkFTUC5ORVQgNSBzYW1wbGUgYXBwbGljYXRpb24uIENyZWF0ZWQgZnJvbSB0aGUgYXNwLm5ldCBnZW5lcmF0b3JcblxuRmlyc3QgbWFrZSBzdXJlIHlvdSBpbnN0YWxsIEFTUC5ORVQgNSBhbmQgRE5YXG5cbiMjIGFuZ3VsYXIyZml2ZW1pbnV0ZXNcbkFuZ3VsYXIgMiBzYW1wbGUgYXBwbGljYXRpb24uXG5cblJ1biBhIHN0YXRpYyBzZXJ2ZXIgaW4gdGhlIHJvb3RcblxuYGBgamF2YXNjcmlwdFxuY2QgYW5ndWxhcjJmaXZlbWludXRlc1xuc3NcbmBgYFxuXG4jIyBjb2RlIHBsYXlcbkphdmFTY3JpcHQgKEVTNSkgc2FtcGxlIGFwcGxpY2F0aW9uLiBDcmVhdGVkIGZyb20gdGhlIEhvdCBUb3dlbCBnZW5lcmF0b3IuXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBjb2RlcGxheVxubnBtIGluc3RhbGxcbmJvd2VyIGluc3RhbGxcbmBgYFxuXG5UbyBydW4gaXRcblxuYGBgamF2YXNjcmlwdFxuZ3VscCBzZXJ2ZS1kZXZcbmBgYFxuXG4jIyBlczYgcGxheVxuSmF2YVNjcmlwdCAoRVM2KSBzYW1wbGUgYXBwbGljYXRpb24uXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBlczZwbGF5XG5ucG0gaW5zdGFsbFxuYm93ZXIgaW5zdGFsbFxuYGBgXG5cblRvIHJ1biBpdFxuXG5gYGBqYXZhc2NyaXB0XG5ndWxwIHNlcnZlLWRldlxuYGBgXG5cbiMjIGdydW50cHJvamVjdFxuR3J1bnQgZmlsZSBzYW1wbGUgYXBwbGljYXRpb24uXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBncnVudHByb2plY3Rcbm5wbSBpbnN0YWxsXG5gYGBcblxuVG8gcnVuIGl0XG5cbmBgYGphdmFzY3JpcHRcbmdydW50IGdydW50LWhpbnRcbmBgYFxuXG4jIyB0cyBwbGF5XG5UeXBlU2NyaXB0IHNhbXBsZSBhcHBsaWNhdGlvbi5cblxuR2V0IGFsbCBjb2RlXG5cbmBgYGphdmFzY3JpcHRcbmNkIHRzcGxheVxubnBtIGluc3RhbGxcbmJvd2VyIGluc3RhbGxcbmBgYFxuXG5UbyBydW4gaXRcblxuYGBgamF2YXNjcmlwdFxuZ3VscCBzZXJ2ZS1kZXZcbmBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjYzZhNjIyZi0zNTUxLTQ4YzUtYWMyNi1mMTdjMDgyYjhjNjAiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJob3R0b3dlbC1hbmd1bGFyLXR5cGVzY3JpcHQiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbTo4MC9FdmVudHMvQnVpbGQvMjAxNS8zLTY4MD9XVC5tY19pZD1ob3R0b3dlbGFuZ3VsYXJ0eXBlc2NyaXB0LWdpdGh1Yi1qb3BhcGEpIHByZXNlbnRlZCBieSBFcmljaCBHYW1tYSwgQ2hyaXMgRGlhcyBhbmQgSm9obiBQYXBhLlxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEluc3RhbGwgW05vZGUuanNdKGh0dHA6Ly9ub2RlanMub3JnKSBcbiAtIG9uIE9TWCB1c2UgW2hvbWVicmV3XShodHRwOi8vYnJldy5zaCkgYGJyZXcgaW5zdGFsbCBub2RlYFxuIC0gb24gV2luZG93cyB1c2UgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBgY2hvY28gaW5zdGFsbCBub2RlanNgXG5cbjIuIEluc3RhbGwgWWVvbWFuIGBucG0gaW5zdGFsbCAtZyB5b2BcblxuMy4gSW5zdGFsbCB0aGVzZSBOUE0gcGFja2FnZXMgZ2xvYmFsbHlcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaW5zdGFsbCAtZyBib3dlciBndWxwIG5vZGVtb25cbiAgICBgYGBcblxuICAgID5SZWZlciB0byB0aGVzZSBbaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBub3QgcmVxdWlyZSBzdWRvXShodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2d1aWRlcy9ibG9iL21hc3Rlci9ucG0tZ2xvYmFsLXdpdGhvdXQtc3Vkby5tZClcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5NmNhZWUzNy03Njc4LTQ4OTItOWZmOS05ZWQ5MWE4MjAwMmIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5EZzFOakkwTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiVHlwZVNjcmlwdERlbW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImQ4YTc2N2NmMjNkN2ViMDQ4ZDA0NDdmYjk3MTczYjczODc0ZWMwZGUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFR5cGVTY3JpcHQgRXhhbXBsZXNcblxuIyMgUnVubmluZyB0aGUgQXBwbGljYXRpb25cblxuMS4gSW5zdGFsbCBOb2RlLmpzIGZyb20gaHR0cDovL25vZGVqcy5vcmdcblxuMS4gUnVuIGBucG0gaW5zdGFsbGAgXG5cbjEuIFJ1biBgbnBtIHN0YXJ0YCB0byBjb21waWxlIHRoZSBUeXBlU2NyaXB0IGFuZCBzdGFydCB0aGUgc2VydmVyIFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMGE4Yzc3ZTgtY2YwOS00NGU5LWI0OWEtYTNmNGI0ZDA2NTQ4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVNREU1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXIxLXNuaXBwZXRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY2ZDYyMzY0NTM0ZGRiNmZjZDNkZmVhOWQxOTQ0ZGQ1MGRmMmY0ZDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgMSBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0IFNuaXBwZXRzIGZvciBWUyBDb2RlXG5cblRoaXMgZXh0ZW5zaW9uIGZvciBWaXN1YWwgU3R1ZGlvIENvZGUgYWRkcyBzbmlwcGV0cyBmb3IgQW5ndWxhciAxIGZvciBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0LlxuXG4hW1VzZSBFeHRlbnNpb25dKGltYWdlcy91c2UtZXh0ZW5zaW9uLmdpZilcblxuIyMgVXNhZ2VcblxuVHlwZSBwYXJ0IG9mIGEgc25pcHBldCwgcHJlc3MgYGVudGVyYCwgYW5kIHRoZSBzbmlwcGV0IHVuZm9sZHMuXG5cbkphdmFTY3JpcHQgU25pcHBldHNcblxuYGBgamF2YXNjcmlwdFxubmcxY29tcG9uZW50OyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29tcG9uZW50XG5uZzFjb250cm9sbGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29udHJvbGxlclxubmcxZGlyZWN0aXZlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZGlyZWN0aXZlXG5uZzFmYWN0b3J5OyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZmFjdG9yeVxubmcxbW9kdWxlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgbW9kdWxlXG5uZzFzZXJ2aWNlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgc2VydmljZVxubmcxZmlsdGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZmlsdGVyXG5gYGBcblxuVHlwZVNjcmlwdCBTbmlwcGV0c1xuXG5gYGB0eXBlc2NyaXB0XG5uZzFjb250cm9sbGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29udHJvbGxlclxubmcxc2VydmljZTsgLy8gY3JlYXRlcyBhbiBBbmd1bGFyIHNlcnZpY2Vcbm5nMW1vZHVsZTsgLy8gY3JlYXRlcyBhbiBBbmd1bGFyIG1vZHVsZVxuYGBgXG5cbkFsdGVybmF0aXZlbHksIHByZXNzIGBDdHJsYCtgU3BhY2VgIChXaW5kb3dzLCBMaW51eCkgb3IgYENtZGArYFNwYWNlYCAoT1NYKSB0byBhY3RpdmF0ZSBzbmlwcGV0cyBmcm9tIHdpdGhpbiB0aGUgZWRpdG9yLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuMS4gSW5zdGFsbCBWaXN1YWwgU3R1ZGlvIENvZGUgMC4xMC4xIG9yIGhpZ2hlclxuMi4gTGF1bmNoIENvZGVcbjMuIEZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBgQ3RybGAtYFNoaWZ0YC1gUGAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYC1gU2hpZnRgLWBQYCAoT1NYKVxuNC4gU2VsZWN0IGBJbnN0YWxsIEV4dGVuc2lvbmBcbjUuIENob29zZSB0aGUgZXh0ZW5zaW9uXG42LiBSZWxvYWQgVmlzdWFsIFN0dWRpbyBDb2RlXG5cbiFbSW5zdGFsbCBFeHRlbnNpb25dKGltYWdlcy9pbnN0YWxsLWV4dGVuc2lvbi5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJiNTM0YWZiNy02Y2M1LTRmNmMtYjBkMi0yMzI2ZDliM2E1MmEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5UazFOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3RhcndhcnMtaW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI3ZWJjZjEwMDdmZTZjOTJmNzRmNGI3N2VmYmZmMjhkMGJiMGQzMzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHN0YXJ3YXJzLWlvc1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjhlMWM0MGMtMzJhYy00Zjg3LTg0ZjktNjJhZmI2OTE1OWQ0Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qY3lNall6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhcldvcmtzaG9wTGFicyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0M2ZlYTVjMDM4NWU4NjQwZjliMWE1ZTE0ZjU1NGQzOTNmY2NhZjgxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIGFuZCBUeXBlU2NyaXB0IFdvcmtzaG9wIExhYnNcblxuVGhlc2UgbGFicyBhcmUgdXNlZCBpbiB3b3Jrc2hvcHMgSSBjb25kdWN0IGF0IHZhcmlvdXMgY29uZmVyZW5jZXMuXG5cbkNvcHlyaWdodCAyMDE4IFdhaGxpbiBDb25zdWx0aW5nIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMDA3YzZkYmMtYWI3My00YTY3LWJjN2ItYmI4MGFjMmNjZDEyIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01EWTFOakExTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWhvc3RlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1Yzc5MzZhY2MzOWI1MGFiMTFjNGY2YmE5ZjcyYjQ1ZDIwOWE2NTE0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyRmlyc3RMb29rSG9zdGVkXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiA2LjAuNy5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC0tcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjNjMjhhZTAzLTEyMzgtNGVjMi1iYjU5LTZhNjQzZGY2YWRkMyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBFdmVudFZpZXdDbGlcblxuQW5ndWxhciBEZW1vIHdpdGggYSBMaXR0bGUgYml0IG9mIGEgbG90IG9mIGZlYXR1cmVzXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5wbSBydW4gc3RhcnQtbmdgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQzMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIFJlc291cmNlc1xuXG4tIEdldCBbVlMgQ29kZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vP3d0Lm1jX2lkPWFuZ3VsYXJldmVudHZpZXdjbGktZ2l0aHViLWpvcGFwYSlcbi0gR2V0IHRoZSBWUyBDb2RlIFtBbmd1bGFyIEVzc2VudGlhbHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyLWVzc2VudGlhbHMmd3QubWNfaWQ9YW5ndWxhcmV2ZW50dmlld2NsaS1naXRodWItam9wYXBhKVxuLSBHZXQgdGhlIFZTIENvZGUgW0FuZ3VsYXIgU25pcHBldHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyMiZ3dC5tY19pZD1hbmd1bGFyZXZlbnR2aWV3Y2xpLWdpdGh1Yi1qb3BhcGEpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhMDc3MTgwNS1lMzdlLTQwMTgtODllNC1hMTQ1ZjZhM2IzMmQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvKVxuXG5bVHJ5IEF6dXJlIEZ1bmN0aW9ucyBQbGF5Z3JvdW5kXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vdHJ5L2FwcC1zZXJ2aWNlL2Z1bmN0aW9ucy8pXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NmI1OTJjYy1kOGY3LTQ1Y2UtYmVkNC1jMWU2OTYxM2ZhNDciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWF6dXJlLWZ1bmN0aW9ucy10b29scyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgaW5zdGVhZC5cblxuIyMgRmVhdHVyZXNcblRoaXMgZXh0ZW5zaW9uIGZvciBWaXN1YWwgU3R1ZGlvIENvZGUgaW5jbHVkZXM6XG5cbi0gSlNPTiBJbnRlbGxpc2Vuc2UgZm9yIGBob3N0Lmpzb25gLCBgZnVuY3Rpb24uanNvbmAgYW5kIGBwcm94aWVzLmpzb25gXG4tIFNuaXBwZXRzIGZvciBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0IGZ1bmN0aW9uc1xuXG4+IFdlJ2xsIGFkZCBvdGhlciBmZWF0dXJlcyBpbiBmdXR1cmUgdmVyc2lvbnNcblxuYGBgamF2YXNjcmlwdFxuLy8gSmF2YVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgSmF2YVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuYGBgamF2YXNjcmlwdFxuLy8gVHlwZVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgVHlwZVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuIyMjIEpTT04gU2NoZW1hIEludGVsbGlzZW5zZVxuIVtKU09OIFNjaGVtYV0oaW1hZ2VzL2pzb24tc2NoZW1hLWZ1bmN0aW9uLmdpZilcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChtYWNPUykgdG8gYWN0aXZhdGUgaW50ZWxsaXNlbnNlIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjExLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChtYWNPUylcbjQuIFNlbGVjdCBgSW5zdGFsbCBFeHRlbnNpb25gXG41LiBDaG9vc2UgdGhlIGV4dGVuc2lvblxuNi4gUmVsb2FkIFZpc3VhbCBTdHVkaW8gQ29kZVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjcyYmE3ODEtZWY2Yi00NWFjLWIxYTgtYWI2NjA4MzJkMmJiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56QXdORE00TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NmJmOWE1OTkwYTI4NGYzOWZhOTI3NTA4YjZjYWZhMzQ3MGY3YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBPbmUgV2l0aCBBbmd1bGFyXG5cbkZpbmQgdGhlIFtBenVyZSBGdW5jdGlvbnMgU2VydmVybGVzcyBBUEkgZm9yIHRoaXMgYXBwIGxvY2F0ZWQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXItYXBpKS5cblxuYGBgYmFzaFxuZ2l0IGNsb25lIGdpdEBnaXRodWIuY29tOmpvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXIuZ2l0IG9uZVxuY2Qgb25lXG5ucG0gaW5zdGFsbFxuYGBgXG5cbkRpc2NhcmQgdGhlIGAuZ2l0YCBmb2xkZXJcblxuYGBgYmFzaFxucm0gLXJmIC5naXQgICMgT1MvWCAoYmFzaClcbnJkIC5naXQgL1MvUSAjIHdpbmRvd3NcbmBgYFxuXG4jIyBEb2NrZXJcblxuLSBJbnN0YWxsIGFuZCBydW4gW0RvY2tlcl0oaHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9jb21tdW5pdHktZWRpdGlvbilcblxuIyMjIERvY2tlciBDb21wb3NlXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIHVwIC1kIC0tYnVpbGRcbm9wZW4gaHR0cDovL2xvY2FsaG9zdDo0MjAwXG5gYGBcblxuIyMjIERvY2tlciBDb21wb3NlIHdpdGggRGVidWdnaW5nXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIC1mIGRvY2tlci1jb21wb3NlLmRlYnVnLnltbCB1cCAtZCAtLWJ1aWxkXG5vcGVuIGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMFxuYGBgXG5cbk9wZW4gVlMgQ29kZSwgbGF1bmNoIHRoZSBgRG9ja2VyOiBBdHRhY2ggdG8gTm9kZWAgZGVidWdnaW5nIHByb2ZpbGVcblxuIyMjIERvY2tlciBSdW5cblxuYGBgYmFzaFxuZG9ja2VySW1hZ2U9b25lLXdpdGgtYW5ndWxhclxucG9ydD00MjAwXG5cbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAkcG9ydDozMDAwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3MWM1M2ZlMS0wNmY1LTQyMDgtODA3NS1jMTU4NWMyZWJiNGEiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJvbmUtd2l0aC1hbmd1bGFyLWFwaSIsCiAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvP1dULm1jX2lkPW9uZXdpdGhhbmd1bGFyYXBpLWdpdGh1Yi1qb3BhcGEpXG5cbltUcnkgQXp1cmUgRnVuY3Rpb25zIFBsYXlncm91bmRdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS90cnkvYXBwLXNlcnZpY2UvZnVuY3Rpb25zLz9XVC5tY19pZD1vbmV3aXRoYW5ndWxhcmFwaS1naXRodWItam9wYXBhKVxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImNjZjBmZDAzLTU3MDYtNDk5ZS04Y2VkLWM0NDk3MzMxZWRjNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3Rhci13YXJzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaSlcblxuTG9naW5cblxuYGBgYmFzaFxuYXogbG9naW5cbmBgYFxuXG5DcmVhdGUgYSBwbGFjZSB0byBsb2dpY2FsbHV5IHN0b3JlIGV2ZXJ5dGhpbmcgKHJlc291cmNlIGdyb3VwKVxuXG5gYGBiYXNoXG5heiBncm91cCBjcmVhdGUgLW4gUGFwYVN0YXJXYXJzQXBpR3JvdXAgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBzdG9yYWdlIHJlc291cmNlIGZvciB0aGUgRnVuY3Rpb24gQXBwXG5cbmBgYGJhc2hcbmF6IHN0b3JhZ2UgYWNjb3VudCBjcmVhdGUgLW4gcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtZyBQYXBhU3RhcldhcnNBcGlHcm91cCAtLXNrdSBTdGFuZGFyZF9MUlMgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogZnVuY3Rpb25hcHAgY3JlYXRlIC1uIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC1zIHBhcGFzdGFyd2Fyc2FwaXN0b3JhZ2UgLWMgZWFzdHVzXG5gYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImE1Y2M5NTU4LTgyZWQtNDM0OS04ZTU3LTk1ZjIzNTg0MzdkZiIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJ2c2NvZGUtYXp1cmUtZnVuY3Rpb25zLXRvb2xzIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucyZXVC5tY19pZD12c2NvZGVhenVyZWZ1bmN0aW9uc3Rvb2xzLWdpdGh1Yi1qb3BhcGEpIGluc3RlYWQuXG5cbiMjIEZlYXR1cmVzXG5UaGlzIGV4dGVuc2lvbiBmb3IgVmlzdWFsIFN0dWRpbyBDb2RlIGluY2x1ZGVzOlxuXG4tIEpTT04gSW50ZWxsaXNlbnNlIGZvciBgaG9zdC5qc29uYCwgYGZ1bmN0aW9uLmpzb25gIGFuZCBgcHJveGllcy5qc29uYFxuLSBTbmlwcGV0cyBmb3IgSmF2YVNjcmlwdCBhbmQgVHlwZVNjcmlwdCBmdW5jdGlvbnNcblxuPiBXZSdsbCBhZGQgb3RoZXIgZmVhdHVyZXMgaW4gZnV0dXJlIHZlcnNpb25zXG5cbmBgYGphdmFzY3JpcHRcbi8vIEphdmFTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIEphdmFTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbmBgYGphdmFzY3JpcHRcbi8vIFR5cGVTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIFR5cGVTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbiMjIyBKU09OIFNjaGVtYSBJbnRlbGxpc2Vuc2VcbiFbSlNPTiBTY2hlbWFdKGltYWdlcy9qc29uLXNjaGVtYS1mdW5jdGlvbi5naWYpXG5cbkFsdGVybmF0aXZlbHksIHByZXNzIGBDdHJsYCtgU3BhY2VgIChXaW5kb3dzLCBMaW51eCkgb3IgYENtZGArYFNwYWNlYCAobWFjT1MpIHRvIGFjdGl2YXRlIGludGVsbGlzZW5zZSBmcm9tIHdpdGhpbiB0aGUgZWRpdG9yLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuMS4gSW5zdGFsbCBWaXN1YWwgU3R1ZGlvIENvZGUgMS4xMS4wIG9yIGhpZ2hlclxuMi4gTGF1bmNoIENvZGVcbjMuIEZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBgQ3RybGAtYFNoaWZ0YC1gUGAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYC1gU2hpZnRgLWBQYCAobWFjT1MpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb25cbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhYmQ1YzczMi05ODUzLTQwM2YtYWQyZi1jODMwNjdmZGM3MWIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBQUk9KRUNUIE5BTUVcblxuLi4uXG5cbiMjIFRhYmxlIE9mIENvbnRlbnRzXG5cbi0gW0ZlYXR1cmVzXSgjZmVhdHVyZXMpXG4tIFtRdWlja1N0YXJ0XSgjcXVpY2tzdGFydClcbi0gW1JlcXVpcmVtZW50c10oI3JlcXVpcmVtZW50cylcbi0gW0luc3RhbGxhdGlvbl0oI2luc3RhbGxhdGlvbilcbi0gW0RlbW9dKCNkZW1vKVxuXG4jIyBGZWF0dXJlc1xuXG5UaGlzIHByb2plY3QgZnJhbWV3b3JrIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXM6XG5cbiMjIFF1aWNrU3RhcnRcblxuMS5cbjIuXG4zLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuKGlkZWFsbHkgdmVyeSBzaG9ydCwgaWYgYW55KVxuXG4tXG5cbiMjIEluc3RhbGxhdGlvblxuXG4oaWRlYWxseSB2ZXJ5IHNob3J0KVxuXG4tXG5cbiMjIERlbW9cblxuQSBkZW1vIGFwcCBpcyBpbmNsdWRlZCB0byBzaG93IGhvdyB0byB1c2UgdGhlIHByb2plY3QuXG5cblRvIHJ1biB0aGUgZGVtbywgZm9sbG93IHRoZXNlIHN0ZXBzOlxuXG4jIyBSZXNvdXJjZXNcblxuLVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMTliZWJmMTctMmYwMC00NDAwLWE2N2MtMTU5NDVkNGZjZjU2Igp9ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJzdGFyLXdhcnMtYXBpIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaT9XVC5tY19pZD1zdGFyd2Fyc2FwaS1naXRodWItam9wYXBhKVxuXG5Mb2dpblxuXG5gYGBiYXNoXG5heiBsb2dpblxuYGBgXG5cbkNyZWF0ZSBhIHBsYWNlIHRvIGxvZ2ljYWxsdXkgc3RvcmUgZXZlcnl0aGluZyAocmVzb3VyY2UgZ3JvdXApXG5cbmBgYGJhc2hcbmF6IGdyb3VwIGNyZWF0ZSAtbiBQYXBhU3RhcldhcnNBcGlHcm91cCAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogc3RvcmFnZSBhY2NvdW50IGNyZWF0ZSAtbiBwYXBhc3RhcndhcnNhcGlzdG9yYWdlIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC0tc2t1IFN0YW5kYXJkX0xSUyAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIEZ1bmN0aW9uIEFwcFxuXG5gYGBiYXNoXG5heiBmdW5jdGlvbmFwcCBjcmVhdGUgLW4gLWcgUGFwYVN0YXJXYXJzQXBpR3JvdXAgLXMgcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtYyBlYXN0dXNcbmBgYFxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRhNDQ0OTVkLTFhYmEtNDIwMS1iOTA1LTYyNDBjMDIyYTdjZiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEV4cGlyZVxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS4wLjEuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5CZWZvcmUgcnVubmluZyB0aGUgdGVzdHMgbWFrZSBzdXJlIHlvdSBhcmUgc2VydmluZyB0aGUgYXBwIHZpYSBgbmcgc2VydmVgLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxODhiZjA4Ny1mOTdhLTRjYjMtYmEyZS0zNjdiYWEzZmZmMmYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5ieSBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vam9obl9wYXBhKVxuXG5Zb3UgY2FuIFt3YXRjaCBtZSBidWlsZCB0aGUgYXBwIGFzIHBhcnQgb2YgbXkgc2VyaWVzIGhlcmVdKGh0dHBzOi8vam9obnBhcGEubmV0L2FuZ3VsYXItY29zbW9zZGItMS8pXG5cbllvdSBjYW4gW3ZpZXcgYWxsIHZpZGVvcyB0b2dldGhlciBoZXJlXSgvVklERU9TLm1kKVxuXG5bTGVhcm4gbW9yZSBhYm91dCBkZXZlbG9waW5nIE5vZGUuanMgYXBwcyB3aXRoIEF6dXJlJ3MgY2xvdWQgc2VydmljZXMgaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbm9kZWpzL2F6dXJlKVxuXG4jIyBEb2NrZXJcblxuQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlckltYWdlPWFuZ3VsYXItY29zbW9zZGJcbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAzMDAwOjgwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIFJlcXVpcmVtZW50c1xuXG4xLiBJbnN0YWxsIHRoZSBBbmd1bGFyIENMSVxuXG4gICAgYGBgYmFzaFxuICAgIG5wbSBpbnN0YWxsIC1nIEBhbmd1bGFyL2NsaVxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBbQXp1cmUgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9jbGkvYXp1cmUvaW5zdGFsbC1henVyZS1jbGkpXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnlcblxuICAgIGBgYGJhc2hcbiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIuZ2l0XG4gICAgY2QgYW5ndWxhci1jb3Ntb3NkYlxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBucG0gcGFja2FnZXNcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaVxuICAgIGBgYFxuXG4xLiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgZXhhbXBsZS1lbnZpcm9ubWVudC5qc2AgZmlsZSB0byBgZW52aXJvbm1lbnQuanNgIGluIHRoZSBgc2VydmVyL2Vudi9gIGZvbGRlciBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUga2V5LCBhbmQgcG9ydCB3aXRoIHlvdXIgc3BlY2lmaWMgY29uZmlndXJhdGlvbi5cblxuICAgIGBgYGphdmFzY3JpcHRcbiAgICAvLyBzZXJ2ZXIvZW52L2Vudmlyb25tZW50LmpzXG4gICAgY29uc3QgY29zbW9zUG9ydCA9IDEyMzQ7IC8vIHJlcGxhY2Ugd2l0aCB5b3VyIHBvcnRcbiAgICBjb25zdCBkYk5hbWUgPSAneW91ci1jb3Ntb3MtZGItbmFtZS1nb2VzLWhlcmUnO1xuICAgIGNvbnN0IGtleSA9ICd5b3VyLWtleS1nb2VzLWhlcmUnO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBjb3Ntb3NQb3J0LFxuICAgICAgZGJOYW1lLFxuICAgICAga2V5XG4gICAgfTtcbiAgICBgYGBcblxuIyMgUnVubmluZyB0aGUgYXBwXG5cbjEuIEJ1aWxkIHRoZSBBbmd1bGFyIGFwcFxuXG4gICAgYGBgYmFzaFxuICAgIG5nIGJ1aWxkXG4gICAgYGBgXG5cbjEuIExhdW5jaCB0aGUgc2VydmVyXG5cbiAgICBgYGBiYXNoXG4gICAgbm9kZSBzcmMvc2VydmVyL2luZGV4LmpzXG4gICAgYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gaHR0cDovL2xvY2FsaG9zdDozMDAwXG5cbiMjIFByb2JsZW1zIG9yIFN1Z2dlc3Rpb25zXG5cbltPcGVuIGFuIGlzc3VlIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyLWNvc21vcy9pc3N1ZXMpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1MmM4YTVkOC00MWU3LTRmOTgtODhmMC0zZWQ2NGYxNTY3Y2UiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBWUyBDb2RlIEV4dGVuc2lvbiBmb3IgUFdBIFRvb2xpbmdcblZTIENvZGUgRXh0ZW5zaW9uIGZvciBQV0EgVG9vbHNcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHNuaXBwZXRzIGFuZCBKU09OIHNjaGVtYSBmb3IgYSBgbWFuaWZlc3QuanNvbmAgZm9yIGNyZWF0aW5nIFByb2dyZXNzaXZlIFdlYiBBcHBzIChQV0EpLlxuXG4qKlRISVMgSVMgQU4gQUxQSEEgVkVSU0lPTioqXG5cbiFbVXNlIEV4dGVuc2lvbl0oaW1hZ2VzL2luamVjdC1wcmVjYWNoZS5naWYpXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzXG5cbiMjIFVzYWdlXG5UeXBlIHBhcnQgb2YgYSBzbmlwcGV0LCBwcmVzcyBgZW50ZXJgLCBhbmQgdGhlIHNuaXBwZXQgdW5mb2xkcy5cblxuIyMjIEphdmFTY3JpcHQgLyBUeXBlU2NyaXB0IFNuaXBwZXRzXG5gYGBqYXZhc2NyaXB0XG5wd2EtY3VzdG9tLXNlcnZpY2Utd29ya2VyICAgICAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB3b3JrZXIgZmlsZSB3aGljaCBjYW4gYmUgZXh0ZW5kZWRcbnB3YS1yZWdpc3RlciAgICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiB0aGF0IHJlZ2lzdGVycyB0aGUgc2VydmljZSB3b3JrZXJcbmBgYFxuXG4jIyMgSmF2YVNjcmlwdCBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxuLy8gSGVscGZ1bCBmb3IgYnVpbGQgcHJvY2Vzc2VzIHRoYXQgZ2VuZXJhdGUgc2VydmljZSB3b3JrZXIgY29kZVxucHdhLWluamVjdC1wcmVjYWNoZSAgICAgICAgICAgICAgIC8vIGluamVjdCBwcmVjYWNoZSBsaXN0IGludG8gc2VydmljZSB3b3JrZXJcbnB3YS1nZW5lcmF0ZS1zZXJ2aWNlLXdvcmtlciAgICAgICAvLyBnZW5lcmF0ZSBhIHNlcnZpY2Ugd29ya2VyIHdpdGggYSBwcmVjYWNoZSBtYW5pZmVzdFxuXG4vLyBFdmVudCBsaXN0ZW5lcnNcbnB3YS1ldmVudC1wdXNoICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgcHVzaFxucHdhLWV2ZW50LXN5bmMgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBzeW5jXG5wd2EtZXZlbnQtbm90aWZpY2F0aW9uY2xpY2sgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIG5vdGlmaWNhdGlvbmNsaWNrXG5wd2EtZXZlbnQtcHVzaHN1YnNjcmlwdGlvbmNoYW5nZSAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIHB1c2hzdWJzY3JpcHRpb25jaGFuZ2VcbnB3YS1ldmVudC1sb2FkICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgbG9hZFxucHdhLWV2ZW50LWFjdGl2YXRlICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBhY3RpdmF0ZVxucHdhLWV2ZW50LWluc3RhbGwgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBpbnN0YWxsXG5wd2EtZXZlbnQtZmV0Y2ggICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIGZldGNoXG5gYGBcblxuIyMjIEhUTUwgU25pcHBldHNcbmBgYGphdmFzY3JpcHRcbnB3YS1tYW5pZmVzdC1saW5rICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGhlIGxpbmsgdG8gdGhlIG1hbmlmZXN0Lmpzb25cbnB3YS1hcHBsZS1tb2JpbGUtd2ViLWNhcGFibGUgICAgICAvLyBhZGQgdGhlIG1ldGEgdGFnIGZvciBhcHBsZSBtb2JpbGUgd2ViIGNhcGFibGVcbmBgYFxuXG4jIyMgSlNPTiBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxucHdhLW1hbmlmZXN0ICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgY29udGVudHMgb2YgYG1hbmlmZXN0Lmpzb25gXG5gYGBcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChPU1gpIHRvIGFjdGl2YXRlIHNuaXBwZXRzIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjEwLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChPU1gpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb24gYFBXQS1Ub29sc2BcbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcblxuIyMgVHJ5IGl0IE91dFxuXG5MZXQncyB0YWtlIGEgUFdBIGZvciBhIHNwaW4uIFVzaW5nIHRoZSBBbmd1bGFyIENMSSwgbGV0J3MgZ2VuZXJhdGUgYSBuZXcgYXBwIGFuZCBhZGQgUFdBIGZlYXR1cmVzLlxuXG5CZWZvcmUgd2UgYmVnaW4sIGluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJIGFuZCBsaXRlLXNlcnZlciwgaWYgeW91IGhhdmVuJ3QgYWxyZWFkeSBkb25lIHNvLCBieSBydW5uaW5nIGBucG0gaSBAYW5ndWxhci9jbGkgbGl0ZS1zZXJ2ZXIgLWdgXG5cbjEuIENyZWF0ZSBhbiBBbmd1bGFyIGFwcCB3aXRoIGBuZyBuZXcgbXktYXBwIC0tcm91dGluZ2AgYW5kIG9wZW4gdGhlIGFwcCBpbiBWUyBDb2RlXG4xLiBDcmVhdGUgYHNyYy9tYW5pZmVzdC5qc29uYFxuMS4gVXNlIHRoZSBgcHdhLW1hbmlmZXN0YCBzbmlwcGV0XG4xLiBPcGVuIGBzcmMvaW5kZXguaHRtbGAgYW5kIHVzZSB0aGUgYHB3YS1tYW5pZmVzdC1saW5rYCBzbmlwcGV0IChpbiB0aGUgPGhlYWQ+PC9oZWFkPiBlbGVtZW50KVxuMS4gVXNlIHRoZSBwd2EtYXBwbGUtbW9iaWxlLXdlYi1jYXBhYmxlIHNuaXBwZXQgKGluIHRoZSA8aGVhZD48L2hlYWQ+IGVsZW1lbnQpXG4xLiBDcmVhdGUgYGdlbmVyYXRlLXN3LmpzYFxuMS4gUnVuIGBjZCBteS1hcHBgIGFuZCB0aGVuIGBucG0gaSB3b3JrYm94LWJ1aWxkYCAoYWRkIC0tc2F2ZSBpZiB5b3UncmUgdXNpbmcgbnBtIDwgNS54KVxuMS4gVXNlIHRoZSBwd2EtZ2VuZXJhdGUtc2VydmljZS13b3JrZXIgaW4gYGdlbmVyYXRlLXN3LmpzYFxuMS4gQWRkIFwibWFuaWZlc3QuanNvblwiIHRvIHRoZSBgYXBwc1swXS5hc3NldHNgIGFycmF5IGluIGAuYW5ndWxhci1jbGkuanNvbmBcbjEuIE9wZW4gYHNyYy9hcHAvbWFpbi50c2AgYW5kIHJ1biBgcHdhLXJlZ2lzdGVyYCBhdCB0aGUgYm90dG9tXG4xLiBDYWxsIGAudGhlbigoKSA9PiByZWdpc3RlclNlcnZpY2VXb3JrZXIoKSk7YCBhZnRlciBib290c3RyYXBwaW5nXG4xLiBSdW4gYG5nIGJ1aWxkIC0tcHJvZCAmJiBub2RlIGdlbmVyYXRlLXN3LmpzICYmIGNkIGRpc3QgJiYgbGl0ZS1zZXJ2ZXJgXG5cbioqTm93IHRlc3QgaXQhKipcblxuWW91ciBhcHAgc2hvdWxkIGJlIHJ1bm5pbmcgaW4gdGhlIGJyb3dzZXIuIE9wZW4gdGhlIGRldmVsb3BlciB0b29scywgZ28gdG8gdGhlIGBBcHBsaWNhdGlvbmAgdGFiLCBhbmQgc2VsZWN0IGBTZXJ2aWNlIFdvcmtlcnNgLiBJbnNwZWN0IHRoZSBzZXJ2aWNlIHdvcmtlciwgYW5kIHRyeSB0byBnbyBvZmZsaW5lIGFuZCByZWZyZXNoLlxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwNjVhZjk5Mi1jOTYyLTQ4ZTYtOWY2Mi05MGIzNmI4MDg2NDIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTFNelEyTURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG91c2UtYm90IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA4NTk1MzQ3YmVjZjJkYWYxNzU4NjBjY2I3NjFkOTFmMjNlOTNlMGYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGhvdXNlLWJvdFxuXG4hW0F1dG9tYXRpb24gRGlhZ3JhbV0oLi9sdWlzLmdpZilcblxuKiBUd2l0Y2ggaHR0cHM6Ly93d3cudHdpdGNoLnR2L2pvaG5fcGFwYVxuKiBBenVyZSBGdW5jdGlvbnMgaHR0cHM6Ly9ha2EubXMvanAtbG9jYWxmdW5jXG4qICBMb2dpYyBBcHBzIC8gQm90cyBodHRwczovL2FrYS5tcy9qcC1sb2dpY2FwcFxuKiBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIGh0dHBzOi8vYWthLm1zL2pwLWx1aXNcbiogQ29kZSBodHRwczovL2dpdGh1Yi5jb20vam9obnBhcGEvaG91c2UtYm90XG5cbiMjIENyZWRpdHNcblxuQ3JlZGl0IHRvIEJyaWFuIENsYXJrIGZvciBoZWxwaW5nIGNyYWZ0IHRoaXMsIGFuZCBCdXJrZSBIb2xsYW5kIGZvciBpbnNwaXJhdGlvblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDU3ZmQxYmEtZmI1My00MWFhLThhOTgtYjM2MWY4MzFiODFjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWhlcm9lc1xuXG5BIENvc21vcyBEQiwgRXhwcmVzcy5qcywgVnVlLCBhbmQgTm9kZS5qcyBhcHBcblxuIyMgRmVhdHVyZXNcblxuVGhpcyBwcm9qZWN0IGZyYW1ld29yayBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGZlYXR1cmVzOlxuXG4qIFZ1ZS5qc1xuKiBOb2RlLmpzXG4qIEV4cHJlc3NcbiogTW9uZ29vc2UgQVBJXG4qIENvbm5lY3RpbmcgdG8gTW9uZ29EQiBvciBDb3Ntb3NEQlxuKiBCdWlsZGluZywgRGVidWdnaW5nLCBEZXBsb3lpbmcgd2l0aCBEb2NrZXJcblxuIyMgR2V0dGluZyBTdGFydGVkXG5cbiMjIyBQcmVyZXF1aXNpdGVzXG5cbk5vZGUuanMgd2l0aCBucG1cblxuIyMjIEluc3RhbGxhdGlvblxuXG5gYGAgYmFzaFxuZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92dWUtaGVyb2VzLmdpdFxuY2QgdnVlLWhlcm9lc1xubnBtIGluc3RhbGxcbmBgYFxuXG4jIyMgRGF0YWJhc2Ugc2V0dGluZ3NcblxuKiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgLmVudi5leGFtcGxlLmpzYCBmaWxlIHRvIGAuZW52YCBpbiB0aGUgcm9vdCBmb2xkZXIgYW5kIHVwZGF0ZSBpdCB3aXRoIHlvdXIgQ29zbW9zIERCIHNldHRpbmdzLiBSZXBsYWNlIHRoZSBhY2NvdW50TmFtZSwgZGF0YWJhc2VOYW1lLCBrZXksIGFuZCBwb3J0IHdpdGggeW91ciBzcGVjaWZpYyBjb25maWd1cmF0aW9uLlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIFNFUlZFUl9QT1JUPTMwMDFcbiAgICBQVUJMSUNXRUI9Li9zZXJ2ZXIvd3d3XG4gICAgQ09TTU9TREJfQUNDT1VOVD15b3VyX2Nvc21vc19hY2NvdW50XG4gICAgQ09TTU9TREJfREI9eW91cl9jb3Ntb3NfZGJcbiAgICBDT1NNT1NEQl9LRVk9eW91cl9jb3Ntb3Nfa2V5XG4gICAgQ09TTU9TREJfUE9SVD0xMDI1NVxuICAgIGBgYFxuXG4jIyMgUXVpY2tzdGFydFxuXG5UaGlzIHdpbGwgYnVpbGQgdGhlIGFwcCBhbmQgcnVuIHRoZSBkZXYgc2VydmVyIGZvciBWdWUgYW5kIFdlYlBhY2suIFRoZSBOb2RlIGV4cHJlc3Mgc2VydmVyIHdpbGwgbGF1bmNoIGFuZCBXZWJQYWNrIHdpbGwgcHJveHkgdGhlIGNhbGxzIGZyb20gdGhlIGJyb3dzZXIgdG8gdGhlIEFQSSBpbiBleHByZXNzLiBJdCB3aWxsIGFsc28gYW5kIHByZXBhcmUgaXQgZm9yIGxvY2FsIGRlYnVnZ2luZy5cblxuYGBgIGJhc2hcbiMgYnVpbGQgZm9yIHByb2R1Y3Rpb24gd2l0aCBtaW5pZmljYXRpb25cbm5wbSBydW4gYnVpbGRcblxuIyBzZXJ2ZSBvbiBodHRwOi8vbG9jYWxob3N0OjgwODBcbiMgYW5kIHJ1biB0aGUgYXBpIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMVxubnBtIHJ1biBkZWJ1Z1xuYGBgXG5cbiMjIyBMb2NhbCBQcm9kIEJ1aWxkXG5cblRoaXMgd2lsbCBidWlsZCB0aGUgYXBwIGFuZCBsYXVuY2ggdmlhIHRoZSBOb2RlLmpzIGV4cHJlc3Mgc2VydmVyLlxuXG5gYGBiYXNoXG4jIGJ1aWxkIGZvciBwcm9kdWN0aW9uIHdpdGggbWluaWZpY2F0aW9uXG5ucG0gcnVuIGJ1aWxkXG5cbiMgcnVuIHRoZSBub2RlIHNlcnZlclxubnBtIHN0YXJ0XG5gYGBcblxuIyMjIERvY2tlclxuXG5CdWlsZCB0aGUgaW1hZ2UgYW5kIHJ1biBjb250YWluZXIuXG5cbmBgYCBiYXNoXG5ucG0gcnVuIGRvY2tlci11cFxuYGBgXG5cbkJ1aWxkIHRoZSBpbWFnZSBhbmQgcnVuIGNvbnRhaW5lciBmb3IgbG9jYWwgZGVidWdnaW5nLlxuXG5gYGAgYmFzaFxubnBtIHJ1biBkb2NrZXItdXAtZGVidWdcbmBgYCIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjE1ZjU0MTIzLWVmOGMtNGVmZC05NjZiLWMzZTgzNDI0NjNhNyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFdpbnRlciBpcyBDb21pbmdcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHRoZW1lcyB0aXRsZWQgXCJXaW50ZXIgaXMgQ29taW5nXCIuIFRoZXJlIGFyZSBkYXJrLCBkYXJrIHdpdGggbm8gaXRhbGljcywgYW5kIGxpZ2h0IHRoZW1lcy5cblxuPiBJIHBlcnNvbmFsbHkgdXNlIHRoZSBkYXJrIHRoZW1lcyBmb3IgbW9zdCBvY2Nhc2lvbnMsIGJ1dCBmaW5kIHRoZSBsaWdodCB0aGVtZSBnb29kIG9uIHNvbWUgZGltbWVyIHByb2plY3RvcnMgd2hlbiBJIHByZXNlbnQuXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzLlxuXG5UaGUgdGhlbWVzIGFsc28gc3VwcG9ydCBhbiBpdGFsaWNpemVkIHZlcnNpb24sIHdpdGggZm9udHMgdGhhdCBzdXBwb3J0cyBjdXJzaXZlIGl0YWxpY2l6ZWQgZm9udHMuXG5cbiMjIERhcmsgQmx1ZSBUaGVtZVxuXG4qKkRhcmsgQmx1ZSBIVE1MKipcbiFbSFRNTF0oaW1hZ2VzL2RhcmstYmx1ZS1odG1sLnBuZylcblxuKipEYXJrIEJsdWUgSmF2YVNjcmlwdCoqXG4hW0phdmFTY3JpcHRdKGltYWdlcy9kYXJrLWJsdWUtanMucG5nKVxuXG4qKkRhcmsgQmx1ZSBUeXBlU2NyaXB0KipcbiFbVHlwZVNjcmlwdF0oaW1hZ2VzL2RhcmstYmx1ZS10cy5wbmcpXG5cbioqRGFyayBCbHVlIFNDU1MqKlxuIVtTQ1NTXShpbWFnZXMvZGFyay1ibHVlLXNjc3MucG5nKVxuXG4jIyBEYXJrIEJsYWNrIFRoZW1lXG5cbioqRGFyayBCbGFjayBKYXZhU2NyaXB0KipcbiFbRGFyayBCbGFjayBUaGVtZV0oaW1hZ2VzL2RhcmstanMucG5nKVxuXG4jIyBMaWdodCBUaGVtZVxuXG4qKkxpZ2h0IEphdmFTY3JpcHQqKlxuIVtMaWdodCBUaGVtZV0oaW1hZ2VzL2xpZ2h0LWpzLnBuZylcblxuIyMgVXNhZ2VcblxuU2VsZWN0IHRoZSB0aGVtZSBhbmQgZ28hXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBPcGVuICoqRXh0ZW5zaW9ucyoqIHNpZGViYXIgcGFuZWwgaW4gVmlzdWFsIFN0dWRpbyBDb2RlLiBgVmlldyDihpIgRXh0ZW5zaW9uc2BcbjEuIFNlYXJjaCBmb3IgYFdpbnRlciBpcyBDb21pbmdgXG4xLiBDbGljayAqKkluc3RhbGwqKlxuMS4gQ2xpY2sgKipSZWxvYWQqKlxuMS4gRmlsZSA+IFByZWZlcmVuY2VzID4gQ29sb3IgVGhlbWUgPiAqKldpbnRlciBpcyBDb21pbmcgKERhcmsgQmx1ZSkqKlxuMS4gT3B0aW9uYWw6IFVzZSB0aGUgcmVjb21tZW5kZWQgc2V0dGluZ3MgYmVsb3cgZm9yIGJlc3QgZXhwZXJpZW5jZVxuXG4jIyBSZWNvbW1lbmRlZCBTZXR0aW5nc1xuXG5gYGBqc1xue1xuICBcImVkaXRvci5hdXRvSW5kZW50XCI6IFwiZnVsbFwiLFxuICBcImVkaXRvci5jdXJzb3JCbGlua2luZ1wiOiBcInNvbGlkXCIsXG4gIFwiZWRpdG9yLmN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uXCI6IHRydWUsXG4gIFwiZWRpdG9yLmN1cnNvclN0eWxlXCI6IFwibGluZVwiLFxuICBcImVkaXRvci5mb250U2l6ZVwiOiAxNixcbiAgXCJlZGl0b3IuZm9udEZhbWlseVwiOiBcIkRhbmsgTW9ubywgRmlyYSBDb2RlLCBJbmNvbnNvbGF0YVwiLFxuICBcImVkaXRvci5mb250TGlnYXR1cmVzXCI6IHRydWUsXG4gIFwiZWRpdG9yLmZvcm1hdE9uUGFzdGVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IuZm9ybWF0T25UeXBlXCI6IGZhbHNlLFxuICBcImVkaXRvci5mb3JtYXRPblNhdmVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IubGV0dGVyU3BhY2luZ1wiOiAwLjMsXG4gIFwiZWRpdG9yLmxpbmVIZWlnaHRcIjogMjUsXG4gIFwiZWRpdG9yLm1pbmltYXAuZW5hYmxlZFwiOiBmYWxzZSxcbiAgXCJlZGl0b3IubXVsdGlDdXJzb3JNb2RpZmllclwiOiBcImN0cmxDbWRcIixcbiAgXCJlZGl0b3Iuc3VnZ2VzdFNlbGVjdGlvblwiOiBcImZpcnN0XCIsXG4gIFwiZWRpdG9yLnRhYkNvbXBsZXRpb25cIjogXCJvblwiLFxuICBcImVkaXRvci50YWJTaXplXCI6IDIsXG4gIFwiZWRpdG9yLndvcmRXcmFwXCI6IFwib25cIixcbiAgXCJmaWxlcy5hdXRvU2F2ZVwiOiBcImFmdGVyRGVsYXlcIixcbiAgXCJmaWxlcy5hdXRvU2F2ZURlbGF5XCI6IDEwMDAsXG4gIFwic2VhcmNoLnNob3dMaW5lTnVtYmVyc1wiOiB0cnVlLFxuICBcIndvcmtiZW5jaC5pY29uVGhlbWVcIjogXCJtYXRlcmlhbC1pY29uLXRoZW1lXCIsXG4gIFwid29ya2JlbmNoLmNvbG9yQ3VzdG9taXphdGlvbnNcIjoge30sXG4gIFwid29ya2JlbmNoLmNvbG9yVGhlbWVcIjogXCJXaW50ZXIgaXMgQ29taW5nIChEYXJrIEJsdWUpXCIsXG4gIFwiemVuTW9kZS5jZW50ZXJMYXlvdXRcIjogZmFsc2UsXG59XG5gYGBcblxuIyMgRm9udHNcblxuSSBhbSB1c2luZyBhIHBhaWQgZm9udCB0aXRsZWQgKipEYW5rIE1vbm8qKi4gKipPcGVyYXRvciBNb25vKiogaXMgYWxzbyBhIHBhaWQgZm9udCB0aGF0IGlzIGF3ZXNvbWUuIElmIHlvdSBkbyBub3QgaGF2ZSB0aGVzZSBmb250cywgdXNlIHlvdXIgZmF2b3JpdGUgZm9udC4gKipGaXJhIENvZGUqKiBpcyBhIGZyZWUgb25lIHRoYXQgd29ya3Mgd2VsbCB0b28uXG5cbiMjIEZlZWRiYWNrXG5cbklmIHlvdSBoYXZlIHN1Z2dlc3Rpb25zLCBwbGVhc2UgW29wZW4gYW4gaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvaXNzdWVzKSBvciBiZXR0ZXIgeWV0LCBhIFtwdWxsIHJlcXVlc3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvcHVsbHMpLlxuXG5CZSBuaWNlLlxuXG4jIyBDcmVkaXRzXG5cbkNyZWRpdCB3aGVyZSBjcmVkaXQgaXMgZHVlIC4uLiB0aGlzIHRoZW1lIHdhcyBpbnNwaXJlZCBieSB0aGUgdGhlbWVzIFZpc3VhbCBTdHVkaW8gRGFyayssIE1vbm9rYWkgYW5kIFtEdXN0aW4gU2FuZGVyJ3MgdGhlbWUgZm9yIFwiQW4gT2xkIEhvcGVcIl0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWR1c3RpbnNhbmRlcnMuYW4tb2xkLWhvcGUtdGhlbWUtdnNjb2RlKS4gQ3VzdG9tIENTUyBpbnNwaXJlZCBieSBbV2VzIEJvc10oaHR0cHM6Ly90d2l0dGVyLmNvbS93ZXNib3MpLiBCbHVlIGJhY2tncm91bmQgZm9yIHRoZSBEYXJrIHRoZW0gaW5zcGlyZWQgYnkgW1NhcmFoIERyYXNuZXJdKGh0dHBzOi8vdHdpdHRlci5jb20vc2FyYWhfZWRvKSdzIFtOaWdodCBPd2wgdGhlbWVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1zZHJhcy5uaWdodC1vd2wpXG5cbiMjIEF1dGhvcnNcblxuQXV0aG9yZWQgYnkgW0pvaG4gUGFwYV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9qb2huX3BhcGEpXG5cbkxpZ2h0IHRoZW1lIGNvLWF1dGhvcmVkIGJ5IFtCcmlhbiBDbGFya10oaHR0cHM6Ly90d2l0dGVyLmNvbS9fY2xhcmtpbylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjZkYzgwZmI4LThhZGMtNGY0ZC1hNzNjLTdlMjM5NmJlZDU0NiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qSTNOemMyT0RFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYXdlc29tZS1hbmd1bGFyLXdvcmtzaG9wIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjg1NGExNDZhYzBjODMxMWE3NmNiNGI0ZmQ5ZGJkOGQxN2MzNjYyMzkiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXI6IFRoZSBBd2Vzb21lIFBhcnRzIFdvcmtzaG9wXG5cbmJ5IFtXYXJkIEJlbGxdKGh0dHBzOi8vdHdpdHRlci5jb20vd2FyZGJlbGwpIGFuZCBbSm9obiBQYXBhXShodHRwczovL3R3aXR0ZXIuY29tL2pvaG5fcGFwYSlcblxuIyMgQXBwc1xuXG5BbGwgYXBwcyBhcmUgaW4gdGhlIGBzcmNgIGZvbGRlci4gVGhlcmUgaXMgYSBgc3JjL3NlcnZlcmAgZm9sZGVyIGNvbnRhaW5pbmcgYSBub2RlIHNlcnZlciwgYXMgc29tZSBvdGhlciBhcHBzIG1heSBvciBtYXkgbm90IHVzZSBpdC5cblxuIyMjIDAtYXdlc29tZVxuXG5gMC1hd2Vzb21lYCBpcyBvdXIgYmFzaWMgdGVtcGxhdGUgYXBwLiBBbGwgb3RoZXIgYXBwcyBpbiB0aGUgYHNyY2AgZm9sZGVyIGFyZSBkZXJpdmVkIGZyb20gYDAtYXdlc29tZWAgYW5kIHRoZW4gbW9kaWZpZWQgYXMgbmVlZGVkLlxuXG4jIyMgMS1yb3V0ZXJcblxuYDEtcm91dGluZy1iZWdpbmAgaXMgb3VyIGJlZ2lubmluZyBsYWIgZm9yIHJvdXRpbmcgYW5kIGAxLXJvdXRpbmctYmVnaW4tZW5kYCBpcyB0aGUgZW5kIHN0YXRlLlxuXG5XZSBhbHNvIGhhdmUgYSByb3V0aW5nIGd1YXJkIGxhYi4gYDEtcm91dGluZy1ndWFyZHMtYmVnaW5gIGFuZCBgMS1yb3V0aW5nLWd1YXJkcy1lbmRgLlxuXG4jIyMgMi1Nb2R1bGVzXG5cbmAyLW1vZHVsZXMtYmVnaW5gIGFuZCBgMi1tb2R1bGVzLWVuZGAuXG5cbiMjIyAzLXJ4anNcblxuSG93IHRvIGNvbW11bmljYXRlIGNoYW5nZXMgYWNyb3NzIHRoZSBhcHAgd2l0aCBSeEpTXG5cbiMjIyA0LXJlYWN0aXZlXG5cbmA0LXJlYWN0aXZlYCBkZW1vbnN0cmF0ZXMgYSAoMSkgcmVhY3RpdmUsICgyKSBpbW11dGFibGUsICgzKSBDUVJTIGFwcCBidWlsdCB3aXRoIHBsYWluIHNlcnZpY2VzIHJhdGhlciB0aGFuIF9uZ3J4Xy5cblNlZSBob3cgdGhlIGJhc2ljIGFwcCBjaGFuZ2VzIHRvIGNvbmZvcm0gdG8gdGhlc2UgdGhyZWUgcHJpbmNpcGxlcy5cblxuIyMjIDUtbmdyeFxuXG5gNS1uZ3J4LWJlZ2luYCByZWZhY3RvcnMgdGhlIGA0LXJlYWN0aXZlYCBfSGVyb2VzXyB0byB1c2UgKipuZ3J4KiouIE9ubHkgcGFydGx5IGRvbmUuXG5gNS1uZ3J4LWVuZGAgaXMgdGhlIHN0YXRlIG9mIHRoZSAqKm5ncngqKiBhcHAgYWZ0ZXIgY29tcGxldGluZyB0aGUgYDUtbmdyeC1iZWdpbmAgbGFiLlxuXG4jIyMgNi1uZ3J4LWRhdGFcblxuYDYtbmdyeC1kYXRhLWJlZ2luYCByZWZhY3RvcnMgYDUtbmdyeC1lbmRgIHRvIHVzZSBfbmdyeC1kYXRhXyBmb3IgSGVyb2VzLlxuYDYtbmdyeC1kYXRhLWVuZGAgZG9lcyB0aGUgc2FtZSB0byBWaWxsYWlucy5cbkl0IGRlbW9uc3RyYXRlcyBhZGRpdGlvbmFsIG1ldGFkYXRhIGZlYXR1cmVzLCBpbmNsdWRpbmcgb3B0aW1pc3RpYyBhZGQgYW5kIHVwZGF0ZSxcbndoaWNoIHJlcXVpcmUgYSBjbGllbnQtc2lkZSBJZCBHZW5lcmF0b3IgZm9yIEFkZHMgKHNlZSBWaWxsYWluU2VydmljZSkuXG5cbiMjIyA3LWRlcGxveVxuXG5Mb2NhbGx5XG5cbjEuIFJ1biBgbnBtIHJ1biA3LWRlcGxveS1idWlsZGAgdG8gYnVpbGQgaXQuXG4yLiBSdW4gYG5wbSBydW4gNy1kZXBsb3ktc2VydmVgIHRvIHNlcnZlIGl0LlxuMy4gS2lsbCB0aGUgcHJvY2Vzc1xuXG5Mb2NhbGx5IHdpdGggRG9ja2VyXG5cbjEuIFJ1biBgZG9ja2VyIGNvbXBvc2UgdXBgIGZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBpbiBWUyBDb2RlLlxuMi4gQ2hvb3NlIHRoZSBkZWJ1ZyBvcHRpb25cblxuIyMgRGVmaW5lIE11bHRpcGxlIEFwcHMgaW4gdGhlIFNhbWUgXFxfc3JjIGZvbGRlclxuXG5FeGFtcGxlOiBtYWtlIGEgbGFiIGNhbGxlZCBgbi1uZXctbGFiLWJlZ2luYCB3aGVyZSBgbmAgaXMgYW4gaW50ZWdlci5cblxuMS4gIENyZWF0ZSB0aGUgYG4tbmV3LWxhYi1iZWdpbmAgX2FwcCBmb2xkZXJfIHVuZGVyIGBzcmNgLlxuXG4yKSAgQWRkIGEgbmV3IGFwcCBvYmplY3QgdG8gdGhlIGBcImFwcHNcImAgYXJyYXkgaW4gW2Bhbmd1bGFyLWNsaS5qc29uYF0oLi8uYW5ndWxhci1jbGkuanNvbik6XG5cbi0gbWFrZSBpdCBhIGNvcHkgb2YgYW4gZXhpc3RpbmcgYXBwIG9iamVjdFxuLSBzZXQgYFwibmFtZVwiYCB0byBgXCJuLW5ldy1sYWItYmVnaW5cImBcbi0gc2V0IGBcImFwcFJvb3RcImAgdG8gYFwibi1uZXctbGFiLWJlZ2luXCJgXG4tIHNldCBgXCJvdXREaXJcImAgdG8gYFwiZGlzdC9uLW5ldy1sYWItYmVnaW5cImBcbi0gc2V0IGBcIm1haW5cImAgdG8gYFwibWFpbi5uLW5ldy1sYWItYmVnaW4udHNcImBcblxuMy4gIFVwZGF0ZSB0aGUgbGF6eSBsb2FkZWQgcm91dGVzIHRoYXQgc3RhcnQgd2l0aCBgMC1hd2Vzb21lL2AgdG8gYG4tbmV3LWxhYi1iZWdpbi9gIGluIGBuLW5ldy1sYWItYmVnaW4vYXBwLXJvdXRpbmcubW9kdWxlLnRzYC5cblxuPiBIaW50OiBlYXN5IHdpdGggc2VhcmNoLWFuZC1yZXBsYWNlIF9BRlRFUl8gbGltaXRpbmcgYGZpbGVzLXRvLWluY2x1ZGVgIHRvIGBcIm4tbmV3LWxhYi1iZWdpblwiYC5cblxuNC4gIENvcHkgW2BtYWluLjAtYXdlc29tZS50c2BdKHNyYy9tYWluLjAtYXdlc29tZS50cykgdG8gYG1haW4ubi1uZXctbGFiLWJlZ2luLnRzYCBhbmQgdXBkYXRlIHRoZSBwYXRocyB0byB0aGUgYXBwIG1vZHVsZXM6XG5cbiAgICBgYGBcbiAgICBpbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL24tbmV3LWxhYi1iZWdpbi9hcHAubW9kdWxlJztcbiAgICBpbXBvcnQgeyBBcHBEZXZNb2R1bGUgfSBmcm9tICcuL24tbmV3LWxhYi1iZWdpbi9hcHAtZGV2Lm1vZHVsZSc7XG4gICAgYGBgXG5cbjUuICBBZGQgYSBub2RlIHNjcmlwdCB0byB0aGUgW2BwYWNrYWdlLmpzb25gXShwYWNrYWdlLmpzb24pLCBzZXR0aW5nIHRoZSBsYXN0XG4gICAgdHdvIHBvcnQgZGlnaXRzIChmaXJzdCBkaWdpdCBpcyBmb3IgYG5gLCBzZWNvbmQgZm9yIHRoZSBgbmV3LWxhYi1iZWdpbmAgdmFyaWF0aW9ucykuXG5cbiAgICBgYGBiYXNoXG4gICAgXCIwLW5ldy1sYWItYmVnaW5cIjogXCJuZyBzZXJ2ZSAtYSBuLW5ldy1sYWItYmVnaW4gLW8gLXAgOTBuMFwiLFxuICAgIGBgYFxuXG4gICAgPiBBbGwgbGFicyBydW4gaW4gdGhlIHBvcnQgOTAwMCBzZXJpZXMuXG5cbjYuICBVcGRhdGUgdGhlIGBsYWJUaXRsZWAgcHJvcGVydHkgb2YgdGhlIGBUb29sYmFyQ29tcG9uZW50YCB0byBgbi1uZXctbGFiLXh4eGAsIHdoZXJlIG4gaXMgdGhlIG51bWJlciBvZiB0aGUgbGFiIGFuZCB4eHggaXMgZWl0aGVyIGBiZWdpbmAgb3IgYGVuZGBcblxuICAgIGBgYHR5cGVzY3JpcHRcbiAgICBleHBvcnQgY2xhc3MgVG9vbGJhckNvbXBvbmVudCB7XG4gICAgICBsYWJUaXRsZSA9ICduLW5ldy1sYWItYmVnaW4nO1xuICAgICAgbGFiU3RhdGUgPSAnYmVnaW4nO1xuICAgIH1cbiAgICBgYGBcblxuNy4gIFVuY29tbWVudCB0aGUgYXBwcm9wcmlhdGUgbGFiIHN0YXRlIChlLmcuIGJlZ2luIG9yIGVuZCkgaW4gYHRvb2xiYXIuY29tcG9uZW50LnNjc3NgXG5cbiAgICBgYGBjc3NcbiAgICAvLyBAaW5jbHVkZSBwcmltYXJ5LWJhY2tncm91bmQtY29udHJhc3QtY29sb3I7IC8vIGVuZFxuICAgIC8vIEBpbmNsdWRlIGFjY2VudC1iYWNrZ3JvdW5kLWNvbG9yOyAvLyBiZWdpblxuICAgIGBgYFxuXG4jIyBCdWlsZCBhbmQgU2VydmVcblxuVG8gc2VlIGEgKipsaXN0IG9mIHRoZSBucG0gbGFiIHNjcmlwdHMqKlxuXG5gYGBiYXNoXG5ucG0gcnVuXG5gYGBcblxuQnVpbGQgYW5kIHNlcnZlIGFuIGFwcCBuYW1lZCBgbi1uZXctbGFiLWJlZ2luYCB3aXRoIG5wbSBvciB5YXJuXG5cbmBgYGJhc2hcbnlhcm4gbi1uZXctbGFiLWJlZ2luXG5ucG0gcnVuIG4tbmV3LWxhYi1iZWdpblxuYGBgXG5cbk9yIGdvIHRvIHRoZSBDTEkgZGlyZWN0bHlcblxuYGBgYmFzaFxubmcgc2VydmUgLWEgbi1uZXctbGFiLWJlZ2luIC1vXG5gYGBcblxuVG8gcnVuIGl0cyBfZW5kLXN0YXRlXyAoYGVgKSBhdCB0aGUgc2FtZSB0aW1lLFxub3BlbiBhbm90aGVyIHRlcm1pbmFsIHdpbmRvdywgdGhlbiBidWlsZCBhbmQgc2VydmUgb24gYSBkaWZmZXJlbnQgcG9ydCAod2hlcmUgdGhlIGxhc3QgZGlnaXRzIG1hdGNoIGBuYCBhbmQgYGVgKS5cblxuYGBgYmFzaFxubmcgc2VydmUgLWEgbi1uZXctbGFiLWVuZCAtbyAtcCA5MHtufXtlfVxuYGBgXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyZDY5YThiMy00OGU4LTQ2ODItOThjYS0yMTM2NGRjMjA2MTUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlPRGMyTnpRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk1Y2Y2NTEwOTYwNDM5MGUzMDg5MzcwZDJhZDgwYzUxOTFmNDU4ZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIE5ncnhEZW1vXG5cbkRlbW8gc2hvd2luZyBOZ1J4IHdpdGggQW5ndWxhclxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYzYxNTk1MmYtNWU4NS00NzI3LTlkODYtY2FlODQzNmY4MWFhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNOall6T1RNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWludHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMyN2UyM2QzN2E2OTliNzM4MmM3NzA5Y2RhNWE4ZGY3NGExNzdjYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHZ1ZS1pbnRyb1xuXG4jIyBQcm9qZWN0IHNldHVwXG5gYGBcbm5wbSBpbnN0YWxsXG5gYGBcblxuIyMjIENvbXBpbGVzIGFuZCBob3QtcmVsb2FkcyBmb3IgZGV2ZWxvcG1lbnRcbmBgYFxubnBtIHJ1biBzZXJ2ZVxuYGBgXG5cbiMjIyBDb21waWxlcyBhbmQgbWluaWZpZXMgZm9yIHByb2R1Y3Rpb25cbmBgYFxubnBtIHJ1biBidWlsZFxuYGBgXG5cbiMjIyBMaW50cyBhbmQgZml4ZXMgZmlsZXNcbmBgYFxubnBtIHJ1biBsaW50XG5gYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjFkZDBlNDdlLTVmODItNGM5Zi04ZWNkLTNlMWUyZTg3YjRiOSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHZ1ZS1ndWlkZVxuXG5BIHNlcmllcyBvZiBpbnRyb2R1Y3Rvcnkgc2FtcGxlcyB1c2luZyBWdWUuanMsIGFzIHNlZW4gaW4gdGhlaXIgZG9jcy4gPGh0dHBzOi8vdnVlanMub3JnLz4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlYmZiY2IwMC01YzlkLTRlOGItOGY1NS0wYWE1YzUxOTk1NWUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBub2RlLXRzXG5cblNpbXBsZSBOb2RlIGFuZCB0eXBlU2NyaXB0IGFwcFxuXG4jIyBRdWljayBTdGFydFxuXG4xLiBgbnBtIGluc3RhbGxgXG4yLiBgbnBtIHJ1biBzZXJ2ZS1kZWJ1Z2BcblxuIyMgSW5jbHVkZWRcblxuLSBiYXNpYyBgdHNjb25maWcuanNvbmBcbi0gbnBtIHNjcmlwdHMgdG8gaGVscCBidWlsZCwgcnVuLCB3YXRjaCwgYW5kIGRlYnVnXG4tIGNvbmN1cnJlbnRseSwgdHMtbm9kZSwgdHMtbGludCwgdHlwZXNjcmlwdCBmb3IgaGVscGluZyB3aXRoIGJ1aWxkc1xuLSB0eXBlcyBmb3Igbm9kZSB3aXRoIEB0eXBlcy9ub2RlXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5MzAyZWUzMy04YzI0LTQzY2YtODRjMy0zY2Q0ZGY4OTk4ZWIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQTVOVFV3TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWY0NjE1ZDNmNTlmNTI0ZjE5ZmY0OTU4ZTcxMjIwZGM2YWFmNGI3YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHRcblxuQSBWdWUgQ0xJIHByZXNldCBjb25maWd1cmF0aW9uLlxuXG4jIyBSdW4gaXRcblxuWW91IHJ1biBpdCBieSBleGVjdXRpbmcgXG5cbmBgYGJhc2hcbnZ1ZSBjcmVhdGUgLS1wcmVzZXQgam9obnBhcGEvdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQgaGVsbG8tdnVlXG5gYGBcblxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxOWFhZmQxNC1mM2U5LTRiNjUtODM1Mi05MzdhOWExMjU4Y2QiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UVTRNRGszIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJ0ZWxla2luZXNpcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4NDc3MDQ5MWM5MGUzN2FkODVjNzE1NzJjM2M5MGFjYmJlZTlmN2I5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyB0ZWxla2luZXNpc1xuKip0ZWxla2luZXNpcy5qcyoqIGlzIGEgSmF2YVNjcmlwdCBsaWJyYXJ5IHRoYXQgaGVscHMgeW91IHdyaXRlIGNvZGUgYnkganVzdCB0aGlua2luZyBpdCEgV29ya3MgZ3JlYXQgd2l0aCB2YW5pbGxhLmpzXG5cbiMjIyBUaGlzIGlzIGFuIEFwcmlsIEZvb2xzIERheSBqb2tlIC4uLiBsZWF2ZSB5b3VyIHNpZ2hzIGF0IHRoZSBkb29yLiBJdCBmdWxseSBlbnRlcnRhaW5lZCBteSBjaGlsZHJlbiA6KVxuXG5cbkZvciBtb3JlIHNlZSAoaHR0cDovL3d3dy5qb2hucGFwYS5uZXQvYmVzdC1qYXZhc2NyaXB0LWxpYnJhcnktZXZlci8pXG5cbj4gXCJUaGlua1wiIGNvZGUgYW5kIGl0IHdyaXRlcyBpdHNlbGYhXG5cbiMjIEN1cnJlbnQgVmVyc2lvblxuMS4wLjAtcHJlXG5cbiMjIFF1aWNrIHN0YXJ0XG5cbiMjIyAzIEVhc3kgU3RlcHNcbjEuIExpbmsgdG8gdGVsZWtpbmVzaXMuanMgYDxzY3JpcHQgc3JjPVwidGVsZWtpbmVzaXMuanNcIj48L3NjcmlwdD5gXG5cbjIuIFRoaW5rIGFib3V0IHlvdXIgY29kZVxuXG4zLiBXYXRjaCBpdCB3cml0ZSBpdHNlbGYhXG5cbiMjIEF1dGhvclxuKipKb2huIFBhcGEqKlxuXG4rIGh0dHA6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGFcblxuIyMgQ29weXJpZ2h0XG5Db3B5cmlnaHQgwqkgMjAxMyBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vSm9obl9QYXBhKS5cblxuIyMgTGljZW5zZSBcbnRvYXN0ciBpcyB1bmRlciBNSVQgbGljZW5zZSAtIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjNkMzQ4NzBkLTY2MjMtNGZlMC05NGQ4LWRkZWNmYjllNzFkYiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTVPVEU1Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2xpbXBzZS50b2FzdHIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjU0NzQ1NGE0NjA1MjE5ODUwMTZmYmRjMjNhMDA0NzcxMWYxZDc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIkdsaW1wc2UuVG9hc3RyIFBsdWdpblxuPT09PT09PT09PT09XG5cblNvdXJjZSBjb2RlIGZvciB0aGUgR2xpbXBzZS5Ub2FzdHIgcGx1Z2luIGZvciBpbnRlZ3JhdGluZyB0b2FzdHIgZGlhZ25vc3RpY3MgaW50byBHbGltcHNlXG5cbiMjIEN1cnJlbnQgVmVyc2lvblxuMC4yLjBcblxuIyMgRGVtb1xuRGVtbyBjYW4gYmUgZm91bmQgW2hlcmVdKGh0dHA6Ly9Db2RlU2V2ZW4uZ2l0aHViLmNvbS90b2FzdHIpXG5cbiMjIFVzYWdlXG5MaW5rIHRvIGpxdWVyeSwgdG9hc3RyLmNzcywgdG9hc3RyLmpzLCBnbGltcHNlLmpzIGFuZCBnbGltcHNlLnRvYXN0ci5qc1xuXG5cdDxzY3JpcHQgc3JjPVwianF1ZXJ5LmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwidG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwiZ2xpbXBzZS5qc1wiPjwvc2NyaXB0PlxuXHQ8c2NyaXB0IHNyYz1cImdsaW1wc2UudG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cblVzZSB0b2FzdHIgXG5cblx0JChmdW5jdGlvbigpeyBcblx0XHR0b2FzdHIuaW5mbygndGVzdGluZycpOyBcblx0fSkoKTtcblxuQ2xpY2sgdGhlIEcgaWNvbiBpbiB0aGUgYm90dG9tIHJpZ2h0IG9mIHlvdXIgYnJvd3NlciBhbmQgZW5qb3khXG5cbiFbXShodHRwOi8vam9obnBhcGEubmV0L3dwLWNvbnRlbnQvaW1hZ2VzL2dsaW1wc2UudG9hc3RyLnBuZylcblxuXG4jIyBEZXBlbmRlbmNpZXNcblJlcXVpcmVzICBbdG9hc3RyXShodHRwOi8vanBhcGEubWUvYzd0b2FzdHIpIDEuMy4xK1xuXG4jI1Jlc291cmNlc1xuLSBbZ2xpbXBzZSBwcm90b2NvbHNdKGh0dHA6Ly9nZXRnbGltcHNlLmNvbS9Qcm90b2NvbClcbi0gW2dsaW1wc2UgY2xpZW50IHNhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9HbGltcHNlL0dsaW1wc2UvYmxvYi9tYXN0ZXIvc291cmNlL0dsaW1wc2UuSmF2YVNjcmlwdC90ZXN0X2NsaWVudC5odG1sI0wxMDEtTDEyMSlcblxuIyMgQXV0aG9yXG4qKkpvaG4gUGFwYSoqXG5cblR3aXR0ZXI6IFtAam9obl9wYXBhXShodHRwOi8vdHdpdHRlci5jb20vSm9obl9QYXBhKVxuXG4jIyBDb3B5cmlnaHRcbkNvcHlyaWdodCDCqSAyMDEzIFtKb2huIFBhcGFdKGh0dHA6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGEpLlxuXG4jIyBMaWNlbnNlIFxuZ2xpbXBzZS50b2FzdHIgaXMgdW5kZXIgW01JVCBsaWNlbnNlXShodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocCkiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3ZWM2MDFmYi0yMzhiLTRkYmUtOGViYi02YzExMjQyNTBjNzEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIlBsdXJhbHNpZ2h0LUNDLUFuZ3VsYXItQnJlZXplLUV4dHJhXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5TdXBwb3J0aW5nIGZpbGVzIGZvciB0aGUgUGx1cmFsc2lnaHQgXCJTUEEgd2l0aCBBbmd1bGFyIGFuZCBCcmVlemVcIiBjb3Vyc2UgYnkgSm9obiBQYXBhLiBcblxuVGhlIGZpbGVzIGluY2x1ZGVkIGluIHRoaXMgcmVwb3NpdG9yeSBhcmUgaW50ZW5kZWQgdG8gaGVscCBzdHJlYW1saW5lIHRoZSBsZWFybmluZyBwcm9jZXNzIG9mIHRoZSBQbHVyYWxzaWdodCBjb3Vyc2UgU1BBIHdpdGggQW5ndWxhciBhbmQgQnJlZXplLiBEdXJpbmcgdGhlIGNvdXJzZSB5b3Ugd2lsbCBjcmVhdGUgdGhlIFdlYiBwcm9qZWN0IGZyb20gc2NyYXRjaFxuYW5kIGNyZWF0ZSB0aGUgYXBwIGxvZ2ljIHVzaW5nIEphdmFTY3JpcHQuIFRoZSBjb3Vyc2Ugd2lsbCBhc2sgeW91IHRvIGFkZCBzdXBwb3J0aW5nIGZpbGVzIChmb3VuZCBoZXJlKSB0byBqdW1wLXN0YXJ0IHRoZSBwcm9jZXNzIGFuZCBrZWVwIHlvdSBmb2N1c2VkIG9uIHRoZSBjb3JlIG1hdGVyaWFsIG9mIEFuZ3VsYXIgYW5kIEJyZWV6ZS5cblxuPiBUaXA6IElmIHlvdSBhcmUgdGFraW5nIG15IGNvdXJzZSBhbmQgeW91IGVuY291bnRlciBhbiBlcnJvciB3aGVuIGJ1aWxkaW5nIHRoZSBwcm9qZWN0IGFmdGVyIGluc3RhbGxpbmcgSG90VG93ZWwuQW5ndWxhci5CcmVlemUgcmVsYXRlZCB0byBkbGwgdmVyc2lvbnMsIHlvdSBtYXkgd2FudCB0byB0cnkgdGhlIGxhdGVzdCBwYWNrYWdlIHZlcnNpb25zLiBSdW4gdGhlc2UgdXBkYXRlcyB1c2luZyB0aGUgTnVHZXQgUGFja2FnZSBNYW5hZ2VyXG5cbmBgYFxuVXBkYXRlLVBhY2thZ2UgQnJlZXplLlNlcnZlci5Db250ZXh0UHJvdmlkZXIuRUY2XG5cblVwZGF0ZS1QYWNrYWdlIEJyZWV6ZS5TZXJ2ZXIuV2ViQXBpMlxuXG5VcGRhdGUtUGFja2FnZSBCcmVlemUuQ2xpZW50XG5cblVwZGF0ZS1QYWNrYWdlIE5ld3RvbnNvZnQuSnNvblxuYGBgXG5cbiMjIFNjcmF0Y2hcbiAtIERhdGEgbGF5ZXIgd3JpdHRlbiBpbiBDIyBhbmQgLk5FVFxuIC0gTW9kZWwgbGlicmFyeSB3cml0dGVuIGluIEMjIGFuZCAuTkVUXG4gLSBDb250ZW50IGZvbGRlciB3aXRoIGFzc2V0cyBpbmNsdWRpbmcgQ1NTIGFuZCBJbWFnZXNcbiBcbiMjIExpdG11cyBUZXN0XG4gLSBUaGlzIGlzIGp1c3QgdG8gaGVscCBmb2xrcyBhbG9uZ1xuIC0gQ29udGFpbnMgYSBydW5uaW5nIHNvbHV0aW9uIGFmdGVyIHVzaW5nIHRoZSBjb250ZW50cyBpbiB0aGUgc2NyYXRjaCBmb2xkZXIgYW5kIHJ1bm5pbmcgdGhlIDIgTnVHZXQgY29tbWFuZHMgYmVsb3c6XG5cbiBgYGBcbiAgaW5zdGFsbC1wYWNrYWdlIEVudGl0eUZyYW1ld29yay5TcWxTZXJ2ZXJDb21wYWN0XG4gIGluc3RhbGwtcGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyLkJyZWV6ZVxuIGBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhNmUyMDExOC03Y2QzLTQwNzQtYjI4MC04ZGYxN2YyZjk4ZTciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qZzVPRGM1TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhci1OdUdldCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJhYTVlZDY1NTQyNWE0OGJiOTE5MDk4OTc3ZDc1MjAwZjY1ZjVjZjQwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiQW5ndWxhci1OdUdldFxuPT09PT09PT09PT09PVxuXG5Bbmd1bGFySlMgTnVHZXQgcGFja2FnZSBjcmVhdGlvbi5cblxuQnkgU2NvdHQgSGFuc2VsbWFuIGFuZCBKb2huIFBhcGFcblxuKlRoYW5rcyB0byBTY290dCBmb3IgdGhlIGF1dG9tYXRpb24qXG5cbkEgc2VyaWVzIG9mIEFuZ3VsYXIgTnVHZXQgcGFja2FnZXMsIHdpdGggdGhlIHBoaWxvc3BoeSBvZiAnMSBQYWNrYWdlIFBlciBNb2R1bGUnLiBcblxuIyMjV2h5PyBcblxuQmVjYXVzZSB0aGUgQW5ndWxhckpTIHBhY2thZ2UgKHdoaWNoIGlzIGF3ZXNvbWUpIGlzIGEgc3VwZXIgcGFja2FnZSB3aXRoIGV2ZXJ5dGhpbmcuIEFuZCBzb21ldGltZXMgeW91IGRvIG5vdCB3YW50IGV2ZXJ5dGhpbmcuXG5cbiMjIFBhY2thZ2VzXG5cbi0gQW5ndWxhckpTLkNvcmUgKGFsbCBwYWNrYWdlcyBiZWxvdyBkZXBlbmQgb24gdGhpcyBvbmUpXG4tIEFuZ3VsYXJKUy5Db29raWVzXG4tIEFuZ3VsYXJKUy5BbmltYXRlXG4tIEFuZ3VsYXJKUy5BcmlhXG4tIEFuZ3VsYXJKUy5Mb2NhbGUgKG5vdCBhbiBhbmd1bGFyIG1vZHVsZSwgYnV0IHJhdGhlciBhbGwgdGhlIGkxOG4gZmlsZXMpXG4tIEFuZ3VsYXJKUy5Mb2FkZXJcbi0gQW5ndWxhckpTLk1lc3NhZ2VzXG4tIEFuZ3VsYXJKUy5SZXNvdXJjZVxuLSBBbmd1bGFySlMuUm91dGVcbi0gQW5ndWxhckpTLlNhbml0aXplXG4tIEFuZ3VsYXJKUy5Ub3VjaFxuXG4jIyBSdW5uaW5nIE5vZGUgYW5kIE5QTSBvbiBXaW5kb3dzXG5cbi0gY2hvY28gaW5zdGFsbCBub2RlanNcbi0gY2hvY28gaW5zdGFsbCBub2RlanMuaW5zdGFsbFxuLSBjaG9jbyBpbnN0YWxsIHB5dGhvbiAtdmVyc2lvbiAyLjcuMlxuXG4tIG5wbSB1cGdyYWRlIG9uIHdpbmRvd3Ncblx0LSBodHRwczovL2dpdGh1Yi5jb20vbnBtL25wbS93aWtpL1Ryb3VibGVzaG9vdGluZyN1cGdyYWRpbmctb24td2luZG93c1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZDZkYjM5ZWMtMWZmYi00ZjQ1LWIxY2UtZDE5NTkyZmY2ZmUwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRPVFkzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiSG90VG93ZWwtQW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMThlZTkxN2ZmNTk2NTgwY2M1YmU5OTdmNjIyNTMxNWFmNjZmNmIwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBIb3QgVG93ZWwgQW5ndWxhciBTUEEgVGVtcGxhdGUgI1xuXG4+IEhvdCBUb3dlbDogQmVjYXVzZSB5b3UgZG9uJ3Qgd2FudCB0byBnbyB0byB0aGUgU1BBIHdpdGhvdXQgb25lIVxuXG5XYW50IHRvIGJ1aWxkIGEgU1BBIGJ1dCBjYW4ndCBkZWNpZGUgd2hlcmUgdG8gc3RhcnQ/IFVzZSBIb3QgVG93ZWwgQW5ndWxhciBhbmQgaW4gc2Vjb25kcyB5b3UnbGwgaGF2ZSBhIFNQQSBhbmQgYWxsIHRoZSB0b29scyB5b3UgbmVlZCB0byBidWlsZCBvbiBpdCEgXG5cbiFbXShodHRwOi8vd3d3LmpvaG5wYXBhLm5ldC93cC1jb250ZW50L3VwbG9hZHMvMjAxMy8wOS9Ib3RUb3dlbC1ORy1QcmV2aWV3LnBuZylcblxuSG90IFRvd2VsIEFuZ3VsYXIgY3JlYXRlcyBhIGdyZWF0IHN0YXJ0aW5nIHBvaW50IGZvciBidWlsZGluZyBhIFNpbmdsZSBQYWdlIEFwcGxpY2F0aW9uIChTUEEpLiBPdXQgb2YgdGhlIGJveCBpdCBwcm92aWRlcyBhIG1vZHVsYXIgc3RydWN0dXJlIGZvciB5b3VyIGNvZGUsIHZpZXcgbmF2aWdhdGlvbiwgZGF0YSBiaW5kaW5nLCBzZXBhcmF0aW9uIG9mIHNlcnZpY2VzLCBhbmQgc2ltcGxlIGJ1dCBlbGVnYW50IHN0eWxpbmcuIEhvdCBUb3dlbCBwcm92aWRlcyBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGJ1aWxkIGEgU1BBLCBzbyB5b3UgY2FuIGZvY3VzIG9uIHlvdXIgYXBwLCBub3QgdGhlIHBsdW1iaW5nLlxuXG4+IExlYXJuIG1vcmUgYWJvdXQgYnVpbGRpbmcgYSBTUEEgZnJvbSBbSm9obiBQYXBhJ3MgdmlkZW9zLCB0dXRvcmlhbHMgYW5kIFBsdXJhbHNpZ2h0IGNvdXJzZXNdKGh0dHA6Ly9qb2hucGFwYS5uZXQvc3BhKS5cblxuIyMgSW5zdGFsbGluZyB2aWEgdGhlIE51R2V0IFBhY2thZ2UgIyNcbkhvdCBUb3dlbCBBbmd1bGFyIGlzIGEgTnVHZXQgcGFja2FnZSB0aGF0IGF1Z21lbnRzIGFuIGV4aXN0aW5nIGVtcHR5IEFTUC5ORVQgcHJvamVjdC4gSnVzdCBpbnN0YWxsIHVzaW5nIE51R2V0IGFuZCB0aGVuIHJ1biFcblxuICAgIEluc3RhbGwtUGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyXG5cbiMjIEhvdyBEbyBJIEJ1aWxkIE9uIEhvdCBUb3dlbD8gIyNcblNpbXBseSBzdGFydCBhZGRpbmcgY29kZSEgXG5cbjEuIEFkZCB5b3VyIG93biBzZXJ2ZXItc2lkZSBjb2RlLCBzdWNoIGFzIEVudGl0eSBGcmFtZXdvcmsgYW5kIFdlYiBBUEkgKHdoaWNoIHJlYWxseSBzaGluZXMgd2l0aCBCcmVlemUuanMpXG4yLiBBZGQgdmlld3MgYW5kIGNvbnRyb2xsZXJzXG4zLiBVcGRhdGUgdGhlIG5hdmlnYXRpb24gcm91dGVzIGluIGBjb25maWcucm91dGVzLmpzYFxuXG4jIyBBZGQgUmljaCBEYXRhIHdpdGggQnJlZXplICMjXG5BZGQgcmljaCBkYXRhIGZlYXR1cmVzIHVzaW5nIEJyZWV6ZSB0byBIb3QgVG93ZWwgQW5ndWxhciwgdmlhIE51R2V0LlxuXG4gICAgSW5zdGFsbC1QYWNrYWdlIEhvdFRvd2VsLkFuZ3VsYXIuQnJlZXplXG5cbiMjIFJlc291cmNlcyAjI1xuXG4rIFtTUEEgUmVzb3VyY2VzXShodHRwOi8vam9obnBhcGEubmV0L3NwYSlcbisgW0hvdCBUb3dlbCBBbmd1bGFyIG9uIEdpdEh1Yl0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL0hvdFRvd2VsLU5HKVxuKyBbSG90IFRvd2VsIEFuZ3VsYXIgb24gTnVHZXRdIChodHRwOi8vbnVnZXQub3JnL3BhY2thZ2VzL0hvdFRvd2VsLUFuZ3VsYXIpXG5cbiMjIEhvdCBUb3dlbCBBbmd1bGFyIGZvciBhbnkgRW52aXJvbm1lbnQgXG4rIFtIb3QgVG93ZWwgQW5ndWxhciBTZWVkL1N0YXJ0ZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9uZy1kZW1vcy90cmVlL21hc3Rlci9ob3R0b3dlbClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjBlM2VkMGIyLWY5MGYtNGU1ZC1iYjZkLWJmNDMzN2RmYTZhNiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EZzVNams0TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci5icmVlemUuc3RvcmFnZXdpcCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlMjliY2JiMzMxZjBkMjk4ZDI2MDdiODM3NmIxNzllYWMwYWY2N2E5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiYW5ndWxhci5icmVlemUuc3RvcmFnZVdpcFxuPT09PT09PT09PT09XG5cblNhdmUgV29yayBpbiBQcm9ncmVzcyB0byBMb2NhbCBTdG9yYWdlIGZvciBBbmd1bGFyIGFuZCBCcmVlemUgYXBwcy5cblxuQXMgc2VlbiBvbiBbQnVpbGRpbmcgQXBwcyB3aXRoIEFuZ3VsYXIgYW5kIEJyZWV6ZV0oaHR0cDovL2pwYXBhLm1lL3NwYW5neikgb24gUGx1cmFsc2lnaHRcblxuXG5WZXJzaW9uIDEuMC4wXG5cbiMjIE51R2V0XG5HZXQgW0FuZ3VsYXIuQnJlZXplLlN0b3JhZ2VXSVBdKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9Bbmd1bGFyLkJyZWV6ZS5TdG9yYWdlV0lQKSBmcm9tIE51R2V0XG5cbiAgICBpbnN0YWxsLXBhY2thZ2UgQW5ndWxhci5CcmVlemUuU3RvcmFnZVdJUFxuXG5cbiMjU2V0dXBcbiAgICAvLyBBZGQgbmd6V2lwIHRvIHlvdXIgbW9kdWxlIGRlcGVuZGVuY2llcy5cbiAgICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsnbmd6V2lwJ10pO1xuXG4jIyMgYHpTdG9yYWdlQ29uZmlnUHJvdmlkZXJgIENvbmZpZ3VyYXRpb25cblxuICAgIGFwcC5jb25maWcoWyd6U3RvcmFnZUNvbmZpZ1Byb3ZpZGVyJywgZnVuY3Rpb24gKGNmZykge1xuICAgICAgICBjZmcuY29uZmlnID0ge1xuICAgICAgICAgICAgLy8gTXVzdCBzZXQgdGhlc2VcbiAgICAgICAgICAgIGtleTogJ1lvdXJBcHBOYW1lJywgLy8gSWRlbnRpZmllciBmb3IgdGhlIGFwcFxuICAgICAgICAgICAgd2lwS2V5OiAnWW91ckFwcE5hbWUuV0lQJywgLy8gSWRlbnRpZmVyIGZvciB0aGUgYXBwJ3MgXG4gICAgICAgICAgICB2ZXJzaW9uOiAnMS4xLjAnLCAvLyBZb3VyIGFwcCdzIHZlcnNpb24gXG5cbiAgICAgICAgICAgIC8vIFRoZXNlIGFyZSBkZWZhdWx0ZWQsIGJ1dCBjYW4gYmUgb3ZlcnJpZGVuXG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSwgLy8gZW5hYmxlIExvY2FsIFN0b3JhZ2UgKFdJUCBpcyBhbHdheXMgZW5hYmxlZClcbiAgICAgICAgICAgIGV2ZW50czogeyAvLyBuYW1lcyBvZiBldmVudHMgdGhhdCBXSVAgd2lsbCBmaXJlXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdzdG9yZS5lcnJvcicsXG4gICAgICAgICAgICAgICAgc3RvcmVDaGFuZ2VkOiAnc3RvcmUuY2hhbmdlZCcsXG4gICAgICAgICAgICAgICAgd2lwQ2hhbmdlZDogJ3dpcC5jaGFuZ2VkJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFwcEVycm9yUHJlZml4OiAnW25neldpcF0gJywgLy8gb3B0aW9uYWwgcHJlZml4IGZvciBhbnkgZXJyb3IgbWVzc2FnZXNcbiAgICAgICAgICAgIG5ld0d1aWQ6IGJyZWV6ZS5jb3JlLmdldFV1aWQgLy8gR1VJRCBmdW5jdGlvbiBnZW5lcmF0b3JcbiAgICAgICAgfTtcbiAgICB9XSk7XG5cblxuIyNBUEkgVXNhZ2VcblxuIyMjQVBJIGZvciBgelN0b3JhZ2VXaXBgIHNlcnZpY2VcblxuICAgIC8vIEluaXRpYWxpemUgc3RvcmFnZSB3aXRoIGEgQnJlZXplIEVudGl0eU1hbmFnZXJcbiAgICB6U3RvcmFnZVdpcC5pbml0KGVudGl0eU1hbmFnZXIpXG4gICAgXG4gICAgLy8gQ2xlYXIgYWxsIFdJUCBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICB6U3RvcmFnZVdpcC5jbGVhckFsbFdpcCgpXG5cbiAgICAvLyBTdG9yZSAxIGVudGl0eSBpbiBsb2NhbCBzdG9yYWdlLiBQYXNzIGluIHRoZSB3aXAga2V5LCBlbnRpdHlOYW1lLCBhbmQgYSBkZXNjcmlwdGlvbi5cbiAgICAvLyByb3V0ZVN0YXRlIGlzIHRoZSBuYW1lIG9mIHRoZSByb3V0ZSAoYWZ0ZXIgdGhlIGhhc2gpIGZvciB0aGUgdmlldyB3aGVyZSB0aGlzIGVudGl0eSBtYXkgYmUgdmlld2VkLlxuICAgIC8vIHJvdXRlU3RhdGUgZGVmYXVsdHMgdG8gZW50aXR5TmFtZS50b0xvd2VyY2FzZSgpIFxuICAgIHZhciBrZXkgPSB6U3RvcmFnZVdpcC5zdG9yZVdpcEVudGl0eShlbnRpdHksIGtleSwgZW50aXR5TmFtZSwgZGVzY3JpcHRpb24sIHJvdXRlU3RhdGUpXG5cbiAgICAvLyBSZW1vdmUgMSBlbnRpdHkgZnJvbSBsb2NhbCBzdG9yYWdlLCBieSBpdHMgV0lQIGtleVxuICAgIHpTdG9yYWdlV2lwLnJlbW92ZVdpcEVudGl0eShrZXkpXG5cbiAgICAvLyBMb2FkIDEgZW50aXR5IGludG8gQnJlZXplJ3MgRW50aXR5TWFuYWdlclxuICAgIC8vIGZyb20gbG9jYWwgc3RvcmFnZSwgYnkgaXRzIFdJUCBrZXlcbiAgICB6U3RvcmFnZVdpcC5sb2FkV2lwRW50aXR5KGtleSlcblxuICAgIC8vIEZpbmQgMSBlbnRpdHkgZnJvbSBsb2NhbCBzdG9yYWdlLCBieSBpdHMgZW50aXR5TmFtZSBhbmQgaWRcbiAgICB2YXIgd2lwS2V5ID0gelN0b3JhZ2VXaXAuZmluZFdpcEtleUJ5RW50aXR5SWQoZW50aXR5TmFtZSwgaWQpXG5cbiAgICAvLyBHZXQgc3VtbWFyeSBpbmZvcm1hdGlvbiBmb3IgYWxsIFdJUCBpbiBsb2NhbCBzdG9yYWdlXG4gICAgdmFyIHdpcFN1bW1hcnkgPSB6U3RvcmFnZVdpcC5nZXRXaXBTdW1tYXJ5KClcblxuXG4jIyNBUEkgZm9yIGB6U3RvcmFnZWAgc2VydmljZVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBzdG9yYWdlIHdpdGggYSBCcmVlemUgRW50aXR5TWFuYWdlclxuICAgIHpTdG9yYWdlLmluaXQoZW50aXR5TWFuYWdlcilcblxuICAgIC8vIERpY3Rpb25hcnkgZnVuY3Rpb24gdG8gc2V0IGlmIGEga2V5IHZhbHVlIGlzIGxvYWRlZCBcbiAgICB6U3RvcmFnZS5hcmVJdGVtc0xvYWRlZChrZXksIHZhbHVlKVxuICAgIC8vIERpY3Rpb25hcnkgZnVuY3Rpb24gdG8gZ2V0IGlmIGEga2V5IHZhbHVlIGlzIGxvYWRlZCBcbiAgICB2YXIgdmFsdWUgPSB6U3RvcmFnZS5hcmVJdGVtc0xvYWRlZChrZXkpXG5cbiAgICAvLyBDbGVhciBhbGwgbG9jYWwgc3RvcmFnZSwgaW5jbHVkaW5nIFdJUCB0b29cbiAgICB6U3RvcmFnZS5jbGVhcigpXG5cbiAgICAvLyBMb2FkIGFsbCBvZiB0aGUgZW50aXRpZXMgZm9ybSBsb2NhbCBzdG9yYWdlIFxuICAgIC8vIGludG8gQnJlZXplJ3MgRW50aXR5TWFuYWdlclxuICAgIHpTdG9yYWdlLmxvYWQoKVxuXG4gICAgLy8gU2F2ZSBhbGwgb2YgdGhlIEJyZWV6ZSBFbnRpdHlNYW5hZ2VyJ3MgZW50aXRpZXMgXG4gICAgLy8gdG8gbG9jYWwgc3RvcmFnZVxuICAgIHpTdG9yYWdlLnNhdmUoKVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYjVmYzE5ZTMtMzE5My00YzJhLTk1YTYtYzUwODZiMjQ4NDFiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE56VTJPREl6TXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctZGVtb3MiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiN2Q0YzY1MDQzYWJiZjVmMDY2YWRmZmMzYWNmMzdmOWY1OGI0NDJhMiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIm5nLWRlbW9zXG49PT09PT09PVxuVmFyaWV0eSBvZiBhbmd1bGFyIGRlbW9zIGFyZSBjb250YWluZWQgaGVyZWluLlxuXG4+Kk9waW5pb25hdGVkIEFuZ3VsYXJKUyBzdHlsZSBndWlkZSBmb3IgdGVhbXMgYnkgW0Bqb2huX3BhcGFdKC8vdHdpdHRlci5jb20vam9obl9wYXBhKSpcblxuPk1vcmUgZGV0YWlscyBhYm91dCB0aGUgc3R5bGVzIGFuZCBwYXR0ZXJucyB1c2VkIGluIHRoZXNlIGFwcHMgY2FuIGJlIGZvdW5kIGluIG15IFtBbmd1bGFySlMgU3R5bGUgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyanMtc3R5bGVndWlkZSkgYW5kIG15ICoqQW5ndWxhckpTIFBhdHRlcm5zOiBDbGVhbiBDb2RlKiooY29taW5nIHNvb24pIGNvdXJzZSBhdCBbUGx1cmFsc2lnaHRdKGh0dHA6Ly9wbHVyYWxzaWdodC5jb20vdHJhaW5pbmcvQXV0aG9ycy9EZXRhaWxzL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuIFxuXG5cbiMjIGdydW50LWd1bHBcbkRlbW9uc3RyYXRlcyB1c2Ugb2YgZ3J1bnQgYW5kIGd1bHAgd2l0aCBhbiBhbmd1bGFyIGFwcC5cblxuLSBncnVudFxuLSBndWxwXG5cbiMjIGhvdHRvd2VsXG5TdGFydGVyIHRlbXBsYXRlIGZvciBBbmd1bGFyIGFwcHMuIEFsbCBjbGllbnQgc2lkZSBqYXZhc2NyaXB0IHVzaW5nIEFuZ3VsYXIgZm9yIHJvdXRpbmcsIGFuaW1hdGlvbiwgYW5kIGJhc2ljIENTUyB0aGVtaW5nLlxuXG4jIyBtb2R1bGFyXG5EZW1vbnN0cmF0ZXMgaG93IHRvIGRpc3RyaWJ1dGUgYW4gYXBwIGFjcm9zcyBzZXZlcmFsIG1vZHVsZXMsIGluY2x1ZGluZyBoYW5kbGluZyB0aGUgcm91dGluZywgdGVzdGluZywgZ3VscCBhdXRvbWF0aW9uIGFuZCBtb3JlLlxuXG4jIyBjYy1ibWVhblxuTGFyZ2VyIGFwcCBydW5uaW5nIGEgZmljdGl0aW91cyBldmVudCBuYW1lZCBcIkNvZGVDYW1wZXJcIi5cblxuIyNuZy0xLjMgcGxheWdyb3VuZFxuU2ltcGxlIGRlbW9zIGZvciBuZyAxLjMgZmVhdHVyZXMuXG5cbi0gbmctbW9kZWwtb3B0aW9ucz1cInsgZGVib3VuY2U6IDEwMDAsIHVwZGF0ZU9uOiAnYmx1cicgfVwiXG5cbiMjIG5nLWp3dFxuSlNPTiBXZWIgVG9rZW5zIChKV1QpIGluIGFuIEFuZ3VsYXJKUyBhcHAsIHRvIGRlbW9uc3RyYXRlIGhvdyB0byB1c2UgdGhlIEpXVCBmb3IgcmVzdHJpY3RpbmcgQVBJIGFjY2Vzcy5cblxuIyMgcXVpY2tzdGFydFxuU2ltcGxlIEFuZ3VsYXIgZGVtb3NcblxuLSBkYXRhIGJpbmRpbmdcbi0gcm91dGluZ1xuLSByZXBlYXRcbi0gZmlsdGVyXG4tICRodHRwXG4tIHNlcnZpY2UvZmFjdG9yeSBcblxuIyMgdG9kby16dW1vXG5EZW1vbnN0cmF0ZXMgaG93IHRvIHRhbGsgdG8gQXp1cmUgTW9iaWxlIFNlcnZpY2VzIHZpYSBhIHNpbmdsZSB0b2RvIGxpc3QuXG5cbi0gQ2hhbmdlc2V0cyBhbmQgY2hhbmdlIHN0YXRlIChBZGRlZCwgRGVsZXRlZCwgVWRwYXRlZClcbi0gVGFsa2luZyBBenVyZSBNb2JpbGUgU2VydmljZXNcbi0gU2F2aW5nIGNoYW5nZXNldHMgdG8gbG9jYWwgc3RvcmFnZVxuLSBIYW5kIHdyaXR0ZW4gbWV0YWRhdGEgZm9yIGJyZWV6ZVxuXG4jIyB6LW1ldGFkYXRhXG5UaHJvd3MgYSBzd2l0Y2ggZnJvbSB1c2luZyBXZWIgQVBJIC8gRUYgbWV0YWRhdGEgdG8gdXNpbmcgaGFuZCB3cml0dGVuIGNsaWVudCBzaWRlIG1ldGFkYXRhXG5cbi0gVG9nZ2xlIGJldHdlZW4gRUYgbWV0YWRhdGEgYW5kIGhhbmQgd3JpdHRlbiBtZXRhZGF0YSBmb3IgYnJlZXplXG5cbiMjIFp6YVxuUGl6emEgb3JkZXJpbmcgc2VydmljZSB1c2luZyBNRUFOIHN0YWNrLiBEYXRhIGlzIHN0cnVjdHVyZWQgaW4gYSBkb2N1bWVudCBmYXNoaW9uLCBub3QgU1FMIHNob3ZlZCBpbiBNb25nb0RCLlxuXG4tIG5vZGUuanNcbi0gbW9uZ29kYiB1c2luZyB0cnVlIGRvY3VtZW50IHN0cnVjdHVyZVxuLSBleHByZXNzXG4tIGJyZWV6ZVxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRiYTIzMDg0LTI1MDctNDc2Zi04YzUzLTM2NGU2ZDIzZGRlNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgU3R5bGUgR3VpZGVcblxuIyMgVmVyc2lvbnNcblRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBBbmd1bGFyLCBhbmQgdGh1cyB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgb2YgdGhlIGd1aWRlLiBDaG9vc2UgeW91ciBndWlkZSBhcHByb3ByaWF0ZWx5LlxuXG4jIyMgQW5ndWxhciAxIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMSBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMS9SRUFETUUubWQpLlxuXG4jIyMgQW5ndWxhciAyIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMiBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMi9SRUFETUUubWQpLlxuXG4jIyBBbmd1bGFyIFRlYW0gRW5kb3JzZWRcblNwZWNpYWwgdGhhbmtzIHRvIElnb3IgTWluYXIsIGxlYWQgb24gdGhlIEFuZ3VsYXIgdGVhbSwgZm9yIHJldmlld2luZywgY29udHJpYnV0aW5nIGZlZWRiYWNrLCBhbmQgZW50cnVzdGluZyBtZSB0byBzaGVwaGVyZCB0aGlzIGd1aWRlLlxuXG4jIyBQdXJwb3NlXG4qT3BpbmlvbmF0ZWQgQW5ndWxhciBzdHlsZSBndWlkZSBmb3IgdGVhbXMgYnkgW0Bqb2huX3BhcGFdKC8vdHdpdHRlci5jb20vam9obl9wYXBhKSpcblxuSWYgeW91IGFyZSBsb29raW5nIGZvciBhbiBvcGluaW9uYXRlZCBzdHlsZSBndWlkZSBmb3Igc3ludGF4LCBjb252ZW50aW9ucywgYW5kIHN0cnVjdHVyaW5nIEFuZ3VsYXIgYXBwbGljYXRpb25zLCB0aGVuIHN0ZXAgcmlnaHQgaW4uIFRoZXNlIHN0eWxlcyBhcmUgYmFzZWQgb24gbXkgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZSB3aXRoIFtBbmd1bGFyXSgvL2FuZ3VsYXJqcy5vcmcpLCBwcmVzZW50YXRpb25zLCBbUGx1cmFsc2lnaHQgdHJhaW5pbmcgY291cnNlc10oaHR0cDovL2FwcC5wbHVyYWxzaWdodC5jb20vYXV0aG9yL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG5cblRoZSBwdXJwb3NlIG9mIHRoaXMgc3R5bGUgZ3VpZGUgaXMgdG8gcHJvdmlkZSBndWlkYW5jZSBvbiBidWlsZGluZyBBbmd1bGFyIGFwcGxpY2F0aW9ucyBieSBzaG93aW5nIHRoZSBjb252ZW50aW9ucyBJIHVzZSBhbmQsIG1vcmUgaW1wb3J0YW50bHksIHdoeSBJIGNob29zZSB0aGVtLlxuXG4+SWYgeW91IGxpa2UgdGhpcyBndWlkZSwgY2hlY2sgb3V0IG15IFtBbmd1bGFyIFBhdHRlcm5zOiBDbGVhbiBDb2RlXShodHRwOi8vanBhcGEubWUvbmdjbGVhbikgY291cnNlIGF0IFBsdXJhbHNpZ2h0IHdoaWNoIGlzIGEgY29tcGFuaW9uIHRvIHRoaXMgZ3VpZGUuXG5cbiAgWyFbQW5ndWxhciBQYXR0ZXJuczogQ2xlYW4gQ29kZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS9tYXN0ZXIvYTEvYXNzZXRzL25nLWNsZWFuLWNvZGUtYmFubmVyLnBuZyldKGh0dHA6Ly9qcGFwYS5tZS9uZ2NsZWFuKVxuXG4jIyBDb21tdW5pdHkgQXdlc29tZW5lc3MgYW5kIENyZWRpdFxuTmV2ZXIgd29yayBpbiBhIHZhY3V1bS4gSSBmaW5kIHRoYXQgdGhlIEFuZ3VsYXIgY29tbXVuaXR5IGlzIGFuIGluY3JlZGlibGUgZ3JvdXAgd2hvIGFyZSBwYXNzaW9uYXRlIGFib3V0IHNoYXJpbmcgZXhwZXJpZW5jZXMuIE1hbnkgb2YgbXkgc3R5bGVzIGhhdmUgYmVlbiBmcm9tIHRoZSBtYW55IHBhaXIgcHJvZ3JhbW1pbmcgc2Vzc2lvbnMgW1dhcmQgQmVsbF0oaHR0cHM6Ly90d2l0dGVyLmNvbS93YXJkYmVsbCkgYW5kIEkgaGF2ZSBoYWQuIE15IG1vc3QgZXhjZWxsZW50IGZyaWVuZCBXYXJkIGhhcyBoZWxwZWQgaW5mbHVlbmNlIHRoZSB1bHRpbWF0ZSBldm9sdXRpb24gb2YgdGhlc2UgZ3VpZGVzLlxuXG4jIyBDb250cmlidXRpbmdcbk9wZW4gYW4gaXNzdWUgZmlyc3QgdG8gZGlzY3VzcyBwb3RlbnRpYWwgY2hhbmdlcy9hZGRpdGlvbnMuIElmIHlvdSBoYXZlIHF1ZXN0aW9ucyB3aXRoIHRoZSBndWlkZSwgZmVlbCBmcmVlIHRvIGxlYXZlIHRoZW0gYXMgaXNzdWVzIGluIHRoZSByZXBvc2l0b3J5LiBJZiB5b3UgZmluZCBhIHR5cG8sIGNyZWF0ZSBhIHB1bGwgcmVxdWVzdC4gVGhlIGlkZWEgaXMgdG8ga2VlcCB0aGUgY29udGVudCB1cCB0byBkYXRlIGFuZCB1c2UgZ2l0aHVi4oCZcyBuYXRpdmUgZmVhdHVyZSB0byBoZWxwIHRlbGwgdGhlIHN0b3J5IHdpdGggaXNzdWVzIGFuZCBQUuKAmXMsIHdoaWNoIGFyZSBhbGwgc2VhcmNoYWJsZSB2aWEgZ29vZ2xlLiBXaHk/IEJlY2F1c2Ugb2RkcyBhcmUgaWYgeW91IGhhdmUgYSBxdWVzdGlvbiwgc29tZW9uZSBlbHNlIGRvZXMgdG9vISBZb3UgY2FuIGxlYXJuIG1vcmUgaGVyZSBhdCBhYm91dCBob3cgdG8gY29udHJpYnV0ZS5cblxuKkJ5IGNvbnRyaWJ1dGluZyB0byB0aGlzIHJlcG9zaXRvcnkgeW91IGFyZSBhZ3JlZWluZyB0byBtYWtlIHlvdXIgY29udGVudCBhdmFpbGFibGUgc3ViamVjdCB0byB0aGUgbGljZW5zZSBvZiB0aGlzIHJlcG9zaXRvcnkuKlxuXG4jIyMgUHJvY2Vzc1xuICAgIDEuIERpc2N1c3MgdGhlIGNoYW5nZXMgaW4gYSBHaXRIdWIgaXNzdWUuXG4gICAgMi4gT3BlbiBhIFB1bGwgUmVxdWVzdCwgcmVmZXJlbmNlIHRoZSBpc3N1ZSwgYW5kIGV4cGxhaW4gdGhlIGNoYW5nZSBhbmQgd2h5IGl0IGFkZHMgdmFsdWUuXG4gICAgMy4gVGhlIFB1bGwgUmVxdWVzdCB3aWxsIGJlIGV2YWx1YXRlZCBhbmQgZWl0aGVyIG1lcmdlZCBvciBkZWNsaW5lZC5cblxuIyMgTGljZW5zZVxuXG5fdGxkcjsgVXNlIHRoaXMgZ3VpZGUuIEF0dHJpYnV0aW9ucyBhcmUgYXBwcmVjaWF0ZWQuX1xuXG4jIyMgQ29weXJpZ2h0XG5cbkNvcHlyaWdodCAoYykgMjAxNC0yMDE2IFtKb2huIFBhcGFdKGh0dHA6Ly9qb2hucGFwYS5uZXQpXG5cbiMjIyAoVGhlIE1JVCBMaWNlbnNlKVxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG5hIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbidTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG5FWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbk1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG5DTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcblNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4qKltCYWNrIHRvIHRvcF0oI2FuZ3VsYXItc3R5bGUtZ3VpZGUpKipcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjUzODg3ODY4LTUxOGQtNDg4MC05NDBkLWQwMjRiNmExNzg1ZCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiI0FuZ3VsYXJKUyBQYXR0ZXJucyBUZXN0aW5nIC0gRGVtb1xuRGVtb25zdHJhdGVzIEFuZ3VsYXIgdGVzdGluZ1xuXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9qb2hucGFwYS9uZy1wYXR0ZXJucy10ZXN0aW5nLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2pvaG5wYXBhL25nLXBhdHRlcm5zLXRlc3RpbmcpXG5cbj4qT3BpbmlvbmF0ZWQgQW5ndWxhckpTIHN0eWxlIGd1aWRlIGZvciB0ZWFtcyBieSBbQGpvaG5fcGFwYV0oLy90d2l0dGVyLmNvbS9qb2huX3BhcGEpKlxuXG4+TW9yZSBkZXRhaWxzIGFib3V0IHRoZSBzdHlsZXMgYW5kIHBhdHRlcm5zIHVzZWQgaW4gdGhpcyBhcHAgY2FuIGJlIGZvdW5kIGluIG15IFtBbmd1bGFySlMgU3R5bGUgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyanMtc3R5bGVndWlkZSkgYW5kIG15ICoqQW5ndWxhckpTIFBhdHRlcm5zOiBDbGVhbiBDb2RlKiooY29taW5nIHNvb24pIGNvdXJzZSBhdCBbUGx1cmFsc2lnaHRdKGh0dHA6Ly9wbHVyYWxzaWdodC5jb20vdHJhaW5pbmcvQXV0aG9ycy9EZXRhaWxzL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG4+IFxuIyMgU2xpZGVzXG5cblRoZSBzbGlkZXMgZm9yIFdhcmQncyB0YWxrIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgcHJvamVjdCBhcmUgYXZhaWxhYmxlIG9uIGdvb2dsZSBkb2NzLlxuXG5bU2VlIHRoZSBzbGlkZXNdKGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kLzEzN2xnTE10ZmxXM3E0U0JLcnJqVmdpdVNBaTZHQzE5VDRtTlZveC00a1Y4L3ByZXNlbnQpXG5cbiMjIFRPRE9cbjEuIFN0cnVjdHVyZSB3aWxsIGhhdmUgc3BlY3Mgc2lkZSBieSBzaWRlIHdpdGggY29kZSwgZXhjZXB0IGNyb3NzIGN1dHRpbmcgdGVzdHNcbjIuIFJlbW92ZSBleHRyYW5lb3VzIGNvZGUgdW5yZWxhdGVkIHRvIHRlc3RzXG4zLiBBZGQgdWktcm91dGVyXG40LiBSZXZpc2UgZnJvbSBhdmVuZ2Vyc1xuXG4jIyBTdHJ1Y3R1cmVcblx0L2J1aWxkIFx0KGNyZWF0ZWQgb24gdGhlIGZseSlcblx0L2d1bHBcdFxuXHQvc3JjXG5cdFx0L2NsaWVudFxuXHRcdFx0L2FwcFxuXHRcdFx0L2NvbnRlbnRcblx0XHRcdC90ZXN0XG5cdFx0L3NlcnZlclxuXHRcdFx0L2RhdGFcblx0XHRcdC9yb3V0ZXNcblx0XG5cbiMjIEluc3RhbGxpbmcgTm9kZS5qcyBhbmQgQm93ZXIgUGFja2FnZXNcbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBucG0gaW5zdGFsbGBcblxuPkRvIG5vdCBiZSBhbGFybWVkIGJ5IHRoZSBvY2Nhc2lvbmFsIHNlYSBvZiByZWQgY29tcGxhaW5pbmcgYWJvdXRcbnRoZSBpbmFiaWxpdHkgdG8gcmUtYnVpbGQgc29tZSBsaWJyYXJ5LiBZb3UgY2FuIGlnbm9yZSB0aGVzZSB3YXJuaW5nc1xuYmVjYXVzZSB3ZSBhbHdheXMgdXNlIHRoZSBwcmUtYnVpbHQgbGlicmFyaWVzIHRoYXQgd2VyZSBzaGlwcGVkIHdpdGhcbnRoZSBwYWNrYWdlLlxuXG4jIyBDbGVhbmluZyBcbk92ZXIgdGltZSB5b3UgbWlnaHQgYWNjdW11bGF0ZSBzb21lIG9sZCBsaWJyYXJpZXMuXG5cbkl0IGRvZXNuJ3QgaHVydCB0byBvY2Nhc2lvbmFsbHkgY2xlYXIgdGhlIGRlY2tzIGJ5IGRlbGV0aW5nIHRoZVxuXCJib3dlclxcX2NvbXBvbmVudHNcIiBhbmQgXCJub2RlXFxfbW9kdWxlc1wiIGZvbGRlcnMgYW5kIHJlLWluc3RhbGxpbmdcbndpdGggYG5wbSBpbnN0YWxsYC5cblxuIyMgSW5zdGFsbGluZyBCb3dlciBQYWNrYWdlc1xuYG5wbSBpbnN0YWxsYCB3aWxsIGluc3RhbGwgdGhlc2UgdG9vLCBidXQgeW91IGNhbiBkbyBpdCBtYW51YWxseS5cbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBib3dlciBpbnN0YWxsYFxuXG5cbiMjIFRlc3RpbmdcblRoZXJlIGFyZSB0d28gd2F5cyB0byB0ZXN0OiBpbiB0aGUgYnJvd3NlciBhbmQgd2l0aCBrYXJtYVxuXG4jIyMgVGVzdGluZyBpbiB0aGUgYnJvd3NlclxuXG4qIE9wZW4gYSBjb21tYW5kIG9yIHRlcm1pbmFsIHdpbmRvdy5cblxuKiBXaXRoIGJyb3dzZXItc3luYyBcbiAgICAqIGluIHNwZWNzLmh0bWwsIGNvbW1lbnQgb3V0IGBtb2NoYS5jaGVja0xlYWtzKClgIC8vIGZhbHNlIGxlYWsgcmVwb3J0IGZyb20gYnJvd3NlciBzeW5jXG4gICAgKiBydW4gYGd1bHAgc2VydmUtc3BlY3NgPGJyLz48YnIvPlxuXG4qIFdpdGhvdXQgYnJvd3Nlci1zeW5jIFxuICAgICogcnVuIGBndWxwIHNlcnZlLXNwZWNzIC0tbm9zeW5jYFxuXHQqIG9wZW4gYSBicm93c2VyIHRvIGBsb2NhbGhvc3Q6NzIwMi9zcGVjcy5odG1sYFxuXHQqIGJyb3dzaW5nIHRvIGBsb2NhbGhvc3Q6NzIwMmAgcnVucyB0aGUgYXBwPGJyLz48YnIvPlxuXG4qIFRvIHN0b3AsIGVpdGhlciBcIkN0cmwtQ1wiIGFuZCBhbnN3ZXIgdGhlIHByb21wdCB3aXRoIFwiWVwiIG9yIGp1c3QgY2xvc2UgdGhlIHdpbmRvdy5cblxuIyMjIFRlc3Rpbmcgd2l0aCBrYXJtYVxuKiBPcGVuIGEgY29tbWFuZCBvciB0ZXJtaW5hbCB3aW5kb3cuXG5cbiogVG8ganVzdCB0aGUgdW5pdCB0ZXN0cywgdHlwZSBgZ3VscCBhdXRvdGVzdGAgXG5cbiogVG8gcnVuIGJvdGggdW5pdCBhbmQgbWlkd2F5IHRlc3RzIChzcGlucyB1cCBhIGRldiBzZXJ2ZXIpLCB0eXBlIGBndWxwIGF1dG90ZXN0IC0tc3RhcnRTZXJ2ZXJzYFxuXG5UZXN0aW5nIHVzZXMga2FybWEsIG1vY2hhLCBjaGFpLCBzaW5vbiwgbmdNaWR3YXlUZXN0ZXIgbGlicmFyaWVzLlxuXG4+XCJhdXRvdGVzdFwiIHN0YXJ0cyB0aGUgdGVzdHMgYW5kIHN0YXlzIGFsaXZlLCB3YXRjaGluZyBmb3IgZmlsZSBjaGFuZ2VzLiBUeXBlIFwidGVzdFwiIGluc3RlYWQgaWYgeW91IG9ubHkgd2FudCB0byBydW4gdGhlIHRlc3RzIG9uY2UgYW5kIHRoZW4gZXhpdC5cblxuKiBUbyBzdG9wLCBlaXRoZXIgXCJDdHJsLUNcIiBhbmQgYW5zd2VyIHRoZSBwcm9tcHQgd2l0aCBcIllcIiBvciBqdXN0IGNsb3NlIHRoZSB3aW5kb3cuXG5cbiMjIFJ1bm5pbmcgdGhlIGFwcFxuUnVucyBsb2NhbGx5LCBubyBkYXRhYmFzZSByZXF1aXJlZC5cblxuIyMjIERldiBCdWlsZHNcblRoZSBkZXYgYnVpbGQgZG9lcyBub3Qgb3B0aW1pemUgdGhlIGRlcGxveWVkIGNvZGUuIEl0IHNpbXBseSBydW5zIGl0IGluIHBsYWNlLiBZb3UgY2FuIHJ1biBhIGRldiBidWlsZCBpbiBtdWx0aXBsZSB3YXlzLlxuXG4jIyMjT3B0aW9uIDEgLSBTZXJ2ZVxuVHlwZSBgZ3VscCBzZXJ2ZS1kZXZgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuIyMjI09wdGlvbiAyIC0gU2VydmUgYW5kIERlYnVnIE5vZGVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnYCBhbmQgYnJvd3NlIHRvIGBodHRwOi8vbG9jYWxob3N0OjcyMDJgIGZvciB0aGUgY2xpZW50IGFuZCBgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlYnVnP3BvcnQtNTg1OGAgdG8gZGVidWcgdGhlIHNlcnZlci5cblxuIyMjI09wdGlvbiAzIC0gU2VydmUgYW5kIERlYnVnIE5vZGUgQnJlYWtpbmcgb24gMXN0IExpbmVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnLWJya2AgYW5kIGJyb3dzZSB0byBgaHR0cDovL2xvY2FsaG9zdDo3MjAyYCBmb3IgdGhlIGNsaWVudCBhbmQgYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9kZWJ1Zz9wb3J0LTU4NThgIHRvIGRlYnVnIHRoZSBzZXJ2ZXIuXG5cbiMjIyBTdGFnaW5nIEJ1aWxkXG5UaGUgc3RhZ2luZyBidWlsZCBpcyBhbiBvcHRpbWl6ZWQgYnVpbGQuIFR5cGUgYGd1bHAgc2VydmUtc3RhZ2VgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuVGhlIG9wdGltaXphdGlvbnMgYXJlIHBlcmZvcm1lZCBieSB0aGUgZ3VscCB0YXNrcyBhbmQgaW5jbHVkZSB0aGUgZm9sbG93aW5nIGxpc3QuIFNlZSB0aGUgYGd1bHBmaWxlLmpzYCBmb3IgZGV0YWlsc1xuXG4tIGpzaGludFxuLSBwcmVwYXJpbmcgQW5ndWxhcidzIHRlbXBsYXRlY2FjaGUgZm9yIGh0bWwgdGVtcGxhdGVzXG4tIGNvbmNhdCB0YXNrIHRvIGJ1bmRsZSBjc3MgYW5kIGpzLCBzZXBhcmF0ZWx5XG4tIEFuZ3VsYXIgZGVwZW5kZW5jeSBpbmplY3Rpb24gYW5ub3RhdGlvbnMgdXNpbmcgbmdBbm5vdGF0ZVxuLSB1Z2xpZnkgdG8gbWluaWZ5IGFuZCBtYW5nbGUgamF2YXNjcmlwdFxuLSBzb3VyY2UgbWFwc1xuLSBjc3MgYXV0b3ByZWZpeGVyIGZvciB2ZW5kb3IgcHJlZml4ZXNcbi0gbWluaWZ5IGNzc1xuLSBvcHRpbWl6ZSBpbWFnZXNcbi0gaW5kZXguaHRtbCBpbmplY3Rpb24gZm9yIHNjcmlwdHMgYW5kIGxpbmtzXG4tIGRlcGxveWluZyBhbGwganMsIGNzcywgaW1hZ2VzLCBmb250cywgYW5kIGluZGV4Lmh0bWxcblxuIyMgSG93IFRoZSBBcHAgV29ya3NcblRoZSBhcHAgaXMgcXVpdGUgc2ltcGxlIGFuZCBoYXMgMiBtYWluIHJvdXRlczpcbi0gZGFzaGJvYXJkXG4tIGF2ZW5nZXJzIGxpc3RcblxuIyMjIFRoZSBNb2R1bGVzXG5UaGUgYXBwIGhhcyA0IGZlYXR1cmUgbW9kdWxlcyBhbmQgZGVwZW5kcyBvbiBhIHNlcmllcyBvZiBleHRlcm5hbCBtb2R1bGVzIGFuZCBjdXN0b20gYnV0IGNyb3NzLWFwcCBtb2R1bGVzXG5cblx0YXBwIC0tPiBbXG5cdCAgICAgICAgYXBwLmF2ZW5nZXJzLFxuXHQgICAgICAgIGFwcC5kYXNoYm9hcmQsXG5cdCAgICAgICAgYXBwLmxheW91dCxcblx0ICAgICAgICBhcHAud2lkZ2V0cyxcblx0XHRcdGFwcC5jb3JlIC0tPiBbXG5cdFx0XHRcdG5nQW5pbWF0ZSxcblx0XHRcdFx0bmdSb3V0ZSxcblx0XHRcdFx0bmdTYW5pdGl6ZSxcblx0XHRcdFx0YmxvY2tzLmV4Y2VwdGlvbixcblx0XHRcdFx0YmxvY2tzLmxvZ2dlcixcblx0XHRcdFx0YmxvY2tzLnJvdXRlclxuXHRcdFx0XVxuXHQgICAgXVxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjFmNWNjMTg2LTM0ODItNGMzZS1iNTgzLWU2ODZkZmI3YzlkMyIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1ndWxwXG5Zb3UndmUgYnVpbHQgeW91ciBKYXZhU2NyaXB0IGFwcGxpY2F0aW9uIGJ1dCBob3cgZG8geW91IGF1dG9tYXRlIHRlc3RpbmcsIGNvZGUgYW5hbHlzaXMsIHJ1bm5pbmcgaXQgbG9jYWxseSBvciBkZXBsb3lpbmcgaXQ/IFRoZXNlIHJlZHVuZGFudCB0YXNrcyBjYW4gY29uc3VtZSB2YWx1YWJsZSB0aW1lIGFuZCByZXNvdXJjZXMuIFN0b3Agd29ya2luZyBzbyBoYXJkIGFuZCB0YWtlIGFkdmFudGFnZSBvZiBKYXZhU2NyaXB0IHRhc2sgYXV0b21hdGlvbiB1c2luZyBHdWxwIHRvIHN0cmVhbWxpbmUgdGhlc2UgdGFza3MgYW5kIGdpdmUgeW91IGJhY2sgbW9yZSB0aW1lIGluIHRoZSBkYXkuIFN0dWR5aW5nIHRoaXMgcmVwbyBjYW4gaGVscCBjbGFyaWZ5IGhvdyBHdWxwIHdvcmtzLCBqdW1wLXN0YXJ0IHRhc2sgYXV0b21hdGlvbiB3aXRoIEd1bHAsIGZpbmQgYW5kIHJlc29sdmUgaXNzdWVzIGZhc3RlciwgYW5kIGJlIGEgbW9yZSBwcm9kdWN0aXZlLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuLSBJbnN0YWxsIE5vZGVcblx0LSBvbiBPU1ggaW5zdGFsbCBbaG9tZSBicmV3XShodHRwOi8vYnJldy5zaC8pIGFuZCB0eXBlIGBicmV3IGluc3RhbGwgbm9kZWBcblx0LSBvbiBXaW5kb3dzIGluc3RhbGwgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBcbiAgICAtIFJlYWQgaGVyZSBmb3Igc29tZSBbdGlwcyBvbiBXaW5kb3dzXShodHRwOi8vanBhcGEubWUvd2lubm9kZSlcbiAgICAtIG9wZW4gY29tbWFuZCBwcm9tcHQgYXMgYWRtaW5pc3RyYXRvclxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzLmluc3RhbGxgXG4tIE9uIE9TWCB5b3UgY2FuIGFsbGV2aWF0ZSB0aGUgbmVlZCB0byBydW4gYXMgc3VkbyBieSBbZm9sbG93aW5nIHRoZXNlIGluc3RydWN0aW9uc10oaHR0cDovL2pwYXBhLm1lL25vbW9yZXN1ZG8pLiBJIGhpZ2hseSByZWNvbW1lbmQgdGhpcyBzdGVwIG9uIE9TWFxuLSBPcGVuIHRlcm1pbmFsXG4tIFR5cGUgYG5wbSBpbnN0YWxsIC1nIG5vZGUtaW5zcGVjdG9yIGJvd2VyIGd1bHBgXG5cbiMjIFF1aWNrIFN0YXJ0XG5QcmlvciB0byB0YWtpbmcgdGhlIGNvdXJzZSwgY2xvbmUgdGhpcyByZXBvIGFuZCBydW4gdGhlIGNvbnRlbnQgbG9jYWxseVxuYGBgYmFzaFxuJCBucG0gaW5zdGFsbFxuJCBib3dlciBpbnN0YWxsXG4kIG5wbSBzdGFydFxuYGBgXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImEyMDY4Y2JmLTFlZTYtNDBiZC05MDk0LTliZGUzYzNmZDM1NiIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1uZy10ZXN0aW5nXG5UQkQ6IFdoYXQgaXMgdGhpc1xuXG4jIyBJbnN0YWxsXG5cbiogY2xvbmUgZnJvbSBnaXRodWIgb3IgZG93bmxvYWQgaXRcbiogYG5wbSBpbnN0YWxsYFxuXG4jIyBSdW5cbiogbGF1bmNoIHNlcnZlciBpbiB0ZXJtaW5hbC9jb21tYW5kIHdpbmRvdzogYG5vZGUgc3JjL3NlcnZlci9hcHAuanNgXG4qIEZvciBhcHAsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi8+XG4qIEZvciBtaW5Nb2NoYS5odG1sLCBicm93c2UgdG86IDxodHRwOi8vbG9jYWxob3N0OjcyNzIvbWluTW9jaGEuaHRtbD5cbiogRm9yIHNwZWNzLmh0bWwsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi9zcGVjcy5odG1sPlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYmE1ZDIwYTYtOWJkMy00ZWI2LWJmMGMtYzVmMjU4YTU1MjNhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtYW5ndWxhci10eXBlc2NyaXB0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cDovL2NoYW5uZWw5Lm1zZG4uY29tL0V2ZW50cy9CdWlsZC8yMDE1LzMtNjgwKSBwcmVzZW50ZWQgYnkgRXJpY2ggR2FtbWEsIENocmlzIERpYXMgYW5kIEpvaG4gUGFwYS5cblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBJbnN0YWxsIFtOb2RlLmpzXShodHRwOi8vbm9kZWpzLm9yZykgXG4gLSBvbiBPU1ggdXNlIFtob21lYnJld10oaHR0cDovL2JyZXcuc2gpIGBicmV3IGluc3RhbGwgbm9kZWBcbiAtIG9uIFdpbmRvd3MgdXNlIFtjaG9jb2xhdGV5XShodHRwczovL2Nob2NvbGF0ZXkub3JnLykgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuXG4yLiBJbnN0YWxsIFllb21hbiBgbnBtIGluc3RhbGwgLWcgeW9gXG5cbjMuIEluc3RhbGwgdGhlc2UgTlBNIHBhY2thZ2VzIGdsb2JhbGx5XG5cbiAgICBgYGBiYXNoXG4gICAgbnBtIGluc3RhbGwgLWcgYm93ZXIgZ3VscCBub2RlbW9uXG4gICAgYGBgXG5cbiAgICA+UmVmZXIgdG8gdGhlc2UgW2luc3RydWN0aW9ucyBvbiBob3cgdG8gbm90IHJlcXVpcmUgc3Vkb10oaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9ndWlkZXMvYmxvYi9tYXN0ZXIvbnBtLWdsb2JhbC13aXRob3V0LXN1ZG8ubWQpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0MWM4MjkyZS1lNjc2LTQ1NTYtYmQwYS04ZmMyOWUwYWU1NDkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERTRNVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzYxZmY0ZTBkOTg2YTQ1OWM4NDE0YWVlYTZhZTBhNTcyMTE1Mzc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgcGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXNcblZTIENvZGUgc2FtcGxlcyBmb3IgUGx1cmFsc2lnaHQgY291cnNlIG9uIENvZGVcblxuRm9yIG1vc3Qgc2FtcGxlcyB5b3Ugd2lsbCBuZWVkIHRoZXNlIGdsb2JhbCBucG0gcGFja2FnZXMgdG8gYmUgaW5zdGFsbGVkLlxuXG5gYGBqYXZhc2NyaXB0XG5ucG0gaW5zdGFsbCBncnVudC1jbGkgZ3VscCBib3dlciB0eXBlc2NyaXB0IGJhYmVsIC1nXG5gYGBcblxuIyMgYXNwIHBsYXlcbkFTUC5ORVQgNSBzYW1wbGUgYXBwbGljYXRpb24uIENyZWF0ZWQgZnJvbSB0aGUgYXNwLm5ldCBnZW5lcmF0b3JcblxuRmlyc3QgbWFrZSBzdXJlIHlvdSBpbnN0YWxsIEFTUC5ORVQgNSBhbmQgRE5YXG5cbiMjIGFuZ3VsYXIyZml2ZW1pbnV0ZXNcbkFuZ3VsYXIgMiBzYW1wbGUgYXBwbGljYXRpb24uXG5cblJ1biBhIHN0YXRpYyBzZXJ2ZXIgaW4gdGhlIHJvb3RcblxuYGBgamF2YXNjcmlwdFxuY2QgYW5ndWxhcjJmaXZlbWludXRlc1xuc3NcbmBgYFxuXG4jIyBjb2RlIHBsYXlcbkphdmFTY3JpcHQgKEVTNSkgc2FtcGxlIGFwcGxpY2F0aW9uLiBDcmVhdGVkIGZyb20gdGhlIEhvdCBUb3dlbCBnZW5lcmF0b3IuXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBjb2RlcGxheVxubnBtIGluc3RhbGxcbmJvd2VyIGluc3RhbGxcbmBgYFxuXG5UbyBydW4gaXRcblxuYGBgamF2YXNjcmlwdFxuZ3VscCBzZXJ2ZS1kZXZcbmBgYFxuXG4jIyBlczYgcGxheVxuSmF2YVNjcmlwdCAoRVM2KSBzYW1wbGUgYXBwbGljYXRpb24uXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBlczZwbGF5XG5ucG0gaW5zdGFsbFxuYm93ZXIgaW5zdGFsbFxuYGBgXG5cblRvIHJ1biBpdFxuXG5gYGBqYXZhc2NyaXB0XG5ndWxwIHNlcnZlLWRldlxuYGBgXG5cbiMjIGdydW50cHJvamVjdFxuR3J1bnQgZmlsZSBzYW1wbGUgYXBwbGljYXRpb24uXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBncnVudHByb2plY3Rcbm5wbSBpbnN0YWxsXG5gYGBcblxuVG8gcnVuIGl0XG5cbmBgYGphdmFzY3JpcHRcbmdydW50IGdydW50LWhpbnRcbmBgYFxuXG4jIyB0cyBwbGF5XG5UeXBlU2NyaXB0IHNhbXBsZSBhcHBsaWNhdGlvbi5cblxuR2V0IGFsbCBjb2RlXG5cbmBgYGphdmFzY3JpcHRcbmNkIHRzcGxheVxubnBtIGluc3RhbGxcbmJvd2VyIGluc3RhbGxcbmBgYFxuXG5UbyBydW4gaXRcblxuYGBgamF2YXNjcmlwdFxuZ3VscCBzZXJ2ZS1kZXZcbmBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIxZTVkMzM0Yi01MjMxLTRkYmQtYWRmMC0wMGI3M2FlOWFmMmMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1UY3pOakV6T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci10b3VyLW9mLWhlcm9lcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJjNjU5Njc3MTBlOGIxYjg3YzBlNmE0ZjE5ZWVhMmI1ZjU0ZTdjNTBlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBHZXR0aW5nIFN0YXJ0ZWRcblxuU3VwZXIgc2ltcGxlIEFuZ3VsYXIgYXBwIHdpdGggMSBtb2R1bGUgYW5kIDIgcm91dGVzLiBUaGlzIGlzIGEgbWlub3IgdmFyaWF0aW9uIG9uIHRoZSBUb3VyIG9mIEhlcm9lcyBJIHdyb3RlIGZvciB0aGUgW29mZmljaWFsIGRvY3NdKGh0dHBzOi8vYW5ndWxhci5pby90dXRvcmlhbCkuXG5cbiMjIEdldCB0aGUgQ29kZVxuYGBgXG5naXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItdG91ci1vZi1oZXJvZXMuZ2l0IHRvaFxuY2QgdG9oXG5ucG0gaVxuYGBgXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5CZWZvcmUgcnVubmluZyB0aGUgdGVzdHMgbWFrZSBzdXJlIHlvdSBhcmUgc2VydmluZyB0aGUgYXBwIHZpYSBgbmcgc2VydmVgLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiAxLjIuMC5cblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZmE5Mjc4NTYtMDc5MC00MzA0LTgxNTItYjU5ZWIzYzk2NDI0Igp9ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJob3R0b3dlbC1hbmd1bGFyLXR5cGVzY3JpcHQiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbTo4MC9FdmVudHMvQnVpbGQvMjAxNS8zLTY4MD9XVC5tY19pZD1ob3R0b3dlbGFuZ3VsYXJ0eXBlc2NyaXB0LWdpdGh1Yi1qb3BhcGEpIHByZXNlbnRlZCBieSBFcmljaCBHYW1tYSwgQ2hyaXMgRGlhcyBhbmQgSm9obiBQYXBhLlxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEluc3RhbGwgW05vZGUuanNdKGh0dHA6Ly9ub2RlanMub3JnKSBcbiAtIG9uIE9TWCB1c2UgW2hvbWVicmV3XShodHRwOi8vYnJldy5zaCkgYGJyZXcgaW5zdGFsbCBub2RlYFxuIC0gb24gV2luZG93cyB1c2UgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBgY2hvY28gaW5zdGFsbCBub2RlanNgXG5cbjIuIEluc3RhbGwgWWVvbWFuIGBucG0gaW5zdGFsbCAtZyB5b2BcblxuMy4gSW5zdGFsbCB0aGVzZSBOUE0gcGFja2FnZXMgZ2xvYmFsbHlcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaW5zdGFsbCAtZyBib3dlciBndWxwIG5vZGVtb25cbiAgICBgYGBcblxuICAgID5SZWZlciB0byB0aGVzZSBbaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBub3QgcmVxdWlyZSBzdWRvXShodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2d1aWRlcy9ibG9iL21hc3Rlci9ucG0tZ2xvYmFsLXdpdGhvdXQtc3Vkby5tZClcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1NGViZTU4My0yM2ZmLTQzZDctYjExYS01OWQxYmY1OTQ0NTIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9UTXdPRGM1Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci0yLWZpcnN0LWxvb2stbGF1bmNoZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTYzNzVhY2U4N2UwN2M5ZWFlNTBkMjNkMzFhMWZlZDI1MDVmZDk0ZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgYW5ndWxhcjItZmlyc3QtbG9vay1sYXVuZ2hlclxuXG4jIyBUSEVSRSBCRSBEUkFHT05TIEhFUkVcblxuVGhpcyBpcyB0aGUgY29kZSBmb3IgdGhlIG9yaWdpbmFsIEFuZ3VsYXIgMiBGaXJzdCBMb29rIGNvdXJzZSwgd3JpdHRlbiB3aXRoIHRoZSBBbmd1bGFyIDIgYmV0YXMuIEl0IGlzIG5vdyAqKmRlcHJlY2F0ZWQqKiBhbmQgcmVwbGFjZWQuXG5cbldpdGggd2hhdD8gIEdsYWQgeW91IGFza2VkLiBIZXJlIGlzIHdoZXJlIHlvdSBwcm9iYWJseSB3YW50IHRvIGdvIDopIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyMi1maXJzdC1sb29rXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImJmMDljOWQ4LWU3N2ItNDBjNi1hNmRhLTdjMDYwZWMxZjllNCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5UazFOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3RhcndhcnMtaW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI3ZWJjZjEwMDdmZTZjOTJmNzRmNGI3N2VmYmZmMjhkMGJiMGQzMzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHN0YXJ3YXJzLWlvc1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYTM5MzBjMzEtZGM1Zi00M2UxLThhYmItMjI0ODQwMDM3MzVjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qY3lNall6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhcldvcmtzaG9wTGFicyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0M2ZlYTVjMDM4NWU4NjQwZjliMWE1ZTE0ZjU1NGQzOTNmY2NhZjgxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIGFuZCBUeXBlU2NyaXB0IFdvcmtzaG9wIExhYnNcblxuVGhlc2UgbGFicyBhcmUgdXNlZCBpbiB3b3Jrc2hvcHMgSSBjb25kdWN0IGF0IHZhcmlvdXMgY29uZmVyZW5jZXMuXG5cbkNvcHlyaWdodCAyMDE4IFdhaGxpbiBDb25zdWx0aW5nIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYzJiNjM1ZjAtYjcyZS00OWJmLWI2MzUtMzE4YTEzMjZlNzk4Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01EWTFOakExTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWhvc3RlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1Yzc5MzZhY2MzOWI1MGFiMTFjNGY2YmE5ZjcyYjQ1ZDIwOWE2NTE0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyRmlyc3RMb29rSG9zdGVkXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiA2LjAuNy5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC0tcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjE1MjA3YzgwLTZjZjMtNDEwMy1iY2U0LWE3MWVmOWZhY2I5ZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBFdmVudFZpZXdDbGlcblxuQW5ndWxhciBEZW1vIHdpdGggYSBMaXR0bGUgYml0IG9mIGEgbG90IG9mIGZlYXR1cmVzXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5wbSBydW4gc3RhcnQtbmdgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQzMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIFJlc291cmNlc1xuXG4tIEdldCBbVlMgQ29kZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vP3d0Lm1jX2lkPWFuZ3VsYXJldmVudHZpZXdjbGktZ2l0aHViLWpvcGFwYSlcbi0gR2V0IHRoZSBWUyBDb2RlIFtBbmd1bGFyIEVzc2VudGlhbHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyLWVzc2VudGlhbHMmd3QubWNfaWQ9YW5ndWxhcmV2ZW50dmlld2NsaS1naXRodWItam9wYXBhKVxuLSBHZXQgdGhlIFZTIENvZGUgW0FuZ3VsYXIgU25pcHBldHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyMiZ3dC5tY19pZD1hbmd1bGFyZXZlbnR2aWV3Y2xpLWdpdGh1Yi1qb3BhcGEpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjN2M2NDRmMC1lMmNhLTRkNTAtODM2Yi02ZTkxZmZjMDQ3MzMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvKVxuXG5bVHJ5IEF6dXJlIEZ1bmN0aW9ucyBQbGF5Z3JvdW5kXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vdHJ5L2FwcC1zZXJ2aWNlL2Z1bmN0aW9ucy8pXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI0NGE3NjgyYy0yMTEwLTRjM2UtODQ2Yi0zNDAyMGM2ZDdjMWEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWF6dXJlLWZ1bmN0aW9ucy10b29scyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgaW5zdGVhZC5cblxuIyMgRmVhdHVyZXNcblRoaXMgZXh0ZW5zaW9uIGZvciBWaXN1YWwgU3R1ZGlvIENvZGUgaW5jbHVkZXM6XG5cbi0gSlNPTiBJbnRlbGxpc2Vuc2UgZm9yIGBob3N0Lmpzb25gLCBgZnVuY3Rpb24uanNvbmAgYW5kIGBwcm94aWVzLmpzb25gXG4tIFNuaXBwZXRzIGZvciBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0IGZ1bmN0aW9uc1xuXG4+IFdlJ2xsIGFkZCBvdGhlciBmZWF0dXJlcyBpbiBmdXR1cmUgdmVyc2lvbnNcblxuYGBgamF2YXNjcmlwdFxuLy8gSmF2YVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgSmF2YVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuYGBgamF2YXNjcmlwdFxuLy8gVHlwZVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgVHlwZVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuIyMjIEpTT04gU2NoZW1hIEludGVsbGlzZW5zZVxuIVtKU09OIFNjaGVtYV0oaW1hZ2VzL2pzb24tc2NoZW1hLWZ1bmN0aW9uLmdpZilcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChtYWNPUykgdG8gYWN0aXZhdGUgaW50ZWxsaXNlbnNlIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjExLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChtYWNPUylcbjQuIFNlbGVjdCBgSW5zdGFsbCBFeHRlbnNpb25gXG41LiBDaG9vc2UgdGhlIGV4dGVuc2lvblxuNi4gUmVsb2FkIFZpc3VhbCBTdHVkaW8gQ29kZVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNWZiMWQ3YTItZWNjZi00NDQ1LWEyM2UtYjI1OTc2YTE4ODZjIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56QXdORE00TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NmJmOWE1OTkwYTI4NGYzOWZhOTI3NTA4YjZjYWZhMzQ3MGY3YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBPbmUgV2l0aCBBbmd1bGFyXG5cbkZpbmQgdGhlIFtBenVyZSBGdW5jdGlvbnMgU2VydmVybGVzcyBBUEkgZm9yIHRoaXMgYXBwIGxvY2F0ZWQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXItYXBpKS5cblxuYGBgYmFzaFxuZ2l0IGNsb25lIGdpdEBnaXRodWIuY29tOmpvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXIuZ2l0IG9uZVxuY2Qgb25lXG5ucG0gaW5zdGFsbFxuYGBgXG5cbkRpc2NhcmQgdGhlIGAuZ2l0YCBmb2xkZXJcblxuYGBgYmFzaFxucm0gLXJmIC5naXQgICMgT1MvWCAoYmFzaClcbnJkIC5naXQgL1MvUSAjIHdpbmRvd3NcbmBgYFxuXG4jIyBEb2NrZXJcblxuLSBJbnN0YWxsIGFuZCBydW4gW0RvY2tlcl0oaHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9jb21tdW5pdHktZWRpdGlvbilcblxuIyMjIERvY2tlciBDb21wb3NlXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIHVwIC1kIC0tYnVpbGRcbm9wZW4gaHR0cDovL2xvY2FsaG9zdDo0MjAwXG5gYGBcblxuIyMjIERvY2tlciBDb21wb3NlIHdpdGggRGVidWdnaW5nXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIC1mIGRvY2tlci1jb21wb3NlLmRlYnVnLnltbCB1cCAtZCAtLWJ1aWxkXG5vcGVuIGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMFxuYGBgXG5cbk9wZW4gVlMgQ29kZSwgbGF1bmNoIHRoZSBgRG9ja2VyOiBBdHRhY2ggdG8gTm9kZWAgZGVidWdnaW5nIHByb2ZpbGVcblxuIyMjIERvY2tlciBSdW5cblxuYGBgYmFzaFxuZG9ja2VySW1hZ2U9b25lLXdpdGgtYW5ndWxhclxucG9ydD00MjAwXG5cbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAkcG9ydDozMDAwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmZDUzY2VjNy04NzA2LTRiYWQtYTg0Ny1hZjg1YTg5NzYwMzciCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJvbmUtd2l0aC1hbmd1bGFyLWFwaSIsCiAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvP1dULm1jX2lkPW9uZXdpdGhhbmd1bGFyYXBpLWdpdGh1Yi1qb3BhcGEpXG5cbltUcnkgQXp1cmUgRnVuY3Rpb25zIFBsYXlncm91bmRdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS90cnkvYXBwLXNlcnZpY2UvZnVuY3Rpb25zLz9XVC5tY19pZD1vbmV3aXRoYW5ndWxhcmFwaS1naXRodWItam9wYXBhKVxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjQ3Mjg4N2ZkLTc0MjktNDE4NS04ODJiLTljMTBmZDM2NDYzNCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBQUk9KRUNUIE5BTUVcblxuLi4uXG5cbiMjIFRhYmxlIE9mIENvbnRlbnRzXG5cbi0gW0ZlYXR1cmVzXSgjZmVhdHVyZXMpXG4tIFtRdWlja1N0YXJ0XSgjcXVpY2tzdGFydClcbi0gW1JlcXVpcmVtZW50c10oI3JlcXVpcmVtZW50cylcbi0gW0luc3RhbGxhdGlvbl0oI2luc3RhbGxhdGlvbilcbi0gW0RlbW9dKCNkZW1vKVxuXG4jIyBGZWF0dXJlc1xuXG5UaGlzIHByb2plY3QgZnJhbWV3b3JrIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXM6XG5cbiMjIFF1aWNrU3RhcnRcblxuMS5cbjIuXG4zLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuKGlkZWFsbHkgdmVyeSBzaG9ydCwgaWYgYW55KVxuXG4tXG5cbiMjIEluc3RhbGxhdGlvblxuXG4oaWRlYWxseSB2ZXJ5IHNob3J0KVxuXG4tXG5cbiMjIERlbW9cblxuQSBkZW1vIGFwcCBpcyBpbmNsdWRlZCB0byBzaG93IGhvdyB0byB1c2UgdGhlIHByb2plY3QuXG5cblRvIHJ1biB0aGUgZGVtbywgZm9sbG93IHRoZXNlIHN0ZXBzOlxuXG4jIyBSZXNvdXJjZXNcblxuLVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYTBlMThmZmUtNDEyZi00OThlLTk5ZmMtMDc3NGJkYWVjMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEV4cGlyZVxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS4wLjEuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5CZWZvcmUgcnVubmluZyB0aGUgdGVzdHMgbWFrZSBzdXJlIHlvdSBhcmUgc2VydmluZyB0aGUgYXBwIHZpYSBgbmcgc2VydmVgLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMGMwMDMwMC02MTM5LTQyYzgtOGU3Yy00ODUwYmY3OGVjYmEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3Rhci13YXJzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaSlcblxuTG9naW5cblxuYGBgYmFzaFxuYXogbG9naW5cbmBgYFxuXG5DcmVhdGUgYSBwbGFjZSB0byBsb2dpY2FsbHV5IHN0b3JlIGV2ZXJ5dGhpbmcgKHJlc291cmNlIGdyb3VwKVxuXG5gYGBiYXNoXG5heiBncm91cCBjcmVhdGUgLW4gUGFwYVN0YXJXYXJzQXBpR3JvdXAgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBzdG9yYWdlIHJlc291cmNlIGZvciB0aGUgRnVuY3Rpb24gQXBwXG5cbmBgYGJhc2hcbmF6IHN0b3JhZ2UgYWNjb3VudCBjcmVhdGUgLW4gcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtZyBQYXBhU3RhcldhcnNBcGlHcm91cCAtLXNrdSBTdGFuZGFyZF9MUlMgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogZnVuY3Rpb25hcHAgY3JlYXRlIC1uIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC1zIHBhcGFzdGFyd2Fyc2FwaXN0b3JhZ2UgLWMgZWFzdHVzXG5gYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImM5YTRiNGIyLTEyMjktNDRiOC05NGNlLTU2M2EyMWM0NDliNCIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJ2c2NvZGUtYXp1cmUtZnVuY3Rpb25zLXRvb2xzIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucyZXVC5tY19pZD12c2NvZGVhenVyZWZ1bmN0aW9uc3Rvb2xzLWdpdGh1Yi1qb3BhcGEpIGluc3RlYWQuXG5cbiMjIEZlYXR1cmVzXG5UaGlzIGV4dGVuc2lvbiBmb3IgVmlzdWFsIFN0dWRpbyBDb2RlIGluY2x1ZGVzOlxuXG4tIEpTT04gSW50ZWxsaXNlbnNlIGZvciBgaG9zdC5qc29uYCwgYGZ1bmN0aW9uLmpzb25gIGFuZCBgcHJveGllcy5qc29uYFxuLSBTbmlwcGV0cyBmb3IgSmF2YVNjcmlwdCBhbmQgVHlwZVNjcmlwdCBmdW5jdGlvbnNcblxuPiBXZSdsbCBhZGQgb3RoZXIgZmVhdHVyZXMgaW4gZnV0dXJlIHZlcnNpb25zXG5cbmBgYGphdmFzY3JpcHRcbi8vIEphdmFTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIEphdmFTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbmBgYGphdmFzY3JpcHRcbi8vIFR5cGVTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIFR5cGVTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbiMjIyBKU09OIFNjaGVtYSBJbnRlbGxpc2Vuc2VcbiFbSlNPTiBTY2hlbWFdKGltYWdlcy9qc29uLXNjaGVtYS1mdW5jdGlvbi5naWYpXG5cbkFsdGVybmF0aXZlbHksIHByZXNzIGBDdHJsYCtgU3BhY2VgIChXaW5kb3dzLCBMaW51eCkgb3IgYENtZGArYFNwYWNlYCAobWFjT1MpIHRvIGFjdGl2YXRlIGludGVsbGlzZW5zZSBmcm9tIHdpdGhpbiB0aGUgZWRpdG9yLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuMS4gSW5zdGFsbCBWaXN1YWwgU3R1ZGlvIENvZGUgMS4xMS4wIG9yIGhpZ2hlclxuMi4gTGF1bmNoIENvZGVcbjMuIEZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBgQ3RybGAtYFNoaWZ0YC1gUGAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYC1gU2hpZnRgLWBQYCAobWFjT1MpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb25cbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1MmE3YzAwZi0wZTUyLTQxMjYtYmZmZS0zZWRkOWQ4ZDE0NWMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBWUyBDb2RlIEV4dGVuc2lvbiBmb3IgUFdBIFRvb2xpbmdcblZTIENvZGUgRXh0ZW5zaW9uIGZvciBQV0EgVG9vbHNcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHNuaXBwZXRzIGFuZCBKU09OIHNjaGVtYSBmb3IgYSBgbWFuaWZlc3QuanNvbmAgZm9yIGNyZWF0aW5nIFByb2dyZXNzaXZlIFdlYiBBcHBzIChQV0EpLlxuXG4qKlRISVMgSVMgQU4gQUxQSEEgVkVSU0lPTioqXG5cbiFbVXNlIEV4dGVuc2lvbl0oaW1hZ2VzL2luamVjdC1wcmVjYWNoZS5naWYpXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzXG5cbiMjIFVzYWdlXG5UeXBlIHBhcnQgb2YgYSBzbmlwcGV0LCBwcmVzcyBgZW50ZXJgLCBhbmQgdGhlIHNuaXBwZXQgdW5mb2xkcy5cblxuIyMjIEphdmFTY3JpcHQgLyBUeXBlU2NyaXB0IFNuaXBwZXRzXG5gYGBqYXZhc2NyaXB0XG5wd2EtY3VzdG9tLXNlcnZpY2Utd29ya2VyICAgICAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB3b3JrZXIgZmlsZSB3aGljaCBjYW4gYmUgZXh0ZW5kZWRcbnB3YS1yZWdpc3RlciAgICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiB0aGF0IHJlZ2lzdGVycyB0aGUgc2VydmljZSB3b3JrZXJcbmBgYFxuXG4jIyMgSmF2YVNjcmlwdCBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxuLy8gSGVscGZ1bCBmb3IgYnVpbGQgcHJvY2Vzc2VzIHRoYXQgZ2VuZXJhdGUgc2VydmljZSB3b3JrZXIgY29kZVxucHdhLWluamVjdC1wcmVjYWNoZSAgICAgICAgICAgICAgIC8vIGluamVjdCBwcmVjYWNoZSBsaXN0IGludG8gc2VydmljZSB3b3JrZXJcbnB3YS1nZW5lcmF0ZS1zZXJ2aWNlLXdvcmtlciAgICAgICAvLyBnZW5lcmF0ZSBhIHNlcnZpY2Ugd29ya2VyIHdpdGggYSBwcmVjYWNoZSBtYW5pZmVzdFxuXG4vLyBFdmVudCBsaXN0ZW5lcnNcbnB3YS1ldmVudC1wdXNoICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgcHVzaFxucHdhLWV2ZW50LXN5bmMgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBzeW5jXG5wd2EtZXZlbnQtbm90aWZpY2F0aW9uY2xpY2sgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIG5vdGlmaWNhdGlvbmNsaWNrXG5wd2EtZXZlbnQtcHVzaHN1YnNjcmlwdGlvbmNoYW5nZSAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIHB1c2hzdWJzY3JpcHRpb25jaGFuZ2VcbnB3YS1ldmVudC1sb2FkICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgbG9hZFxucHdhLWV2ZW50LWFjdGl2YXRlICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBhY3RpdmF0ZVxucHdhLWV2ZW50LWluc3RhbGwgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBpbnN0YWxsXG5wd2EtZXZlbnQtZmV0Y2ggICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIGZldGNoXG5gYGBcblxuIyMjIEhUTUwgU25pcHBldHNcbmBgYGphdmFzY3JpcHRcbnB3YS1tYW5pZmVzdC1saW5rICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGhlIGxpbmsgdG8gdGhlIG1hbmlmZXN0Lmpzb25cbnB3YS1hcHBsZS1tb2JpbGUtd2ViLWNhcGFibGUgICAgICAvLyBhZGQgdGhlIG1ldGEgdGFnIGZvciBhcHBsZSBtb2JpbGUgd2ViIGNhcGFibGVcbmBgYFxuXG4jIyMgSlNPTiBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxucHdhLW1hbmlmZXN0ICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgY29udGVudHMgb2YgYG1hbmlmZXN0Lmpzb25gXG5gYGBcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChPU1gpIHRvIGFjdGl2YXRlIHNuaXBwZXRzIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjEwLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChPU1gpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb24gYFBXQS1Ub29sc2BcbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcblxuIyMgVHJ5IGl0IE91dFxuXG5MZXQncyB0YWtlIGEgUFdBIGZvciBhIHNwaW4uIFVzaW5nIHRoZSBBbmd1bGFyIENMSSwgbGV0J3MgZ2VuZXJhdGUgYSBuZXcgYXBwIGFuZCBhZGQgUFdBIGZlYXR1cmVzLlxuXG5CZWZvcmUgd2UgYmVnaW4sIGluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJIGFuZCBsaXRlLXNlcnZlciwgaWYgeW91IGhhdmVuJ3QgYWxyZWFkeSBkb25lIHNvLCBieSBydW5uaW5nIGBucG0gaSBAYW5ndWxhci9jbGkgbGl0ZS1zZXJ2ZXIgLWdgXG5cbjEuIENyZWF0ZSBhbiBBbmd1bGFyIGFwcCB3aXRoIGBuZyBuZXcgbXktYXBwIC0tcm91dGluZ2AgYW5kIG9wZW4gdGhlIGFwcCBpbiBWUyBDb2RlXG4xLiBDcmVhdGUgYHNyYy9tYW5pZmVzdC5qc29uYFxuMS4gVXNlIHRoZSBgcHdhLW1hbmlmZXN0YCBzbmlwcGV0XG4xLiBPcGVuIGBzcmMvaW5kZXguaHRtbGAgYW5kIHVzZSB0aGUgYHB3YS1tYW5pZmVzdC1saW5rYCBzbmlwcGV0IChpbiB0aGUgPGhlYWQ+PC9oZWFkPiBlbGVtZW50KVxuMS4gVXNlIHRoZSBwd2EtYXBwbGUtbW9iaWxlLXdlYi1jYXBhYmxlIHNuaXBwZXQgKGluIHRoZSA8aGVhZD48L2hlYWQ+IGVsZW1lbnQpXG4xLiBDcmVhdGUgYGdlbmVyYXRlLXN3LmpzYFxuMS4gUnVuIGBjZCBteS1hcHBgIGFuZCB0aGVuIGBucG0gaSB3b3JrYm94LWJ1aWxkYCAoYWRkIC0tc2F2ZSBpZiB5b3UncmUgdXNpbmcgbnBtIDwgNS54KVxuMS4gVXNlIHRoZSBwd2EtZ2VuZXJhdGUtc2VydmljZS13b3JrZXIgaW4gYGdlbmVyYXRlLXN3LmpzYFxuMS4gQWRkIFwibWFuaWZlc3QuanNvblwiIHRvIHRoZSBgYXBwc1swXS5hc3NldHNgIGFycmF5IGluIGAuYW5ndWxhci1jbGkuanNvbmBcbjEuIE9wZW4gYHNyYy9hcHAvbWFpbi50c2AgYW5kIHJ1biBgcHdhLXJlZ2lzdGVyYCBhdCB0aGUgYm90dG9tXG4xLiBDYWxsIGAudGhlbigoKSA9PiByZWdpc3RlclNlcnZpY2VXb3JrZXIoKSk7YCBhZnRlciBib290c3RyYXBwaW5nXG4xLiBSdW4gYG5nIGJ1aWxkIC0tcHJvZCAmJiBub2RlIGdlbmVyYXRlLXN3LmpzICYmIGNkIGRpc3QgJiYgbGl0ZS1zZXJ2ZXJgXG5cbioqTm93IHRlc3QgaXQhKipcblxuWW91ciBhcHAgc2hvdWxkIGJlIHJ1bm5pbmcgaW4gdGhlIGJyb3dzZXIuIE9wZW4gdGhlIGRldmVsb3BlciB0b29scywgZ28gdG8gdGhlIGBBcHBsaWNhdGlvbmAgdGFiLCBhbmQgc2VsZWN0IGBTZXJ2aWNlIFdvcmtlcnNgLiBJbnNwZWN0IHRoZSBzZXJ2aWNlIHdvcmtlciwgYW5kIHRyeSB0byBnbyBvZmZsaW5lIGFuZCByZWZyZXNoLlxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2NDEyZTM5Ni04ZTgxLTQ0YTEtYTU0Yi05NzA1NWEyMjRmMDgiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJzdGFyLXdhcnMtYXBpIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaT9XVC5tY19pZD1zdGFyd2Fyc2FwaS1naXRodWItam9wYXBhKVxuXG5Mb2dpblxuXG5gYGBiYXNoXG5heiBsb2dpblxuYGBgXG5cbkNyZWF0ZSBhIHBsYWNlIHRvIGxvZ2ljYWxsdXkgc3RvcmUgZXZlcnl0aGluZyAocmVzb3VyY2UgZ3JvdXApXG5cbmBgYGJhc2hcbmF6IGdyb3VwIGNyZWF0ZSAtbiBQYXBhU3RhcldhcnNBcGlHcm91cCAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogc3RvcmFnZSBhY2NvdW50IGNyZWF0ZSAtbiBwYXBhc3RhcndhcnNhcGlzdG9yYWdlIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC0tc2t1IFN0YW5kYXJkX0xSUyAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIEZ1bmN0aW9uIEFwcFxuXG5gYGBiYXNoXG5heiBmdW5jdGlvbmFwcCBjcmVhdGUgLW4gLWcgUGFwYVN0YXJXYXJzQXBpR3JvdXAgLXMgcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtYyBlYXN0dXNcbmBgYFxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjA4MWNhOWNlLTUwNmUtNDA4MS1iODQ3LTRjYzdhZGJiOGVjMSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5ieSBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vam9obl9wYXBhKVxuXG5Zb3UgY2FuIFt3YXRjaCBtZSBidWlsZCB0aGUgYXBwIGFzIHBhcnQgb2YgbXkgc2VyaWVzIGhlcmVdKGh0dHBzOi8vam9obnBhcGEubmV0L2FuZ3VsYXItY29zbW9zZGItMS8pXG5cbllvdSBjYW4gW3ZpZXcgYWxsIHZpZGVvcyB0b2dldGhlciBoZXJlXSgvVklERU9TLm1kKVxuXG5bTGVhcm4gbW9yZSBhYm91dCBkZXZlbG9waW5nIE5vZGUuanMgYXBwcyB3aXRoIEF6dXJlJ3MgY2xvdWQgc2VydmljZXMgaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbm9kZWpzL2F6dXJlKVxuXG4jIyBEb2NrZXJcblxuQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlckltYWdlPWFuZ3VsYXItY29zbW9zZGJcbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAzMDAwOjgwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIFJlcXVpcmVtZW50c1xuXG4xLiBJbnN0YWxsIHRoZSBBbmd1bGFyIENMSVxuXG4gICAgYGBgYmFzaFxuICAgIG5wbSBpbnN0YWxsIC1nIEBhbmd1bGFyL2NsaVxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBbQXp1cmUgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9jbGkvYXp1cmUvaW5zdGFsbC1henVyZS1jbGkpXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnlcblxuICAgIGBgYGJhc2hcbiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIuZ2l0XG4gICAgY2QgYW5ndWxhci1jb3Ntb3NkYlxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBucG0gcGFja2FnZXNcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaVxuICAgIGBgYFxuXG4xLiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgZXhhbXBsZS1lbnZpcm9ubWVudC5qc2AgZmlsZSB0byBgZW52aXJvbm1lbnQuanNgIGluIHRoZSBgc2VydmVyL2Vudi9gIGZvbGRlciBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUga2V5LCBhbmQgcG9ydCB3aXRoIHlvdXIgc3BlY2lmaWMgY29uZmlndXJhdGlvbi5cblxuICAgIGBgYGphdmFzY3JpcHRcbiAgICAvLyBzZXJ2ZXIvZW52L2Vudmlyb25tZW50LmpzXG4gICAgY29uc3QgY29zbW9zUG9ydCA9IDEyMzQ7IC8vIHJlcGxhY2Ugd2l0aCB5b3VyIHBvcnRcbiAgICBjb25zdCBkYk5hbWUgPSAneW91ci1jb3Ntb3MtZGItbmFtZS1nb2VzLWhlcmUnO1xuICAgIGNvbnN0IGtleSA9ICd5b3VyLWtleS1nb2VzLWhlcmUnO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBjb3Ntb3NQb3J0LFxuICAgICAgZGJOYW1lLFxuICAgICAga2V5XG4gICAgfTtcbiAgICBgYGBcblxuIyMgUnVubmluZyB0aGUgYXBwXG5cbjEuIEJ1aWxkIHRoZSBBbmd1bGFyIGFwcFxuXG4gICAgYGBgYmFzaFxuICAgIG5nIGJ1aWxkXG4gICAgYGBgXG5cbjEuIExhdW5jaCB0aGUgc2VydmVyXG5cbiAgICBgYGBiYXNoXG4gICAgbm9kZSBzcmMvc2VydmVyL2luZGV4LmpzXG4gICAgYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gaHR0cDovL2xvY2FsaG9zdDozMDAwXG5cbiMjIFByb2JsZW1zIG9yIFN1Z2dlc3Rpb25zXG5cbltPcGVuIGFuIGlzc3VlIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyLWNvc21vcy9pc3N1ZXMpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1YmI4ZjcyMy1hNzZiLTRkMGUtOWVlMi0xNzc2YzgzYWIxZDYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ERTNOakUwTWpNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZG9ja2VyLWFuZ3VsYXItY2xpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjBhNTU2Y2UyY2I4MmY0MTY2NWVhNzg3ZGJkYTc2OGIxYjIyY2QwZDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIERvY2tlcmZpbGUgd2l0aCBBbmd1bGFyIENMSVxuXG5Ob2RlIDguMTIgKyBBbmd1bGFyIENMSSA2LjIuMCtcblxuRmluZCBbdGhlIGltYWdlIGhlcmVdKGh0dHBzOi8vaHViLmRvY2tlci5jb20vci9qb2hucGFwYS9hbmd1bGFyLWNsaS8pXG5cblB1bGxpbmcgdGhlIGltYWdlXG5cbmBgYGJhc2hcbmRvY2tlciBwdWxsIGpvaG5wYXBhL2FuZ3VsYXItY2xpXG5gYGBcblxuVXNpbmcgdGhlIGltYWdlIGluIGEgYERvY2tlcmZpbGVgXG5cbmBgYGJhc2hcbkZST00gam9obnBhcGEvYW5ndWxhci1jbGlcbmBgYFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNjJlZjc0MTItM2NmNy00ZWNlLTljM2MtYjE2MDI1MjExMzIxIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU9UUTFNemsyTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYWdncmVnYXRvci1hcHAiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMzAxOTI1OGVlMmIxZWRhZmY4YjNhOWRlNzgzMmE1OGU4MDcxNmIyNCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgYWdncmVnYXRvciBhcHBcblxuYGBgYmFzaFxuYXogbG9naW5cbmBgYFxuXG5DcmVhdGUgYSBwbGFjZSB0byBsb2dpY2FsbHkgc3RvcmUgZXZlcnl0aGluZyAocmVzb3VyY2UgZ3JvdXApXG5cbmBgYGJhc2hcbmF6IGdyb3VwIGNyZWF0ZSAtbiBQYXBhU3RhcldhcnNBcGlHcm91cCAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogc3RvcmFnZSBhY2NvdW50IGNyZWF0ZSAtbiBwYXBhc3RhcndhcnNhcGlzdG9yYWdlIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC0tc2t1IFN0YW5kYXJkX0xSUyAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIEZ1bmN0aW9uIEFwcFxuXG5gYGBiYXNoXG5heiBmdW5jdGlvbmFwcCBjcmVhdGUgLW4gLWcgUGFwYVN0YXJXYXJzQXBpR3JvdXAgLXMgcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtYyBlYXN0dXNcbmBgYFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiMGViNjNiZGEtNGFiMy00Y2IyLWI3MzQtZTNiMDQxMDRiMjBlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFdpbnRlciBpcyBDb21pbmdcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHRoZW1lcyB0aXRsZWQgXCJXaW50ZXIgaXMgQ29taW5nXCIuIFRoZXJlIGFyZSBkYXJrLCBkYXJrIHdpdGggbm8gaXRhbGljcywgYW5kIGxpZ2h0IHRoZW1lcy5cblxuPiBJIHBlcnNvbmFsbHkgdXNlIHRoZSBkYXJrIHRoZW1lcyBmb3IgbW9zdCBvY2Nhc2lvbnMsIGJ1dCBmaW5kIHRoZSBsaWdodCB0aGVtZSBnb29kIG9uIHNvbWUgZGltbWVyIHByb2plY3RvcnMgd2hlbiBJIHByZXNlbnQuXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzLlxuXG5UaGUgdGhlbWVzIGFsc28gc3VwcG9ydCBhbiBpdGFsaWNpemVkIHZlcnNpb24sIHdpdGggZm9udHMgdGhhdCBzdXBwb3J0cyBjdXJzaXZlIGl0YWxpY2l6ZWQgZm9udHMuXG5cbiMjIERhcmsgQmx1ZSBUaGVtZVxuXG4qKkRhcmsgQmx1ZSBIVE1MKipcbiFbSFRNTF0oaW1hZ2VzL2RhcmstYmx1ZS1odG1sLnBuZylcblxuKipEYXJrIEJsdWUgSmF2YVNjcmlwdCoqXG4hW0phdmFTY3JpcHRdKGltYWdlcy9kYXJrLWJsdWUtanMucG5nKVxuXG4qKkRhcmsgQmx1ZSBUeXBlU2NyaXB0KipcbiFbVHlwZVNjcmlwdF0oaW1hZ2VzL2RhcmstYmx1ZS10cy5wbmcpXG5cbioqRGFyayBCbHVlIFNDU1MqKlxuIVtTQ1NTXShpbWFnZXMvZGFyay1ibHVlLXNjc3MucG5nKVxuXG4jIyBEYXJrIEJsYWNrIFRoZW1lXG5cbioqRGFyayBCbGFjayBKYXZhU2NyaXB0KipcbiFbRGFyayBCbGFjayBUaGVtZV0oaW1hZ2VzL2RhcmstanMucG5nKVxuXG4jIyBMaWdodCBUaGVtZVxuXG4qKkxpZ2h0IEphdmFTY3JpcHQqKlxuIVtMaWdodCBUaGVtZV0oaW1hZ2VzL2xpZ2h0LWpzLnBuZylcblxuIyMgVXNhZ2VcblxuU2VsZWN0IHRoZSB0aGVtZSBhbmQgZ28hXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBPcGVuICoqRXh0ZW5zaW9ucyoqIHNpZGViYXIgcGFuZWwgaW4gVmlzdWFsIFN0dWRpbyBDb2RlLiBgVmlldyDihpIgRXh0ZW5zaW9uc2BcbjEuIFNlYXJjaCBmb3IgYFdpbnRlciBpcyBDb21pbmdgXG4xLiBDbGljayAqKkluc3RhbGwqKlxuMS4gQ2xpY2sgKipSZWxvYWQqKlxuMS4gRmlsZSA+IFByZWZlcmVuY2VzID4gQ29sb3IgVGhlbWUgPiAqKldpbnRlciBpcyBDb21pbmcgKERhcmsgQmx1ZSkqKlxuMS4gT3B0aW9uYWw6IFVzZSB0aGUgcmVjb21tZW5kZWQgc2V0dGluZ3MgYmVsb3cgZm9yIGJlc3QgZXhwZXJpZW5jZVxuXG4jIyBSZWNvbW1lbmRlZCBTZXR0aW5nc1xuXG5gYGBqc1xue1xuICBcImVkaXRvci5hdXRvSW5kZW50XCI6IFwiZnVsbFwiLFxuICBcImVkaXRvci5jdXJzb3JCbGlua2luZ1wiOiBcInNvbGlkXCIsXG4gIFwiZWRpdG9yLmN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uXCI6IHRydWUsXG4gIFwiZWRpdG9yLmN1cnNvclN0eWxlXCI6IFwibGluZVwiLFxuICBcImVkaXRvci5mb250U2l6ZVwiOiAxNixcbiAgXCJlZGl0b3IuZm9udEZhbWlseVwiOiBcIkRhbmsgTW9ubywgRmlyYSBDb2RlLCBJbmNvbnNvbGF0YVwiLFxuICBcImVkaXRvci5mb250TGlnYXR1cmVzXCI6IHRydWUsXG4gIFwiZWRpdG9yLmZvcm1hdE9uUGFzdGVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IuZm9ybWF0T25UeXBlXCI6IGZhbHNlLFxuICBcImVkaXRvci5mb3JtYXRPblNhdmVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IubGV0dGVyU3BhY2luZ1wiOiAwLjMsXG4gIFwiZWRpdG9yLmxpbmVIZWlnaHRcIjogMjUsXG4gIFwiZWRpdG9yLm1pbmltYXAuZW5hYmxlZFwiOiBmYWxzZSxcbiAgXCJlZGl0b3IubXVsdGlDdXJzb3JNb2RpZmllclwiOiBcImN0cmxDbWRcIixcbiAgXCJlZGl0b3Iuc3VnZ2VzdFNlbGVjdGlvblwiOiBcImZpcnN0XCIsXG4gIFwiZWRpdG9yLnRhYkNvbXBsZXRpb25cIjogXCJvblwiLFxuICBcImVkaXRvci50YWJTaXplXCI6IDIsXG4gIFwiZWRpdG9yLndvcmRXcmFwXCI6IFwib25cIixcbiAgXCJmaWxlcy5hdXRvU2F2ZVwiOiBcImFmdGVyRGVsYXlcIixcbiAgXCJmaWxlcy5hdXRvU2F2ZURlbGF5XCI6IDEwMDAsXG4gIFwic2VhcmNoLnNob3dMaW5lTnVtYmVyc1wiOiB0cnVlLFxuICBcIndvcmtiZW5jaC5pY29uVGhlbWVcIjogXCJtYXRlcmlhbC1pY29uLXRoZW1lXCIsXG4gIFwid29ya2JlbmNoLmNvbG9yQ3VzdG9taXphdGlvbnNcIjoge30sXG4gIFwid29ya2JlbmNoLmNvbG9yVGhlbWVcIjogXCJXaW50ZXIgaXMgQ29taW5nIChEYXJrIEJsdWUpXCIsXG4gIFwiemVuTW9kZS5jZW50ZXJMYXlvdXRcIjogZmFsc2UsXG59XG5gYGBcblxuIyMgRm9udHNcblxuSSBhbSB1c2luZyBhIHBhaWQgZm9udCB0aXRsZWQgKipEYW5rIE1vbm8qKi4gKipPcGVyYXRvciBNb25vKiogaXMgYWxzbyBhIHBhaWQgZm9udCB0aGF0IGlzIGF3ZXNvbWUuIElmIHlvdSBkbyBub3QgaGF2ZSB0aGVzZSBmb250cywgdXNlIHlvdXIgZmF2b3JpdGUgZm9udC4gKipGaXJhIENvZGUqKiBpcyBhIGZyZWUgb25lIHRoYXQgd29ya3Mgd2VsbCB0b28uXG5cbiMjIEZlZWRiYWNrXG5cbklmIHlvdSBoYXZlIHN1Z2dlc3Rpb25zLCBwbGVhc2UgW29wZW4gYW4gaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvaXNzdWVzKSBvciBiZXR0ZXIgeWV0LCBhIFtwdWxsIHJlcXVlc3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvcHVsbHMpLlxuXG5CZSBuaWNlLlxuXG4jIyBDcmVkaXRzXG5cbkNyZWRpdCB3aGVyZSBjcmVkaXQgaXMgZHVlIC4uLiB0aGlzIHRoZW1lIHdhcyBpbnNwaXJlZCBieSB0aGUgdGhlbWVzIFZpc3VhbCBTdHVkaW8gRGFyayssIE1vbm9rYWkgYW5kIFtEdXN0aW4gU2FuZGVyJ3MgdGhlbWUgZm9yIFwiQW4gT2xkIEhvcGVcIl0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWR1c3RpbnNhbmRlcnMuYW4tb2xkLWhvcGUtdGhlbWUtdnNjb2RlKS4gQ3VzdG9tIENTUyBpbnNwaXJlZCBieSBbV2VzIEJvc10oaHR0cHM6Ly90d2l0dGVyLmNvbS93ZXNib3MpLiBCbHVlIGJhY2tncm91bmQgZm9yIHRoZSBEYXJrIHRoZW0gaW5zcGlyZWQgYnkgW1NhcmFoIERyYXNuZXJdKGh0dHBzOi8vdHdpdHRlci5jb20vc2FyYWhfZWRvKSdzIFtOaWdodCBPd2wgdGhlbWVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1zZHJhcy5uaWdodC1vd2wpXG5cbiMjIEF1dGhvcnNcblxuQXV0aG9yZWQgYnkgW0pvaG4gUGFwYV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9qb2huX3BhcGEpXG5cbkxpZ2h0IHRoZW1lIGNvLWF1dGhvcmVkIGJ5IFtCcmlhbiBDbGFya10oaHR0cHM6Ly90d2l0dGVyLmNvbS9fY2xhcmtpbylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImRiNWIxODExLTgzZjAtNDUyMC05NjUxLWZmZDY0ZTQxNTc1YSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWhlcm9lc1xuXG5BIENvc21vcyBEQiwgRXhwcmVzcy5qcywgVnVlLCBhbmQgTm9kZS5qcyBhcHBcblxuIyMgRmVhdHVyZXNcblxuVGhpcyBwcm9qZWN0IGZyYW1ld29yayBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGZlYXR1cmVzOlxuXG4qIFZ1ZS5qc1xuKiBOb2RlLmpzXG4qIEV4cHJlc3NcbiogTW9uZ29vc2UgQVBJXG4qIENvbm5lY3RpbmcgdG8gTW9uZ29EQiBvciBDb3Ntb3NEQlxuKiBCdWlsZGluZywgRGVidWdnaW5nLCBEZXBsb3lpbmcgd2l0aCBEb2NrZXJcblxuIyMgR2V0dGluZyBTdGFydGVkXG5cbiMjIyBQcmVyZXF1aXNpdGVzXG5cbk5vZGUuanMgd2l0aCBucG1cblxuIyMjIEluc3RhbGxhdGlvblxuXG5gYGAgYmFzaFxuZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92dWUtaGVyb2VzLmdpdFxuY2QgdnVlLWhlcm9lc1xubnBtIGluc3RhbGxcbmBgYFxuXG4jIyMgRGF0YWJhc2Ugc2V0dGluZ3NcblxuKiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgLmVudi5leGFtcGxlLmpzYCBmaWxlIHRvIGAuZW52YCBpbiB0aGUgcm9vdCBmb2xkZXIgYW5kIHVwZGF0ZSBpdCB3aXRoIHlvdXIgQ29zbW9zIERCIHNldHRpbmdzLiBSZXBsYWNlIHRoZSBhY2NvdW50TmFtZSwgZGF0YWJhc2VOYW1lLCBrZXksIGFuZCBwb3J0IHdpdGggeW91ciBzcGVjaWZpYyBjb25maWd1cmF0aW9uLlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIFNFUlZFUl9QT1JUPTMwMDFcbiAgICBQVUJMSUNXRUI9Li9zZXJ2ZXIvd3d3XG4gICAgQ09TTU9TREJfQUNDT1VOVD15b3VyX2Nvc21vc19hY2NvdW50XG4gICAgQ09TTU9TREJfREI9eW91cl9jb3Ntb3NfZGJcbiAgICBDT1NNT1NEQl9LRVk9eW91cl9jb3Ntb3Nfa2V5XG4gICAgQ09TTU9TREJfUE9SVD0xMDI1NVxuICAgIGBgYFxuXG4jIyMgUXVpY2tzdGFydFxuXG5UaGlzIHdpbGwgYnVpbGQgdGhlIGFwcCBhbmQgcnVuIHRoZSBkZXYgc2VydmVyIGZvciBWdWUgYW5kIFdlYlBhY2suIFRoZSBOb2RlIGV4cHJlc3Mgc2VydmVyIHdpbGwgbGF1bmNoIGFuZCBXZWJQYWNrIHdpbGwgcHJveHkgdGhlIGNhbGxzIGZyb20gdGhlIGJyb3dzZXIgdG8gdGhlIEFQSSBpbiBleHByZXNzLiBJdCB3aWxsIGFsc28gYW5kIHByZXBhcmUgaXQgZm9yIGxvY2FsIGRlYnVnZ2luZy5cblxuYGBgIGJhc2hcbiMgYnVpbGQgZm9yIHByb2R1Y3Rpb24gd2l0aCBtaW5pZmljYXRpb25cbm5wbSBydW4gYnVpbGRcblxuIyBzZXJ2ZSBvbiBodHRwOi8vbG9jYWxob3N0OjgwODBcbiMgYW5kIHJ1biB0aGUgYXBpIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMVxubnBtIHJ1biBkZWJ1Z1xuYGBgXG5cbiMjIyBMb2NhbCBQcm9kIEJ1aWxkXG5cblRoaXMgd2lsbCBidWlsZCB0aGUgYXBwIGFuZCBsYXVuY2ggdmlhIHRoZSBOb2RlLmpzIGV4cHJlc3Mgc2VydmVyLlxuXG5gYGBiYXNoXG4jIGJ1aWxkIGZvciBwcm9kdWN0aW9uIHdpdGggbWluaWZpY2F0aW9uXG5ucG0gcnVuIGJ1aWxkXG5cbiMgcnVuIHRoZSBub2RlIHNlcnZlclxubnBtIHN0YXJ0XG5gYGBcblxuIyMjIERvY2tlclxuXG5CdWlsZCB0aGUgaW1hZ2UgYW5kIHJ1biBjb250YWluZXIuXG5cbmBgYCBiYXNoXG5ucG0gcnVuIGRvY2tlci11cFxuYGBgXG5cbkJ1aWxkIHRoZSBpbWFnZSBhbmQgcnVuIGNvbnRhaW5lciBmb3IgbG9jYWwgZGVidWdnaW5nLlxuXG5gYGAgYmFzaFxubnBtIHJ1biBkb2NrZXItdXAtZGVidWdcbmBgYCIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU0ZWY4YTAzLTEzMjktNDlmNy1hMTllLWUxZmNkNWJmNDM3MCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHZ1ZS1ndWlkZVxuXG5BIHNlcmllcyBvZiBpbnRyb2R1Y3Rvcnkgc2FtcGxlcyB1c2luZyBWdWUuanMsIGFzIHNlZW4gaW4gdGhlaXIgZG9jcy4gPGh0dHBzOi8vdnVlanMub3JnLz4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NjNiNWZmYi0yYjJkLTRhMTUtOGE2OS0xOTkxYjcwNGUxMmMiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpNakF6TURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1hcmNoaXRlY3R1cmUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTYzYzNlNDY0NTdlMTQxZGRhNGUwZTVmZmNkNTBiZGYxODY5ZGI4YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQW5ndWxhciBBcmNoaXRlY3R1cmVcblxuVGhpcyBjb2RlIHNhbXBsZSBkZW1vbnN0cmF0ZXMgZGlmZmVyZW50IEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGNvbmNlcHRzLiBJdCdzIHVzZWQgaW4gdGhlIEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGFuZCBCZXN0IFByYWN0aWNlcyB2aWRlbyBjb3Vyc2Ugb24gUGx1cmFsc2lnaHQgKGh0dHBzOi8vd3d3LnBsdXJhbHNpZ2h0LmNvbS9jb3Vyc2VzL2FuZ3VsYXItYXJjaGl0ZWN0dXJlLWJlc3QtcHJhY3RpY2VzKSBhbmQgaW4gdGhlIEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGFuZCBCZXN0IFByYWN0aWNlcyBpbnN0cnVjdG9yLWxlZCB0cmFpbmluZyBjb3Vyc2UgKGh0dHBzOi8vY29kZXdpdGhkYW4uY29tL3Byb2R1Y3RzL2FuZ3VsYXItYXJjaGl0ZWN0dXJlKS4gXG5cbiMjIFJ1bm5pbmcgdGhlIEFwcGxpY2F0aW9uXG5cbjEuIEluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJOiBgbnBtIGluc3RhbGwgLWcgQGFuZ3VsYXIvY2xpYFxuXG4xLiBPcGVuIHRoZSBgZGVtb3NgIGZvbGRlciBhbmQgcnVuIGBucG0gaW5zdGFsbGBcblxuMS4gUnVuIGBuZyBzZXJ2ZSAtb2AgaW4gdGhlIGBkZW1vc2AgZm9sZGVyIHRvIHN0YXJ0IHRoZSBzZXJ2ZXIgYW5kIGxhdW5jaCB0aGUgYXBwXG5cbiMjIEFkZGl0aW9uYWwgRGVtb3NcblxuMS4gQ2xvbmluZyAtIFJ1biB0aGUgcHJvamVjdCBpbiB0aGUgYGNsb25pbmdgIGZvbGRlclxuMS4gSW5wdXQvT3V0cHV0IFByb3BlcnRpZXMgLSBSdW4gdGhlIHByb2plY3QgaW4gdGhlIGBpbnB1dC1vdXRwdXQtZGVtb2AgcHJvamVjdFxuMS4gU2hhcmVkIExpYnJhcnkgLSBSdW4gdGhlIHByb2plY3QgaW4gdGhlIGBzaGFyZWQtbGlicmFyeS1leGFtcGxlYCBwcm9qZWN0XG4xLiBTdGF0ZSBNYW5hZ2VtZW50IC0gT3BlbiB0aGUgYHN0YXRlLW1hbmFnZW1lbnRgIGZvbGRlciBhbmQgcnVuIHRoZSBOZ1J4LCBuZ3J4LWRhdGEsIG9yIE9ic2VydmFibGUgU3RvcmUgcHJvamVjdHNcblxuIyMgVGhlIEFuZ3VsYXIgSnVtcFN0YXJ0IEFwcGxpY2F0aW9uXG5cbllvdSBjYW4gZmluZCBhbiBleGFtcGxlIG9mIGFuIGFwcGxpY2F0aW9uIHRoYXQgZm9sbG93cyB0aGUgcnVsZXMgaW4gdGhpcyBjb3Vyc2UgYXQgaHR0cHM6Ly9naXRodWIuY29tL0RhbldhaGxpbi9Bbmd1bGFyLUp1bXBTdGFydFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNDg3NThmMGItMDExNi00MjhjLTk5MWYtZjY2ZDZiMWU5YTgwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ETTNPRGswTkRjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS1oZWxsbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NDRhZjQwNzkxOGQ0YjI1YzljN2RjMzg3NGFiY2E4M2JmMTdiODMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBOb2RlIEhlbGxvIFdvcmxkXG5cblNpbXBsZSBub2RlLmpzIGFwcCB0aGF0IHNlcnZlcnMgXCJoZWxsbyB3b3JsZFwiXG5cbkdyZWF0IGZvciB0ZXN0aW5nIHNpbXBsZSBkZXBsb3ltZW50cyB0byB0aGUgY2xvdWRcblxuIyMgUnVuIEl0XG5cbmBucG0gc3RhcnRgXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyNDU2NGE5NS1kZDY4LTRhM2YtYmZkZi01ZGVjODdlNmE3MzUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBub2RlLXRzXG5cblNpbXBsZSBOb2RlIGFuZCB0eXBlU2NyaXB0IGFwcFxuXG4jIyBRdWljayBTdGFydFxuXG4xLiBgbnBtIGluc3RhbGxgXG4yLiBgbnBtIHJ1biBzZXJ2ZS1kZWJ1Z2BcblxuIyMgSW5jbHVkZWRcblxuLSBiYXNpYyBgdHNjb25maWcuanNvbmBcbi0gbnBtIHNjcmlwdHMgdG8gaGVscCBidWlsZCwgcnVuLCB3YXRjaCwgYW5kIGRlYnVnXG4tIGNvbmN1cnJlbnRseSwgdHMtbm9kZSwgdHMtbGludCwgdHlwZXNjcmlwdCBmb3IgaGVscGluZyB3aXRoIGJ1aWxkc1xuLSB0eXBlcyBmb3Igbm9kZSB3aXRoIEB0eXBlcy9ub2RlXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2ZDk4YWE5NS02YzM1LTQxOTItYWQzZC1iOGQ1NTc3OTA5NzQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5UUTRPVGcwTURrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaGVyb2VzLW5vZGUtYXBpIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjA0NDNmYTEwYjcxZjBlNGM1NTMwNmIzNDRkOTA4NTU1ZWE4M2NiYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIGhlcm9lcy1ub2RlLWFwaVxuXG5BUEkgZm9yIFRvdXIgb2YgSGVyb2VzXG5cbmJ5IFtKb2huIFBhcGFdKGh0dHA6Ly90d2l0dGVyLmNvbS9qb2huX3BhcGEpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyNTBiNjVlZi05YWEzLTRjMDUtYTg2OC1mZjhkMGUxZTE1NTciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQTVOVFV3TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWY0NjE1ZDNmNTlmNTI0ZjE5ZmY0OTU4ZTcxMjIwZGM2YWFmNGI3YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHRcblxuQSBWdWUgQ0xJIHByZXNldCBjb25maWd1cmF0aW9uLlxuXG4jIyBSdW4gaXRcblxuWW91IHJ1biBpdCBieSBleGVjdXRpbmcgXG5cbmBgYGJhc2hcbnZ1ZSBjcmVhdGUgLS1wcmVzZXQgam9obnBhcGEvdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQgaGVsbG8tdnVlXG5gYGBcblxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1YzlkODYzOC0wNWZmLTRkMTMtOGViNS1kMzYwYTQ5NGQ0OGYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1qRTRNemN6IiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJDb2RlQ2FtcGVyIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjQ4YTM4Nzk2MDgzMDZhNzhmYTU0ZGVkZWU2ZWZlYzE2MDQ1OWEyNDEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICJDb2RlQ2FtcGVyXG49PT09PT09PT09IgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYzk4NTk1MjgtYTEyMi00ODUwLTgyNTItM2ZhODJlM2NlZGRiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM09UY3lOVEUwIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJIb3RUb3dlbCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJlZTM3ZjBmNDhlMmY5MGQ0NDU5YWY1MTk3ZjUwZmZhZTcyZjFmOTY1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBIb3QgVG93ZWwgU1BBIFRlbXBsYXRlICNcblxuLS0tLS0tLS0tLVxuPiBIb3QgVG93ZWw6IEJlY2F1c2UgeW91IGRvbid0IHdhbnQgdG8gZ28gdG8gdGhlIFNQQSB3aXRob3V0IG9uZSFcblxuV2FudCB0byBidWlsZCBhIFNQQSBidXQgY2FuJ3QgZGVjaWRlIHdoZXJlIHRvIHN0YXJ0PyBVc2UgSG90IFRvd2VsIGFuZCBpbiBzZWNvbmRzIHlvdSdsbCBoYXZlIGEgU1BBIGFuZCBhbGwgdGhlIHRvb2xzIHlvdSBuZWVkIHRvIGJ1aWxkIG9uIGl0ISBcblxuIVtdKGh0dHA6Ly9qb2hucGFwYS5uZXQvd3AtY29udGVudC9pbWFnZXMvSG90VG93ZWxQcmV2aWV3LnBuZylcblxuSG90IFRvd2VsIGNyZWF0ZXMgYSBncmVhdCBzdGFydGluZyBwb2ludCBmb3IgYnVpbGRpbmcgYSBTaW5nbGUgUGFnZSBBcHBsaWNhdGlvbiAoU1BBKSB3aXRoIEFTUC5ORVQuIE91dCBvZiB0aGUgYm94IHlvdSBpdCBwcm92aWRlcyBhIG1vZHVsYXIgc3RydWN0dXJlIGZvciB5b3VyIGNvZGUsIHZpZXcgbmF2aWdhdGlvbiwgZGF0YSBiaW5kaW5nLCByaWNoIGRhdGEgbWFuYWdlbWVudCBhbmQgc2ltcGxlIGJ1dCBlbGVnYW50IHN0eWxpbmcuIEhvdCBUb3dlbCBwcm92aWRlcyBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGJ1aWxkIGEgU1BBLCBzbyB5b3UgY2FuIGZvY3VzIG9uIHlvdXIgYXBwLCBub3QgdGhlIHBsdW1iaW5nLlxuXG4+IExlYXJuIG1vcmUgYWJvdXQgYnVpbGRpbmcgYSBTUEEgZnJvbSBbSm9obiBQYXBhJ3MgdmlkZW9zLCB0dXRvcmlhbHMgYW5kIFBsdXJhbHNpZ2h0IGNvdXJzZXNdKGh0dHA6Ly9qb2hucGFwYS5uZXQvc3BhP3ZzaXgpLlxuXG5cbiMjIEFwcGxpY2F0aW9uIFN0cnVjdHVyZSAjI1xuSG90IFRvd2VsIFNQQSBwcm92aWRlcyBhbiBBcHAgZm9sZGVyIHdoaWNoIGNvbnRhaW5zIHRoZSBKYXZhU2NyaXB0IGFuZCBIVE1MIGZpbGVzIHRoYXQgZGVmaW5lIHlvdXIgYXBwbGljYXRpb24uIFxuXG5JbnNpZGUgdGhlIEFwcCBmb2xkZXI6XG5cbiFbXShodHRwOi8vam9obnBhcGEubmV0L3dwLWNvbnRlbnQvaW1hZ2VzL0hvdFRvd2VsQXBwRm9sZGVyLnBuZylcblxuVGhlIEFwcCBmb2xkZXIgY29udGFpbnMgYSBjb2xsZWN0aW9uIG9mIG1vZHVsZXMuIFRoZXNlIG1vZHVsZXMgZW5jYXBzdWxhdGUgZnVuY3Rpb25hbGl0eSBhbmQgZGVjbGFyZSBkZXBlbmRlbmNpZXMgb24gb3RoZXIgbW9kdWxlcy4gVGhlIHZpZXdzIGZvbGRlciBjb250YWlucyB0aGUgSFRNTCBmb3IgeW91ciBhcHBsaWNhdGlvbiBhbmQgdGhlIHZpZXdtb2RlbHMgZm9sZGVyIGNvbnRhaW5zIHRoZSBwcmVzZW50YXRpb24gbG9naWMgZm9yIHRoZSB2aWV3cyAoYSBjb21tb24gTVZWTSBwYXR0ZXJuKS4gVGhlIHNlcnZpY2VzIGZvbGRlciBpcyBpZGVhbCBmb3IgaG91c2luZyBhbnkgY29tbW9uIHNlcnZpY2VzIHRoYXQgeW91ciBhcHBsaWNhdGlvbiBtYXkgbmVlZCBzdWNoIGFzIEhUVFAgZGF0YSByZXRyaWV2YWwgb3IgbG9jYWwgc3RvcmFnZSBpbnRlcmFjdGlvbi4gSXQgaXMgY29tbW9uIGZvciBtdWx0aXBsZSB2aWV3bW9kZWxzIHRvIHJlLXVzZSBjb2RlIGZyb20gdGhlIHNlcnZpY2UgbW9kdWxlcy5cblxuIyMgQVNQLk5FVCBNVkMgU2VydmVyIFNpZGUgQXBwbGljYXRpb24gU3RydWN0dXJlICMjXG5Ib3QgVG93ZWwgYnVpbGRzIG9uIHRoZSBmYW1pbGlhciBhbmQgcG93ZXJmdWwgQVNQLk5FVCBNVkMgc3RydWN0dXJlLiBcblxuKyBBcHBfU3RhcnRcbisgQ29udGVudFxuKyBDb250cm9sbGVyc1xuKyBNb2RlbHNcbisgU2NyaXB0c1xuKyBWaWV3c1xuXG4jIyBGZWF0dXJlZCBMaWJyYXJpZXMgIyNcbi0gQVNQLk5FVCBNVkNcbi0gQVNQLk5FVCBXZWIgQVBJXG4tIEFTUC5ORVQgV2ViIE9wdGltaXphdGlvbiAtIGJ1bmRsaW5nIGFuZCBtaW5pZmljYXRpb25cbi0gW0JyZWV6ZS5qc10oaHR0cDovL0JyZWV6ZWpzLmNvbSkgLSByaWNoIGRhdGEgbWFuYWdlbWVudFxuLSBbRHVyYW5kYWwuanNdKGh0dHA6Ly9EdXJhbmRhbGpzLmNvbSkgLSBuYXZpZ2F0aW9uIGFuZCBWaWV3IGNvbXBvc2l0aW9uXG4tIFtLbm9ja291dC5qc10oaHR0cDovL0tub2Nrb3V0anMuY29tKSAtIGRhdGEgYmluZGluZ3Ncbi0gW1JlcXVpcmUuanNdKGh0dHA6Ly9yZXF1aXJlanMub3JnKSAtIE1vZHVsYXJpdHkgd2l0aCBBTUQgYW5kIG9wdGltaXphdGlvblxuLSBbVG9hc3RyLmpzXShodHRwOi8vanBhcGEubWUvYzd0b2FzdHIpIC0gcG9wLXVwIG1lc3NhZ2VzXG4tIFtUd2l0dGVyIEJvb3RzdHJhcF0oaHR0cDovL3R3aXR0ZXIuZ2l0aHViLmNvbS9ib290c3RyYXAvKSAtIHJvYnVzdCBDU1Mgc3R5bGluZ1xuXG4jIyBJbnN0YWxsaW5nIHZpYSB0aGUgVmlzdWFsIFN0dWRpbyAyMDEyIEhvdCBUb3dlbCBTUEEgVGVtcGxhdGUgIyNcbkhvdCBUb3dlbCBjYW4gYmUgaW5zdGFsbGVkIGFzIGEgVmlzdWFsIFN0dWRpbyAyMDEyIHRlbXBsYXRlLiBKdXN0IGNsaWNrIGBGaWxlYCB8IGBOZXcgUHJvamVjdGAgYW5kIGNob29zZSBgQVNQLk5FVCBNVkMgNCBXZWIgQXBwbGljYXRpb25gLiBUaGVuIHNlbGVjdCB0aGUgJ0hvdCBUb3dlbCBTaW5nbGUgUGFnZSBBcHBsaWNhdGlvblwiIHRlbXBsYXRlIGFuZCBydW4hXG5cbiMjIEluc3RhbGxpbmcgdmlhIHRoZSBOdUdldCBQYWNrYWdlICMjXG5Ib3QgVG93ZWwgaXMgYWxzbyBhIE51R2V0IHBhY2thZ2UgdGhhdCBhdWdtZW50cyBhbiBleGlzdGluZyBlbXB0eSBBU1AuTkVUIE1WQyBwcm9qZWN0LiBKdXN0IGluc3RhbGwgdXNpbmcgTnVnZXQgYW5kIHRoZW4gcnVuIVxuXG4gICAgSW5zdGFsbC1QYWNrYWdlIEhvdFRvd2VsXG5cbiMjIEhvdyBEbyBJIEJ1aWxkIE9uIEhvdCBUb3dlbD8gIyNcblNpbXBseSBzdGFydCBhZGRpbmcgY29kZSEgXG5cbjEuIEFkZCB5b3VyIG93biBzZXJ2ZXItc2lkZSBjb2RlLCBwcmVmZXJhYmx5IEVudGl0eSBGcmFtZXdvcmsgYW5kIFdlYkFQSSAod2hpY2ggcmVhbGx5IHNoaW5lIHdpdGggQnJlZXplLmpzKVxuMi4gQWRkIHZpZXdzIHRvIHRoZSBgQXBwL3ZpZXdzYCBmb2xkZXJcbjMuIEFkZCB2aWV3bW9kZWxzIHRvIHRoZSBgQXBwL3ZpZXdtb2RlbHNgIGZvbGRlclxuNC4gQWRkIEhUTUwgYW5kIEtub2Nrb3V0IGRhdGEgYmluZGluZ3MgdG8geW91ciBuZXcgdmlld3NcbjUuIFVwZGF0ZSB0aGUgbmF2aWdhdGlvbiByb3V0ZXMgaW4gYHNoZWxsLmpzYFxuXG4jIyBXYWxrdGhyb3VnaCBvZiB0aGUgSFRNTC9KYXZhU2NyaXB0ICMjXG4jIyMgVmlld3MvSG90VG93ZWwvaW5kZXguY3NodG1sICMjI1xuaW5kZXguY3NodG1sIGlzIHRoZSBzdGFydGluZyByb3V0ZSBhbmQgdmlldyBmb3IgdGhlIE1WQyBhcHBsaWNhdGlvbi4gSXQgY29udGFpbnMgYWxsIHRoZSBzdGFuZGFyZCBtZXRhIHRhZ3MsIGNzcyBsaW5rcywgYW5kIEphdmFTY3JpcHQgcmVmZXJlbmNlcyB5b3Ugd291bGQgZXhwZWN0LiBUaGUgYm9keSBjb250YWlucyBhIHNpbmdsZSBgPGRpdj5gIHdoaWNoIGlzIHdoZXJlIGFsbCBvZiB0aGUgY29udGVudCAoeW91ciB2aWV3cykgd2lsbCBiZSBwbGFjZWQgd2hlbiB0aGV5IGFyZSByZXF1ZXN0ZWQuIFRoZSBgQFNjcmlwdHMuUmVuZGVyYCB1c2VzIFJlcXVpcmUuanMgdG8gcnVuIHRoZSBlbnRyYW5jZSBwb2ludCBmb3IgdGhlIGFwcGxpY2F0aW9uJ3MgY29kZSwgd2hpY2ggaXMgY29udGFpbmVkIGluIHRoZSBgbWFpbi5qc2AgZmlsZS4gQSBzcGxhc2ggc2NyZWVuIGlzIHByb3ZpZGVkIHRvIGRlbW9uc3RyYXRlIGhvdyB0byBjcmVhdGUgYSBzcGxhc2ggc2NyZWVuIHdoaWxlIHlvdXIgYXBwIGxvYWRzLlxuXG4gICAgPGJvZHk+XG4gICAgICAgIDxkaXYgaWQ9XCJhcHBsaWNhdGlvbkhvc3RcIj5cbiAgICAgICAgICAgIEBIdG1sLlBhcnRpYWwoXCJfc3BsYXNoXCIpXG4gICAgICAgIDwvZGl2PlxuICAgIFxuICAgICAgICBAU2NyaXB0cy5SZW5kZXIoXCJ+L3NjcmlwdHMvdmVuZG9yXCIpXG4gICAgICAgICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCJ+L0FwcC9kdXJhbmRhbC9hbWQvcmVxdWlyZS5qc1wiIFxuXHRcdFx0XHRkYXRhLW1haW49XCJAVXJsLkNvbnRlbnQoXCJ+L0FwcC9tYWluXCIpXCI+PC9zY3JpcHQ+XG4gICAgPC9ib2R5PlxuXG4jIyMgQXBwL21haW4uanMgIyMjXG5UaGUgYG1haW4uanNgIGZpbGUgY29udGFpbnMgdGhlIGNvZGUgdGhhdCB3aWxsIHJ1biBhcyBzb29uIGFzIHlvdXIgYXBwIGlzIGxvYWRlZC4gVGhpcyBpcyB3aGVyZSB5b3Ugd2FudCB0byBkZWZpbmUgeW91ciBuYXZpZ2F0aW9uIHJvdXRlcywgc2V0IHlvdXIgc3RhcnQgdXAgdmlld3MsIGFuZCBwZXJmb3JtIGFueSBzZXR1cC9ib290c3RyYXBwaW5nIHN1Y2ggYXMgcHJpbWluZyB5b3VyIGFwcGxpY2F0aW9uJ3MgZGF0YS4gXG5cblRoZSBgbWFpbi5qc2AgZmlsZSBkZWZpbmVzIHNldmVyYWwgb2YgZHVyYW5kYWwncyBtb2R1bGVzIHRvIGhlbHAgdGhlIGFwcGxpY2F0aW9uIGtpY2sgc3RhcnQuIFRoZSBkZWZpbmUgc3RhdGVtZW50IGhlbHBzIHJlc29sdmUgdGhlIG1vZHVsZXMgZGVwZW5kZW5jaWVzIHNvIHRoZXkgYXJlIGF2YWlsYWJsZSBmb3IgdGhlIGZ1bmN0aW9uLiBGaXJzdCB0aGUgZGVidWdnaW5nIG1lc3NhZ2VzIGFyZSBlbmFibGVkLCB3aGljaCBzZW5kIG1lc3NhZ2VzIGFib3V0IHdoYXQgZXZlbnRzIHRoZSBhcHBsaWNhdGlvbiBpcyBwZXJmb3JtaW5nIHRvIHRoZSBjb25zb2xlIHdpbmRvdy4gVGhlIGFwcC5zdGFydCBjb2RlIHRlbGxzIGR1cmFuZGFsIGZyYW1ld29yayB0byBzdGFydCB0aGUgYXBwbGljYXRpb24uIFRoZSBjb252ZW50aW9ucyBhcmUgc2V0IHNvIHRoYXQgZHVyYW5kYWwga25vd3MgYWxsIHZpZXdzIGFuZCB2aWV3bW9kZWxzIGFyZSBjb250YWluZWQgaW4gdGhlIHNhbWUgbmFtZWQgZm9sZGVycywgcmVzcGVjdGl2ZWx5LiBGaW5hbGx5LCB0aGUgYGFwcC5zZXRSb290YCBraWNrcyBsb2FkcyB0aGUgYHNoZWxsYCB1c2luZyBhIHByZWRlZmluZWQgYGVudHJhbmNlYCBhbmltYXRpb24uXG5cbiAgICBkZWZpbmUoWydkdXJhbmRhbC9hcHAnLCBcblx0XHRcdCdkdXJhbmRhbC92aWV3TG9jYXRvcicsIFxuXHRcdFx0J2R1cmFuZGFsL3N5c3RlbScsIFxuXHRcdFx0J2R1cmFuZGFsL3BsdWdpbnMvcm91dGVyJ10sXG4gICAgICAgIGZ1bmN0aW9uIChhcHAsIHZpZXdMb2NhdG9yLCBzeXN0ZW0sIHJvdXRlcikge1xuICAgIFxuICAgICAgICAvLyBFbmFibGUgZGVidWcgbWVzc2FnZSB0byBzaG93IGluIHRoZSBjb25zb2xlIFxuICAgICAgICBzeXN0ZW0uZGVidWcodHJ1ZSk7XG4gICAgXG4gICAgICAgIGFwcC5zdGFydCgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcm91dGVyLnVzZUNvbnZlbnRpb24oKTtcbiAgICAgICAgICAgIHZpZXdMb2NhdG9yLnVzZUNvbnZlbnRpb24oKTtcbiAgICAgICAgICAgIC8vU2hvdyB0aGUgYXBwIGJ5IHNldHRpbmcgdGhlIHJvb3QgdmlldyBtb2RlbCBmb3Igb3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICAgICAgYXBwLnNldFJvb3QoJ3ZpZXdtb2RlbHMvc2hlbGwnLCAnZW50cmFuY2UnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG5cbiMjIFZpZXdzICMjXG5WaWV3cyBhcmUgZm91bmQgaW4gdGhlIGBBcHAvdmlld3NgIGZvbGRlci5cblxuIyMjIHNoZWxsLmh0bWwgIyMjXG5UaGUgYHNoZWxsLmh0bWxgIGNvbnRhaW5zIHRoZSBtYXN0ZXIgbGF5b3V0IGZvciB5b3VyIEhUTUwuIEFsbCBvZiB5b3VyIG90aGVyIHZpZXdzIHdpbGwgYmUgY29tcG9zZWQgc29tZXdoZXJlIGluIHNpZGUgb2YgeW91ciBgc2hlbGxgIHZpZXcuIEhvdCBUb3dlbCBwcm92aWRlcyBhIGBzaGVsbGAgd2l0aCB0aHJlZSBzdWNoIHJlZ2lvbnM6IGEgaGVhZGVyLCBhIGNvbnRlbnQgYXJlYSwgYW5kIGEgZm9vdGVyLiBFYWNoIG9mIHRoZXNlIHJlZ2lvbnMgaXMgbG9hZGVkIHdpdGggY29udGVudHMgZm9ybSBvdGhlciB2aWV3cyB3aGVuIHJlcXVlc3RlZC5cblxuVGhlIGBjb21wb3NlYCBiaW5kaW5ncyBmb3IgdGhlIGhlYWRlciBhbmQgZm9vdGVyIGFyZSBoYXJkIGNvZGVkIGluIEhvdCBUb3dlbCB0byBwb2ludCB0byB0aGUgYG5hdmAgYW5kIGBmb290ZXJgIHZpZXdzLCByZXNwZWN0aXZlbHkuIFRoZSBjb21wb3NlIGJpbmRpbmcgZm9yIHRoZSBzZWN0aW9uIGAjY29udGVudGAgaXMgYm91bmQgdG8gdGhlIGByb3V0ZXJgIG1vZHVsZSdzIGFjdGl2ZSBpdGVtLiBJbiBvdGhlciB3b3Jkcywgd2hlbiB5b3UgY2xpY2sgYSBuYXZpZ2F0aW9uIGxpbmsgaXRzIGNvcnJlc3BvbmRpbmcgdmlldyBpcyBsb2FkZWQgaW4gdGhpcyBhcmVhLlxuXG4gICAgPGRpdj5cbiAgICAgICAgPGhlYWRlcj5cbiAgICAgICAgICAgIDwhLS1rbyBjb21wb3NlOiB7dmlldzogJ25hdid9IC0tPjwhLS0va28tLT5cbiAgICAgICAgPC9oZWFkZXI+XG4gICAgICAgICA8c2VjdGlvbiBpZD1cImNvbnRlbnRcIiBjbGFzcz1cIm1haW4gY29udGFpbmVyLWZsdWlkXCI+XG4gICAgICAgICAgICA8IS0ta28gY29tcG9zZToge21vZGVsOiByb3V0ZXIuYWN0aXZlSXRlbSwgXG4gICAgICAgICAgICAgICAgYWZ0ZXJDb21wb3NlOiByb3V0ZXIuYWZ0ZXJDb21wb3NlLCBcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnZW50cmFuY2UnfSAtLT5cbiAgICAgICAgICAgIDwhLS0va28tLT5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8Zm9vdGVyPlxuICAgICAgICAgICAgPCEtLWtvIGNvbXBvc2U6IHt2aWV3OiAnZm9vdGVyJ30gLS0+PCEtLS9rby0tPlxuICAgICAgICA8L2Zvb3Rlcj5cbiAgICA8L2Rpdj5cbiAgICBcblxuXG4jIyMgbmF2Lmh0bWwgIyMjXG5UaGUgYG5hdi5odG1sYCBjb250YWlucyB0aGUgbmF2aWdhdGlvbiBsaW5rcyBmb3IgdGhlIFNQQS4gVGhpcyBpcyB3aGVyZSB0aGUgbWVudSBzdHJ1Y3R1cmUgY2FuIGJlIHBsYWNlZCwgZm9yIGV4YW1wbGUuIE9mdGVuIHRoaXMgaXMgZGF0YSBib3VuZCAodXNpbmcgS25vY2tvdXQpIHRvIHRoZSBgcm91dGVyYCBtb2R1bGUgdG8gZGlzcGxheSB0aGUgbmF2aWdhdGlvbiB5b3UgZGVmaW5lZCBpbiB0aGUgYHNoZWxsLmpzYC4gS25vY2tvdXQgbG9va3MgZm9yIHRoZSBkYXRhLWJpbmQgYXR0cmlidXRlcyBhbmQgYmluZHMgdGhvc2UgdG8gdGhlIGBzaGVsbGAgdmlld21vZGVsIHRvIGRpc3BsYXkgdGhlIG5hdmlnYXRpb24gcm91dGVzIGFuZCB0byBzaG93IGEgcHJvZ3Jlc3NiYXIgKHVzaW5nIFR3aXR0ZXIgQm9vdHN0cmFwKSBpZiB0aGUgYHJvdXRlcmAgbW9kdWxlIGlzIGluIHRoZSBtaWRkbGUgb2YgbmF2aWdhdGluZyBmcm9tIG9uZSB2aWV3IHRvIGFub3RoZXIgKHNlZSBgcm91dGVyLmlzTmF2aWdhdGluZ2ApLlxuXG4gICAgPG5hdiBjbGFzcz1cIm5hdmJhciBuYXZiYXItZml4ZWQtdG9wXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJuYXZiYXItaW5uZXJcIj5cbiAgICAgICAgICAgIDxhIGNsYXNzPVwiYnJhbmRcIiBocmVmPVwiL1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGl0bGVcIj5Ib3QgVG93ZWwgU1BBPC9zcGFuPiBcbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiBkYXRhLWJpbmQ9XCJmb3JlYWNoOiByb3V0ZXIudmlzaWJsZVJvdXRlc1wiPlxuICAgICAgICAgICAgICAgIDxhIGRhdGEtYmluZD1cImNzczogeyBhY3RpdmU6IGlzQWN0aXZlIH0sIGF0dHI6IHsgaHJlZjogaGFzaCB9LCB0ZXh0OiBuYW1lXCIgXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1pbmZvXCIgaHJlZj1cIiNcIj48L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkZXIgcHVsbC1yaWdodFwiIGRhdGEtYmluZD1cImNzczogeyBhY3RpdmU6IHJvdXRlci5pc05hdmlnYXRpbmcgfVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcyBwcm9ncmVzcy1zdHJpcGVkIGFjdGl2ZSBwYWdlLXByb2dyZXNzLWJhclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmFyXCIgc3R5bGU9XCJ3aWR0aDogMTAwcHg7XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9uYXY+XG4gICAgXG5cbiMjIyBob21lLmh0bWwgYW5kIGRldGFpbHMuaHRtbCMjI1xuVGhlc2Ugdmlld3MgY29udGFpbiBIVE1MIGZvciBjdXN0b20gdmlld3MuIFdoZW4gdGhlIGBob21lYCBsaW5rIGluIHRoZSBgbmF2YCB2aWV3J3MgbWVudSBpcyBjbGlja2VkLCB0aGUgYGhvbWVgIHZpZXcgd2lsbCBiZSBwbGFjZWQgaW4gdGhlIGNvbnRlbnQgYXJlYSBvZiB0aGUgYHNoZWxsYCB2aWV3LiBUaGVzZSB2aWV3cyBjYW4gYmUgYXVnbWVudGVkIG9yIHJlcGxhY2VkIHdpdGggeW91ciBvd24gY3VzdG9tIHZpZXdzLlxuXG4jIyMgZm9vdGVyLmh0bWwgIyMjXG5UaGUgYGZvb3Rlci5odG1sYCBjb250YWlucyBIVE1MIHRoYXQgYXBwZWFycyBpbiB0aGUgZm9vdGVyLCBhdCB0aGUgYm90dG9tIG9mIHRoZSBgc2hlbGxgIHZpZXcuXG5cbiMjIFZpZXdNb2RlbHMgIyNcblZpZXdNb2RlbHMgYXJlIGZvdW5kIGluIHRoZSBgQXBwL3ZpZXdtb2RlbHNgIGZvbGRlci5cblxuIyMjIHNoZWxsLmpzICMjI1xuVGhlIGBzaGVsbGAgdmlld21vZGVsIGNvbnRhaW5zIHByb3BlcnRpZXMgYW5kIGZ1bmN0aW9ucyB0aGF0IGFyZSBib3VuZCB0byB0aGUgYHNoZWxsYCB2aWV3LiBPZnRlbiB0aGlzIGlzIHdoZXJlIHRoZSBtZW51IG5hdmlnYXRpb24gYmluZGluZ3MgYXJlIGZvdW5kIChzZWUgdGhlIGByb3V0ZXIubWFwTmF2YCBsb2dpYykuIFxuXG4gICAgZGVmaW5lKFsnZHVyYW5kYWwvc3lzdGVtJywgJ2R1cmFuZGFsL3BsdWdpbnMvcm91dGVyJywgJ3NlcnZpY2VzL2xvZ2dlciddLFxuICAgICAgICBmdW5jdGlvbiAoc3lzdGVtLCByb3V0ZXIsIGxvZ2dlcikge1xuICAgICAgICAgICAgdmFyIHNoZWxsID0ge1xuICAgICAgICAgICAgICAgIGFjdGl2YXRlOiBhY3RpdmF0ZSxcbiAgICAgICAgICAgICAgICByb3V0ZXI6IHJvdXRlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHNoZWxsO1xuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvb3QoKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJvb3QoKSB7XG4gICAgICAgICAgICAgICAgcm91dGVyLm1hcE5hdignaG9tZScpO1xuICAgICAgICAgICAgICAgIHJvdXRlci5tYXBOYXYoJ2RldGFpbHMnKTtcbiAgICAgICAgICAgICAgICBsb2coJ0hvdCBUb3dlbCBTUEEgTG9hZGVkIScsIG51bGwsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiByb3V0ZXIuYWN0aXZhdGUoJ2hvbWUnKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvZyhtc2csIGRhdGEsIHNob3dUb2FzdCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5sb2cobXNnLCBkYXRhLCBzeXN0ZW0uZ2V0TW9kdWxlSWQoc2hlbGwpLCBzaG93VG9hc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG5cbiMjIyBob21lLmpzIGFuZCBkZXRhaWxzLmpzICMjI1xuVGhlc2Ugdmlld21vZGVscyBjb250YWluIHRoZSBwcm9wZXJ0aWVzIGFuZCBmdW5jdGlvbnMgdGhhdCBhcmUgYm91bmQgdG8gdGhlIGBob21lYCB2aWV3LiAgaXQgYWxzbyBjb250YWlucyB0aGUgcHJlc2VudGF0aW9uIGxvZ2ljIGZvciB0aGUgdmlldywgYW5kIGlzIHRoZSBnbHVlIGJldHdlZW4gdGhlIGRhdGEgYW5kIHRoZSB2aWV3LlxuXG4gICAgZGVmaW5lKFsnc2VydmljZXMvbG9nZ2VyJ10sIGZ1bmN0aW9uIChsb2dnZXIpIHtcbiAgICAgICAgdmFyIHZtID0ge1xuICAgICAgICAgICAgYWN0aXZhdGU6IGFjdGl2YXRlLFxuICAgICAgICAgICAgdGl0bGU6ICdIb21lIFZpZXcnXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHJldHVybiB2bTtcbiAgICBcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKCdIb21lIFZpZXcgQWN0aXZhdGVkJywgbnVsbCwgJ2hvbWUnLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiMjIFNlcnZpY2VzICMjXG5TZXJ2aWNlcyBhcmUgZm91bmQgaW4gdGhlIEFwcC9zZXJ2aWNlcyBmb2xkZXIuIElkZWFsbHkgeW91ciBmdXR1cmUgc2VydmljZXMgc3VjaCBhcyBhIGRhdGFzZXJ2aWNlIG1vZHVsZSwgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgZ2V0dGluZyBhbmQgcG9zdGluZyByZW1vdGUgZGF0YSwgY291bGQgYmUgcGxhY2VkLlxuXG4jIyMgbG9nZ2VyLmpzICMjI1xuSG90IFRvd2VsIHByb3ZpZGVzIGEgYGxvZ2dlcmAgbW9kdWxlIGluIHRoZSBzZXJ2aWNlcyBmb2xkZXIuIFRoZSBgbG9nZ2VyYCBtb2R1bGUgaXMgaWRlYWwgZm9yIGxvZ2dpbmcgbWVzc2FnZXMgdG8gdGhlIGNvbnNvbGUgYW5kIHRvIHRoZSB1c2VyIGluIHBvcCB1cCB0b2FzdHMuICBcblxuXG4jIyBSZXNvdXJjZXMgIyNcblxuKyBbU1BBIFJlc291cmNlc10oaHR0cDovL2pvaG5wYXBhLm5ldC9zcGEpXG4rIFtIb3QgVG93ZWwgb24gR2l0SHViXShodHRwczovL2dpdGh1Yi5jb20vam9obnBhcGEvSG90VG93ZWwpXG5cblxuIyMjIEhvdCBUb3dlbCBTUEEgb24gTnVHZXQgIyMjXG48aW1nIHNyYz1cImh0dHA6Ly93d3cuam9obnBhcGEubmV0L3dwLWNvbnRlbnQvaW1hZ2VzL3Rvd2VsaWNvbi5wbmdcIiB3aWR0aD1cIjQ4XCIgaGVpZ2h0PVwiNDhcIiBjbGFzcz1cImFsaWdubGVmdFwiIC8+SG90IFRvd2VsIGFsc28gY29tZXMgYXMgYSA8YSBocmVmPVwiaHR0cDovL251Z2V0Lm9yZy9wYWNrYWdlcy9Ib3RUb3dlbC9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5OdUdldCBwYWNrYWdlPC9hPiB0aGF0IHlvdSBjYW4gYWRkIHRvIGFuIEFTUC5ORVQgTVZDIGFwcGxpY2F0aW9uLiBJZiB5b3Ugc3RhcnQgZnJvbSBzY3JhdGNoLCB0aGUgdGVtcGxhdGUgaXMgdGhlIHdheSB0byBnby4gSWYgeW91IGhhdmUgYW4gZXhpc3RpbmcgcHJvamVjdCwgeW91IGNhbiB1c2UgdGhlIE51R2V0IHBhY2thZ2UgKHdoaWNoIGxhY2tzIHRoZSBzdGFydC11cCBob29rcyB0aGF0IHRoZSB0ZW1wbGF0ZSBoYXMpLlxuXG48aDQ+SG90IFRvd2VsZXR0ZSBTUEEgb24gTnVHZXQ8L2g0PlxuPGltZyBzcmM9XCJodHRwOi8vd3d3LmpvaG5wYXBhLm5ldC93cC1jb250ZW50L2ltYWdlcy90b3dlbGV0dGVpY29uLnBuZ1wiIHdpZHRoPVwiNDhcIiBoZWlnaHQ9XCI0OFwiIGNsYXNzPVwiYWxpZ25sZWZ0XCIgLz5Ib3QgVG93ZWwgYWxzbyBjb21lcyBhcyBhIDxhIGhyZWY9XCJodHRwOi8vbnVnZXQub3JnL3BhY2thZ2VzL0hvdFRvd2VsL1wiIHRhcmdldD1cIl9ibGFua1wiPk51R2V0IHBhY2thZ2U8L2E+IHRoYXQgeW91IGNhbiBhZGQgdG8gYW4gQVNQLk5FVCBhcHBsaWNhdGlvbiAobm8gTVZDIHJlcXVpcmVkKS4gSWYgeW91IHN0YXJ0IGZyb20gc2NyYXRjaCwgdGhlIHRlbXBsYXRlIGlzIHRoZSB3YXkgdG8gZ28uIElmIHlvdSBoYXZlIGFuIGV4aXN0aW5nIHByb2plY3QsIHlvdSBjYW4gdXNlIHRoZSBOdUdldCBwYWNrYWdlICh3aGljaCBsYWNrcyB0aGUgc3RhcnQtdXAgaG9va3MgdGhhdCB0aGUgdGVtcGxhdGUgaGFzKS5cblxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNmYyYzdkOTMtNmE1NC00NDMzLWJlMzgtOTliZWJhNjk1OTBkIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMU16TTNORFExIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJraXMtcmVxdWlyZWpzLWRlbW8iLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODhjMTYyZTI3Y2U0M2E5OTQzZjM5NmViNzk5M2ZhNmM4ZjNlMjBjOCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogImtpcy1yZXF1aXJlanMtZGVtb1xuPT09PT09PT09PT09PT09PT09XG5cbktlZXAgSXQgU2ltcGxlIFJlcXVpcmVKUyBEZW1vLiAgU2hvd3Mgc2ltcGxlIGRlbW8gb2YgaG93IHRvIHVzZSByZXF1aXJlLmpzLlxuXG4jI092ZXJ2aWV3XG5UaGlzIGRlbW8gY29udGFpbnMgMiBzZXBhcmF0ZSBodG1sIGZpbGVzLCBlYWNoIHdpdGggdGhlaXIgb3duIHNjcmlwdHMgZm9sZGVyLiBPbmUgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgaG93IHRvIHdyaXRlIHRoZSBjb2RlIHdpdGhvdXQgcmVxdWlyZS5qcy4gVGhlIG90aGVyIHNob3dzIGhvdyB0byBhZGQgcmVxdWlyZS5qcy4gVGhlIHB1cnBvc2UgaXMgdG8gZXhwbGFpbiBob3cgdG8gdXNlIHJlcXVpcmUuanMgZm9yIGRlcGVuZGVuY3kgcmVzb2x1dGlvbi4gXG5cblxuIyNXaXRob3V0IFJlcXVpcmVKU1xuVGhlIGZpcnN0IGV4YW1wbGUgKGluZGV4MS5odG1sKSBoYXMgMyBKYXZhU2NyaXB0IGZpbGVzIHVzaW5nIHRoZSBSZXZlYWxpbmcgTW9kdWxlIFBhdHRlcm4gKE1vZHVsZSBQYXR0ZXJuIHdvcmtzIGZpbmUgdG9vKS4gVGhlIGRlcGVuZGVuY2llcyBhcmUgYXMgZm9sbG93czpcblxuLSBtYWluLmpzIGRlcGVuZHMgb24gYWxlcnRlci5qc1xuLSBhbGVydGVyLmpzIGRlcGVuZHMgb24gZGFhdGFzZXJ2aWNlLmpzXG5cbkxvYWQgb3JkZXIgaXMgaW1wb3J0YW50IGhlcmUsIGFuZCBjYW4gZWFzaWx5IGJlIGJyb2tlbi5cblxuIyNXaXRoIFJlcXVpcmVKU1xuVGhlIHNlY29uZCBleGFtcGxlIChpbmRleDIuaHRtbCkgdXNlcyByZXF1aXJlLmpzIHRvIGxvYWQgdGhlIHNjcmlwdHMuIEl0IHNvbHZlcyB0aGUgcHJvYmxlbSBhbmQgaGFzIHRoZXNlIHJvbGVzOlxuXG4tIHN0YXJ0cyB3aXRoIGEga2lja29mZiBzY3JpcHQgKG1haW4uanMpXG4tIGxvYWRzIHRoZXJlc3Qgb2YgdGhlIHNjcmlwdHMgYXMgdGhleSBhcmUgbmVlZGVkICh3aGVuIGRlcGVuZGVuY2llcyBjYWxsIG9uIHRoZW0pXG5cbiMjV2l0aCBSZXF1aXJlSlMgYW5kIDNyZCBQYXJ0eSBEZXBlbmRlbmNpZXNcblRoZSB0aGlyZCBleGFtcGxlIChpbmRleDMuaHRtbCkgdXNlcyByZXF1aXJlLmpzIHRvIGxvYWQgdGhlIHNjcmlwdHMgd2hpbGUganF1ZXJ5IGlzIGFsc28gaW50cm9kdWNlZCBhcyBhIGRlcGVuZGVuY3kuIFxuXG5cbiMjTW9yZVxuUmVsYXRlZCB0b3BpY3M6IERlcGVuZGVuY3kgSW5qZWN0aW9uIChESSksIFJldmVhbGluZyBNb2R1bGUgUGF0dGVybiwgTW9kdWxlIFBhdHRlcm4sIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhlY3V0aW9uIChJSUZFKSwgYW5kIFNlcnZpY2UgTG9jYXRvciBQYXR0ZXJuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYzc5MDE5NTktMTVjYy00ZDIxLTg2NjEtNTEyYmExOGY0MTZiIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qVTBPVGMxIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJQbHVyYWxzaWdodFNwYUp1bXBTdGFydEZpbmFsIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjhlNTJlYmVlODQ0ZDk0YzUwNGU0MzVmODU3OGQ4ZmM4MTU5NmRlYjMiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICJTUEEgSnVtcFN0YXJ0XG49PT09PT09PT09PT1cblxuU291cmNlIGNvZGUgZm9yIHRoZSBTUEEgSnVtcFN0YXJ0IFBsdXJhbHNpZ2h0IGNvdXJzZSBhdCBodHRwOi8vanBhcGEubWUvc3BhanNwc1xuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmNWM3NWY5MC04ZGEwLTQ5MDUtYjFjOC0wYjFiNjhmOGY0ZjgiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UVTRNRGszIiwKICAgICJvd25lciI6ICJqb2hucGFwYSIsCiAgICAibmFtZSI6ICJ0ZWxla2luZXNpcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4NDc3MDQ5MWM5MGUzN2FkODVjNzE1NzJjM2M5MGFjYmJlZTlmN2I5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyB0ZWxla2luZXNpc1xuKip0ZWxla2luZXNpcy5qcyoqIGlzIGEgSmF2YVNjcmlwdCBsaWJyYXJ5IHRoYXQgaGVscHMgeW91IHdyaXRlIGNvZGUgYnkganVzdCB0aGlua2luZyBpdCEgV29ya3MgZ3JlYXQgd2l0aCB2YW5pbGxhLmpzXG5cbiMjIyBUaGlzIGlzIGFuIEFwcmlsIEZvb2xzIERheSBqb2tlIC4uLiBsZWF2ZSB5b3VyIHNpZ2hzIGF0IHRoZSBkb29yLiBJdCBmdWxseSBlbnRlcnRhaW5lZCBteSBjaGlsZHJlbiA6KVxuXG5cbkZvciBtb3JlIHNlZSAoaHR0cDovL3d3dy5qb2hucGFwYS5uZXQvYmVzdC1qYXZhc2NyaXB0LWxpYnJhcnktZXZlci8pXG5cbj4gXCJUaGlua1wiIGNvZGUgYW5kIGl0IHdyaXRlcyBpdHNlbGYhXG5cbiMjIEN1cnJlbnQgVmVyc2lvblxuMS4wLjAtcHJlXG5cbiMjIFF1aWNrIHN0YXJ0XG5cbiMjIyAzIEVhc3kgU3RlcHNcbjEuIExpbmsgdG8gdGVsZWtpbmVzaXMuanMgYDxzY3JpcHQgc3JjPVwidGVsZWtpbmVzaXMuanNcIj48L3NjcmlwdD5gXG5cbjIuIFRoaW5rIGFib3V0IHlvdXIgY29kZVxuXG4zLiBXYXRjaCBpdCB3cml0ZSBpdHNlbGYhXG5cbiMjIEF1dGhvclxuKipKb2huIFBhcGEqKlxuXG4rIGh0dHA6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGFcblxuIyMgQ29weXJpZ2h0XG5Db3B5cmlnaHQgwqkgMjAxMyBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vSm9obl9QYXBhKS5cblxuIyMgTGljZW5zZSBcbnRvYXN0ciBpcyB1bmRlciBNSVQgbGljZW5zZSAtIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjMzNjQxYjUzLTBhNGYtNDU2Zi1iYTgxLTVmNmE1MWY2ZWVlNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1ETTVPVEU1Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2xpbXBzZS50b2FzdHIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYjU0NzQ1NGE0NjA1MjE5ODUwMTZmYmRjMjNhMDA0NzcxMWYxZDc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIkdsaW1wc2UuVG9hc3RyIFBsdWdpblxuPT09PT09PT09PT09XG5cblNvdXJjZSBjb2RlIGZvciB0aGUgR2xpbXBzZS5Ub2FzdHIgcGx1Z2luIGZvciBpbnRlZ3JhdGluZyB0b2FzdHIgZGlhZ25vc3RpY3MgaW50byBHbGltcHNlXG5cbiMjIEN1cnJlbnQgVmVyc2lvblxuMC4yLjBcblxuIyMgRGVtb1xuRGVtbyBjYW4gYmUgZm91bmQgW2hlcmVdKGh0dHA6Ly9Db2RlU2V2ZW4uZ2l0aHViLmNvbS90b2FzdHIpXG5cbiMjIFVzYWdlXG5MaW5rIHRvIGpxdWVyeSwgdG9hc3RyLmNzcywgdG9hc3RyLmpzLCBnbGltcHNlLmpzIGFuZCBnbGltcHNlLnRvYXN0ci5qc1xuXG5cdDxzY3JpcHQgc3JjPVwianF1ZXJ5LmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwidG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cdDxzY3JpcHQgc3JjPVwiZ2xpbXBzZS5qc1wiPjwvc2NyaXB0PlxuXHQ8c2NyaXB0IHNyYz1cImdsaW1wc2UudG9hc3RyLmpzXCI+PC9zY3JpcHQ+XG5cblVzZSB0b2FzdHIgXG5cblx0JChmdW5jdGlvbigpeyBcblx0XHR0b2FzdHIuaW5mbygndGVzdGluZycpOyBcblx0fSkoKTtcblxuQ2xpY2sgdGhlIEcgaWNvbiBpbiB0aGUgYm90dG9tIHJpZ2h0IG9mIHlvdXIgYnJvd3NlciBhbmQgZW5qb3khXG5cbiFbXShodHRwOi8vam9obnBhcGEubmV0L3dwLWNvbnRlbnQvaW1hZ2VzL2dsaW1wc2UudG9hc3RyLnBuZylcblxuXG4jIyBEZXBlbmRlbmNpZXNcblJlcXVpcmVzICBbdG9hc3RyXShodHRwOi8vanBhcGEubWUvYzd0b2FzdHIpIDEuMy4xK1xuXG4jI1Jlc291cmNlc1xuLSBbZ2xpbXBzZSBwcm90b2NvbHNdKGh0dHA6Ly9nZXRnbGltcHNlLmNvbS9Qcm90b2NvbClcbi0gW2dsaW1wc2UgY2xpZW50IHNhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9HbGltcHNlL0dsaW1wc2UvYmxvYi9tYXN0ZXIvc291cmNlL0dsaW1wc2UuSmF2YVNjcmlwdC90ZXN0X2NsaWVudC5odG1sI0wxMDEtTDEyMSlcblxuIyMgQXV0aG9yXG4qKkpvaG4gUGFwYSoqXG5cblR3aXR0ZXI6IFtAam9obl9wYXBhXShodHRwOi8vdHdpdHRlci5jb20vSm9obl9QYXBhKVxuXG4jIyBDb3B5cmlnaHRcbkNvcHlyaWdodCDCqSAyMDEzIFtKb2huIFBhcGFdKGh0dHA6Ly90d2l0dGVyLmNvbS9Kb2huX1BhcGEpLlxuXG4jIyBMaWNlbnNlIFxuZ2xpbXBzZS50b2FzdHIgaXMgdW5kZXIgW01JVCBsaWNlbnNlXShodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocCkiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIwYWRiOTNlYy00MzUxLTQ1YTYtYTkxMC1hMmU0OGQ2NmUyNDIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRNRFl4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiUGx1cmFsc2lnaHQtQ0MtQW5ndWxhci1CcmVlemUtRXh0cmEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNjBmOTY2ZGI5YjRiMmJiYzRkNDkyZmY0OWViZmUxNzcwNWU1ZGZlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIlBsdXJhbHNpZ2h0LUNDLUFuZ3VsYXItQnJlZXplLUV4dHJhXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5TdXBwb3J0aW5nIGZpbGVzIGZvciB0aGUgUGx1cmFsc2lnaHQgXCJTUEEgd2l0aCBBbmd1bGFyIGFuZCBCcmVlemVcIiBjb3Vyc2UgYnkgSm9obiBQYXBhLiBcblxuVGhlIGZpbGVzIGluY2x1ZGVkIGluIHRoaXMgcmVwb3NpdG9yeSBhcmUgaW50ZW5kZWQgdG8gaGVscCBzdHJlYW1saW5lIHRoZSBsZWFybmluZyBwcm9jZXNzIG9mIHRoZSBQbHVyYWxzaWdodCBjb3Vyc2UgU1BBIHdpdGggQW5ndWxhciBhbmQgQnJlZXplLiBEdXJpbmcgdGhlIGNvdXJzZSB5b3Ugd2lsbCBjcmVhdGUgdGhlIFdlYiBwcm9qZWN0IGZyb20gc2NyYXRjaFxuYW5kIGNyZWF0ZSB0aGUgYXBwIGxvZ2ljIHVzaW5nIEphdmFTY3JpcHQuIFRoZSBjb3Vyc2Ugd2lsbCBhc2sgeW91IHRvIGFkZCBzdXBwb3J0aW5nIGZpbGVzIChmb3VuZCBoZXJlKSB0byBqdW1wLXN0YXJ0IHRoZSBwcm9jZXNzIGFuZCBrZWVwIHlvdSBmb2N1c2VkIG9uIHRoZSBjb3JlIG1hdGVyaWFsIG9mIEFuZ3VsYXIgYW5kIEJyZWV6ZS5cblxuPiBUaXA6IElmIHlvdSBhcmUgdGFraW5nIG15IGNvdXJzZSBhbmQgeW91IGVuY291bnRlciBhbiBlcnJvciB3aGVuIGJ1aWxkaW5nIHRoZSBwcm9qZWN0IGFmdGVyIGluc3RhbGxpbmcgSG90VG93ZWwuQW5ndWxhci5CcmVlemUgcmVsYXRlZCB0byBkbGwgdmVyc2lvbnMsIHlvdSBtYXkgd2FudCB0byB0cnkgdGhlIGxhdGVzdCBwYWNrYWdlIHZlcnNpb25zLiBSdW4gdGhlc2UgdXBkYXRlcyB1c2luZyB0aGUgTnVHZXQgUGFja2FnZSBNYW5hZ2VyXG5cbmBgYFxuVXBkYXRlLVBhY2thZ2UgQnJlZXplLlNlcnZlci5Db250ZXh0UHJvdmlkZXIuRUY2XG5cblVwZGF0ZS1QYWNrYWdlIEJyZWV6ZS5TZXJ2ZXIuV2ViQXBpMlxuXG5VcGRhdGUtUGFja2FnZSBCcmVlemUuQ2xpZW50XG5cblVwZGF0ZS1QYWNrYWdlIE5ld3RvbnNvZnQuSnNvblxuYGBgXG5cbiMjIFNjcmF0Y2hcbiAtIERhdGEgbGF5ZXIgd3JpdHRlbiBpbiBDIyBhbmQgLk5FVFxuIC0gTW9kZWwgbGlicmFyeSB3cml0dGVuIGluIEMjIGFuZCAuTkVUXG4gLSBDb250ZW50IGZvbGRlciB3aXRoIGFzc2V0cyBpbmNsdWRpbmcgQ1NTIGFuZCBJbWFnZXNcbiBcbiMjIExpdG11cyBUZXN0XG4gLSBUaGlzIGlzIGp1c3QgdG8gaGVscCBmb2xrcyBhbG9uZ1xuIC0gQ29udGFpbnMgYSBydW5uaW5nIHNvbHV0aW9uIGFmdGVyIHVzaW5nIHRoZSBjb250ZW50cyBpbiB0aGUgc2NyYXRjaCBmb2xkZXIgYW5kIHJ1bm5pbmcgdGhlIDIgTnVHZXQgY29tbWFuZHMgYmVsb3c6XG5cbiBgYGBcbiAgaW5zdGFsbC1wYWNrYWdlIEVudGl0eUZyYW1ld29yay5TcWxTZXJ2ZXJDb21wYWN0XG4gIGluc3RhbGwtcGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyLkJyZWV6ZVxuIGBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJiYWVjMTBlZi1jMGYyLTRmZWUtYWZjYi03YmFjNWUwZTY0MzkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTRPVFkzTkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiSG90VG93ZWwtQW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMThlZTkxN2ZmNTk2NTgwY2M1YmU5OTdmNjIyNTMxNWFmNjZmNmIwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBIb3QgVG93ZWwgQW5ndWxhciBTUEEgVGVtcGxhdGUgI1xuXG4+IEhvdCBUb3dlbDogQmVjYXVzZSB5b3UgZG9uJ3Qgd2FudCB0byBnbyB0byB0aGUgU1BBIHdpdGhvdXQgb25lIVxuXG5XYW50IHRvIGJ1aWxkIGEgU1BBIGJ1dCBjYW4ndCBkZWNpZGUgd2hlcmUgdG8gc3RhcnQ/IFVzZSBIb3QgVG93ZWwgQW5ndWxhciBhbmQgaW4gc2Vjb25kcyB5b3UnbGwgaGF2ZSBhIFNQQSBhbmQgYWxsIHRoZSB0b29scyB5b3UgbmVlZCB0byBidWlsZCBvbiBpdCEgXG5cbiFbXShodHRwOi8vd3d3LmpvaG5wYXBhLm5ldC93cC1jb250ZW50L3VwbG9hZHMvMjAxMy8wOS9Ib3RUb3dlbC1ORy1QcmV2aWV3LnBuZylcblxuSG90IFRvd2VsIEFuZ3VsYXIgY3JlYXRlcyBhIGdyZWF0IHN0YXJ0aW5nIHBvaW50IGZvciBidWlsZGluZyBhIFNpbmdsZSBQYWdlIEFwcGxpY2F0aW9uIChTUEEpLiBPdXQgb2YgdGhlIGJveCBpdCBwcm92aWRlcyBhIG1vZHVsYXIgc3RydWN0dXJlIGZvciB5b3VyIGNvZGUsIHZpZXcgbmF2aWdhdGlvbiwgZGF0YSBiaW5kaW5nLCBzZXBhcmF0aW9uIG9mIHNlcnZpY2VzLCBhbmQgc2ltcGxlIGJ1dCBlbGVnYW50IHN0eWxpbmcuIEhvdCBUb3dlbCBwcm92aWRlcyBldmVyeXRoaW5nIHlvdSBuZWVkIHRvIGJ1aWxkIGEgU1BBLCBzbyB5b3UgY2FuIGZvY3VzIG9uIHlvdXIgYXBwLCBub3QgdGhlIHBsdW1iaW5nLlxuXG4+IExlYXJuIG1vcmUgYWJvdXQgYnVpbGRpbmcgYSBTUEEgZnJvbSBbSm9obiBQYXBhJ3MgdmlkZW9zLCB0dXRvcmlhbHMgYW5kIFBsdXJhbHNpZ2h0IGNvdXJzZXNdKGh0dHA6Ly9qb2hucGFwYS5uZXQvc3BhKS5cblxuIyMgSW5zdGFsbGluZyB2aWEgdGhlIE51R2V0IFBhY2thZ2UgIyNcbkhvdCBUb3dlbCBBbmd1bGFyIGlzIGEgTnVHZXQgcGFja2FnZSB0aGF0IGF1Z21lbnRzIGFuIGV4aXN0aW5nIGVtcHR5IEFTUC5ORVQgcHJvamVjdC4gSnVzdCBpbnN0YWxsIHVzaW5nIE51R2V0IGFuZCB0aGVuIHJ1biFcblxuICAgIEluc3RhbGwtUGFja2FnZSBIb3RUb3dlbC5Bbmd1bGFyXG5cbiMjIEhvdyBEbyBJIEJ1aWxkIE9uIEhvdCBUb3dlbD8gIyNcblNpbXBseSBzdGFydCBhZGRpbmcgY29kZSEgXG5cbjEuIEFkZCB5b3VyIG93biBzZXJ2ZXItc2lkZSBjb2RlLCBzdWNoIGFzIEVudGl0eSBGcmFtZXdvcmsgYW5kIFdlYiBBUEkgKHdoaWNoIHJlYWxseSBzaGluZXMgd2l0aCBCcmVlemUuanMpXG4yLiBBZGQgdmlld3MgYW5kIGNvbnRyb2xsZXJzXG4zLiBVcGRhdGUgdGhlIG5hdmlnYXRpb24gcm91dGVzIGluIGBjb25maWcucm91dGVzLmpzYFxuXG4jIyBBZGQgUmljaCBEYXRhIHdpdGggQnJlZXplICMjXG5BZGQgcmljaCBkYXRhIGZlYXR1cmVzIHVzaW5nIEJyZWV6ZSB0byBIb3QgVG93ZWwgQW5ndWxhciwgdmlhIE51R2V0LlxuXG4gICAgSW5zdGFsbC1QYWNrYWdlIEhvdFRvd2VsLkFuZ3VsYXIuQnJlZXplXG5cbiMjIFJlc291cmNlcyAjI1xuXG4rIFtTUEEgUmVzb3VyY2VzXShodHRwOi8vam9obnBhcGEubmV0L3NwYSlcbisgW0hvdCBUb3dlbCBBbmd1bGFyIG9uIEdpdEh1Yl0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL0hvdFRvd2VsLU5HKVxuKyBbSG90IFRvd2VsIEFuZ3VsYXIgb24gTnVHZXRdIChodHRwOi8vbnVnZXQub3JnL3BhY2thZ2VzL0hvdFRvd2VsLUFuZ3VsYXIpXG5cbiMjIEhvdCBUb3dlbCBBbmd1bGFyIGZvciBhbnkgRW52aXJvbm1lbnQgXG4rIFtIb3QgVG93ZWwgQW5ndWxhciBTZWVkL1N0YXJ0ZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9uZy1kZW1vcy90cmVlL21hc3Rlci9ob3R0b3dlbClcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjI0ZGU5N2EwLWUzZjQtNGNhNS04MTU3LWM4ZjZjYzJlMjU5NSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU1qTTJNakE1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1zdHlsZWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcwMTk1MDNmMmM4YTYzN2QxYTcwZjU3MTljYjE3Yjk2Njk2NTM1NjUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgU3R5bGUgR3VpZGVcblxuIyMgVmVyc2lvbnNcblRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBBbmd1bGFyLCBhbmQgdGh1cyB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgb2YgdGhlIGd1aWRlLiBDaG9vc2UgeW91ciBndWlkZSBhcHByb3ByaWF0ZWx5LlxuXG4jIyMgQW5ndWxhciAxIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMSBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMS9SRUFETUUubWQpLlxuXG4jIyMgQW5ndWxhciAyIFN0eWxlIEd1aWRlXG5bVGhlIEFuZ3VsYXIgMiBTdHlsZSBHdWlkZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS90cmVlL21hc3Rlci9hMi9SRUFETUUubWQpLlxuXG4jIyBBbmd1bGFyIFRlYW0gRW5kb3JzZWRcblNwZWNpYWwgdGhhbmtzIHRvIElnb3IgTWluYXIsIGxlYWQgb24gdGhlIEFuZ3VsYXIgdGVhbSwgZm9yIHJldmlld2luZywgY29udHJpYnV0aW5nIGZlZWRiYWNrLCBhbmQgZW50cnVzdGluZyBtZSB0byBzaGVwaGVyZCB0aGlzIGd1aWRlLlxuXG4jIyBQdXJwb3NlXG4qT3BpbmlvbmF0ZWQgQW5ndWxhciBzdHlsZSBndWlkZSBmb3IgdGVhbXMgYnkgW0Bqb2huX3BhcGFdKC8vdHdpdHRlci5jb20vam9obl9wYXBhKSpcblxuSWYgeW91IGFyZSBsb29raW5nIGZvciBhbiBvcGluaW9uYXRlZCBzdHlsZSBndWlkZSBmb3Igc3ludGF4LCBjb252ZW50aW9ucywgYW5kIHN0cnVjdHVyaW5nIEFuZ3VsYXIgYXBwbGljYXRpb25zLCB0aGVuIHN0ZXAgcmlnaHQgaW4uIFRoZXNlIHN0eWxlcyBhcmUgYmFzZWQgb24gbXkgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZSB3aXRoIFtBbmd1bGFyXSgvL2FuZ3VsYXJqcy5vcmcpLCBwcmVzZW50YXRpb25zLCBbUGx1cmFsc2lnaHQgdHJhaW5pbmcgY291cnNlc10oaHR0cDovL2FwcC5wbHVyYWxzaWdodC5jb20vYXV0aG9yL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG5cblRoZSBwdXJwb3NlIG9mIHRoaXMgc3R5bGUgZ3VpZGUgaXMgdG8gcHJvdmlkZSBndWlkYW5jZSBvbiBidWlsZGluZyBBbmd1bGFyIGFwcGxpY2F0aW9ucyBieSBzaG93aW5nIHRoZSBjb252ZW50aW9ucyBJIHVzZSBhbmQsIG1vcmUgaW1wb3J0YW50bHksIHdoeSBJIGNob29zZSB0aGVtLlxuXG4+SWYgeW91IGxpa2UgdGhpcyBndWlkZSwgY2hlY2sgb3V0IG15IFtBbmd1bGFyIFBhdHRlcm5zOiBDbGVhbiBDb2RlXShodHRwOi8vanBhcGEubWUvbmdjbGVhbikgY291cnNlIGF0IFBsdXJhbHNpZ2h0IHdoaWNoIGlzIGEgY29tcGFuaW9uIHRvIHRoaXMgZ3VpZGUuXG5cbiAgWyFbQW5ndWxhciBQYXR0ZXJuczogQ2xlYW4gQ29kZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2pvaG5wYXBhL2FuZ3VsYXItc3R5bGVndWlkZS9tYXN0ZXIvYTEvYXNzZXRzL25nLWNsZWFuLWNvZGUtYmFubmVyLnBuZyldKGh0dHA6Ly9qcGFwYS5tZS9uZ2NsZWFuKVxuXG4jIyBDb21tdW5pdHkgQXdlc29tZW5lc3MgYW5kIENyZWRpdFxuTmV2ZXIgd29yayBpbiBhIHZhY3V1bS4gSSBmaW5kIHRoYXQgdGhlIEFuZ3VsYXIgY29tbXVuaXR5IGlzIGFuIGluY3JlZGlibGUgZ3JvdXAgd2hvIGFyZSBwYXNzaW9uYXRlIGFib3V0IHNoYXJpbmcgZXhwZXJpZW5jZXMuIE1hbnkgb2YgbXkgc3R5bGVzIGhhdmUgYmVlbiBmcm9tIHRoZSBtYW55IHBhaXIgcHJvZ3JhbW1pbmcgc2Vzc2lvbnMgW1dhcmQgQmVsbF0oaHR0cHM6Ly90d2l0dGVyLmNvbS93YXJkYmVsbCkgYW5kIEkgaGF2ZSBoYWQuIE15IG1vc3QgZXhjZWxsZW50IGZyaWVuZCBXYXJkIGhhcyBoZWxwZWQgaW5mbHVlbmNlIHRoZSB1bHRpbWF0ZSBldm9sdXRpb24gb2YgdGhlc2UgZ3VpZGVzLlxuXG4jIyBDb250cmlidXRpbmdcbk9wZW4gYW4gaXNzdWUgZmlyc3QgdG8gZGlzY3VzcyBwb3RlbnRpYWwgY2hhbmdlcy9hZGRpdGlvbnMuIElmIHlvdSBoYXZlIHF1ZXN0aW9ucyB3aXRoIHRoZSBndWlkZSwgZmVlbCBmcmVlIHRvIGxlYXZlIHRoZW0gYXMgaXNzdWVzIGluIHRoZSByZXBvc2l0b3J5LiBJZiB5b3UgZmluZCBhIHR5cG8sIGNyZWF0ZSBhIHB1bGwgcmVxdWVzdC4gVGhlIGlkZWEgaXMgdG8ga2VlcCB0aGUgY29udGVudCB1cCB0byBkYXRlIGFuZCB1c2UgZ2l0aHVi4oCZcyBuYXRpdmUgZmVhdHVyZSB0byBoZWxwIHRlbGwgdGhlIHN0b3J5IHdpdGggaXNzdWVzIGFuZCBQUuKAmXMsIHdoaWNoIGFyZSBhbGwgc2VhcmNoYWJsZSB2aWEgZ29vZ2xlLiBXaHk/IEJlY2F1c2Ugb2RkcyBhcmUgaWYgeW91IGhhdmUgYSBxdWVzdGlvbiwgc29tZW9uZSBlbHNlIGRvZXMgdG9vISBZb3UgY2FuIGxlYXJuIG1vcmUgaGVyZSBhdCBhYm91dCBob3cgdG8gY29udHJpYnV0ZS5cblxuKkJ5IGNvbnRyaWJ1dGluZyB0byB0aGlzIHJlcG9zaXRvcnkgeW91IGFyZSBhZ3JlZWluZyB0byBtYWtlIHlvdXIgY29udGVudCBhdmFpbGFibGUgc3ViamVjdCB0byB0aGUgbGljZW5zZSBvZiB0aGlzIHJlcG9zaXRvcnkuKlxuXG4jIyMgUHJvY2Vzc1xuICAgIDEuIERpc2N1c3MgdGhlIGNoYW5nZXMgaW4gYSBHaXRIdWIgaXNzdWUuXG4gICAgMi4gT3BlbiBhIFB1bGwgUmVxdWVzdCwgcmVmZXJlbmNlIHRoZSBpc3N1ZSwgYW5kIGV4cGxhaW4gdGhlIGNoYW5nZSBhbmQgd2h5IGl0IGFkZHMgdmFsdWUuXG4gICAgMy4gVGhlIFB1bGwgUmVxdWVzdCB3aWxsIGJlIGV2YWx1YXRlZCBhbmQgZWl0aGVyIG1lcmdlZCBvciBkZWNsaW5lZC5cblxuIyMgTGljZW5zZVxuXG5fdGxkcjsgVXNlIHRoaXMgZ3VpZGUuIEF0dHJpYnV0aW9ucyBhcmUgYXBwcmVjaWF0ZWQuX1xuXG4jIyMgQ29weXJpZ2h0XG5cbkNvcHlyaWdodCAoYykgMjAxNC0yMDE2IFtKb2huIFBhcGFdKGh0dHA6Ly9qb2hucGFwYS5uZXQpXG5cbiMjIyAoVGhlIE1JVCBMaWNlbnNlKVxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG5hIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbidTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG5FWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbk1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG5DTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcblNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4qKltCYWNrIHRvIHRvcF0oI2FuZ3VsYXItc3R5bGUtZ3VpZGUpKipcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU3ZWYxMDQ3LTQ2ZjgtNDI0Yi1iZjA1LWI0M2M5NGRkNmQ5ZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5ERTFNVFE0TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmctcGF0dGVybnMtdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIwMzU5ZWE3MDdiMDgxNGVmZDg2NDc4YTI4MWY3M2Y2NmM2ZGI1NjZjIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiI0FuZ3VsYXJKUyBQYXR0ZXJucyBUZXN0aW5nIC0gRGVtb1xuRGVtb25zdHJhdGVzIEFuZ3VsYXIgdGVzdGluZ1xuXG5bIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9qb2hucGFwYS9uZy1wYXR0ZXJucy10ZXN0aW5nLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2pvaG5wYXBhL25nLXBhdHRlcm5zLXRlc3RpbmcpXG5cbj4qT3BpbmlvbmF0ZWQgQW5ndWxhckpTIHN0eWxlIGd1aWRlIGZvciB0ZWFtcyBieSBbQGpvaG5fcGFwYV0oLy90d2l0dGVyLmNvbS9qb2huX3BhcGEpKlxuXG4+TW9yZSBkZXRhaWxzIGFib3V0IHRoZSBzdHlsZXMgYW5kIHBhdHRlcm5zIHVzZWQgaW4gdGhpcyBhcHAgY2FuIGJlIGZvdW5kIGluIG15IFtBbmd1bGFySlMgU3R5bGUgR3VpZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyanMtc3R5bGVndWlkZSkgYW5kIG15ICoqQW5ndWxhckpTIFBhdHRlcm5zOiBDbGVhbiBDb2RlKiooY29taW5nIHNvb24pIGNvdXJzZSBhdCBbUGx1cmFsc2lnaHRdKGh0dHA6Ly9wbHVyYWxzaWdodC5jb20vdHJhaW5pbmcvQXV0aG9ycy9EZXRhaWxzL2pvaG4tcGFwYSkgYW5kIHdvcmtpbmcgaW4gdGVhbXMuXG4+IFxuIyMgU2xpZGVzXG5cblRoZSBzbGlkZXMgZm9yIFdhcmQncyB0YWxrIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgcHJvamVjdCBhcmUgYXZhaWxhYmxlIG9uIGdvb2dsZSBkb2NzLlxuXG5bU2VlIHRoZSBzbGlkZXNdKGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kLzEzN2xnTE10ZmxXM3E0U0JLcnJqVmdpdVNBaTZHQzE5VDRtTlZveC00a1Y4L3ByZXNlbnQpXG5cbiMjIFRPRE9cbjEuIFN0cnVjdHVyZSB3aWxsIGhhdmUgc3BlY3Mgc2lkZSBieSBzaWRlIHdpdGggY29kZSwgZXhjZXB0IGNyb3NzIGN1dHRpbmcgdGVzdHNcbjIuIFJlbW92ZSBleHRyYW5lb3VzIGNvZGUgdW5yZWxhdGVkIHRvIHRlc3RzXG4zLiBBZGQgdWktcm91dGVyXG40LiBSZXZpc2UgZnJvbSBhdmVuZ2Vyc1xuXG4jIyBTdHJ1Y3R1cmVcblx0L2J1aWxkIFx0KGNyZWF0ZWQgb24gdGhlIGZseSlcblx0L2d1bHBcdFxuXHQvc3JjXG5cdFx0L2NsaWVudFxuXHRcdFx0L2FwcFxuXHRcdFx0L2NvbnRlbnRcblx0XHRcdC90ZXN0XG5cdFx0L3NlcnZlclxuXHRcdFx0L2RhdGFcblx0XHRcdC9yb3V0ZXNcblx0XG5cbiMjIEluc3RhbGxpbmcgTm9kZS5qcyBhbmQgQm93ZXIgUGFja2FnZXNcbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBucG0gaW5zdGFsbGBcblxuPkRvIG5vdCBiZSBhbGFybWVkIGJ5IHRoZSBvY2Nhc2lvbmFsIHNlYSBvZiByZWQgY29tcGxhaW5pbmcgYWJvdXRcbnRoZSBpbmFiaWxpdHkgdG8gcmUtYnVpbGQgc29tZSBsaWJyYXJ5LiBZb3UgY2FuIGlnbm9yZSB0aGVzZSB3YXJuaW5nc1xuYmVjYXVzZSB3ZSBhbHdheXMgdXNlIHRoZSBwcmUtYnVpbHQgbGlicmFyaWVzIHRoYXQgd2VyZSBzaGlwcGVkIHdpdGhcbnRoZSBwYWNrYWdlLlxuXG4jIyBDbGVhbmluZyBcbk92ZXIgdGltZSB5b3UgbWlnaHQgYWNjdW11bGF0ZSBzb21lIG9sZCBsaWJyYXJpZXMuXG5cbkl0IGRvZXNuJ3QgaHVydCB0byBvY2Nhc2lvbmFsbHkgY2xlYXIgdGhlIGRlY2tzIGJ5IGRlbGV0aW5nIHRoZVxuXCJib3dlclxcX2NvbXBvbmVudHNcIiBhbmQgXCJub2RlXFxfbW9kdWxlc1wiIGZvbGRlcnMgYW5kIHJlLWluc3RhbGxpbmdcbndpdGggYG5wbSBpbnN0YWxsYC5cblxuIyMgSW5zdGFsbGluZyBCb3dlciBQYWNrYWdlc1xuYG5wbSBpbnN0YWxsYCB3aWxsIGluc3RhbGwgdGhlc2UgdG9vLCBidXQgeW91IGNhbiBkbyBpdCBtYW51YWxseS5cbi0gT3BlbiB0ZXJtaW5hbFxuLSBUeXBlIGBib3dlciBpbnN0YWxsYFxuXG5cbiMjIFRlc3RpbmdcblRoZXJlIGFyZSB0d28gd2F5cyB0byB0ZXN0OiBpbiB0aGUgYnJvd3NlciBhbmQgd2l0aCBrYXJtYVxuXG4jIyMgVGVzdGluZyBpbiB0aGUgYnJvd3NlclxuXG4qIE9wZW4gYSBjb21tYW5kIG9yIHRlcm1pbmFsIHdpbmRvdy5cblxuKiBXaXRoIGJyb3dzZXItc3luYyBcbiAgICAqIGluIHNwZWNzLmh0bWwsIGNvbW1lbnQgb3V0IGBtb2NoYS5jaGVja0xlYWtzKClgIC8vIGZhbHNlIGxlYWsgcmVwb3J0IGZyb20gYnJvd3NlciBzeW5jXG4gICAgKiBydW4gYGd1bHAgc2VydmUtc3BlY3NgPGJyLz48YnIvPlxuXG4qIFdpdGhvdXQgYnJvd3Nlci1zeW5jIFxuICAgICogcnVuIGBndWxwIHNlcnZlLXNwZWNzIC0tbm9zeW5jYFxuXHQqIG9wZW4gYSBicm93c2VyIHRvIGBsb2NhbGhvc3Q6NzIwMi9zcGVjcy5odG1sYFxuXHQqIGJyb3dzaW5nIHRvIGBsb2NhbGhvc3Q6NzIwMmAgcnVucyB0aGUgYXBwPGJyLz48YnIvPlxuXG4qIFRvIHN0b3AsIGVpdGhlciBcIkN0cmwtQ1wiIGFuZCBhbnN3ZXIgdGhlIHByb21wdCB3aXRoIFwiWVwiIG9yIGp1c3QgY2xvc2UgdGhlIHdpbmRvdy5cblxuIyMjIFRlc3Rpbmcgd2l0aCBrYXJtYVxuKiBPcGVuIGEgY29tbWFuZCBvciB0ZXJtaW5hbCB3aW5kb3cuXG5cbiogVG8ganVzdCB0aGUgdW5pdCB0ZXN0cywgdHlwZSBgZ3VscCBhdXRvdGVzdGAgXG5cbiogVG8gcnVuIGJvdGggdW5pdCBhbmQgbWlkd2F5IHRlc3RzIChzcGlucyB1cCBhIGRldiBzZXJ2ZXIpLCB0eXBlIGBndWxwIGF1dG90ZXN0IC0tc3RhcnRTZXJ2ZXJzYFxuXG5UZXN0aW5nIHVzZXMga2FybWEsIG1vY2hhLCBjaGFpLCBzaW5vbiwgbmdNaWR3YXlUZXN0ZXIgbGlicmFyaWVzLlxuXG4+XCJhdXRvdGVzdFwiIHN0YXJ0cyB0aGUgdGVzdHMgYW5kIHN0YXlzIGFsaXZlLCB3YXRjaGluZyBmb3IgZmlsZSBjaGFuZ2VzLiBUeXBlIFwidGVzdFwiIGluc3RlYWQgaWYgeW91IG9ubHkgd2FudCB0byBydW4gdGhlIHRlc3RzIG9uY2UgYW5kIHRoZW4gZXhpdC5cblxuKiBUbyBzdG9wLCBlaXRoZXIgXCJDdHJsLUNcIiBhbmQgYW5zd2VyIHRoZSBwcm9tcHQgd2l0aCBcIllcIiBvciBqdXN0IGNsb3NlIHRoZSB3aW5kb3cuXG5cbiMjIFJ1bm5pbmcgdGhlIGFwcFxuUnVucyBsb2NhbGx5LCBubyBkYXRhYmFzZSByZXF1aXJlZC5cblxuIyMjIERldiBCdWlsZHNcblRoZSBkZXYgYnVpbGQgZG9lcyBub3Qgb3B0aW1pemUgdGhlIGRlcGxveWVkIGNvZGUuIEl0IHNpbXBseSBydW5zIGl0IGluIHBsYWNlLiBZb3UgY2FuIHJ1biBhIGRldiBidWlsZCBpbiBtdWx0aXBsZSB3YXlzLlxuXG4jIyMjT3B0aW9uIDEgLSBTZXJ2ZVxuVHlwZSBgZ3VscCBzZXJ2ZS1kZXZgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuIyMjI09wdGlvbiAyIC0gU2VydmUgYW5kIERlYnVnIE5vZGVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnYCBhbmQgYnJvd3NlIHRvIGBodHRwOi8vbG9jYWxob3N0OjcyMDJgIGZvciB0aGUgY2xpZW50IGFuZCBgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlYnVnP3BvcnQtNTg1OGAgdG8gZGVidWcgdGhlIHNlcnZlci5cblxuIyMjI09wdGlvbiAzIC0gU2VydmUgYW5kIERlYnVnIE5vZGUgQnJlYWtpbmcgb24gMXN0IExpbmVcblR5cGUgYGd1bHAgc2VydmUtZGV2LWRlYnVnLWJya2AgYW5kIGJyb3dzZSB0byBgaHR0cDovL2xvY2FsaG9zdDo3MjAyYCBmb3IgdGhlIGNsaWVudCBhbmQgYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9kZWJ1Zz9wb3J0LTU4NThgIHRvIGRlYnVnIHRoZSBzZXJ2ZXIuXG5cbiMjIyBTdGFnaW5nIEJ1aWxkXG5UaGUgc3RhZ2luZyBidWlsZCBpcyBhbiBvcHRpbWl6ZWQgYnVpbGQuIFR5cGUgYGd1bHAgc2VydmUtc3RhZ2VgIGFuZCBicm93c2UgdG8gYGh0dHA6Ly9sb2NhbGhvc3Q6NzIwMmBcblxuVGhlIG9wdGltaXphdGlvbnMgYXJlIHBlcmZvcm1lZCBieSB0aGUgZ3VscCB0YXNrcyBhbmQgaW5jbHVkZSB0aGUgZm9sbG93aW5nIGxpc3QuIFNlZSB0aGUgYGd1bHBmaWxlLmpzYCBmb3IgZGV0YWlsc1xuXG4tIGpzaGludFxuLSBwcmVwYXJpbmcgQW5ndWxhcidzIHRlbXBsYXRlY2FjaGUgZm9yIGh0bWwgdGVtcGxhdGVzXG4tIGNvbmNhdCB0YXNrIHRvIGJ1bmRsZSBjc3MgYW5kIGpzLCBzZXBhcmF0ZWx5XG4tIEFuZ3VsYXIgZGVwZW5kZW5jeSBpbmplY3Rpb24gYW5ub3RhdGlvbnMgdXNpbmcgbmdBbm5vdGF0ZVxuLSB1Z2xpZnkgdG8gbWluaWZ5IGFuZCBtYW5nbGUgamF2YXNjcmlwdFxuLSBzb3VyY2UgbWFwc1xuLSBjc3MgYXV0b3ByZWZpeGVyIGZvciB2ZW5kb3IgcHJlZml4ZXNcbi0gbWluaWZ5IGNzc1xuLSBvcHRpbWl6ZSBpbWFnZXNcbi0gaW5kZXguaHRtbCBpbmplY3Rpb24gZm9yIHNjcmlwdHMgYW5kIGxpbmtzXG4tIGRlcGxveWluZyBhbGwganMsIGNzcywgaW1hZ2VzLCBmb250cywgYW5kIGluZGV4Lmh0bWxcblxuIyMgSG93IFRoZSBBcHAgV29ya3NcblRoZSBhcHAgaXMgcXVpdGUgc2ltcGxlIGFuZCBoYXMgMiBtYWluIHJvdXRlczpcbi0gZGFzaGJvYXJkXG4tIGF2ZW5nZXJzIGxpc3RcblxuIyMjIFRoZSBNb2R1bGVzXG5UaGUgYXBwIGhhcyA0IGZlYXR1cmUgbW9kdWxlcyBhbmQgZGVwZW5kcyBvbiBhIHNlcmllcyBvZiBleHRlcm5hbCBtb2R1bGVzIGFuZCBjdXN0b20gYnV0IGNyb3NzLWFwcCBtb2R1bGVzXG5cblx0YXBwIC0tPiBbXG5cdCAgICAgICAgYXBwLmF2ZW5nZXJzLFxuXHQgICAgICAgIGFwcC5kYXNoYm9hcmQsXG5cdCAgICAgICAgYXBwLmxheW91dCxcblx0ICAgICAgICBhcHAud2lkZ2V0cyxcblx0XHRcdGFwcC5jb3JlIC0tPiBbXG5cdFx0XHRcdG5nQW5pbWF0ZSxcblx0XHRcdFx0bmdSb3V0ZSxcblx0XHRcdFx0bmdTYW5pdGl6ZSxcblx0XHRcdFx0YmxvY2tzLmV4Y2VwdGlvbixcblx0XHRcdFx0YmxvY2tzLmxvZ2dlcixcblx0XHRcdFx0YmxvY2tzLnJvdXRlclxuXHRcdFx0XVxuXHQgICAgXVxuXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImQ3Zjg0OTQ2LTc1OGMtNGNhNi1iNzkxLWUxYmE2YTBlMmFiYSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9EUXpNalV4TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtZ3VscCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJkZmY1NTcyOTVhZTU0ODA1Y2FlZGZjYTg3NjUyOWIzMDMwMjkzZjU1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1ndWxwXG5Zb3UndmUgYnVpbHQgeW91ciBKYXZhU2NyaXB0IGFwcGxpY2F0aW9uIGJ1dCBob3cgZG8geW91IGF1dG9tYXRlIHRlc3RpbmcsIGNvZGUgYW5hbHlzaXMsIHJ1bm5pbmcgaXQgbG9jYWxseSBvciBkZXBsb3lpbmcgaXQ/IFRoZXNlIHJlZHVuZGFudCB0YXNrcyBjYW4gY29uc3VtZSB2YWx1YWJsZSB0aW1lIGFuZCByZXNvdXJjZXMuIFN0b3Agd29ya2luZyBzbyBoYXJkIGFuZCB0YWtlIGFkdmFudGFnZSBvZiBKYXZhU2NyaXB0IHRhc2sgYXV0b21hdGlvbiB1c2luZyBHdWxwIHRvIHN0cmVhbWxpbmUgdGhlc2UgdGFza3MgYW5kIGdpdmUgeW91IGJhY2sgbW9yZSB0aW1lIGluIHRoZSBkYXkuIFN0dWR5aW5nIHRoaXMgcmVwbyBjYW4gaGVscCBjbGFyaWZ5IGhvdyBHdWxwIHdvcmtzLCBqdW1wLXN0YXJ0IHRhc2sgYXV0b21hdGlvbiB3aXRoIEd1bHAsIGZpbmQgYW5kIHJlc29sdmUgaXNzdWVzIGZhc3RlciwgYW5kIGJlIGEgbW9yZSBwcm9kdWN0aXZlLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuLSBJbnN0YWxsIE5vZGVcblx0LSBvbiBPU1ggaW5zdGFsbCBbaG9tZSBicmV3XShodHRwOi8vYnJldy5zaC8pIGFuZCB0eXBlIGBicmV3IGluc3RhbGwgbm9kZWBcblx0LSBvbiBXaW5kb3dzIGluc3RhbGwgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBcbiAgICAtIFJlYWQgaGVyZSBmb3Igc29tZSBbdGlwcyBvbiBXaW5kb3dzXShodHRwOi8vanBhcGEubWUvd2lubm9kZSlcbiAgICAtIG9wZW4gY29tbWFuZCBwcm9tcHQgYXMgYWRtaW5pc3RyYXRvclxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuICAgICAgICAtIHR5cGUgYGNob2NvIGluc3RhbGwgbm9kZWpzLmluc3RhbGxgXG4tIE9uIE9TWCB5b3UgY2FuIGFsbGV2aWF0ZSB0aGUgbmVlZCB0byBydW4gYXMgc3VkbyBieSBbZm9sbG93aW5nIHRoZXNlIGluc3RydWN0aW9uc10oaHR0cDovL2pwYXBhLm1lL25vbW9yZXN1ZG8pLiBJIGhpZ2hseSByZWNvbW1lbmQgdGhpcyBzdGVwIG9uIE9TWFxuLSBPcGVuIHRlcm1pbmFsXG4tIFR5cGUgYG5wbSBpbnN0YWxsIC1nIG5vZGUtaW5zcGVjdG9yIGJvd2VyIGd1bHBgXG5cbiMjIFF1aWNrIFN0YXJ0XG5QcmlvciB0byB0YWtpbmcgdGhlIGNvdXJzZSwgY2xvbmUgdGhpcyByZXBvIGFuZCBydW4gdGhlIGNvbnRlbnQgbG9jYWxseVxuYGBgYmFzaFxuJCBucG0gaW5zdGFsbFxuJCBib3dlciBpbnN0YWxsXG4kIG5wbSBzdGFydFxuYGBgXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjE1ZTRiNDg2LTIzYTQtNDRiOS04Y2RlLWYzZDIzYWM1ZWY2NSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU9UazBNak13T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtbmctdGVzdGluZyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1NWU3Yjk2NTc5MDBlNmNiNjEyZTM5MjBmYTI5MzRlNWNiYThmZDNkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBwbHVyYWxzaWdodC1uZy10ZXN0aW5nXG5UQkQ6IFdoYXQgaXMgdGhpc1xuXG4jIyBJbnN0YWxsXG5cbiogY2xvbmUgZnJvbSBnaXRodWIgb3IgZG93bmxvYWQgaXRcbiogYG5wbSBpbnN0YWxsYFxuXG4jIyBSdW5cbiogbGF1bmNoIHNlcnZlciBpbiB0ZXJtaW5hbC9jb21tYW5kIHdpbmRvdzogYG5vZGUgc3JjL3NlcnZlci9hcHAuanNgXG4qIEZvciBhcHAsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi8+XG4qIEZvciBtaW5Nb2NoYS5odG1sLCBicm93c2UgdG86IDxodHRwOi8vbG9jYWxob3N0OjcyNzIvbWluTW9jaGEuaHRtbD5cbiogRm9yIHNwZWNzLmh0bWwsIGJyb3dzZSB0bzogPGh0dHA6Ly9sb2NhbGhvc3Q6NzI3Mi9zcGVjcy5odG1sPlxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZGIyMzdlOWItZTdlOS00M2IwLWJkMjktODFiYjVlNWI5ODMzIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiaG90dG93ZWwtYW5ndWxhci10eXBlc2NyaXB0IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cDovL2NoYW5uZWw5Lm1zZG4uY29tL0V2ZW50cy9CdWlsZC8yMDE1LzMtNjgwKSBwcmVzZW50ZWQgYnkgRXJpY2ggR2FtbWEsIENocmlzIERpYXMgYW5kIEpvaG4gUGFwYS5cblxuIyMgUHJlcmVxdWlzaXRlc1xuXG4xLiBJbnN0YWxsIFtOb2RlLmpzXShodHRwOi8vbm9kZWpzLm9yZykgXG4gLSBvbiBPU1ggdXNlIFtob21lYnJld10oaHR0cDovL2JyZXcuc2gpIGBicmV3IGluc3RhbGwgbm9kZWBcbiAtIG9uIFdpbmRvd3MgdXNlIFtjaG9jb2xhdGV5XShodHRwczovL2Nob2NvbGF0ZXkub3JnLykgYGNob2NvIGluc3RhbGwgbm9kZWpzYFxuXG4yLiBJbnN0YWxsIFllb21hbiBgbnBtIGluc3RhbGwgLWcgeW9gXG5cbjMuIEluc3RhbGwgdGhlc2UgTlBNIHBhY2thZ2VzIGdsb2JhbGx5XG5cbiAgICBgYGBiYXNoXG4gICAgbnBtIGluc3RhbGwgLWcgYm93ZXIgZ3VscCBub2RlbW9uXG4gICAgYGBgXG5cbiAgICA+UmVmZXIgdG8gdGhlc2UgW2luc3RydWN0aW9ucyBvbiBob3cgdG8gbm90IHJlcXVpcmUgc3Vkb10oaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9ndWlkZXMvYmxvYi9tYXN0ZXIvbnBtLWdsb2JhbC13aXRob3V0LXN1ZG8ubWQpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmODY5OTI5Ny01NWRlLTQ3NGItYmUyZS1iMGFhM2YxZTg2MTQiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rek5ERTFORFE0T0E9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJob3R0b3dlbC1hbmd1bGFyLXR5cGVzY3JpcHQiLAogICJkZWZhdWx0QnJhbmNoT2lkIjogImU3ZjgxNTBkY2RiY2RiMDk1MTMwNDE0MTBjNDI4NjJkNjdkMDBlNmUiLAogICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAicmVhZG1lVGV4dCI6ICIjIFZpc3VhbCBTdHVkaW8gQ29kZSBEZW1vIHdpdGggQW5ndWxhciwgVHlwZVNjcmlwdCwgTm9kZSwgYW5kIEhvdFRvd2VsXG5cbkFzIHNlZW4gYXQgWy8vQnVpbGQgMjAxNV0oaHR0cHM6Ly9jaGFubmVsOS5tc2RuLmNvbTo4MC9FdmVudHMvQnVpbGQvMjAxNS8zLTY4MD9XVC5tY19pZD1ob3R0b3dlbGFuZ3VsYXJ0eXBlc2NyaXB0LWdpdGh1Yi1qb3BhcGEpIHByZXNlbnRlZCBieSBFcmljaCBHYW1tYSwgQ2hyaXMgRGlhcyBhbmQgSm9obiBQYXBhLlxuXG4jIyBQcmVyZXF1aXNpdGVzXG5cbjEuIEluc3RhbGwgW05vZGUuanNdKGh0dHA6Ly9ub2RlanMub3JnKSBcbiAtIG9uIE9TWCB1c2UgW2hvbWVicmV3XShodHRwOi8vYnJldy5zaCkgYGJyZXcgaW5zdGFsbCBub2RlYFxuIC0gb24gV2luZG93cyB1c2UgW2Nob2NvbGF0ZXldKGh0dHBzOi8vY2hvY29sYXRleS5vcmcvKSBgY2hvY28gaW5zdGFsbCBub2RlanNgXG5cbjIuIEluc3RhbGwgWWVvbWFuIGBucG0gaW5zdGFsbCAtZyB5b2BcblxuMy4gSW5zdGFsbCB0aGVzZSBOUE0gcGFja2FnZXMgZ2xvYmFsbHlcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaW5zdGFsbCAtZyBib3dlciBndWxwIG5vZGVtb25cbiAgICBgYGBcblxuICAgID5SZWZlciB0byB0aGVzZSBbaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBub3QgcmVxdWlyZSBzdWRvXShodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2d1aWRlcy9ibG9iL21hc3Rlci9ucG0tZ2xvYmFsLXdpdGhvdXQtc3Vkby5tZClcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4NTk0OWIzMi01Yjk1LTQ5ODctOGRhZC0wZjQ4YmI3YjIxMjIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME1ERTRNVEl4TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAicGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXMiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiYzYxZmY0ZTBkOTg2YTQ1OWM4NDE0YWVlYTZhZTBhNTcyMTE1Mzc0NyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgcGx1cmFsc2lnaHQtdnNjb2RlLXNhbXBsZXNcblZTIENvZGUgc2FtcGxlcyBmb3IgUGx1cmFsc2lnaHQgY291cnNlIG9uIENvZGVcblxuRm9yIG1vc3Qgc2FtcGxlcyB5b3Ugd2lsbCBuZWVkIHRoZXNlIGdsb2JhbCBucG0gcGFja2FnZXMgdG8gYmUgaW5zdGFsbGVkLlxuXG5gYGBqYXZhc2NyaXB0XG5ucG0gaW5zdGFsbCBncnVudC1jbGkgZ3VscCBib3dlciB0eXBlc2NyaXB0IGJhYmVsIC1nXG5gYGBcblxuIyMgYXNwIHBsYXlcbkFTUC5ORVQgNSBzYW1wbGUgYXBwbGljYXRpb24uIENyZWF0ZWQgZnJvbSB0aGUgYXNwLm5ldCBnZW5lcmF0b3JcblxuRmlyc3QgbWFrZSBzdXJlIHlvdSBpbnN0YWxsIEFTUC5ORVQgNSBhbmQgRE5YXG5cbiMjIGFuZ3VsYXIyZml2ZW1pbnV0ZXNcbkFuZ3VsYXIgMiBzYW1wbGUgYXBwbGljYXRpb24uXG5cblJ1biBhIHN0YXRpYyBzZXJ2ZXIgaW4gdGhlIHJvb3RcblxuYGBgamF2YXNjcmlwdFxuY2QgYW5ndWxhcjJmaXZlbWludXRlc1xuc3NcbmBgYFxuXG4jIyBjb2RlIHBsYXlcbkphdmFTY3JpcHQgKEVTNSkgc2FtcGxlIGFwcGxpY2F0aW9uLiBDcmVhdGVkIGZyb20gdGhlIEhvdCBUb3dlbCBnZW5lcmF0b3IuXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBjb2RlcGxheVxubnBtIGluc3RhbGxcbmJvd2VyIGluc3RhbGxcbmBgYFxuXG5UbyBydW4gaXRcblxuYGBgamF2YXNjcmlwdFxuZ3VscCBzZXJ2ZS1kZXZcbmBgYFxuXG4jIyBlczYgcGxheVxuSmF2YVNjcmlwdCAoRVM2KSBzYW1wbGUgYXBwbGljYXRpb24uXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBlczZwbGF5XG5ucG0gaW5zdGFsbFxuYm93ZXIgaW5zdGFsbFxuYGBgXG5cblRvIHJ1biBpdFxuXG5gYGBqYXZhc2NyaXB0XG5ndWxwIHNlcnZlLWRldlxuYGBgXG5cbiMjIGdydW50cHJvamVjdFxuR3J1bnQgZmlsZSBzYW1wbGUgYXBwbGljYXRpb24uXG5cbkdldCBhbGwgY29kZVxuXG5gYGBqYXZhc2NyaXB0XG5jZCBncnVudHByb2plY3Rcbm5wbSBpbnN0YWxsXG5gYGBcblxuVG8gcnVuIGl0XG5cbmBgYGphdmFzY3JpcHRcbmdydW50IGdydW50LWhpbnRcbmBgYFxuXG4jIyB0cyBwbGF5XG5UeXBlU2NyaXB0IHNhbXBsZSBhcHBsaWNhdGlvbi5cblxuR2V0IGFsbCBjb2RlXG5cbmBgYGphdmFzY3JpcHRcbmNkIHRzcGxheVxubnBtIGluc3RhbGxcbmJvd2VyIGluc3RhbGxcbmBgYFxuXG5UbyBydW4gaXRcblxuYGBgamF2YXNjcmlwdFxuZ3VscCBzZXJ2ZS1kZXZcbmBgYFxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJlY2NjZWE4MC03MWUzLTQwYTYtOWEwYS01YzllYTAwNDdmZTciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME5qQTVNREU1T1E9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWFuZ3VsYXIxLXNuaXBwZXRzIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImY2ZDYyMzY0NTM0ZGRiNmZjZDNkZmVhOWQxOTQ0ZGQ1MGRmMmY0ZDUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEFuZ3VsYXIgMSBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0IFNuaXBwZXRzIGZvciBWUyBDb2RlXG5cblRoaXMgZXh0ZW5zaW9uIGZvciBWaXN1YWwgU3R1ZGlvIENvZGUgYWRkcyBzbmlwcGV0cyBmb3IgQW5ndWxhciAxIGZvciBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0LlxuXG4hW1VzZSBFeHRlbnNpb25dKGltYWdlcy91c2UtZXh0ZW5zaW9uLmdpZilcblxuIyMgVXNhZ2VcblxuVHlwZSBwYXJ0IG9mIGEgc25pcHBldCwgcHJlc3MgYGVudGVyYCwgYW5kIHRoZSBzbmlwcGV0IHVuZm9sZHMuXG5cbkphdmFTY3JpcHQgU25pcHBldHNcblxuYGBgamF2YXNjcmlwdFxubmcxY29tcG9uZW50OyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29tcG9uZW50XG5uZzFjb250cm9sbGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29udHJvbGxlclxubmcxZGlyZWN0aXZlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZGlyZWN0aXZlXG5uZzFmYWN0b3J5OyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZmFjdG9yeVxubmcxbW9kdWxlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgbW9kdWxlXG5uZzFzZXJ2aWNlOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgc2VydmljZVxubmcxZmlsdGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgZmlsdGVyXG5gYGBcblxuVHlwZVNjcmlwdCBTbmlwcGV0c1xuXG5gYGB0eXBlc2NyaXB0XG5uZzFjb250cm9sbGVyOyAvLyBjcmVhdGVzIGFuIEFuZ3VsYXIgY29udHJvbGxlclxubmcxc2VydmljZTsgLy8gY3JlYXRlcyBhbiBBbmd1bGFyIHNlcnZpY2Vcbm5nMW1vZHVsZTsgLy8gY3JlYXRlcyBhbiBBbmd1bGFyIG1vZHVsZVxuYGBgXG5cbkFsdGVybmF0aXZlbHksIHByZXNzIGBDdHJsYCtgU3BhY2VgIChXaW5kb3dzLCBMaW51eCkgb3IgYENtZGArYFNwYWNlYCAoT1NYKSB0byBhY3RpdmF0ZSBzbmlwcGV0cyBmcm9tIHdpdGhpbiB0aGUgZWRpdG9yLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuMS4gSW5zdGFsbCBWaXN1YWwgU3R1ZGlvIENvZGUgMC4xMC4xIG9yIGhpZ2hlclxuMi4gTGF1bmNoIENvZGVcbjMuIEZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBgQ3RybGAtYFNoaWZ0YC1gUGAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYC1gU2hpZnRgLWBQYCAoT1NYKVxuNC4gU2VsZWN0IGBJbnN0YWxsIEV4dGVuc2lvbmBcbjUuIENob29zZSB0aGUgZXh0ZW5zaW9uXG42LiBSZWxvYWQgVmlzdWFsIFN0dWRpbyBDb2RlXG5cbiFbSW5zdGFsbCBFeHRlbnNpb25dKGltYWdlcy9pbnN0YWxsLWV4dGVuc2lvbi5naWYpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI5NGVlYTk4MC1iNWM3LTQ4ZTYtYWYwZS03ZGFiZTE4N2YxNDUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rME9UTXdPRGM1Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci0yLWZpcnN0LWxvb2stbGF1bmNoZXIiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZTYzNzVhY2U4N2UwN2M5ZWFlNTBkMjNkMzFhMWZlZDI1MDVmZDk0ZSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgYW5ndWxhcjItZmlyc3QtbG9vay1sYXVuZ2hlclxuXG4jIyBUSEVSRSBCRSBEUkFHT05TIEhFUkVcblxuVGhpcyBpcyB0aGUgY29kZSBmb3IgdGhlIG9yaWdpbmFsIEFuZ3VsYXIgMiBGaXJzdCBMb29rIGNvdXJzZSwgd3JpdHRlbiB3aXRoIHRoZSBBbmd1bGFyIDIgYmV0YXMuIEl0IGlzIG5vdyAqKmRlcHJlY2F0ZWQqKiBhbmQgcmVwbGFjZWQuXG5cbldpdGggd2hhdD8gIEdsYWQgeW91IGFza2VkLiBIZXJlIGlzIHdoZXJlIHlvdSBwcm9iYWJseSB3YW50IHRvIGdvIDopIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyMi1maXJzdC1sb29rXG5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjRiYzhlMjE4LTc3NDYtNDg4OC1hOTdiLTJlOGMzZjhkMjQ1MCIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5UazFOVEl6TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3RhcndhcnMtaW9zIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI3ZWJjZjEwMDdmZTZjOTJmNzRmNGI3N2VmYmZmMjhkMGJiMGQzMzgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHN0YXJ3YXJzLWlvc1xuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOWIxNWQ0M2QtNzc2OC00YTU4LWIzZTUtYzBmYzJmNjU0OGQwIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rMk5qY3lNall6TUE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiQW5ndWxhcldvcmtzaG9wTGFicyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0M2ZlYTVjMDM4NWU4NjQwZjliMWE1ZTE0ZjU1NGQzOTNmY2NhZjgxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIGFuZCBUeXBlU2NyaXB0IFdvcmtzaG9wIExhYnNcblxuVGhlc2UgbGFicyBhcmUgdXNlZCBpbiB3b3Jrc2hvcHMgSSBjb25kdWN0IGF0IHZhcmlvdXMgY29uZmVyZW5jZXMuXG5cbkNvcHlyaWdodCAyMDE4IFdhaGxpbiBDb25zdWx0aW5nIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNWJmMWU4NTUtNDUwYy00NTJkLWI0ZTgtYTQwYmM4NjA3ZWZlIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rM01EWTFOakExTXc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1maXJzdC1sb29rLWhvc3RlZCIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI1Yzc5MzZhY2MzOWI1MGFiMTFjNGY2YmE5ZjcyYjQ1ZDIwOWE2NTE0IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyRmlyc3RMb29rSG9zdGVkXG5cblRoaXMgcHJvamVjdCB3YXMgZ2VuZXJhdGVkIHdpdGggW0FuZ3VsYXIgQ0xJXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaSkgdmVyc2lvbiA2LjAuNy5cblxuIyMgRGV2ZWxvcG1lbnQgc2VydmVyXG5cblJ1biBgbmcgc2VydmVgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQyMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIENvZGUgc2NhZmZvbGRpbmdcblxuUnVuIGBuZyBnZW5lcmF0ZSBjb21wb25lbnQgY29tcG9uZW50LW5hbWVgIHRvIGdlbmVyYXRlIGEgbmV3IGNvbXBvbmVudC4gWW91IGNhbiBhbHNvIHVzZSBgbmcgZ2VuZXJhdGUgZGlyZWN0aXZlfHBpcGV8c2VydmljZXxjbGFzc3xndWFyZHxpbnRlcmZhY2V8ZW51bXxtb2R1bGVgLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC0tcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5cbiMjIEZ1cnRoZXIgaGVscFxuXG5UbyBnZXQgbW9yZSBoZWxwIG9uIHRoZSBBbmd1bGFyIENMSSB1c2UgYG5nIGhlbHBgIG9yIGdvIGNoZWNrIG91dCB0aGUgW0FuZ3VsYXIgQ0xJIFJFQURNRV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKS5cbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjk2MjNhNGM2LTBjMGItNGM2MS05YzhmLTFlN2M4ODU1ODM4OSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE1EUXlPRGt4Tnc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1ldmVudC12aWV3LWNsaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI0ZjIzYzQ5NzYyMjVjNTdjMDlkNzNiN2QzODE2NjI2YmViNzJmYTE1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBFdmVudFZpZXdDbGlcblxuQW5ndWxhciBEZW1vIHdpdGggYSBMaXR0bGUgYml0IG9mIGEgbG90IG9mIGZlYXR1cmVzXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5wbSBydW4gc3RhcnQtbmdgIGZvciBhIGRldiBzZXJ2ZXIuIE5hdmlnYXRlIHRvIGBodHRwOi8vbG9jYWxob3N0OjQzMDAvYC4gVGhlIGFwcCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVsb2FkIGlmIHlvdSBjaGFuZ2UgYW55IG9mIHRoZSBzb3VyY2UgZmlsZXMuXG5cbiMjIFJlc291cmNlc1xuXG4tIEdldCBbVlMgQ29kZV0oaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vP3d0Lm1jX2lkPWFuZ3VsYXJldmVudHZpZXdjbGktZ2l0aHViLWpvcGFwYSlcbi0gR2V0IHRoZSBWUyBDb2RlIFtBbmd1bGFyIEVzc2VudGlhbHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyLWVzc2VudGlhbHMmd3QubWNfaWQ9YW5ndWxhcmV2ZW50dmlld2NsaS1naXRodWItam9wYXBhKVxuLSBHZXQgdGhlIFZTIENvZGUgW0FuZ3VsYXIgU25pcHBldHNdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1qb2hucGFwYS5hbmd1bGFyMiZ3dC5tY19pZD1hbmd1bGFyZXZlbnR2aWV3Y2xpLWdpdGh1Yi1qb3BhcGEpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI1Yjg2ZmQyZC1jOTEzLTQwYmMtYjA1NC1lZjI3NTk5OGY1ZWEiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhci1hcGkiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvKVxuXG5bVHJ5IEF6dXJlIEZ1bmN0aW9ucyBQbGF5Z3JvdW5kXShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vdHJ5L2FwcC1zZXJ2aWNlL2Z1bmN0aW9ucy8pXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJhN2U5YjhkMy05MmUwLTQyYjEtYTkxMS04MzQzZThmMjIxODYiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE56QXdORE00TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAib25lLXdpdGgtYW5ndWxhciIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3NmJmOWE1OTkwYTI4NGYzOWZhOTI3NTA4YjZjYWZhMzQ3MGY3YTgyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBPbmUgV2l0aCBBbmd1bGFyXG5cbkZpbmQgdGhlIFtBenVyZSBGdW5jdGlvbnMgU2VydmVybGVzcyBBUEkgZm9yIHRoaXMgYXBwIGxvY2F0ZWQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXItYXBpKS5cblxuYGBgYmFzaFxuZ2l0IGNsb25lIGdpdEBnaXRodWIuY29tOmpvaG5wYXBhL29uZS13aXRoLWFuZ3VsYXIuZ2l0IG9uZVxuY2Qgb25lXG5ucG0gaW5zdGFsbFxuYGBgXG5cbkRpc2NhcmQgdGhlIGAuZ2l0YCBmb2xkZXJcblxuYGBgYmFzaFxucm0gLXJmIC5naXQgICMgT1MvWCAoYmFzaClcbnJkIC5naXQgL1MvUSAjIHdpbmRvd3NcbmBgYFxuXG4jIyBEb2NrZXJcblxuLSBJbnN0YWxsIGFuZCBydW4gW0RvY2tlcl0oaHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9jb21tdW5pdHktZWRpdGlvbilcblxuIyMjIERvY2tlciBDb21wb3NlXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIHVwIC1kIC0tYnVpbGRcbm9wZW4gaHR0cDovL2xvY2FsaG9zdDo0MjAwXG5gYGBcblxuIyMjIERvY2tlciBDb21wb3NlIHdpdGggRGVidWdnaW5nXG5cbi0gQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlci1jb21wb3NlIC1mIGRvY2tlci1jb21wb3NlLmRlYnVnLnltbCB1cCAtZCAtLWJ1aWxkXG5vcGVuIGh0dHA6Ly9sb2NhbGhvc3Q6NDIwMFxuYGBgXG5cbk9wZW4gVlMgQ29kZSwgbGF1bmNoIHRoZSBgRG9ja2VyOiBBdHRhY2ggdG8gTm9kZWAgZGVidWdnaW5nIHByb2ZpbGVcblxuIyMjIERvY2tlciBSdW5cblxuYGBgYmFzaFxuZG9ja2VySW1hZ2U9b25lLXdpdGgtYW5ndWxhclxucG9ydD00MjAwXG5cbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAkcG9ydDozMDAwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBCdWlsZFxuXG5SdW4gYG5nIGJ1aWxkYCB0byBidWlsZCB0aGUgcHJvamVjdC4gVGhlIGJ1aWxkIGFydGlmYWN0cyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGRpc3QvYCBkaXJlY3RvcnkuIFVzZSB0aGUgYC1wcm9kYCBmbGFnIGZvciBhIHByb2R1Y3Rpb24gYnVpbGQuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3NWZjNGQ3YS00NTAxLTQ5NWUtYjE3My0zZDhmYzkzMzcwODkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLWF6dXJlLWZ1bmN0aW9ucy10b29scyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucykgaW5zdGVhZC5cblxuIyMgRmVhdHVyZXNcblRoaXMgZXh0ZW5zaW9uIGZvciBWaXN1YWwgU3R1ZGlvIENvZGUgaW5jbHVkZXM6XG5cbi0gSlNPTiBJbnRlbGxpc2Vuc2UgZm9yIGBob3N0Lmpzb25gLCBgZnVuY3Rpb24uanNvbmAgYW5kIGBwcm94aWVzLmpzb25gXG4tIFNuaXBwZXRzIGZvciBKYXZhU2NyaXB0IGFuZCBUeXBlU2NyaXB0IGZ1bmN0aW9uc1xuXG4+IFdlJ2xsIGFkZCBvdGhlciBmZWF0dXJlcyBpbiBmdXR1cmUgdmVyc2lvbnNcblxuYGBgamF2YXNjcmlwdFxuLy8gSmF2YVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgSmF2YVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuYGBgamF2YXNjcmlwdFxuLy8gVHlwZVNjcmlwdFxuYXotZnVuYy1ub2RlICAgICAgLy8gQ3JlYXRlIGEgVHlwZVNjcmlwdCBmdW5jdGlvbiBmb3IgYSB3ZWJob29rXG5gYGBcblxuIyMjIEpTT04gU2NoZW1hIEludGVsbGlzZW5zZVxuIVtKU09OIFNjaGVtYV0oaW1hZ2VzL2pzb24tc2NoZW1hLWZ1bmN0aW9uLmdpZilcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChtYWNPUykgdG8gYWN0aXZhdGUgaW50ZWxsaXNlbnNlIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjExLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChtYWNPUylcbjQuIFNlbGVjdCBgSW5zdGFsbCBFeHRlbnNpb25gXG41LiBDaG9vc2UgdGhlIGV4dGVuc2lvblxuNi4gUmVsb2FkIFZpc3VhbCBTdHVkaW8gQ29kZVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiNWU5ZGY3OGMtNzQ4Ny00NmJmLWEyNzctN2FjN2FmZmM1MTI3Igp9ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5UUXlNelF6Tmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJvbmUtd2l0aC1hbmd1bGFyLWFwaSIsCiAgImRlZmF1bHRCcmFuY2hPaWQiOiAiZWIwZTQ5NGNjZDhhZjk1N2ExZTU0MDc0ODIwMDU4ODI2OTcxNjhlNiIsCiAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICJyZWFkbWVUZXh0IjogIiMgb25lLXdpdGgtYW5ndWxhci1hcGlcblxuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9yZWJlbHNcblxuaHR0cHM6Ly9vbmV3aXRoYW5ndWxhcmFwcC5henVyZXdlYnNpdGVzLm5ldC9hcGkvcmViZWxzP2lkPTExXG5cbmh0dHBzOi8vb25ld2l0aGFuZ3VsYXJhcHAuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL2Ryb2lkc1xuXG5odHRwczovL29uZXdpdGhhbmd1bGFyYXBwLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9wbGFuZXRzXG5cblxuIyMgQXp1cmUgRGVwbG95bWVudFxuXG5gYGBiYXNoXG5heiBsb2dpblxuXG5heiBncm91cCBjcmVhdGUgLS1uYW1lIFwib25ld2l0aGFuZ3VsYXJncm91cFwiIC0tbG9jYXRpb24gXCJFYXN0IFVTXCJcblxuYXogZ3JvdXAgZGVwbG95bWVudCBjcmVhdGUgLS1uYW1lIE9uZVdpdGhBbmd1bGFyRGVwbG95bWVudCAtLXJlc291cmNlLWdyb3VwIG9uZXdpdGhhbmd1bGFyZ3JvdXAgLS10ZW1wbGF0ZS1maWxlIGF6dXJlZGVwbG95Lmpzb24gLS1wYXJhbWV0ZXJzIEBwYXJhbWV0ZXJzLmpzb25cbmBgYFxuXG4jIyBUcnkgSXRcblxuW0ZyZWUgQXp1cmUgQWNjb3VudF0oaHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2ZyZWUvP1dULm1jX2lkPW9uZXdpdGhhbmd1bGFyYXBpLWdpdGh1Yi1qb3BhcGEpXG5cbltUcnkgQXp1cmUgRnVuY3Rpb25zIFBsYXlncm91bmRdKGh0dHBzOi8vYXp1cmUubWljcm9zb2Z0LmNvbS90cnkvYXBwLXNlcnZpY2UvZnVuY3Rpb25zLz9XVC5tY19pZD1vbmV3aXRoYW5ndWxhcmFwaS1naXRodWItam9wYXBhKVxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjU2NzZhZTQ5LTZiNTQtNDQwNC04NzU0LTUyMzgxZGIzM2VlNSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAic3Rhci13YXJzLWFwaSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaSlcblxuTG9naW5cblxuYGBgYmFzaFxuYXogbG9naW5cbmBgYFxuXG5DcmVhdGUgYSBwbGFjZSB0byBsb2dpY2FsbHV5IHN0b3JlIGV2ZXJ5dGhpbmcgKHJlc291cmNlIGdyb3VwKVxuXG5gYGBiYXNoXG5heiBncm91cCBjcmVhdGUgLW4gUGFwYVN0YXJXYXJzQXBpR3JvdXAgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBzdG9yYWdlIHJlc291cmNlIGZvciB0aGUgRnVuY3Rpb24gQXBwXG5cbmBgYGJhc2hcbmF6IHN0b3JhZ2UgYWNjb3VudCBjcmVhdGUgLW4gcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtZyBQYXBhU3RhcldhcnNBcGlHcm91cCAtLXNrdSBTdGFuZGFyZF9MUlMgLWwgZWFzdHVzXG5gYGBcblxuQ3JlYXRlIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogZnVuY3Rpb25hcHAgY3JlYXRlIC1uIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC1zIHBhcGFzdGFyd2Fyc2FwaXN0b3JhZ2UgLWMgZWFzdHVzXG5gYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImE0ZjZiNzRhLTc3NTQtNGVjNS05ZDRjLTJiZTg5ZTIzMmNmMyIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE5qZ3lOVEUxTmc9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJ2c2NvZGUtYXp1cmUtZnVuY3Rpb25zLXRvb2xzIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI4YjlmMDI1ZTY1OWRmNWJkNzViZTM2ZmNjMDY3NWY0YjU3Nzk0ZWJlIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBbREVQUkVDQVRFRF0gQXp1cmUgRnVuY3Rpb25zIFRvb2xzIC0gRXh0ZW5zaW9ucyBmb3IgVlMgQ29kZVxuIEF6dXJlIEZ1bmN0aW9ucyBUb29scyAtIEV4dGVuc2lvbnMgZm9yIFZTIENvZGVcblxuPiBOT1RFOiBUaGlzIGV4dGVuc2lvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFt0aGlzIEF6dXJlIEZ1bmN0aW9ucyBleHRlbnNpb25dKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1tcy1henVyZXRvb2xzLnZzY29kZS1henVyZWZ1bmN0aW9ucyZXVC5tY19pZD12c2NvZGVhenVyZWZ1bmN0aW9uc3Rvb2xzLWdpdGh1Yi1qb3BhcGEpIGluc3RlYWQuXG5cbiMjIEZlYXR1cmVzXG5UaGlzIGV4dGVuc2lvbiBmb3IgVmlzdWFsIFN0dWRpbyBDb2RlIGluY2x1ZGVzOlxuXG4tIEpTT04gSW50ZWxsaXNlbnNlIGZvciBgaG9zdC5qc29uYCwgYGZ1bmN0aW9uLmpzb25gIGFuZCBgcHJveGllcy5qc29uYFxuLSBTbmlwcGV0cyBmb3IgSmF2YVNjcmlwdCBhbmQgVHlwZVNjcmlwdCBmdW5jdGlvbnNcblxuPiBXZSdsbCBhZGQgb3RoZXIgZmVhdHVyZXMgaW4gZnV0dXJlIHZlcnNpb25zXG5cbmBgYGphdmFzY3JpcHRcbi8vIEphdmFTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIEphdmFTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbmBgYGphdmFzY3JpcHRcbi8vIFR5cGVTY3JpcHRcbmF6LWZ1bmMtbm9kZSAgICAgIC8vIENyZWF0ZSBhIFR5cGVTY3JpcHQgZnVuY3Rpb24gZm9yIGEgd2ViaG9va1xuYGBgXG5cbiMjIyBKU09OIFNjaGVtYSBJbnRlbGxpc2Vuc2VcbiFbSlNPTiBTY2hlbWFdKGltYWdlcy9qc29uLXNjaGVtYS1mdW5jdGlvbi5naWYpXG5cbkFsdGVybmF0aXZlbHksIHByZXNzIGBDdHJsYCtgU3BhY2VgIChXaW5kb3dzLCBMaW51eCkgb3IgYENtZGArYFNwYWNlYCAobWFjT1MpIHRvIGFjdGl2YXRlIGludGVsbGlzZW5zZSBmcm9tIHdpdGhpbiB0aGUgZWRpdG9yLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuMS4gSW5zdGFsbCBWaXN1YWwgU3R1ZGlvIENvZGUgMS4xMS4wIG9yIGhpZ2hlclxuMi4gTGF1bmNoIENvZGVcbjMuIEZyb20gdGhlIGNvbW1hbmQgcGFsZXR0ZSBgQ3RybGAtYFNoaWZ0YC1gUGAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYC1gU2hpZnRgLWBQYCAobWFjT1MpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb25cbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcbiIsCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmNWVkNTJhYy1iYmEwLTQ1MzMtODI4My0xMzg3MzVkMjZjM2QiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9UY3dOams0TlE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiZ2l0aHViLXRlbXBsYXRlcyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICJiNTdiZWYzY2M3Njg3ODQxNmU4ZmQ3NWQ3NjM0MmJmM2ZmYTI4MjZkIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBQUk9KRUNUIE5BTUVcblxuLi4uXG5cbiMjIFRhYmxlIE9mIENvbnRlbnRzXG5cbi0gW0ZlYXR1cmVzXSgjZmVhdHVyZXMpXG4tIFtRdWlja1N0YXJ0XSgjcXVpY2tzdGFydClcbi0gW1JlcXVpcmVtZW50c10oI3JlcXVpcmVtZW50cylcbi0gW0luc3RhbGxhdGlvbl0oI2luc3RhbGxhdGlvbilcbi0gW0RlbW9dKCNkZW1vKVxuXG4jIyBGZWF0dXJlc1xuXG5UaGlzIHByb2plY3QgZnJhbWV3b3JrIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZmVhdHVyZXM6XG5cbiMjIFF1aWNrU3RhcnRcblxuMS5cbjIuXG4zLlxuXG4jIyBSZXF1aXJlbWVudHNcblxuKGlkZWFsbHkgdmVyeSBzaG9ydCwgaWYgYW55KVxuXG4tXG5cbiMjIEluc3RhbGxhdGlvblxuXG4oaWRlYWxseSB2ZXJ5IHNob3J0KVxuXG4tXG5cbiMjIERlbW9cblxuQSBkZW1vIGFwcCBpcyBpbmNsdWRlZCB0byBzaG93IGhvdyB0byB1c2UgdGhlIHByb2plY3QuXG5cblRvIHJ1biB0aGUgZGVtbywgZm9sbG93IHRoZXNlIHN0ZXBzOlxuXG4jIyBSZXNvdXJjZXNcblxuLVxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOTBmNWQ1ZTktYzY4NC00YjA0LTg0NTctYTQ3MWM3YzE3Y2MzIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU1UUTRPRGc0TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1leHBpcmluZy1odHRwLWNhY2hlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjcyMjEyNjBlMGMwM2U0YjhmMzBlYWM5ZmE5YWQ3Mjk1NThiNjRhODgiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIEV4cGlyZVxuXG5UaGlzIHByb2plY3Qgd2FzIGdlbmVyYXRlZCB3aXRoIFtBbmd1bGFyIENMSV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci1jbGkpIHZlcnNpb24gMS4wLjEuXG5cbiMjIERldmVsb3BtZW50IHNlcnZlclxuXG5SdW4gYG5nIHNlcnZlYCBmb3IgYSBkZXYgc2VydmVyLiBOYXZpZ2F0ZSB0byBgaHR0cDovL2xvY2FsaG9zdDo0MjAwL2AuIFRoZSBhcHAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbG9hZCBpZiB5b3UgY2hhbmdlIGFueSBvZiB0aGUgc291cmNlIGZpbGVzLlxuXG4jIyBDb2RlIHNjYWZmb2xkaW5nXG5cblJ1biBgbmcgZ2VuZXJhdGUgY29tcG9uZW50IGNvbXBvbmVudC1uYW1lYCB0byBnZW5lcmF0ZSBhIG5ldyBjb21wb25lbnQuIFlvdSBjYW4gYWxzbyB1c2UgYG5nIGdlbmVyYXRlIGRpcmVjdGl2ZXxwaXBlfHNlcnZpY2V8Y2xhc3N8bW9kdWxlYC5cblxuIyMgQnVpbGRcblxuUnVuIGBuZyBidWlsZGAgdG8gYnVpbGQgdGhlIHByb2plY3QuIFRoZSBidWlsZCBhcnRpZmFjdHMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXN0L2AgZGlyZWN0b3J5LiBVc2UgdGhlIGAtcHJvZGAgZmxhZyBmb3IgYSBwcm9kdWN0aW9uIGJ1aWxkLlxuXG4jIyBSdW5uaW5nIHVuaXQgdGVzdHNcblxuUnVuIGBuZyB0ZXN0YCB0byBleGVjdXRlIHRoZSB1bml0IHRlc3RzIHZpYSBbS2FybWFdKGh0dHBzOi8va2FybWEtcnVubmVyLmdpdGh1Yi5pbykuXG5cbiMjIFJ1bm5pbmcgZW5kLXRvLWVuZCB0ZXN0c1xuXG5SdW4gYG5nIGUyZWAgdG8gZXhlY3V0ZSB0aGUgZW5kLXRvLWVuZCB0ZXN0cyB2aWEgW1Byb3RyYWN0b3JdKGh0dHA6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLykuXG5CZWZvcmUgcnVubmluZyB0aGUgdGVzdHMgbWFrZSBzdXJlIHlvdSBhcmUgc2VydmluZyB0aGUgYXBwIHZpYSBgbmcgc2VydmVgLlxuXG4jIyBGdXJ0aGVyIGhlbHBcblxuVG8gZ2V0IG1vcmUgaGVscCBvbiB0aGUgQW5ndWxhciBDTEkgdXNlIGBuZyBoZWxwYCBvciBnbyBjaGVjayBvdXQgdGhlIFtBbmd1bGFyIENMSSBSRUFETUVdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJjOTNhMWEyZS01N2ZiLTRjYmYtOTRlYi0wY2FhYmQ1MGE3MzAiCn0=ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNE9URTNOVEl6TVE9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJzdGFyLXdhcnMtYXBpIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI3ODA3M2I1ODBkZmVkN2NlN2M1MDI5ZWJlYzQ2Y2IyYTBiZmY0OGUwIiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBzdGFyLXdhcnMtYXBpXG5cblN0YXIgV2FycyBBUElcblxuXG5cblxuIyMgQXp1cmUgQ0xJXG5cbltJbnN0YWxsIHRoZSBBenVyZSBDTEldKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2NsaS9henVyZS9pbnN0YWxsLWF6dXJlLWNsaT9XVC5tY19pZD1zdGFyd2Fyc2FwaS1naXRodWItam9wYXBhKVxuXG5Mb2dpblxuXG5gYGBiYXNoXG5heiBsb2dpblxuYGBgXG5cbkNyZWF0ZSBhIHBsYWNlIHRvIGxvZ2ljYWxsdXkgc3RvcmUgZXZlcnl0aGluZyAocmVzb3VyY2UgZ3JvdXApXG5cbmBgYGJhc2hcbmF6IGdyb3VwIGNyZWF0ZSAtbiBQYXBhU3RhcldhcnNBcGlHcm91cCAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBGdW5jdGlvbiBBcHBcblxuYGBgYmFzaFxuYXogc3RvcmFnZSBhY2NvdW50IGNyZWF0ZSAtbiBwYXBhc3RhcndhcnNhcGlzdG9yYWdlIC1nIFBhcGFTdGFyV2Fyc0FwaUdyb3VwIC0tc2t1IFN0YW5kYXJkX0xSUyAtbCBlYXN0dXNcbmBgYFxuXG5DcmVhdGUgdGhlIEZ1bmN0aW9uIEFwcFxuXG5gYGBiYXNoXG5heiBmdW5jdGlvbmFwcCBjcmVhdGUgLW4gLWcgUGFwYVN0YXJXYXJzQXBpR3JvdXAgLXMgcGFwYXN0YXJ3YXJzYXBpc3RvcmFnZSAtYyBlYXN0dXNcbmBgYFxuIiwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImI3MjQ3YjZlLTQxNWUtNDljOS1iY2FmLTkwZGQ3N2RkYTk5YSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU16azNORFE0TWc9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXB3YSIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIyOGNiMzExNGZmMGNkYmRmYWQ4ODE5MjBlZDI0MDIzZTllNDkzNTM5IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBWUyBDb2RlIEV4dGVuc2lvbiBmb3IgUFdBIFRvb2xpbmdcblZTIENvZGUgRXh0ZW5zaW9uIGZvciBQV0EgVG9vbHNcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHNuaXBwZXRzIGFuZCBKU09OIHNjaGVtYSBmb3IgYSBgbWFuaWZlc3QuanNvbmAgZm9yIGNyZWF0aW5nIFByb2dyZXNzaXZlIFdlYiBBcHBzIChQV0EpLlxuXG4qKlRISVMgSVMgQU4gQUxQSEEgVkVSU0lPTioqXG5cbiFbVXNlIEV4dGVuc2lvbl0oaW1hZ2VzL2luamVjdC1wcmVjYWNoZS5naWYpXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzXG5cbiMjIFVzYWdlXG5UeXBlIHBhcnQgb2YgYSBzbmlwcGV0LCBwcmVzcyBgZW50ZXJgLCBhbmQgdGhlIHNuaXBwZXQgdW5mb2xkcy5cblxuIyMjIEphdmFTY3JpcHQgLyBUeXBlU2NyaXB0IFNuaXBwZXRzXG5gYGBqYXZhc2NyaXB0XG5wd2EtY3VzdG9tLXNlcnZpY2Utd29ya2VyICAgICAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB3b3JrZXIgZmlsZSB3aGljaCBjYW4gYmUgZXh0ZW5kZWRcbnB3YS1yZWdpc3RlciAgICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiB0aGF0IHJlZ2lzdGVycyB0aGUgc2VydmljZSB3b3JrZXJcbmBgYFxuXG4jIyMgSmF2YVNjcmlwdCBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxuLy8gSGVscGZ1bCBmb3IgYnVpbGQgcHJvY2Vzc2VzIHRoYXQgZ2VuZXJhdGUgc2VydmljZSB3b3JrZXIgY29kZVxucHdhLWluamVjdC1wcmVjYWNoZSAgICAgICAgICAgICAgIC8vIGluamVjdCBwcmVjYWNoZSBsaXN0IGludG8gc2VydmljZSB3b3JrZXJcbnB3YS1nZW5lcmF0ZS1zZXJ2aWNlLXdvcmtlciAgICAgICAvLyBnZW5lcmF0ZSBhIHNlcnZpY2Ugd29ya2VyIHdpdGggYSBwcmVjYWNoZSBtYW5pZmVzdFxuXG4vLyBFdmVudCBsaXN0ZW5lcnNcbnB3YS1ldmVudC1wdXNoICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgcHVzaFxucHdhLWV2ZW50LXN5bmMgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBzeW5jXG5wd2EtZXZlbnQtbm90aWZpY2F0aW9uY2xpY2sgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIG5vdGlmaWNhdGlvbmNsaWNrXG5wd2EtZXZlbnQtcHVzaHN1YnNjcmlwdGlvbmNoYW5nZSAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIHB1c2hzdWJzY3JpcHRpb25jaGFuZ2VcbnB3YS1ldmVudC1sb2FkICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBldmVudCBsaXN0ZW5lciBmb3IgbG9hZFxucHdhLWV2ZW50LWFjdGl2YXRlICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBhY3RpdmF0ZVxucHdhLWV2ZW50LWluc3RhbGwgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGV2ZW50IGxpc3RlbmVyIGZvciBpbnN0YWxsXG5wd2EtZXZlbnQtZmV0Y2ggICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgZXZlbnQgbGlzdGVuZXIgZm9yIGZldGNoXG5gYGBcblxuIyMjIEhUTUwgU25pcHBldHNcbmBgYGphdmFzY3JpcHRcbnB3YS1tYW5pZmVzdC1saW5rICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGhlIGxpbmsgdG8gdGhlIG1hbmlmZXN0Lmpzb25cbnB3YS1hcHBsZS1tb2JpbGUtd2ViLWNhcGFibGUgICAgICAvLyBhZGQgdGhlIG1ldGEgdGFnIGZvciBhcHBsZSBtb2JpbGUgd2ViIGNhcGFibGVcbmBgYFxuXG4jIyMgSlNPTiBTbmlwcGV0c1xuYGBgamF2YXNjcmlwdFxucHdhLW1hbmlmZXN0ICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgY29udGVudHMgb2YgYG1hbmlmZXN0Lmpzb25gXG5gYGBcblxuQWx0ZXJuYXRpdmVseSwgcHJlc3MgYEN0cmxgK2BTcGFjZWAgKFdpbmRvd3MsIExpbnV4KSBvciBgQ21kYCtgU3BhY2VgIChPU1gpIHRvIGFjdGl2YXRlIHNuaXBwZXRzIGZyb20gd2l0aGluIHRoZSBlZGl0b3IuXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBJbnN0YWxsIFZpc3VhbCBTdHVkaW8gQ29kZSAxLjEwLjAgb3IgaGlnaGVyXG4yLiBMYXVuY2ggQ29kZVxuMy4gRnJvbSB0aGUgY29tbWFuZCBwYWxldHRlIGBDdHJsYC1gU2hpZnRgLWBQYCAoV2luZG93cywgTGludXgpIG9yIGBDbWRgLWBTaGlmdGAtYFBgIChPU1gpXG40LiBTZWxlY3QgYEluc3RhbGwgRXh0ZW5zaW9uYFxuNS4gQ2hvb3NlIHRoZSBleHRlbnNpb24gYFBXQS1Ub29sc2BcbjYuIFJlbG9hZCBWaXN1YWwgU3R1ZGlvIENvZGVcblxuIyMgVHJ5IGl0IE91dFxuXG5MZXQncyB0YWtlIGEgUFdBIGZvciBhIHNwaW4uIFVzaW5nIHRoZSBBbmd1bGFyIENMSSwgbGV0J3MgZ2VuZXJhdGUgYSBuZXcgYXBwIGFuZCBhZGQgUFdBIGZlYXR1cmVzLlxuXG5CZWZvcmUgd2UgYmVnaW4sIGluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJIGFuZCBsaXRlLXNlcnZlciwgaWYgeW91IGhhdmVuJ3QgYWxyZWFkeSBkb25lIHNvLCBieSBydW5uaW5nIGBucG0gaSBAYW5ndWxhci9jbGkgbGl0ZS1zZXJ2ZXIgLWdgXG5cbjEuIENyZWF0ZSBhbiBBbmd1bGFyIGFwcCB3aXRoIGBuZyBuZXcgbXktYXBwIC0tcm91dGluZ2AgYW5kIG9wZW4gdGhlIGFwcCBpbiBWUyBDb2RlXG4xLiBDcmVhdGUgYHNyYy9tYW5pZmVzdC5qc29uYFxuMS4gVXNlIHRoZSBgcHdhLW1hbmlmZXN0YCBzbmlwcGV0XG4xLiBPcGVuIGBzcmMvaW5kZXguaHRtbGAgYW5kIHVzZSB0aGUgYHB3YS1tYW5pZmVzdC1saW5rYCBzbmlwcGV0IChpbiB0aGUgPGhlYWQ+PC9oZWFkPiBlbGVtZW50KVxuMS4gVXNlIHRoZSBwd2EtYXBwbGUtbW9iaWxlLXdlYi1jYXBhYmxlIHNuaXBwZXQgKGluIHRoZSA8aGVhZD48L2hlYWQ+IGVsZW1lbnQpXG4xLiBDcmVhdGUgYGdlbmVyYXRlLXN3LmpzYFxuMS4gUnVuIGBjZCBteS1hcHBgIGFuZCB0aGVuIGBucG0gaSB3b3JrYm94LWJ1aWxkYCAoYWRkIC0tc2F2ZSBpZiB5b3UncmUgdXNpbmcgbnBtIDwgNS54KVxuMS4gVXNlIHRoZSBwd2EtZ2VuZXJhdGUtc2VydmljZS13b3JrZXIgaW4gYGdlbmVyYXRlLXN3LmpzYFxuMS4gQWRkIFwibWFuaWZlc3QuanNvblwiIHRvIHRoZSBgYXBwc1swXS5hc3NldHNgIGFycmF5IGluIGAuYW5ndWxhci1jbGkuanNvbmBcbjEuIE9wZW4gYHNyYy9hcHAvbWFpbi50c2AgYW5kIHJ1biBgcHdhLXJlZ2lzdGVyYCBhdCB0aGUgYm90dG9tXG4xLiBDYWxsIGAudGhlbigoKSA9PiByZWdpc3RlclNlcnZpY2VXb3JrZXIoKSk7YCBhZnRlciBib290c3RyYXBwaW5nXG4xLiBSdW4gYG5nIGJ1aWxkIC0tcHJvZCAmJiBub2RlIGdlbmVyYXRlLXN3LmpzICYmIGNkIGRpc3QgJiYgbGl0ZS1zZXJ2ZXJgXG5cbioqTm93IHRlc3QgaXQhKipcblxuWW91ciBhcHAgc2hvdWxkIGJlIHJ1bm5pbmcgaW4gdGhlIGJyb3dzZXIuIE9wZW4gdGhlIGRldmVsb3BlciB0b29scywgZ28gdG8gdGhlIGBBcHBsaWNhdGlvbmAgdGFiLCBhbmQgc2VsZWN0IGBTZXJ2aWNlIFdvcmtlcnNgLiBJbnNwZWN0IHRoZSBzZXJ2aWNlIHdvcmtlciwgYW5kIHRyeSB0byBnbyBvZmZsaW5lIGFuZCByZWZyZXNoLlxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4Yjc3YzVlOS01ZDU0LTRjMTktODJmMy0zM2ZhM2Y1NzkyODQiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1jb3Ntb3NkYiIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5ieSBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vam9obl9wYXBhKVxuXG5Zb3UgY2FuIFt3YXRjaCBtZSBidWlsZCB0aGUgYXBwIGFzIHBhcnQgb2YgbXkgc2VyaWVzIGhlcmVdKGh0dHBzOi8vam9obnBhcGEubmV0L2FuZ3VsYXItY29zbW9zZGItMS8pXG5cbllvdSBjYW4gW3ZpZXcgYWxsIHZpZGVvcyB0b2dldGhlciBoZXJlXSgvVklERU9TLm1kKVxuXG5bTGVhcm4gbW9yZSBhYm91dCBkZXZlbG9waW5nIE5vZGUuanMgYXBwcyB3aXRoIEF6dXJlJ3MgY2xvdWQgc2VydmljZXMgaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbm9kZWpzL2F6dXJlKVxuXG4jIyBEb2NrZXJcblxuQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlckltYWdlPWFuZ3VsYXItY29zbW9zZGJcbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAzMDAwOjgwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIFJlcXVpcmVtZW50c1xuXG4xLiBJbnN0YWxsIHRoZSBBbmd1bGFyIENMSVxuXG4gICAgYGBgYmFzaFxuICAgIG5wbSBpbnN0YWxsIC1nIEBhbmd1bGFyL2NsaVxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBbQXp1cmUgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9jbGkvYXp1cmUvaW5zdGFsbC1henVyZS1jbGkpXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnlcblxuICAgIGBgYGJhc2hcbiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIuZ2l0XG4gICAgY2QgYW5ndWxhci1jb3Ntb3NkYlxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBucG0gcGFja2FnZXNcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaVxuICAgIGBgYFxuXG4xLiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgZXhhbXBsZS1lbnZpcm9ubWVudC5qc2AgZmlsZSB0byBgZW52aXJvbm1lbnQuanNgIGluIHRoZSBgc2VydmVyL2Vudi9gIGZvbGRlciBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUga2V5LCBhbmQgcG9ydCB3aXRoIHlvdXIgc3BlY2lmaWMgY29uZmlndXJhdGlvbi5cblxuICAgIGBgYGphdmFzY3JpcHRcbiAgICAvLyBzZXJ2ZXIvZW52L2Vudmlyb25tZW50LmpzXG4gICAgY29uc3QgY29zbW9zUG9ydCA9IDEyMzQ7IC8vIHJlcGxhY2Ugd2l0aCB5b3VyIHBvcnRcbiAgICBjb25zdCBkYk5hbWUgPSAneW91ci1jb3Ntb3MtZGItbmFtZS1nb2VzLWhlcmUnO1xuICAgIGNvbnN0IGtleSA9ICd5b3VyLWtleS1nb2VzLWhlcmUnO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBjb3Ntb3NQb3J0LFxuICAgICAgZGJOYW1lLFxuICAgICAga2V5XG4gICAgfTtcbiAgICBgYGBcblxuIyMgUnVubmluZyB0aGUgYXBwXG5cbjEuIEJ1aWxkIHRoZSBBbmd1bGFyIGFwcFxuXG4gICAgYGBgYmFzaFxuICAgIG5nIGJ1aWxkXG4gICAgYGBgXG5cbjEuIExhdW5jaCB0aGUgc2VydmVyXG5cbiAgICBgYGBiYXNoXG4gICAgbm9kZSBzcmMvc2VydmVyL2luZGV4LmpzXG4gICAgYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gaHR0cDovL2xvY2FsaG9zdDozMDAwXG5cbiMjIFByb2JsZW1zIG9yIFN1Z2dlc3Rpb25zXG5cbltPcGVuIGFuIGlzc3VlIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyLWNvc21vcy9pc3N1ZXMpXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4OWYwYjQ3Ni1iMmJhLTQ4OWQtOWM4YS1lNWNlYTMyM2U0YzIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EYzBNak14TlRnPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnNjb2RlLXdpbnRlcmlzY29taW5nIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogImI4MTRlNmMwYTNjZmYwMWVlOGVmNDg4M2MxOTlhMDcyNGQ2M2I0NWUiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIFdpbnRlciBpcyBDb21pbmdcblxuVGhpcyBleHRlbnNpb24gZm9yIFZpc3VhbCBTdHVkaW8gQ29kZSBhZGRzIHRoZW1lcyB0aXRsZWQgXCJXaW50ZXIgaXMgQ29taW5nXCIuIFRoZXJlIGFyZSBkYXJrLCBkYXJrIHdpdGggbm8gaXRhbGljcywgYW5kIGxpZ2h0IHRoZW1lcy5cblxuPiBJIHBlcnNvbmFsbHkgdXNlIHRoZSBkYXJrIHRoZW1lcyBmb3IgbW9zdCBvY2Nhc2lvbnMsIGJ1dCBmaW5kIHRoZSBsaWdodCB0aGVtZSBnb29kIG9uIHNvbWUgZGltbWVyIHByb2plY3RvcnMgd2hlbiBJIHByZXNlbnQuXG5cblNlZSB0aGUgW0NIQU5HRUxPR10oQ0hBTkdFTE9HLm1kKSBmb3IgdGhlIGxhdGVzdCBjaGFuZ2VzLlxuXG5UaGUgdGhlbWVzIGFsc28gc3VwcG9ydCBhbiBpdGFsaWNpemVkIHZlcnNpb24sIHdpdGggZm9udHMgdGhhdCBzdXBwb3J0cyBjdXJzaXZlIGl0YWxpY2l6ZWQgZm9udHMuXG5cbiMjIERhcmsgQmx1ZSBUaGVtZVxuXG4qKkRhcmsgQmx1ZSBIVE1MKipcbiFbSFRNTF0oaW1hZ2VzL2RhcmstYmx1ZS1odG1sLnBuZylcblxuKipEYXJrIEJsdWUgSmF2YVNjcmlwdCoqXG4hW0phdmFTY3JpcHRdKGltYWdlcy9kYXJrLWJsdWUtanMucG5nKVxuXG4qKkRhcmsgQmx1ZSBUeXBlU2NyaXB0KipcbiFbVHlwZVNjcmlwdF0oaW1hZ2VzL2RhcmstYmx1ZS10cy5wbmcpXG5cbioqRGFyayBCbHVlIFNDU1MqKlxuIVtTQ1NTXShpbWFnZXMvZGFyay1ibHVlLXNjc3MucG5nKVxuXG4jIyBEYXJrIEJsYWNrIFRoZW1lXG5cbioqRGFyayBCbGFjayBKYXZhU2NyaXB0KipcbiFbRGFyayBCbGFjayBUaGVtZV0oaW1hZ2VzL2RhcmstanMucG5nKVxuXG4jIyBMaWdodCBUaGVtZVxuXG4qKkxpZ2h0IEphdmFTY3JpcHQqKlxuIVtMaWdodCBUaGVtZV0oaW1hZ2VzL2xpZ2h0LWpzLnBuZylcblxuIyMgVXNhZ2VcblxuU2VsZWN0IHRoZSB0aGVtZSBhbmQgZ28hXG5cbiMjIEluc3RhbGxhdGlvblxuXG4xLiBPcGVuICoqRXh0ZW5zaW9ucyoqIHNpZGViYXIgcGFuZWwgaW4gVmlzdWFsIFN0dWRpbyBDb2RlLiBgVmlldyDihpIgRXh0ZW5zaW9uc2BcbjEuIFNlYXJjaCBmb3IgYFdpbnRlciBpcyBDb21pbmdgXG4xLiBDbGljayAqKkluc3RhbGwqKlxuMS4gQ2xpY2sgKipSZWxvYWQqKlxuMS4gRmlsZSA+IFByZWZlcmVuY2VzID4gQ29sb3IgVGhlbWUgPiAqKldpbnRlciBpcyBDb21pbmcgKERhcmsgQmx1ZSkqKlxuMS4gT3B0aW9uYWw6IFVzZSB0aGUgcmVjb21tZW5kZWQgc2V0dGluZ3MgYmVsb3cgZm9yIGJlc3QgZXhwZXJpZW5jZVxuXG4jIyBSZWNvbW1lbmRlZCBTZXR0aW5nc1xuXG5gYGBqc1xue1xuICBcImVkaXRvci5hdXRvSW5kZW50XCI6IFwiZnVsbFwiLFxuICBcImVkaXRvci5jdXJzb3JCbGlua2luZ1wiOiBcInNvbGlkXCIsXG4gIFwiZWRpdG9yLmN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uXCI6IHRydWUsXG4gIFwiZWRpdG9yLmN1cnNvclN0eWxlXCI6IFwibGluZVwiLFxuICBcImVkaXRvci5mb250U2l6ZVwiOiAxNixcbiAgXCJlZGl0b3IuZm9udEZhbWlseVwiOiBcIkRhbmsgTW9ubywgRmlyYSBDb2RlLCBJbmNvbnNvbGF0YVwiLFxuICBcImVkaXRvci5mb250TGlnYXR1cmVzXCI6IHRydWUsXG4gIFwiZWRpdG9yLmZvcm1hdE9uUGFzdGVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IuZm9ybWF0T25UeXBlXCI6IGZhbHNlLFxuICBcImVkaXRvci5mb3JtYXRPblNhdmVcIjogdHJ1ZSxcbiAgXCJlZGl0b3IubGV0dGVyU3BhY2luZ1wiOiAwLjMsXG4gIFwiZWRpdG9yLmxpbmVIZWlnaHRcIjogMjUsXG4gIFwiZWRpdG9yLm1pbmltYXAuZW5hYmxlZFwiOiBmYWxzZSxcbiAgXCJlZGl0b3IubXVsdGlDdXJzb3JNb2RpZmllclwiOiBcImN0cmxDbWRcIixcbiAgXCJlZGl0b3Iuc3VnZ2VzdFNlbGVjdGlvblwiOiBcImZpcnN0XCIsXG4gIFwiZWRpdG9yLnRhYkNvbXBsZXRpb25cIjogXCJvblwiLFxuICBcImVkaXRvci50YWJTaXplXCI6IDIsXG4gIFwiZWRpdG9yLndvcmRXcmFwXCI6IFwib25cIixcbiAgXCJmaWxlcy5hdXRvU2F2ZVwiOiBcImFmdGVyRGVsYXlcIixcbiAgXCJmaWxlcy5hdXRvU2F2ZURlbGF5XCI6IDEwMDAsXG4gIFwic2VhcmNoLnNob3dMaW5lTnVtYmVyc1wiOiB0cnVlLFxuICBcIndvcmtiZW5jaC5pY29uVGhlbWVcIjogXCJtYXRlcmlhbC1pY29uLXRoZW1lXCIsXG4gIFwid29ya2JlbmNoLmNvbG9yQ3VzdG9taXphdGlvbnNcIjoge30sXG4gIFwid29ya2JlbmNoLmNvbG9yVGhlbWVcIjogXCJXaW50ZXIgaXMgQ29taW5nIChEYXJrIEJsdWUpXCIsXG4gIFwiemVuTW9kZS5jZW50ZXJMYXlvdXRcIjogZmFsc2UsXG59XG5gYGBcblxuIyMgRm9udHNcblxuSSBhbSB1c2luZyBhIHBhaWQgZm9udCB0aXRsZWQgKipEYW5rIE1vbm8qKi4gKipPcGVyYXRvciBNb25vKiogaXMgYWxzbyBhIHBhaWQgZm9udCB0aGF0IGlzIGF3ZXNvbWUuIElmIHlvdSBkbyBub3QgaGF2ZSB0aGVzZSBmb250cywgdXNlIHlvdXIgZmF2b3JpdGUgZm9udC4gKipGaXJhIENvZGUqKiBpcyBhIGZyZWUgb25lIHRoYXQgd29ya3Mgd2VsbCB0b28uXG5cbiMjIEZlZWRiYWNrXG5cbklmIHlvdSBoYXZlIHN1Z2dlc3Rpb25zLCBwbGVhc2UgW29wZW4gYW4gaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvaXNzdWVzKSBvciBiZXR0ZXIgeWV0LCBhIFtwdWxsIHJlcXVlc3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92c2NvZGUtd2ludGVyaXNjb21pbmcvcHVsbHMpLlxuXG5CZSBuaWNlLlxuXG4jIyBDcmVkaXRzXG5cbkNyZWRpdCB3aGVyZSBjcmVkaXQgaXMgZHVlIC4uLiB0aGlzIHRoZW1lIHdhcyBpbnNwaXJlZCBieSB0aGUgdGhlbWVzIFZpc3VhbCBTdHVkaW8gRGFyayssIE1vbm9rYWkgYW5kIFtEdXN0aW4gU2FuZGVyJ3MgdGhlbWUgZm9yIFwiQW4gT2xkIEhvcGVcIl0oaHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWR1c3RpbnNhbmRlcnMuYW4tb2xkLWhvcGUtdGhlbWUtdnNjb2RlKS4gQ3VzdG9tIENTUyBpbnNwaXJlZCBieSBbV2VzIEJvc10oaHR0cHM6Ly90d2l0dGVyLmNvbS93ZXNib3MpLiBCbHVlIGJhY2tncm91bmQgZm9yIHRoZSBEYXJrIHRoZW0gaW5zcGlyZWQgYnkgW1NhcmFoIERyYXNuZXJdKGh0dHBzOi8vdHdpdHRlci5jb20vc2FyYWhfZWRvKSdzIFtOaWdodCBPd2wgdGhlbWVdKGh0dHBzOi8vbWFya2V0cGxhY2UudmlzdWFsc3R1ZGlvLmNvbS9pdGVtcz9pdGVtTmFtZT1zZHJhcy5uaWdodC1vd2wpXG5cbiMjIEF1dGhvcnNcblxuQXV0aG9yZWQgYnkgW0pvaG4gUGFwYV0oaHR0cHM6Ly90d2l0dGVyLmNvbS9qb2huX3BhcGEpXG5cbkxpZ2h0IHRoZW1lIGNvLWF1dGhvcmVkIGJ5IFtCcmlhbiBDbGFya10oaHR0cHM6Ly90d2l0dGVyLmNvbS9fY2xhcmtpbylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjNmNjZiOWU3LWE3NWEtNDIzMC1iNDkwLTdjNzMxYjAwNDFkYiIKfQ==ewogICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU56TXpNVFl6TkE9PSIsCiAgIm93bmVyIjogImpvaG5wYXBhIiwKICAibmFtZSI6ICJhbmd1bGFyLWNvc21vc2RiIiwKICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxZTc5NmJlYWIwZjI2NzRmN2Y4MzRjZDI1N2VjMzg3MzIyM2M2OWQ1IiwKICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgInJlYWRtZVRleHQiOiAiIyBBbmd1bGFyIENvc21vcyBEQlxuXG5ieSBbSm9obiBQYXBhXShodHRwOi8vdHdpdHRlci5jb20vam9obl9wYXBhKVxuXG5Zb3UgY2FuIFt3YXRjaCBtZSBidWlsZCB0aGUgYXBwIGFzIHBhcnQgb2YgbXkgc2VyaWVzIGhlcmVdKGh0dHBzOi8vam9obnBhcGEubmV0L2FuZ3VsYXItY29zbW9zZGItMS8pXG5cbllvdSBjYW4gW3ZpZXcgYWxsIHZpZGVvcyB0b2dldGhlciBoZXJlXSgvVklERU9TLm1kKVxuXG5bTGVhcm4gbW9yZSBhYm91dCBkZXZlbG9waW5nIE5vZGUuanMgYXBwcyB3aXRoIEF6dXJlJ3MgY2xvdWQgc2VydmljZXMgaGVyZV0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vbm9kZWpzL2F6dXJlP1dULm1jX2lkPWFuZ3VsYXJjb3Ntb3NkYi1naXRodWItam9wYXBhKVxuXG4jIyBEb2NrZXJcblxuQ3JlYXRlIHRoZSBEb2NrZXIgaW1hZ2UgYW5kIHJ1biBpdCBsb2NhbGx5XG5cbmBgYGJhc2hcbmRvY2tlckltYWdlPWFuZ3VsYXItY29zbW9zZGJcbmRvY2tlciBidWlsZCAtdCAkZG9ja2VySW1hZ2UgLlxuZG9ja2VyIHJ1biAtZCAtcCAzMDAwOjgwICRkb2NrZXJJbWFnZVxuYGBgXG5cbiMjIFJlcXVpcmVtZW50c1xuXG4xLiBJbnN0YWxsIHRoZSBBbmd1bGFyIENMSVxuXG4gICAgYGBgYmFzaFxuICAgIG5wbSBpbnN0YWxsIC1nIEBhbmd1bGFyL2NsaVxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBbQXp1cmUgQ0xJXShodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9jbGkvYXp1cmUvaW5zdGFsbC1henVyZS1jbGk/V1QubWNfaWQ9YW5ndWxhcmNvc21vc2RiLWdpdGh1Yi1qb3BhcGEpXG5cbiMjIEdldHRpbmcgU3RhcnRlZFxuXG4xLiBDbG9uZSB0aGlzIHJlcG9zaXRvcnlcblxuICAgIGBgYGJhc2hcbiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItY29zbW9zZGIuZ2l0XG4gICAgY2QgYW5ndWxhci1jb3Ntb3NkYlxuICAgIGBgYFxuXG4xLiBJbnN0YWxsIHRoZSBucG0gcGFja2FnZXNcblxuICAgIGBgYGJhc2hcbiAgICBucG0gaVxuICAgIGBgYFxuXG4xLiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgZXhhbXBsZS1lbnZpcm9ubWVudC5qc2AgZmlsZSB0byBgZW52aXJvbm1lbnQuanNgIGluIHRoZSBgc2VydmVyL2Vudi9gIGZvbGRlciBhbmQgdXBkYXRlIGl0IHdpdGggeW91ciBDb3Ntb3MgREIgc2V0dGluZ3MuIFJlcGxhY2UgdGhlIGRhdGFiYXNlIG5hbWUga2V5LCBhbmQgcG9ydCB3aXRoIHlvdXIgc3BlY2lmaWMgY29uZmlndXJhdGlvbi5cblxuICAgIGBgYGphdmFzY3JpcHRcbiAgICAvLyBzZXJ2ZXIvZW52L2Vudmlyb25tZW50LmpzXG4gICAgY29uc3QgY29zbW9zUG9ydCA9IDEyMzQ7IC8vIHJlcGxhY2Ugd2l0aCB5b3VyIHBvcnRcbiAgICBjb25zdCBkYk5hbWUgPSAneW91ci1jb3Ntb3MtZGItbmFtZS1nb2VzLWhlcmUnO1xuICAgIGNvbnN0IGtleSA9ICd5b3VyLWtleS1nb2VzLWhlcmUnO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBjb3Ntb3NQb3J0LFxuICAgICAgZGJOYW1lLFxuICAgICAga2V5XG4gICAgfTtcbiAgICBgYGBcblxuIyMgUnVubmluZyB0aGUgYXBwXG5cbjEuIEJ1aWxkIHRoZSBBbmd1bGFyIGFwcFxuXG4gICAgYGBgYmFzaFxuICAgIG5nIGJ1aWxkXG4gICAgYGBgXG5cbjEuIExhdW5jaCB0aGUgc2VydmVyXG5cbiAgICBgYGBiYXNoXG4gICAgbm9kZSBzcmMvc2VydmVyL2luZGV4LmpzXG4gICAgYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gaHR0cDovL2xvY2FsaG9zdDozMDAwXG5cbiMjIFByb2JsZW1zIG9yIFN1Z2dlc3Rpb25zXG5cbltPcGVuIGFuIGlzc3VlIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9hbmd1bGFyLWNvc21vcy9pc3N1ZXMpXG4iLAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiODQ4OTM0NjYtZTRiNy00MmQwLTk2ZWItN2U2NjVmZDIxMWI3Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1EazFOVEV4T0RrPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLXR5cGVzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiODY2MzRkYjkwM2I2YzU4MDA3OTY2ZGNjYTljOTk3OTkwOGFkMWM0MSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWhlcm9lc1xuXG5BIENvc21vcyBEQiwgRXhwcmVzcy5qcywgVnVlLCBhbmQgTm9kZS5qcyBhcHBcblxuIyMgRmVhdHVyZXNcblxuVGhpcyBwcm9qZWN0IGZyYW1ld29yayBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGZlYXR1cmVzOlxuXG4qIFZ1ZS5qc1xuKiBOb2RlLmpzXG4qIEV4cHJlc3NcbiogTW9uZ29vc2UgQVBJXG4qIENvbm5lY3RpbmcgdG8gTW9uZ29EQiBvciBDb3Ntb3NEQlxuKiBCdWlsZGluZywgRGVidWdnaW5nLCBEZXBsb3lpbmcgd2l0aCBEb2NrZXJcblxuIyMgR2V0dGluZyBTdGFydGVkXG5cbiMjIyBQcmVyZXF1aXNpdGVzXG5cbk5vZGUuanMgd2l0aCBucG1cblxuIyMjIEluc3RhbGxhdGlvblxuXG5gYGAgYmFzaFxuZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS92dWUtaGVyb2VzLmdpdFxuY2QgdnVlLWhlcm9lc1xubnBtIGluc3RhbGxcbmBgYFxuXG4jIyMgRGF0YWJhc2Ugc2V0dGluZ3NcblxuKiBDb25maWd1cmUgQ29zbW9zIERCIHNlcnZlciBzZXR0aW5nc1xuXG4gICAgUmVuYW1lIHRoZSBgLmVudi5leGFtcGxlLmpzYCBmaWxlIHRvIGAuZW52YCBpbiB0aGUgcm9vdCBmb2xkZXIgYW5kIHVwZGF0ZSBpdCB3aXRoIHlvdXIgQ29zbW9zIERCIHNldHRpbmdzLiBSZXBsYWNlIHRoZSBhY2NvdW50TmFtZSwgZGF0YWJhc2VOYW1lLCBrZXksIGFuZCBwb3J0IHdpdGggeW91ciBzcGVjaWZpYyBjb25maWd1cmF0aW9uLlxuXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIFNFUlZFUl9QT1JUPTMwMDFcbiAgICBQVUJMSUNXRUI9Li9zZXJ2ZXIvd3d3XG4gICAgQ09TTU9TREJfQUNDT1VOVD15b3VyX2Nvc21vc19hY2NvdW50XG4gICAgQ09TTU9TREJfREI9eW91cl9jb3Ntb3NfZGJcbiAgICBDT1NNT1NEQl9LRVk9eW91cl9jb3Ntb3Nfa2V5XG4gICAgQ09TTU9TREJfUE9SVD0xMDI1NVxuICAgIGBgYFxuXG4jIyMgUXVpY2tzdGFydFxuXG5UaGlzIHdpbGwgYnVpbGQgdGhlIGFwcCBhbmQgcnVuIHRoZSBkZXYgc2VydmVyIGZvciBWdWUgYW5kIFdlYlBhY2suIFRoZSBOb2RlIGV4cHJlc3Mgc2VydmVyIHdpbGwgbGF1bmNoIGFuZCBXZWJQYWNrIHdpbGwgcHJveHkgdGhlIGNhbGxzIGZyb20gdGhlIGJyb3dzZXIgdG8gdGhlIEFQSSBpbiBleHByZXNzLiBJdCB3aWxsIGFsc28gYW5kIHByZXBhcmUgaXQgZm9yIGxvY2FsIGRlYnVnZ2luZy5cblxuYGBgIGJhc2hcbiMgYnVpbGQgZm9yIHByb2R1Y3Rpb24gd2l0aCBtaW5pZmljYXRpb25cbm5wbSBydW4gYnVpbGRcblxuIyBzZXJ2ZSBvbiBodHRwOi8vbG9jYWxob3N0OjgwODBcbiMgYW5kIHJ1biB0aGUgYXBpIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMVxubnBtIHJ1biBkZWJ1Z1xuYGBgXG5cbiMjIyBMb2NhbCBQcm9kIEJ1aWxkXG5cblRoaXMgd2lsbCBidWlsZCB0aGUgYXBwIGFuZCBsYXVuY2ggdmlhIHRoZSBOb2RlLmpzIGV4cHJlc3Mgc2VydmVyLlxuXG5gYGBiYXNoXG4jIGJ1aWxkIGZvciBwcm9kdWN0aW9uIHdpdGggbWluaWZpY2F0aW9uXG5ucG0gcnVuIGJ1aWxkXG5cbiMgcnVuIHRoZSBub2RlIHNlcnZlclxubnBtIHN0YXJ0XG5gYGBcblxuIyMjIERvY2tlclxuXG5CdWlsZCB0aGUgaW1hZ2UgYW5kIHJ1biBjb250YWluZXIuXG5cbmBgYCBiYXNoXG5ucG0gcnVuIGRvY2tlci11cFxuYGBgXG5cbkJ1aWxkIHRoZSBpbWFnZSBhbmQgcnVuIGNvbnRhaW5lciBmb3IgbG9jYWwgZGVidWdnaW5nLlxuXG5gYGAgYmFzaFxubnBtIHJ1biBkb2NrZXItdXAtZGVidWdcbmBgYCIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogImY1MjhhNTkzLTVlZjctNDNkYy1iOWU2LTViNWJlNjU0ZWY3OSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1USXhNVFF4TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1uZ3J4LWRhdGEiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FlOTVlMzc3NjliNzZlOTE2NzlhMmM5Nzk2MTY3MDNmY2NlODBlOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQW5ndWxhciBuZ3J4LWRhdGFcblxuPiAqKlRoaXMgcmVwb3NpdG9yeSBpcyBub3cgbWVyZ2VkIHdpdGggQG5ncnggaW50byBAbmdyeC9kYXRhLiBZb3UgY2FuIGZpbmQgdGhlIFtuZ3J4L2RhdGEgZG9jcyBoZXJlXShodHRwczovL25ncnguaW8vZ3VpZGUvZGF0YSkgYW5kIHRoZSBbZ2l0aHViIHJlcG9zaXRvcnkgd2l0aCBuZ3J4L2RhdGEgaW4gaXQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL25ncngvcGxhdGZvcm0pKipcblxuKipQbGVhc2UgcmVhZCB0aGUgbm90ZSBhYm92ZSoqXG5cblshW3ByZXR0aWVyXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL2NvZGVfc3R5bGUtcHJldHRpZXItZmY2OWI0LnN2Zz9zdHlsZT1mbGF0LXNxdWFyZSldKGh0dHBzOi8vcHJldHRpZXIuaW8vKVxuXG4jIyBaZXJvIE5ncnggQm9pbGVycGxhdGVcblxuKipZb3UgbWF5IG5ldmVyIHdyaXRlIGFuIGFjdGlvbiwgcmVkdWNlciwgc2VsZWN0b3IsIGVmZmVjdCwgb3IgSFRUUCBkYXRhc2VydmljZSBhZ2Fpbi4qKlxuXG5bX05nUnhfXShodHRwczovL2dpdGh1Yi5jb20vbmdyeC9wbGF0Zm9ybS9ibG9iL21hc3Rlci9SRUFETUUubWQpIGhlbHBzIEFuZ3VsYXIgYXBwbGljYXRpb25zIG1hbmFnZSBzaGFyZWQgc3RhdGUgaW4gYSBcInJlYWN0aXZlXCIgc3R5bGUsIGZvbGxvd2luZyB0aGUgW3JlZHV4XShodHRwczovL3JlZHV4LmpzLm9yZykgcGF0dGVybi5cblxuQnV0IHRvIHVzZSBpdCBwcm9wZXJseSByZXF1aXJlcyBfYm90aF8gYSBkZWVwIHVuZGVyc3RhbmRpbmcgb2YgcmVkdXgvbmdyeCBfYW5kXyBhIGxvdCBvZiBfYm9pbGVycGxhdGUgY29kZV8uXG5cbl9OZ3J4LWRhdGFfIGlzIGFuIF9uZ3J4XyBleHRlbnNpb24gdGhhdCBvZmZlcnMgYSBnZW50bGUgaW50cm9kdWN0aW9uIHRvIF9uZ3J4L3JlZHV4XyB3aXRob3V0IHRoZSBib2lsZXJwbGF0ZS5cblxuPiAqKlRyeSBpdCEqKiBTZWUgdGhlIFtRdWljayBTdGFydF0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL25ncngtZGF0YS1sYWIvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKSBmb3IgaW5zdHJ1Y3Rpb25zIG9uIGFkZGluZyBOZ1J4IGFuZCBuZ3J4LWRhdGEgdG8geW91ciBhcHAuXG5cbjxhIGlkPVwid2h5XCI+PC9hPlxuXG4jIyBXaHkgdXNlIF9uZ3J4LWRhdGFfP1xuXG5NYW55IGFwcGxpY2F0aW9ucyBoYXZlIHN1YnN0YW50aWFsIF9kb21haW4gbW9kZWxzXyB3aXRoIDEwcyBvciAxMDBzIG9mIFtlbnRpdHkgdHlwZXNdKGRvY3MvZmFxLm1kLyNlbnRpdHkpXG5zdWNoIGFzIF9DdXN0b21lcl8sIF9PcmRlcl8sIF9MaW5lSXRlbV8sIF9Qcm9kdWN0XywgYW5kIF9Vc2VyXy5cblxuSW4gcGxhaW4gX25ncnhfLCB0byBjcmVhdGUsIHJldHJpZXZlLCB1cGRhdGUsIGFuZCBkZWxldGUgKENSVUQpIGRhdGEgZm9yIGV2ZXJ5IGVudGl0eSB0eXBlIGlzIGFuIG92ZXJ3aGVsbWluZyB0YXNrLiBZb3UncmUgd3JpdGluZyBfYWN0aW9uc18sIF9hY3Rpb24tY3JlYXRvcnNfLCBfcmVkdWNlcnNfLCBfZWZmZWN0c18sIF9kaXNwYXRjaGVyc18sIGFuZCBfc2VsZWN0b3JzXyBhcyB3ZWxsIGFzIHRoZSBIVFRQIEdFVCwgUFVULCBQT1NULCBhbmQgREVMRVRFIG1ldGhvZHMgX2ZvciBlYWNoIGVudGl0eSB0eXBlXy5cblxuSW4gZXZlbiBhIHNtYWxsIG1vZGVsLCB0aGlzIGlzIGEgdG9uIG9mIHJlcGV0aXRpdmUgY29kZSB0byBjcmVhdGUsIG1haW50YWluLCBhbmQgdGVzdC5cblxuVGhlIF9uZ3J4LWRhdGFfIGxpYnJhcnkgaXMgX29uZV8gd2F5IHRvIHN0YXkgb24gdGhlIF9uZ3J4XyBwYXRoIHdoaWxlIHJhZGljYWxseSByZWR1Y2luZyB0aGUgXCJib2lsZXJwbGF0ZVwiIG5lY2Vzc2FyeSB0byBtYW5hZ2UgZW50aXRpZXMgd2l0aCBfbmdyeF8uXG5cbiMjIEl0J3Mgc3RpbGwgX05nUnhfXG5cbioqVGhpcyBpcyBhIF9saWJyYXJ5IGZvciBuZ3J4Xywgbm90IGFuIG5ncnggYWx0ZXJuYXRpdmUuKipcblxuSXQncyBlYXN5IHRvIGNvbWJpbmUgc3RhbmRhcmQgbmdyeCB3aXRoIG5ncngtZGF0YS5cbkl0J3MgZWFzeSB0byB0YWtlIGNvbnRyb2wgd2hlbiB5b3UgbmVlZCBpdCBhbmQgaGFuZCBjb250cm9sIGJhY2sgdG8gbmdyeC1kYXRhIHdoZW4geW91J3JlIGRvbmUuXG5cbkV2ZXJ5IGVudGl0eSBoYXMgaXRzIG93biBhY3Rpb25zLiBFdmVyeSBvcGVyYXRpb24gdGFrZXMgaXRzIHVuaXF1ZSBqb3VybmV5IHRocm91Z2ggdGhlIHN0b3JlLCByZWR1Y2VycywgZWZmZWN0cywgYW5kIHNlbGVjdG9ycy4gWW91IGp1c3QgbGV0IF9uZ3J4LWRhdGFfIGNyZWF0ZSB0aGVzZSBmb3IgeW91LlxuXG5Zb3UgY2FuIGFkZCBjdXN0b20gc3RvcmUgcHJvcGVydGllcywgYWN0aW9ucywgcmVkdWNlcnMsIHNlbGVjdG9ycywgYW5kIGVmZmVjdHMuIFlvdSBjYW4gb3ZlcnJpZGUgYW55IG5ncngtZGF0YSBiZWhhdmlvciBmb3IgYW4gaW5kaXZpZHVhbCBlbnRpdHkgdHlwZSBvciBmb3IgYWxsIGVudGl0aWVzLlxuWW91IGNhbiBtYWtlIHlvdXIgb3duIGNhbGxzIHRvIHRoZSBzZXJ2ZXIgYW5kIHVwZGF0ZSB0aGUgY2FjaGVkIGVudGl0eSBjb2xsZWN0aW9ucyB3aXRoIHRoZSByZXN1bHRzIHVzaW5nIG5ncngtZGF0YSBfY2FjaGUtb25seV8gYWN0aW9ucy5cblxuWW91IGNhbiBzZWUgdGhlIF9uZ3J4IG1hY2hpbmVyeV8gYXQgd29yayB3aXRoIHRoZSBbX3JlZHV4IGRldmVsb3BlciB0b29sc19dKCNyZWR1eC1kZXYtdG9vbHMpLiBZb3UgY2FuIGxpc3RlbiB0byB0aGUgZmxvdyBvZiBhY3Rpb25zIGRpcmVjdGx5LiBZb3UgY2FuIF9pbnRlcmNlcHQgYW5kIG92ZXJyaWRlIGFueXRoaW5nXyAuLi4gYnV0IHlvdSBvbmx5IGhhdmUgdG8gaW50ZXJ2ZW5lIHdoZXJlIHlvdSB3YW50IHRvIGFkZCBjdXN0b20gbG9naWMuXG5cbiMjIyBMZWFybiBhYm91dCBpdFxuXG5Gb3IgYSBoYW5kcy1vbiBleHBlcmllbmNlLCB0cnkgdGhlIFtRdWlja1N0YXJ0XShodHRwczovL2dpdGh1Yi5jb20vam9obnBhcGEvbmdyeC1kYXRhLWxhYi9ibG9iL21hc3Rlci9SRUFETUUubWQpXG5pbiB0aGUgdHV0b3JpYWwgZ2l0IHJlcG8sICoqW25ncngtZGF0YS1sYWJdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9uZ3J4LWRhdGEtbGFiLykqKixcbndoaWNoIGd1aWRlcyB5b3Ugb24gdGhlIGZldywgc2ltcGxlIHN0ZXBzIG5lY2Vzc2FyeSB0byBtaWdyYXRlIGZyb20gYSB0eXBpY2FsIHNlcnZpY2UtYmFzZWQgQW5ndWxhciBhcHAsIHRvIGFuIGFwcCB0aGF0IG1hbmFnZXMgc3RhdGUgd2l0aCBfbmdyeC1kYXRhXy5cblxuX1RoaXNfICoqbmdyeC1kYXRhIHJlcG9zaXRvcnkqKiBoYXMgdGhlIG1haW4gZG9jdW1lbnRhdGlvbiBhbmQgaXRzIG93biBzYW1wbGUgYXBwLlxuXG5UaGUgc2FtcGxlIGFwcCBpbiB0aGUgYHNyYy9jbGllbnQvYXBwL2AgZm9sZGVyIHByZXNlbnRzIGFuIGVkaXRvciBmb3Igdmlld2luZyBhbmQgY2hhbmdpbmcgX0hlcm9lc18gYW5kIF9WaWxsYWluc18uXG5cblRoZSBmb2xsb3dpbmcgX3JlZHVjZWRfIGV4dHJhY3QgZnJvbSB0aGF0IGRlbW8gaWxsdXN0cmF0ZXMgdGhlIGVzc2VudGlhbCBtZWNoYW5pY3Mgb2YgY29uZmlndXJpbmcgYW5kIHVzaW5nIF9uZ3J4LWRhdGFfLlxuXG5Zb3UgYmVnaW4gd2l0aCBhIGRlc2NyaXB0aW9uIG9mIHRoZSBlbnRpdHkgbW9kZWwgaW4gYSBmZXcgbGluZXMgb2YgbWV0YWRhdGEuXG5cbmBgYGphdmFzY3JpcHRcbi8vIE1ldGFkYXRhIGZvciB0aGUgZW50aXR5IG1vZGVsXG5leHBvcnQgY29uc3QgZW50aXR5TWV0YWRhdGE6IEVudGl0eU1ldGFkYXRhTWFwID0ge1xuICBIZXJvOiB7fSxcbiAgVmlsbGFpbjoge31cbn07XG5cbi8vIEhlbHAgbmdyeC1kYXRhIHBsdXJhbGl6ZSBlbnRpdHkgdHlwZSBuYW1lc1xuLy8gYmVjYXVzZSB0aGUgcGx1cmFsIG9mIFwiSGVyb1wiIGlzIG5vdCBcIkhlcm9zXCJcbmV4cG9ydCBjb25zdCBwbHVyYWxOYW1lcyA9IHtcbiAgSGVybzogJ0hlcm9lcycgLy8gdGhlIHBsdXJhbCBvZiBIZXJvXG59O1xuYGBgXG5cbllvdSByZWdpc3RlciB0aGUgbWV0YWRhdGEgYW5kIHBsdXJhbHMgd2l0aCB0aGUgYG5ncngtZGF0YWAgbW9kdWxlLlxuXG5gYGBqYXZhc2NyaXB0XG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgTmdyeERhdGFNb2R1bGUuZm9yUm9vdCh7XG4gICAgICBlbnRpdHlNZXRhZGF0YTogZW50aXR5TWV0YWRhdGEsXG4gICAgICBwbHVyYWxOYW1lczogcGx1cmFsTmFtZXNcbiAgICB9KVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEVudGl0eVN0b3JlTW9kdWxlIHt9XG5gYGBcblxuWW91ciBjb21wb25lbnQgYWNjZXNzZXMgZWFjaCBlbnRpdHkgZGF0YSB0aHJvdWdoIGFuIGBFbnRpdHlDb2xsZWN0aW9uU2VydmljZWAgd2hpY2ggeW91IGNhbiBhY3F1aXJlIGZyb20gdGhlIF9uZ3J4X2RhdGFfIGBFbnRpdHlTZXJ2aWNlc2AuXG5cbkluIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSxcbnRoZSBgSGVyb2VzQ29tcG9uZW50YCBpbmplY3RzIGBFbnRpdHlTZXJ2aWNlc2AgYW5kIGFza3MgaXQgZm9yIGFuIGBFbnRpdHlDb2xsZWN0aW9uU2VydmljZWBcbnJlZ2lzdGVyZWQgdW5kZXIgdGhlIGBIZXJvYCBlbnRpdHkgbmFtZS5cblxuVGhlIGNvbXBvbmVudCB1c2VzIHRoYXQgc2VydmljZSB0byByZWFkIGFuZCBzYXZlIF9IZXJvXyBlbnRpdHkgZGF0YVxuaW4gYSByZWFjdGl2ZSwgaW1tdXRhYmxlIHN0eWxlLCBfd2l0aG91dCByZWZlcmVuY2UgdG8gYW55IG9mIHRoZSBuZ3J4IGFydGlmYWN0c18uXG5cbmBgYGphdmFzY3JpcHRcbmltcG9ydCB7IEVudGl0eUNvbGxlY3Rpb25TZXJ2aWNlLCBFbnRpdHlTZXJ2aWNlcyB9IGZyb20gJ25ncngtZGF0YSc7XG5pbXBvcnQgeyBIZXJvIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1oZXJvZXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vaGVyb2VzLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgSGVyb2VzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgaGVyb2VzJDogT2JzZXJ2YWJsZTxIZXJvW10+O1xuICBoZXJvZXNTZXJ2aWNlOiBFbnRpdHlDb2xsZWN0aW9uU2VydmljZTxIZXJvPjtcblxuICBjb25zdHJ1Y3RvcihlbnRpdHlTZXJ2aWNlczogRW50aXR5U2VydmljZXMpIHtcbiAgICB0aGlzLmhlcm9lc1NlcnZpY2UgPSBlbnRpdHlTZXJ2aWNlcy5nZXRFbnRpdHlDb2xsZWN0aW9uU2VydmljZSgnSGVybycpO1xuICAgIHRoaXMuaGVyb2VzJCA9IHRoaXMuaGVyb2VzU2VydmljZS5lbnRpdGllcyQ7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmdldEhlcm9lcygpO1xuICB9XG5cbiAgZ2V0SGVyb2VzKCkge1xuICAgIHRoaXMuaGVyb2VzU2VydmljZS5nZXRBbGwoKTtcbiAgfVxuXG4gIGFkZEhlcm8oaGVybzogSGVybykge1xuICAgIHRoaXMuaGVyb2VzU2VydmljZS5hZGQoaGVybyk7XG4gIH1cblxuICBkZWxldGVIZXJvKGhlcm86IEhlcm8pIHtcbiAgICB0aGlzLmhlcm9lc1NlcnZpY2UuZGVsZXRlKGhlcm8uaWQpO1xuICB9XG5cbiAgdXBkYXRlSGVybyhoZXJvOiBIZXJvKSB7XG4gICAgdGhpcy5oZXJvZXNTZXJ2aWNlLnVwZGF0ZShoZXJvKTtcbiAgfVxufVxuYGBgXG5cbkFzIHlvdSBleHBsb3JlIF9uZ3J4LWRhdGFfIGFuZCBpdHMgZG9jdW1lbnRhdGlvbixcbnlvdSdsbCBsZWFybiBtYW55IGV4dGVuc2lvbiBwb2ludHMgYW5kIGN1c3RvbWl6YXRpb25zIHRoYXRcbnRhaWxvciB0aGUgZGV2ZWxvcGVyIGV4cGVyaWVuY2UgdG8geW91ciBhcHBsaWNhdGlvbiBuZWVkcy5cblxuIyMgUXVpY2tTdGFydFxuXG5UcnkgdGhlIFtRdWljayBTdGFydF0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL25ncngtZGF0YS1sYWIvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKSB0byBleHBlcmllbmNlIE5nUnggYW5kIG5ncngtZGF0YSBpbiB5b3VyIGFwcC5cblxuPGEgaWQ9XCJleHBsb3JlXCI+PC9hPlxuXG4jIyBFeHBsb3JlIHRoaXMgcmVwb3NpdG9yeVxuXG5UaGlzIHJlcG9zaXRvcnkgY29udGFpbnMgdGhlIF9uZ3J4LWRhdGFfIHNvdXJjZSBjb2RlIGFuZCBhXG5kZW1vbnN0cmF0aW9uIGFwcGxpY2F0aW9uICh0aGUgXCJkZW1vIGFwcFwiKSB0aGF0IGV4ZXJjaXNlcyBtYW55IG9mIHRoZSBsaWJyYXJ5IGZlYXR1cmVzLlxuXG5UaGUga2V5IGZvbGRlcnMgaW4gdGhpcyByZXBvc2l0b3J5IGFyZTpcblxuKiBkb2NzIC0tPiB0aGUgZG9jcyBmb3IgdGhlIGxpYnJhcnkgYW5kIHRoZSBkZW1vXG4qIGxpYiAtLS0+IHRoZSBuZ3J4LWRhdGEgbGlicmFyeSBzb3VyY2UgY29kZSB0aGF0IHdlIHB1Ymxpc2ggdG8gbnBtXG4qIHNyYy9hcHAgLS0tPiB0aGUgZGVtbyBhcHAgc291cmNlXG4qIHNlcnZlciAtLS0+IGEgbm9kZSBzZXJ2ZXIgZm9yIHJlbW90ZSBkYXRhIGFjY2Vzc1xuXG48YSBpZD1cImRvY3MtbGlzdFwiPjwvYT5cblxuIyMjIExlYXJuIG1vcmUgaW4gdGhlIGRvY3NcblxuKiBbUXVpY2sgU3RhcnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9qb2hucGFwYS9uZ3J4LWRhdGEtbGFiL2Jsb2IvbWFzdGVyL1JFQURNRS5tZClcbiogW0FyY2hpdGVjdHVyZV0oZG9jcy9hcmNoaXRlY3R1cmUubWQpXG4qIFtFbnRpdHkgTWV0YWRhdGFdKGRvY3MvZW50aXR5LW1ldGFkYXRhLm1kKVxuKiBbRW50aXR5IENvbGxlY3Rpb25dKGRvY3MvZW50aXR5LWNvbGxlY3Rpb24ubWQpXG4qIFtFbnRpdHkgQ29sbGVjdGlvbiBTZXJ2aWNlXShkb2NzL2VudGl0eS1jb2xsZWN0aW9uLXNlcnZpY2UubWQpXG4qIFtFbnRpdHkgU2VydmljZXNdKGRvY3MvZW50aXR5LXNlcnZpY2VzLm1kKVxuKiBbRW50aXR5IERhdGFTZXJ2aWNlXShkb2NzL2VudGl0eS1kYXRhc2VydmljZS5tZClcbiogW0VudGl0eSBBY3Rpb25zXShkb2NzL2VudGl0eS1hY3Rpb25zLm1kKVxuKiBbRW50aXR5IFJlZHVjZXJdKGRvY3MvZW50aXR5LXJlZHVjZXIubWQpXG4qIFtFbnRpdHkgQ2hhbmdlIFRyYWNrZXJdKGRvY3MvZW50aXR5LWNoYW5nZS10cmFja2VyLm1kKVxuKiBbU2F2aW5nIG11bHRpcGxlLWVudGl0aWVzIGF0IG9uY2VdKGRvY3Mvc2F2ZS1lbnRpdGllcy5tZClcbiogW0V4dGVuc2lvbiBQb2ludHNdKGRvY3MvZXh0ZW5zaW9uLXBvaW50cy5tZClcbiogW0xpbWl0YXRpb25zXShkb2NzL2xpbWl0YXRpb25zLm1kKVxuKiBbRkFROiBGcmVxdWVudGx5IEFza2VkIFF1ZXN0aW9uc10oZG9jcy9mYXEubWQpXG5cbiMjIyBJbnN0YWxsIGFuZCBydW5cblxuVGhlIGRlbW8gYXBwIGlzIGJhc2VkIG9uIHRoZSBBbmd1bGFyIENMSS4gWW91IG1heSB3YW50IHRvIGluc3RhbGwgdGhlIENMSSBnbG9iYWxseSBpZiB5b3UgaGF2ZSBub3QgYWxyZWFkeSBkb25lIHNvLlxuXG5gYGBiYXNoXG5ucG0gaW5zdGFsbCAtZyBAYW5ndWxhci9jbGlcbmBgYFxuXG5UaGVuIGZvbGxvdyB0aGVzZSBzdGVwczpcblxuMS4gIENsb25lIHRoaXMgcmVwb3NpdG9yeVxuXG4gICAgYGBgYmFzaFxuICAgIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vam9obnBhcGEvYW5ndWxhci1uZ3J4LWRhdGEuZ2l0XG4gICAgY2QgYW5ndWxhci1uZ3J4LWRhdGFcbiAgICBgYGBcblxuMi4gIEluc3RhbGwgdGhlIG5wbSBwYWNrYWdlc1xuXG4gICAgYGBgYmFzaFxuICAgIG5wbSBpbnN0YWxsXG4gICAgYGBgXG5cbjMuICBCdWlsZCB0aGUgYG5ncngtZGF0YWAgbGlicmFyeVxuXG4gICAgYGBgYmFzaFxuICAgIG5wbSBydW4gYnVpbGQtc2V0dXBcbiAgICBgYGBcblxuNC4gIFNlcnZlIHRoZSBDTEktYmFzZWQgZGVtbyBhcHBcblxuICAgIGBgYGJhc2hcbiAgICBuZyBzZXJ2ZSAtb1xuICAgIGBgYFxuXG5SZWZlciB0byB0aGUgW3Ryb3VibGVzaG9vdGluZ10oI2luc3RhbGxhdGlvbikgc2VjdGlvbiBpZiB5b3UgcnVuIGludG8gaW5zdGFsbGF0aW9uIGlzc3Vlcy5cblxuIyMgUnVuIHRoZSBsaWJyYXJ5IHRlc3RzXG5cblRoZSBfbmdyeC1kYXRhXyBsaWJyYXJ5IHNoaXBzIHdpdGggdW5pdCBhbmQgRTJFIChlbmQtdG8tZW5kKSB0ZXN0cyB0byB2YWxpZGF0ZSBmdW5jdGlvbmFsaXR5IGFuZCBndWFyZCBhZ2FpbnN0IHJlZ3Jlc3Npb25zLlxuXG5UaGVzZSB0ZXN0cyBhbHNvIGRlbW9uc3RyYXRlIGZlYXR1cmVzIG9mIHRoZSBsaWJyYXJ5IHRoYXQgYXJlIG5vdCBjb3ZlcmVkIGluIHRoZSBkZW1vIGFwcC4gVGhleSdyZSB3b3J0aCByZWFkaW5nIHRvIGRpc2NvdmVyIG1vcmUgYWR2YW5jZWQgdGVjaG5pcXVlcy5cblxuUnVuIHRoaXMgQ0xJIGNvbW1hbmQgdG8gZXhlY3V0ZSB0aGUgKip1bml0IHRlc3RzKiogZm9yIHRoZSBsaWJyYXJ5LlxuXG5gYGBiYXNoXG5uZyB0ZXN0XG5gYGBcblxuUnVuIHRoZSBzYW1wbGUgYXBwICoqRTJFIChlbmQtdG8tZW5kKSB0ZXN0cyoqLlxuXG5gYGBiYXNoXG5ucG0gcnVuIGUyZVxuYGBgXG5cbldlIHdlbGNvbWUgW1BSc10oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItbmdyeC1kYXRhL3B1bGxzKSB0aGF0IGFkZCB0byB0aGUgdGVzdHMgYXMgd2VsbCBhcyB0aG9zZSB0aGF0IGZpeCBidWdzIGFuZCBkb2N1bWVudGF0aW9uLlxuXG5CZSBzdXJlIHRvIHJ1biB0aGVzZSB0ZXN0cyBiZWZvcmUgc3VibWl0dGluZyBhIFBSIGZvciByZXZpZXcuXG5cbjxhIGlkPVwicmVkdXgtZGV2LXRvb2xzXCI+PC9hPlxuXG4jIyBNb25pdG9yIHRoZSBhcHAgd2l0aCBSZWR1eCBEZXZUb29sc1xuXG5UaGUgZGVtbyBhcHAgaXMgW2NvbmZpZ3VyZWQgZm9yIG1vbml0b3JpbmddKGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3J4L3BsYXRmb3JtL3RyZWUvbWFzdGVyL2RvY3Mvc3RvcmUtZGV2dG9vbHMpIHdpdGggdGhlIFtSZWR1eCBEZXZUb29sc10oaHR0cHM6Ly9naXRodWIuY29tL3phbG1veGlzdXMvcmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uKS5cblxuRm9sbG93IHRoZXNlIGluc3RydWN0aW9ucyB0byBbaW5zdGFsbCB0aGVtIGluIHlvdXIgYnJvd3Nlcl0oaHR0cHM6Ly9naXRodWIuY29tL3phbG1veGlzdXMvcmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uKSBhbmQgbGVhcm4gaG93IHRvIHVzZSB0aGVtLlxuXG4jIyBEZWJ1ZyB0aGUgbGlicmFyeSBpbiBicm93c2VyIGRldiB0b29sc1xuXG5XaGVuIHJ1bm5pbmcgX3Rlc3RzXywgb3BlbiB0aGUgYnJvd3NlciBkZXYgdG9vbHMsIGdvIHRvIHRoZSBcIlNvdXJjZXNcIiB0YWIsIGFuZCBsb29rIGZvciB0aGUgbGlicmFyeSBmaWxlcyBieSBuYW1lLlxuXG4+IEluIGNocm9tZSwgdHlwZSBbQ29tbWFuZC1QXSBhbmQgbGV0dGVycyBvZiB0aGUgZmlsZSBuYW1lLlxuXG5XaGVuIF9ydW5uaW5nIHRoZSBhcHBfIChlLmcuLCB3aXRoIGBuZyBzZXJ2ZWApLCB0aGUgYnJvd3NlciBkZXYgdG9vbHMgZ2l2ZSB5b3UgVFdPIGNob2ljZXMgZm9yIGEgZ2l2ZW4gVHlwZVNjcmlwdCBzb3VyY2UgZmlsZSwgYm90aCBjbGFpbWluZyB0byBiZSBmcm9tIGAudHNgLlxuXG5UaGUgb25lIHlvdSB3YW50IGZvciBsaWJyYXJ5IGFuZCBhcHAgZmlsZXMgZW5kcyBpbiBgL2xpYi9zcmMvZmlsZS1uYW1lLnRzYCBhbmQgYC9zcmMvY2xpZW50L2FwcC9wYXRoL2ZpbGUtbmFtZS50c2AgcmVzcGVjdGl2ZWx5LlxuXG4+IEhvcGUgdG8gc29sdmUgdGhlIF90d28gZmlsZV8gcHJvYmxlbS5cblxuIyMgQnVpbGQgdGhlIGFwcCBhZ2FpbnN0IHRoZSBzb3VyY2VcblxuVGhlIGRlbW8gYXBwIGlzIHNldHVwIHRvIGJ1aWxkIGFuZCBydW4gYWdhaW5zdCB0aGUgbmdQYWNrYWdyIGFydGlmYWN0cyBpbiBgZGlzdC9uZ3J4LWRhdGFgLFxudGhlIHNhbWUgYXJ0aWZhY3RzIGRlbGl2ZXJlZCBpbiB0aGUgbnBtIHBhY2thZ2UuXG5cbj4gUmUtYnVpbGQgdGhlIGxpYnJhcnkgYG5wbSBydW4gYnVpbGQtbGliYCBvciBgbnBtIHJ1biBidWlsZC1zZXR1cGAgb3IgYG5wbSBydW4gYnVpbGQtYWxsYFxuPiB0byB1cGRhdGUgdGhlc2UgYXJ0aWZhY3RzLlxuXG5UaGlzIGFwcHJvYWNoLCB3aGlsZSBzYWZlLCBjYW4gYmUgaW5jb252ZW5pZW50IHdoZW4geW91J3JlIGV2b2x2aW5nIHRoZSBsaWJyYXJ5IGNvZGUgYmVjYXVzZVxuXCJHbyB0byBkZWZpbml0aW9uXCIgdGFrZXMgeW91IHRvIHRoZSBgZC50c2AgZmlsZXMgaW4gYGRpc3QvbmdyeC1kYXRhYCByYXRoZXIgdGhhblxudGhlIHNvdXJjZSBmaWxlcyBpbiBgbGliL3NyY2AuXG5cbklmIHlvdSB3YW50IHRvIFwiR28gdG8gZGVmaW5pdGlvblwiIHRvIHRha2UgeW91IHRvIHRoZSBzb3VyY2UgZmlsZXMsXG5tYWtlIHRoZSBmb2xsb3dpbmcgKipcXCp0ZW1wb3JhcnkgY2hhbmdlcyoqIHRvIHRoZSBUeXBlU2NyaXB0IGNvbmZpZ3VyYXRpb24uXG5cbjEuICAqKl9SZXBsYWNlXyoqIHRoZSBwYXRocyB0YXJnZXQgaW4gdGhlIHJvb3QgYHRzY29uZmlnLmpzb25gIHNvIHRoYXQgdGhlIElERSAoZS5nLiwgVlMgQ29kZSkgbG9va3MgZm9yIGBuZ3J4LWRhdGFgIGluIGBzcmMvbGliYC5cblxuICAgIGBgYGJhc2hcbiAgICAgIFwicGF0aHNcIjoge1xuICAgICAgICBcIm5ncngtZGF0YVwiOiBbXCJsaWIvc3JjXCJdXG4gICAgICB9LFxuICAgIGBgYFxuXG4yLiAgKipfUmVwbGFjZV8qKiBfdGhhdCBzYW1lIHNldHRpbmdfIGluIHRoZSBjb25maWcgYXQgYHNyYy90c2NvbmZpZy5qc29uYC5cblxuMy4gICoqX1JlcGxhY2VfKiogX3RoYXQgc2FtZSBzZXR0aW5nXyBpbiBgc3JjL2NsaWVudC90c2NvbmZpZy5hcHAuanNvbmAuXG4gICAgTm93IGBuZyBidWlsZGAgcmVmZXJlbmNlcyBgc3JjL2xpYmAgd2hlbiBpdCBidWlsZHMgdGhlIGRlbW8gYXBwLlxuXG4+ICoqUmVtZW1iZXIgdG8gX3Jlc3RvcmUgdGhlIGB0c2NvbmZpZ2Agc2V0dGluZ3NfIHdoZW4geW91J3JlIGRvbmUuIERvIG5vdCBjb21taXQgdGhvc2UgY2hhbmdlcyEqKlxuXG4jIyBVc2UgYSByZWFsIGRhdGFiYXNlXG5cblRoZSBkZW1vIGFwcCBxdWVyaWVzIGFuZCBzYXZlcyBtb2NrIGVudGl0eSBkYXRhIHRvIGFuIGluLW1lbW9yeSBkYXRhYmFzZSB3aXRoIHRoZSBoZWxwIG9mIHRoZVxuW0FuZ3VsYXIgSW4tbWVtb3J5IFdlYiBBUEldKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2luLW1lbW9yeS13ZWItYXBpKS5cblxuVGhlIFwiUmVtb3RlIERhdGFcIiB0b2dnbGUgc3dpdGNoIGluIHRoZSBoZWFkZXIgc3dpdGNoZXNcbnRvIHRoZSByZW1vdGUgZGF0YWJhc2UuXG5cblRoZSBhcHAgZmFpbHMgd2hlbiB5b3Ugc3dpdGNoIHRvIHRoZSByZW1vdGUgZGF0YWJhc2UuXG5cbj4gTm90aWNlIGhvdyB0aGUgYXBwIGRldGVjdHMgZXJyb3JzIGFuZCBwb3BzIHVwIGEgdG9hc3QgbWVzc2FnZSB3aXRoIHRoZSBmYWlsZWQgX25ncnhfIGBBY3Rpb24udHlwZWAuXG4+XG4+IFRoZSBlcnJvciBkZXRhaWxzIGFyZSBpbiB0aGUgYnJvd3NlcidzIGNvbnNvbGUgbG9nLlxuXG5Zb3UgbXVzdCBmaXJzdCBzZXQgdXAgYSBkYXRhYmFzZSBhbmQgbGF1bmNoIGEgd2ViIGFwaSBzZXJ2ZXIgdGhhdCB0YWxrcyB0byBpdC5cblxuVGhlIGBzcmMvc2VydmVyYCBmb2xkZXIgaGFzIGNvZGUgZm9yIGEgbG9jYWwgbm9kZSB3ZWIgYXBpIHNlcnZlciwgY29uZmlndXJlZCBmb3IgdGhlIGRlbW8gYXBwLlxuXG4+IFRPRE86XG4+IEV4cGxhaW4gaG93IHRvIGJ1aWxkIGFuZCBydW4gdGhlIHNlcnZlci5cbj4gRXhwbGFpbiBob3cgdG8gYnVpbGQgYW5kIHNlcnZlIHRoZSBtb25nbyBkYlxuXG4jIyBCYWQvc3VycGx1cyBfbnBtIHNjcmlwdHNfXG5cbldlIGtub3cgdGhlcmUgYXJlIGEgZ3JlYXQgbWFueSBucG0gc2NyaXB0IGNvbW1hbmRzIGluIGBwYWNrYWdlLmpzb25gLCBtYW55IChtb3N0Pykgb2Ygd2hpY2ggZG9uJ3Qgd29yay5cblxuVGhleSdyZSBvbiBvdXIgbGlzdCBmb3IgZnV0dXJlIGNsZWFudXAuXG5QbGVhc2UgZG9uJ3QgY3JlYXRlIGlzc3VlcyBmb3IgdGhlbVxuKGFsdGhvdWdoIFBScyB0aGF0IGZpeCB0aGVtIGFyZSB3ZWxjb21lKS5cblxuPCEtLVxuXG4+VE9ETzogRml4IHRoZSBicm9rZW4gc2VydmVyLW9yaWVudGVkIGNvbW1hbmRzIGluIHBhY2thZ2UuanNvblxuXG4jIyMgQ3JlYXRlIGEgTW9uZ29EYlxuXG4xLiBDcmVhdGUgYSBbQ29zbW9zREIgaW5zdGFuY2VdKGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2Nvc21vcy1kYi90dXRvcmlhbC1kZXZlbG9wLW1vbmdvZGItbm9kZWpzLXBhcnQ0KVxuXG4jIyMgQnVpbGQgYW5kIGxhdW5jaCB0aGUgbm9kZSBzZXJ2ZXJcblxuMS4gQnVpbGQgdGhlIEFuZ3VsYXIgYXBwIGFuZCBsYXVuY2ggdGhlIG5vZGUgc2VydmVyXG5cbmBgYGJhc2hcbj8/P1xuYGBgXG5cbjEuIE9wZW4gdGhlIGJyb3dzZXIgdG8gPGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMT5cblxuIyMjIERvY2tlclxuXG4qIEluc3RhbGwgYW5kIHJ1biBbRG9ja2VyXShodHRwczovL3d3dy5kb2NrZXIuY29tL2NvbW11bml0eS1lZGl0aW9uKVxuXG4jIyMjIEVudmlyb25tZW50IGZpbGVcblxuQ3JlYXRlIGFuIGVtcHR5IGZpbGUgbmFtZWQgYC5lbnZgIGluIHRoZSByb290IG9mIHRoZSBhcHAuIFdlJ2xsIGZpbGwgdGhpcyBpbiBsYXRlci5cblxuIyMjIyBEb2NrZXIgQ29tcG9zZSB3aXRoIERlYnVnZ2luZ1xuXG5DcmVhdGUgdGhlIERvY2tlciBpbWFnZSBhbmQgcnVuIGl0IGxvY2FsbHkuIFRoaXMgY29tbWFuZHMgdXNlcyBgZG9ja2VyLWNvbXBvc2VgIHRvIGJ1aWxkIHRoZSBpbWFnZVxuYW5kIHJ1biB0aGUgY29udGFpbmVyLlxuXG5UaGlzIG9wZW5zIHBvcnQgYDkyMjlgIGZvciBkZWJ1Z2dpbmcuXG5cbmBgYGJhc2hcbm5wbSBydW4gZG9ja2VyLWRlYnVnXG5vcGVuIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMVxuYGBgXG5cbk9wZW4gVlMgQ29kZSwgbGF1bmNoIHRoZSBgRG9ja2VyOiBBdHRhY2ggdG8gTm9kZWAgZGVidWdnaW5nIHByb2ZpbGVcblxuIyMjIE9wdGlvbmFsIERhdGFiYXNlXG5cbmBgYGJhc2hcbk5PREVfRU5WPWRldmVsb3BtZW50XG5cblBPUlQ9MzAwMVxuUFVCTElDV0VCPS4vcHVibGljd2ViXG5cbkNPU01PU0RCX0FDQ09VTlQ9eW91cl9jb3Ntb3NfYWNjb3VudFxuQ09TTU9TREJfREI9eW91cl9jb3Ntb3NfZGJcbkNPU01PU0RCX0tFWT15b3VyX2Nvc21vc19rZXlcbkNPU01PU0RCX1BPUlQ9MTAyNTVcbmBgYFxuXG5PdXQgb2YgdGhlIGJveCB5b3UgY2FuIHJ1biB0aGUgZGVtbyB3aXRoIGFuIGluIG1lbW9yeSBkYXRhIHNlcnZpY2UgaW5zdGVhZCBvZiBhIGxpdmUgZGF0YWJhc2UuIElmIHlvdSB3aXNoIHRvIHVzZSBhIGRhdGFiYXNlLCB5b3UgY2FuIHNldCB1cCBhIGxvY2FsIG1vbmdvIHNlcnZlciBvciBhIHJlbW90ZSBDb3Ntb3NEQi9Nb25nb0RCIHNlcnZlciBpbiB0aGUgY2xvdWQuXG5cbjEuIENvbmZpZ3VyZSBDb3Ntb3MgREIgc2VydmVyIHNldHRpbmdzXG5cbiAgIENvcHkgdGhlIGNvbnRlbnRzIGZyb20gYC5lbnYuZXhhbXBsZWAgaW50byBgLmVudmAuIFJlcGxhY2UgdGhlIHZhbHVlcyB3aXRoIHlvdXIgc3BlY2lmaWMgY29uZmlndXJhdGlvbi4gRG9uJ3Qgd29ycnksIHRoaXMgZmlsZSBpcyBpbiB0aGUgYC5naXRpZ25vcmVgIHNvIGl0IHdvbid0IGdldCBwdXNoZWQgdG8gZ2l0aHViLlxuXG4gICBgYGBqYXZhc2NyaXB0XG4gICBOT0RFX0VOVj1kZXZlbG9wbWVudFxuXG4gICBQT1JUPTMwMDFcbiAgIFBVQkxJQ1dFQj0uL3B1YmxpY3dlYlxuXG4gICBDT1NNT1NEQl9BQ0NPVU5UPXlvdXJfY29zbW9zX2FjY291bnRcbiAgIENPU01PU0RCX0RCPXlvdXJfY29zbW9zX2RiXG4gICBDT1NNT1NEQl9LRVk9eW91cl9jb3Ntb3Nfa2V5XG4gICBDT1NNT1NEQl9QT1JUPTEwMjU1XG4gICBgYGBcbi0tPlxuXG4jIyBUcm91Ymxlc2hvb3RpbmdcblxuIyMjIEluc3RhbGxhdGlvblxuXG4xLiAgSWYgeW91IGFyZSBvbiBXaW5kb3dzIGFuZCBydW4gaW50byB0aGlzIGVycm9yIGR1cmluZyBgbnBtIGluc3RhbGxgOiBfXCJzbnlrIGNvdWxkbid0IHBhdGNoIHRoZSBzcGVjaWZpZWQgdnVsbmVyYWJpbGl0aWVzIGJlY2F1c2UgZ251J3MgcGF0Y2ggaXMgbm90IGF2YWlsYWJsZVwiXywgcmVmZXIgdG8gdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9saW5ub3ZhdGUvbWVhbi9pc3N1ZXMvMTcxMSkgZm9yIHRoZSBmaXguIEluIHNob3J0LCB5b3VyIGBHaXRgIGluc3RhbGxhdGlvbiBpcyBub3QgY29ycmVjdCBvciBgQzpcXFByb2dyYW0gRmlsZXNcXEdpdFxcdXNyXFxiaW5gICh0eXBpY2FsbHkpIGlzIG5vdCBhZGRlZCB0byB5b3VyIHN5c3RlbSBlbnZpcm9ubWVudCB2YXJpYWJsZSBgJVBBVEglYC5cblxuIyMgUHJvYmxlbXMgb3IgU3VnZ2VzdGlvbnNcblxuW09wZW4gYW4gaXNzdWUgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL2pvaG5wYXBhL2FuZ3VsYXItbmdyeC1kYXRhL2lzc3VlcylcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjJkYTY0NGExLTZlYmItNGNjNC04OTRjLTIyNGRiNWU1NTY0ZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qVXlPRGMyTnpRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibmdyeC1kZW1vIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjk1Y2Y2NTEwOTYwNDM5MGUzMDg5MzcwZDJhZDgwYzUxOTFmNDU4ZGEiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIE5ncnhEZW1vXG5cbkRlbW8gc2hvd2luZyBOZ1J4IHdpdGggQW5ndWxhclxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiOWJmNjZhMDctMGNjYi00MGY1LWFhNGQtMDU4ODdiOGU1NDIxIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNOall6T1RNPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWludHJvIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjMyN2UyM2QzN2E2OTliNzM4MmM3NzA5Y2RhNWE4ZGY3NGExNzdjYWYiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHZ1ZS1pbnRyb1xuXG4jIyBQcm9qZWN0IHNldHVwXG5gYGBcbm5wbSBpbnN0YWxsXG5gYGBcblxuIyMjIENvbXBpbGVzIGFuZCBob3QtcmVsb2FkcyBmb3IgZGV2ZWxvcG1lbnRcbmBgYFxubnBtIHJ1biBzZXJ2ZVxuYGBgXG5cbiMjIyBDb21waWxlcyBhbmQgbWluaWZpZXMgZm9yIHByb2R1Y3Rpb25cbmBgYFxubnBtIHJ1biBidWlsZFxuYGBgXG5cbiMjIyBMaW50cyBhbmQgZml4ZXMgZmlsZXNcbmBgYFxubnBtIHJ1biBsaW50XG5gYGBcbiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJKb2huIFBhcGEiLAogICAgIlVzZXJOYW1lIjogImpvaG5wYXBhIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJqb3BhcGEiCiAgfSwKICAiJEF6dXJlV2ViSm9ic1BhcmVudElkIjogIjNmOTk4Y2M5LTg0ZWUtNGJjYS04Yjg4LTMxZDlkYWY1MDBhZSIKfQ==ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE1qWTNPRFl6TVRRPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWd1aWRlIiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjVhNGM3OWQyNjA0NmVhZmM3ZjgwZDExMjVjNjQ3YzAyMTIxOTM4YzAiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIjIHZ1ZS1ndWlkZVxuXG5BIHNlcmllcyBvZiBpbnRyb2R1Y3Rvcnkgc2FtcGxlcyB1c2luZyBWdWUuanMsIGFzIHNlZW4gaW4gdGhlaXIgZG9jcy4gPGh0dHBzOi8vdnVlanMub3JnLz4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICIyZTc5NDRjZC00Y2Y5LTQzMjQtODliYS1hMDkxOGMxYzk2NjciCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE16RXpNakF6TURZPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAiYW5ndWxhci1hcmNoaXRlY3R1cmUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiMTYzYzNlNDY0NTdlMTQxZGRhNGUwZTVmZmNkNTBiZGYxODY5ZGI4YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgQW5ndWxhciBBcmNoaXRlY3R1cmVcblxuVGhpcyBjb2RlIHNhbXBsZSBkZW1vbnN0cmF0ZXMgZGlmZmVyZW50IEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGNvbmNlcHRzLiBJdCdzIHVzZWQgaW4gdGhlIEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGFuZCBCZXN0IFByYWN0aWNlcyB2aWRlbyBjb3Vyc2Ugb24gUGx1cmFsc2lnaHQgKGh0dHBzOi8vd3d3LnBsdXJhbHNpZ2h0LmNvbS9jb3Vyc2VzL2FuZ3VsYXItYXJjaGl0ZWN0dXJlLWJlc3QtcHJhY3RpY2VzKSBhbmQgaW4gdGhlIEFuZ3VsYXIgQXJjaGl0ZWN0dXJlIGFuZCBCZXN0IFByYWN0aWNlcyBpbnN0cnVjdG9yLWxlZCB0cmFpbmluZyBjb3Vyc2UgKGh0dHBzOi8vY29kZXdpdGhkYW4uY29tL3Byb2R1Y3RzL2FuZ3VsYXItYXJjaGl0ZWN0dXJlKS4gXG5cbiMjIFJ1bm5pbmcgdGhlIEFwcGxpY2F0aW9uXG5cbjEuIEluc3RhbGwgdGhlIEFuZ3VsYXIgQ0xJOiBgbnBtIGluc3RhbGwgLWcgQGFuZ3VsYXIvY2xpYFxuXG4xLiBPcGVuIHRoZSBgZGVtb3NgIGZvbGRlciBhbmQgcnVuIGBucG0gaW5zdGFsbGBcblxuMS4gUnVuIGBuZyBzZXJ2ZSAtb2AgaW4gdGhlIGBkZW1vc2AgZm9sZGVyIHRvIHN0YXJ0IHRoZSBzZXJ2ZXIgYW5kIGxhdW5jaCB0aGUgYXBwXG5cbiMjIEFkZGl0aW9uYWwgRGVtb3NcblxuMS4gQ2xvbmluZyAtIFJ1biB0aGUgcHJvamVjdCBpbiB0aGUgYGNsb25pbmdgIGZvbGRlclxuMS4gSW5wdXQvT3V0cHV0IFByb3BlcnRpZXMgLSBSdW4gdGhlIHByb2plY3QgaW4gdGhlIGBpbnB1dC1vdXRwdXQtZGVtb2AgcHJvamVjdFxuMS4gU2hhcmVkIExpYnJhcnkgLSBSdW4gdGhlIHByb2plY3QgaW4gdGhlIGBzaGFyZWQtbGlicmFyeS1leGFtcGxlYCBwcm9qZWN0XG4xLiBTdGF0ZSBNYW5hZ2VtZW50IC0gT3BlbiB0aGUgYHN0YXRlLW1hbmFnZW1lbnRgIGZvbGRlciBhbmQgcnVuIHRoZSBOZ1J4LCBuZ3J4LWRhdGEsIG9yIE9ic2VydmFibGUgU3RvcmUgcHJvamVjdHNcblxuIyMgVGhlIEFuZ3VsYXIgSnVtcFN0YXJ0IEFwcGxpY2F0aW9uXG5cbllvdSBjYW4gZmluZCBhbiBleGFtcGxlIG9mIGFuIGFwcGxpY2F0aW9uIHRoYXQgZm9sbG93cyB0aGUgcnVsZXMgaW4gdGhpcyBjb3Vyc2UgYXQgaHR0cHM6Ly9naXRodWIuY29tL0RhbldhaGxpbi9Bbmd1bGFyLUp1bXBTdGFydFxuIgogIH0sCiAgIkl0ZW0yIjogewogICAgIkZ1bGxOYW1lIjogIkpvaG4gUGFwYSIsCiAgICAiVXNlck5hbWUiOiAiam9obnBhcGEiLAogICAgIk1pY3Jvc29mdEFsaWFzIjogImpvcGFwYSIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiYjcyMjA1OWUtMjFhNi00OTRiLThmZDQtMzk1ZDU1ZGQwOTBhIgp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5ETTNPRGswTkRjPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS1oZWxsbyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICI2NDRhZjQwNzkxOGQ0YjI1YzljN2RjMzg3NGFiY2E4M2JmMTdiODMxIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBOb2RlIEhlbGxvIFdvcmxkXG5cblNpbXBsZSBub2RlLmpzIGFwcCB0aGF0IHNlcnZlcnMgXCJoZWxsbyB3b3JsZFwiXG5cbkdyZWF0IGZvciB0ZXN0aW5nIHNpbXBsZSBkZXBsb3ltZW50cyB0byB0aGUgY2xvdWRcblxuIyMgUnVuIEl0XG5cbmBucG0gc3RhcnRgXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI2OGUwMzc0YS03ZjA3LTQ3NzEtYmUwOC0zNTAxM2Y0YTVlMmIiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5EUXpNalV3TlRJPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAibm9kZS10cyIsCiAgICAiZGVmYXVsdEJyYW5jaE9pZCI6ICIxYTgxZDVmMTEyYWQ3MTMwMzgxMTA3YjhhOGMzYTk2Yzg2OGE1YTIyIiwKICAgICJkZWZhdWx0QnJhbmNoUHJlZml4IjogInJlZnMvaGVhZHMvIiwKICAgICJkZWZhdWx0QnJhbmNoTmFtZSI6ICJtYXN0ZXIiLAogICAgInJlYWRtZVRleHQiOiAiIyBub2RlLXRzXG5cblNpbXBsZSBOb2RlIGFuZCB0eXBlU2NyaXB0IGFwcFxuXG4jIyBRdWljayBTdGFydFxuXG4xLiBgbnBtIGluc3RhbGxgXG4yLiBgbnBtIHJ1biBzZXJ2ZS1kZWJ1Z2BcblxuIyMgSW5jbHVkZWRcblxuLSBiYXNpYyBgdHNjb25maWcuanNvbmBcbi0gbnBtIHNjcmlwdHMgdG8gaGVscCBidWlsZCwgcnVuLCB3YXRjaCwgYW5kIGRlYnVnXG4tIGNvbmN1cnJlbnRseSwgdHMtbm9kZSwgdHMtbGludCwgdHlwZXNjcmlwdCBmb3IgaGVscGluZyB3aXRoIGJ1aWxkc1xuLSB0eXBlcyBmb3Igbm9kZSB3aXRoIEB0eXBlcy9ub2RlXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI4MDAyM2Q5Ny0yMzc5LTQ3ZWEtODhiZS0zYzU5ZGNkZTU3ZmUiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reE5qQTVOVFV3TlRFPSIsCiAgICAib3duZXIiOiAiam9obnBhcGEiLAogICAgIm5hbWUiOiAidnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiOWY0NjE1ZDNmNTlmNTI0ZjE5ZmY0OTU4ZTcxMjIwZGM2YWFmNGI3YyIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiMgdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHRcblxuQSBWdWUgQ0xJIHByZXNldCBjb25maWd1cmF0aW9uLlxuXG4jIyBSdW4gaXRcblxuWW91IHJ1biBpdCBieSBleGVjdXRpbmcgXG5cbmBgYGJhc2hcbnZ1ZSBjcmVhdGUgLS1wcmVzZXQgam9obnBhcGEvdnVlLWNsaS1wcmVzZXQtYWxsLWphdmFzY3JpcHQgaGVsbG8tdnVlXG5gYGBcblxuXG4iCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiSm9obiBQYXBhIiwKICAgICJVc2VyTmFtZSI6ICJqb2hucGFwYSIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAiam9wYXBhIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICI3YjUxNzU0NS01ZTkwLTRjYzgtYmYxMC0xNjFjNDc0ODNmM2QiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UUXpORGt3TUE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXp6IiwKICAgICJkZWZhdWx0QnJhbmNoT2lkIjogIjc0OGMzNjE1YWYzMDUwOTMyMDhkNGJiOTlmNTNiN2MwM2NkNDliMmQiLAogICAgImRlZmF1bHRCcmFuY2hQcmVmaXgiOiAicmVmcy9oZWFkcy8iLAogICAgImRlZmF1bHRCcmFuY2hOYW1lIjogIm1hc3RlciIsCiAgICAicmVhZG1lVGV4dCI6ICIiCiAgfSwKICAiSXRlbTIiOiB7CiAgICAiRnVsbE5hbWUiOiAiU2ltb25hIENvdGluIiwKICAgICJVc2VyTmFtZSI6ICJzaW1vbmFjbyIsCiAgICAiTWljcm9zb2Z0QWxpYXMiOiAic2ljb3RpbiIKICB9LAogICIkQXp1cmVXZWJKb2JzUGFyZW50SWQiOiAiZjFmZjNjNDYtYTFjNC00YTZhLWIzMzYtYTNmYzFkMTMxMmY5Igp9ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25rNU5UWTJNRGt6TVE9PSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAicmVhY3QtYXoiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiM2FhY2ZhZWM3ZTUyNTllYjk0ZjI2ZjMyYTg4ODlhNmJjOWNhZGFlMCIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=ewogICJJdGVtMSI6IHsKICAgICJpZCI6ICJNREV3T2xKbGNHOXphWFJ2Y25reU5qWXpNemd3T0RJPSIsCiAgICAib3duZXIiOiAic2ltb25hY28iLAogICAgIm5hbWUiOiAidGVzdC1jaXJjbGUiLAogICAgImRlZmF1bHRCcmFuY2hPaWQiOiAiNzgxNmEyMmIzMDM0NzY1ZjEwZWY1NjdhNGE3ZWEyMjE5MjgxMThmOSIsCiAgICAiZGVmYXVsdEJyYW5jaFByZWZpeCI6ICJyZWZzL2hlYWRzLyIsCiAgICAiZGVmYXVsdEJyYW5jaE5hbWUiOiAibWFzdGVyIiwKICAgICJyZWFkbWVUZXh0IjogIiIKICB9LAogICJJdGVtMiI6IHsKICAgICJGdWxsTmFtZSI6ICJTaW1vbmEgQ290aW4iLAogICAgIlVzZXJOYW1lIjogInNpbW9uYWNvIiwKICAgICJNaWNyb3NvZnRBbGlhcyI6ICJzaWNvdGluIgogIH0sCiAgIiRBenVyZVdlYkpvYnNQYXJlbnRJZCI6ICJmMWZmM2M0Ni1hMWM0LTRhNmEtYjMzNi1hM2ZjMWQxMzEyZjkiCn0=